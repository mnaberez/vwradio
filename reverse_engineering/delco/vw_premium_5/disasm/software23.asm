;Volkswagen Premium V radio (Delphi/Delco 09351369)
;Reverse engineered source code
;
;This source code is for the microcontroller in the radio.  It is a
;QFP-80 package and has the Delco markings "N60 FLASH" and "09370082"
;on the outside.  It was decapsulated and the die markings identified
;it as an NEC uPD78F0831Y.  There is no documentation for this chip
;but it is very similar to the uPD78F0833Y, which is documented.
;
;KWP1281 was used to dump the internal flash ROM contents from a radio
;that had a sticker "SOFTWARE 23" on its case.  The uPD78F0831Y was
;then erased and flashed with the dump.  The radio was fully functional.
;
;No rights are claimed on the executable object code as found
;in the internal flash ROM of the "N60 FLASH" chip.  The SHA-1
;hash of that binary is: 3fe339736134f0cf08fef60bc424b2622adda075.
;

    .area CODE1 (ABS)
    .org 0x0000

;Expansion RAM: 0xF000 - 0xF7FF (2K)

mem_f000 = 0xf000           ;KWP1281 memory address for read ram or read eeprom (2 bytes)
mem_f002 = 0xf002           ;KWP1281 eeprom address for write eeprom (2 bytes)
mem_f004 = 0xf004
fis_tx_ptr = 0xf006         ;FIS pointer to 3LB packet buffer used during transmit (2 bytes)
mem_f008 = 0xf008
mem_f00a = 0xf00a
mfsw_rx_buf = 0xf00c        ;MFSW receive buffer (2 bytes)
mfsw_timer = 0xf00e         ;MFSW timer word (2 bytes)
mem_f010 = 0xf010
mem_f012 = 0xf012
mem_f014 = 0xf014
mem_f016 = 0xf016
cdc_tx_timer = 0xf018       ;CDC TX timer word (2 bytes)
i2c_eeprom_addr = 0xf01a    ;EEPROM address for I2C read or write EEPROM (2 bytes)
mem_f01c = 0xf01c
mem_f01e = 0xf01e
mem_f020 = 0xf020
mem_f021 = 0xf021
mem_f022 = 0xf022
mem_f024 = 0xf024
mem_f026 = 0xf026
mem_f028 = 0xf028
mem_f02a = 0xf02a
mem_f02c = 0xf02c
mem_f02e = 0xf02e
cdc_isr_rx_idx = 0xf032     ;CDC CSI31 ISR receive buffer index
cdc_isr_rx_buf = 0xf033     ;CDC CSI31 ISR receive buffer (8 bytes)
kwp_tmp_buf = 0xf03b        ;KWP1281 temporary buffer (16 bytes)
kwp_rw_count = 0xf04b       ;KWP1281 number of bytes left to send for read ram or r/w eeprom
kwp_rw_total = 0xf04c       ;KWP1281 total bytes originally requested for read ram or r/w eeprom
kwp_test_idx = 0xf04e       ;KWP1281 Output Test index
kwp_group_num = 0xf04f      ;KWP1281 Group number
kwp_meas_count = 0xf050     ;KWP1281 number of measurements in group left to read
kwp_meas_mfsw_key = 0xf051  ;KWP1281 MFSW key code (value of mfsw_key) during group reading
fis_tx_buf = 0xf052         ;FIS display 3LB packet buffer (20 bytes)
fis_tx_count = 0xf066       ;FIS number of bytes left to send
fis_f067 = 0xf067           ;FIS unknown (timer countdown?)
kwp_tx_idx = 0xf068         ;KWP1281 tx buffer index
kwp_rx_idx = 0xf069         ;KWP1281 rx buffer index
kwp_last_byte = 0xf06a      ;KWP1281 last byte sent or received; used for error detection
kwp_tx_len = 0xf06b         ;KWP1281 tx block length
kwp_rx_len = 0xf06c         ;KWP1281 rx block length
kwp_addr_idx = 0xf06d       ;KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
mem_f06e = 0xf06e ;TODO countdown
mem_f06f = 0xf06f ;TODO another countdown
kwp_idle_ms = 0xf070        ;KWP1281 counts down milliseconds until connection times out
mem_f071 = 0xf071 ;TODO unknown timer, counts up
mem_f072 = 0xf072 ;TODO unknown timer, counts up
kwp_tx_address = 0xf073     ;KWP1281 address to send (used only in radio-as-tester mode)
kwp_tx_addr_rot = 0xf074    ;KWP1281 address to send being rotated out (used only in radio-as-tester mode)
mem_f075 = 0xf075 ;TODO another address rotation?
kwp_tx_bit_count = 0xf076   ;KWP1281 bit count for 5 baud address
kwp_bit_ms = 0xf077         ;KWP1281 counts down ms in current bit of 5 baud address
kwp_conn_attempts = 0xf078  ;KWP1281 connection attempt count (used only in radio-as-tester mode)
kwp_err_retries = 0xf079    ;KWP1281 error retries count
kwp_tx_buf = 0xf07a         ;KWP1281 transmit buffer (16 bytes)
kwp_rx_buf = 0xf08a         ;KWP1281 receive buffer (256 bytes)
mem_f18a = 0xf18a
mem_f18b = 0xf18b
mem_f18c = 0xf18c
mem_f18d_t30_avg = 0xf18d   ;Terminal 30 (V = value * 0.1) averaged(?)
mem_f18e = 0xf18e           ;Cookie used to determine whether to cold or warm start
mem_f18f = 0xf18f
mem_f190 = 0xf190
mem_f191 = 0xf191
mem_f192 = 0xf192
mem_f193 = 0xf193
mem_f194 = 0xf194
mfsw_key = 0xf197           ;MFSW key code received (0xFF = no key)
mem_f198 = 0xf198
mem_f199 = 0xf199
mem_f19a = 0xf19a
upd_disp = 0xf19a           ;uPD16432B display buffer to send to uPD16432B (11 bytes)
snd_msg_idx = 0xf1a5        ;Index of sound control message to show while msg_countdown is nonzero
tmp_msg_idx = 0xf1a6        ;Index of temporary message to show while msg_countdown is nonzero
mem_f1a7 = 0xf1a7
mem_f1a8 = 0xf1a8
mem_f1a9 = 0xf1a9
mem_f1aa = 0xf1aa
mem_f1ab = 0xf1ab
mem_f1ac = 0xf1ac
mem_f1ad = 0xf1ad
mem_f1af = 0xf1af
mem_f1b1 = 0xf1b1
mem_f1b2 = 0xf1b2

mem_f1b3 = 0xf1b3           ;EEPROM 0010

mem_f1b6 = 0xf1b6           ;EEPROM 0013

mem_f1b9 = 0xf1b9           ;EEPROM 0016

mem_f1be = 0xf1be           ;EEPROM 001B

mem_f1c0 = 0xf1c0           ;EEPROM 001D

mem_f1c2 = 0xf1c2           ;EEPROM 001F

mem_f1c5 = 0xf1c5           ;EEPROM 0022
mem_f1c6 = 0xf1c6           ;EEPROM 0023
mem_f1c7 = 0xf1c7           ;EEPROM 0024
mem_f1c8 = 0xf1c8           ;EEPROM 0025
mem_f1c9 = 0xf1c9           ;EEPROM 0026
mem_f1ca = 0xf1ca           ;EEPROM 0027
mem_f1cb = 0xf1cb           ;EEPROM 0028
mem_f1cc = 0xf1cc           ;EEPROM 0029
mem_f1cd = 0xf1cd           ;EEPROM 002A
mem_f1ce = 0xf1ce           ;EEPROM 002B
mem_f1cf = 0xf1cf           ;EEPROM 002C
mem_f1d0 = 0xf1d0           ;EEPROM 002D
mem_f1d1 = 0xf1d1           ;EEPROM 002E
mem_f1d2 = 0xf1d2           ;EEPROM 002F
mem_f1d3 = 0xf1d3           ;EEPROM 0030
mem_f1d4 = 0xf1d4           ;EEPROM 0031
mem_f1d5 = 0xf1d5           ;EEPROM 0032
mem_f1d6 = 0xf1d6           ;EEPROM 0033
mem_f1d7 = 0xf1d7           ;EEPROM 0034
mem_f1d8 = 0xf1d8           ;EEPROM 0035
mem_f1d9 = 0xf1d9           ;EEPROM 0036
mem_f1da = 0xf1da           ;EEPROM 0037
mem_f1db = 0xf1db           ;EEPROM 0038
mem_f1dc = 0xf1dc           ;EEPROM 0039
mem_f1dd = 0xf1dd           ;EEPROM 003A
mem_f1de = 0xf1de           ;EEPROM 003B
mem_f1df = 0xf1df           ;EEPROM 003C
mem_f1e0 = 0xf1e0           ;EEPROM 003D
mem_f1e1 = 0xf1e1           ;EEPROM 003F
mem_f1e2 = 0xf1e2           ;EEPROM 003F
mem_f1e3 = 0xf1e3           ;EEPROM 0040
mem_f1e4 = 0xf1e4           ;EEPROM 0041
mem_f1e5 = 0xf1e5           ;EEPROM 0042
mem_f1e6 = 0xf1e6           ;EEPROM 0043

mem_f1e7_region = 0xf1e7    ;EEPROM 0046  Region (see description in mem_b3d9)
mem_f1e8 = 0xf1e8           ;EEPROM 0047
mem_f1e9 = 0xf1e9           ;EEPROM 0048  Bit 7: on="DELCO mode", off=normal
mem_f1ea = 0xf1ea           ;EEPROM 0049  KWP1281 id block 3/4 "0001" byte for "DELCO mode" (see kwp_id_0001)
mem_f1eb = 0xf1eb           ;EEPROM 004A  KWP1281 id block 3/4 "0001", low byte
mem_f1ec = 0xf1ec           ;EEPROM 004B  KWP1281 id block 3/4 "0001", high byte
mem_f1ed = 0xf1ed           ;EEPROM 004C  KWP1281 id block 1/4 part number like "1J0035180B  " (12 bytes)
                            ;...
mem_f1f9 = 0xf1f9           ;EEPROM 0058  KWP1281 Soft Coding in binary, high byte
mem_f1fa = 0xf1fa           ;EEPROM 0059  KWP1281 Soft Coding in binary, low byte
mem_f1fb = 0xf1fb           ;EEPROM 005A  KWP1281 Workshop Code, high byte
mem_f1fc = 0xf1fc           ;EEPROM 005B  KWP1281 Workshop Code, low byte
mem_f1fd = 0xf1fd           ;EEPROM 005C
mem_f1fe = 0xf1fe           ;EEPROM 005D
mem_f1ff = 0xf1ff           ;EEPROM 005E
mem_f200 = 0xf200           ;EEPROM 005F
mem_f201 = 0xf201           ;EEPROM 0060

mem_f202 = 0xf202
mem_f203 = 0xf203
mem_f204 = 0xf204
mem_f205 = 0xf205

mem_f206 = 0xf206           ;EEPROM 0063
mem_f207 = 0xf207           ;EEPROM 0064
mem_f208 = 0xf208           ;EEPROM 0065  Cluster ID, high byte
mem_f209 = 0xf209           ;EEPROM 0066  Cluster ID, low byte
mem_f20a = 0xf20a           ;EEPROM 0067  KWP1281 login attempt counter
mem_f20b = 0xf20b           ;EEPROM 0068  SAFE code attempt counter
mem_f20c = 0xf20c           ;EEPROM 0069
;Faults buffer #2 (12 bytes)
;See also clear_faults
;Each byte contains a fault elaboration code where 0x88 = "no fault"
mem_f20d = 0xf20d           ;EEPROM 006A  Fault 00668 - Supply Voltage Terminal 30                       mem_f20d  mem_fc1a
;mem_f20e                   ;EEPROM 006B  Fault 00849 - S-Contact at Ignition/Starter Switch             mem_f20e  mem_fc1b
;mem_f20f                   ;EEPROM 006C  Fault 00850 - Control Output Active; Radio Amplifier           mem_f20f  mem_fc1c
;mem_f210                   ;EEPROM 006D  Fault 00851 - Loudspeaker(s)                                   mem_f210  mem_fc1d
mem_f211 = 0xf211           ;EEPROM 006E  Fault 00852 - Loudspeaker(s); Front                            mem_f211  mem_fc1e
mem_f212 = 0xf212           ;EEPROM 006F  Fault 00853 - Loudspeaker(s); Rear                             mem_f212  mem_fc1f
mem_f213 = 0xf213           ;EEPROM 0070  Fault 00854 - Radio Display Output in Dash Panel Insert        mem_f213  mem_fc20
mem_f214 = 0xf214           ;EEPROM 0071  Fault 00855 - Connection to CD changer                         mem_f214  mem_fc21
mem_f215 = 0xf215           ;EEPROM 0072  Fault 00856 - Radio Antenna                                    mem_f215  mem_fc22
mem_f216 = 0xf216           ;EEPROM 0073  Fault 01044 - Control Module Incorrectly Coded                 mem_f216
mem_f217 = 0xf217           ;EEPROM 0074  Fault 01195 - End                                              mem_f217
mem_f218 = 0xf218           ;EEPROM 0075  Fault 65535 - Internal Control Module Memory Error             mem_f218
mem_f219 = 0xf219           ;EEPROM 0076
mem_f21a = 0xf21a           ;EEPROM 0077

mem_f225 = 0xf225           ;EEPROM 0082  FM1 Current Frequency Index

                            ;EEPROM 0084  FM1 Preset 1 Frequency Index

                            ;EEPROM 0086  FM1 Preset 2 Frequency Index

                            ;EEPROM 0088  FM1 Preset 3 Frequency Index

                            ;EEPROM 008A  FM1 Preset 4 Frequency Index

                            ;EEPROM 008C  FM1 Preset 5 Frequency Index

                            ;EEPROM 008E  FM1 Preset 6 Frequency Index

                            ;EEPROM 0090  FM2 Current Frequency Index

                            ;EEPROM 0092  FM2 Preset 1 Frequency Index

                            ;EEPROM 0094  FM2 Preset 2 Frequency Index

                            ;EEPROM 0096  FM2 Preset 3 Frequency Index

                            ;EEPROM 0098  FM2 Preset 4 Frequency Index

                            ;EEPROM 009A  FM2 Preset 5 Frequency Index

                            ;EEPROM 009C  FM2 Preset 6 Frequency Index

                            ;EEPROM 009E  AM Current Frequency Index

                            ;EEPROM 00A0  AM Preset 1 Frequency Index

                            ;EEPROM 00A2  AM Preset 2 Frequency Index

                            ;EEPROM 00A4  AM Preset 3 Frequency Index

                            ;EEPROM 00A6  AM Preset 4 Frequency Index

                            ;EEPROM 00A8  AM Preset 5 Frequency Index

                            ;EEPROM 00AA  AM Preset 6 Frequency Index

mem_f24f = 0xf24f           ;EEPROM 00AC

mem_f252 = 0xf252           ;EEPROM 00AF  FM1/FM2: 0x00=FM1, 0x01=FM2
mem_f253 = 0xf253           ;EEPROM 00B0  Mode: 0x00=?, 0x01=FM1/FM2, 0x02=AM
mem_f254_onvol = 0xf254     ;EEPROM 00B1  ONVOL
mem_f255 = 0xf255           ;EEPROM 00B2
mem_f256 = 0xf256           ;EEPROM 00B3
mem_f257_fade = 0xf257      ;EEPROM 00B4  FADE
mem_f258_bal = 0xf258       ;EEPROM 00B5  BAL
mem_f259_bass = 0xf259      ;EEPROM 00B6  BASS
mem_f25a_mid = 0xf25a       ;EEPROM 00B7  MID
mem_f25b_treb = 0xf25b      ;EEPROM 00B8  TREB
mem_f25c_eq1_bass = 0xf25c  ;EEPROM 00B9  EQ#1 BASS
mem_f25c_eq1_mid = 0xf25d   ;EEPROM 00BA  EQ#1 MID
mem_f25c_eq1_treb = 0xf25e  ;EEPROM 00BB  EQ#1 TREB
mem_f25f_eq2_bass = 0xf25f  ;EEPROM 00BC  EQ#2 BASS
mem_f25f_eq2_mid = 0xf260   ;EEPROM 00BD  EQ#2 MID
mem_f25f_eq2_treb = 0xf261  ;EEPROM 00BE  EQ#2 TREB
mem_f262_eq3_bass = 0xf262  ;EEPROM 00BF  EQ#3 BASS
mem_f262_eq3_mid = 0xf263   ;EEPROM 00C0  EQ#3 MID
mem_f262_eq3_treb = 0xf264  ;EEPROM 00C1  EQ#3 TREB
mem_f265_eq4_bass = 0xf265  ;EEPROM 00C2  EQ#4 BASS
mem_f265_eq4_mid = 0xf266   ;EEPROM 00C3  EQ#4 MID
mem_f265_eq4_treb = 0xf267  ;EEPROM 00C4  EQ#4 TREB
mem_f268 = 0xf268           ;EEPROM 00C5
mem_f269 = 0xf269           ;EEPROM 00C6

mem_f26b = 0xf26b           ;EEPROM 00C8
mem_f26c_csum_lo = 0xf26c   ;EEPROM 00C9
mem_f26d_csum_hi = 0xf26d   ;EEPROM 00CA

;0xF26E - 0xF7FF in Expansion RAM appears completely unused

;High Speed RAM: 0xFB00 - 0xFEFF (1K)

mem_fb00 = 0xfb00
mem_fb01 = 0xfb01
mem_fb02 = 0xfb02
mem_fb03 = 0xfb03
mem_fb04 = 0xfb04
mem_fb05 = 0xfb05
mem_fb06 = 0xfb06
mem_fb07 = 0xfb07
mem_fb08 = 0xfb08
mem_fb09 = 0xfb09
mem_fb0a = 0xfb0a
mem_fb0b = 0xfb0b
mem_fb0c = 0xfb0c
mem_fb0d = 0xfb0d
mem_fb0e = 0xfb0e
mem_fb0f = 0xfb0f
mem_fb10 = 0xfb10
mem_fb11 = 0xfb11
mem_fb12 = 0xfb12
mem_fb13 = 0xfb13
mem_fb14 = 0xfb14
mem_fb15 = 0xfb15
mem_fb16 = 0xfb16
mem_fb17 = 0xfb17
mem_fb18 = 0xfb18
mem_fb19 = 0xfb19
mem_fb1a = 0xfb1a
mem_fb1b = 0xfb1b
mem_fb1c = 0xfb1c
mem_fb1d = 0xfb1d
mem_fb1e = 0xfb1e
mem_fb1f = 0xfb1f
mem_fb20 = 0xfb20
mem_fb21 = 0xfb21
mem_fb22 = 0xfb22
mem_fb23 = 0xfb23
mem_fb24 = 0xfb24
mem_fb25 = 0xfb25
mem_fb26 = 0xfb26
mem_fb27 = 0xfb27
mem_fb28 = 0xfb28
mem_fb29 = 0xfb29
mem_fb2a = 0xfb2a
mem_fb2b = 0xfb2b
mem_fb2c = 0xfb2c
mem_fb2d = 0xfb2d
msg_countdown = 0xfb2e      ;Counts down tenths of a second that tmp_msg_idx should be displayed
mem_fb2f = 0xfb2f
mem_fb30 = 0xfb30
mem_fb38 = 0xfb38
mem_fb39 = 0xfb39
mem_fb3a = 0xfb3a
mem_fb3b = 0xfb3b
mem_fb3c = 0xfb3c
mem_fb3d = 0xfb3d
mem_fb3e = 0xfb3e
mem_fb3f = 0xfb3f
mem_fb40 = 0xfb40
mem_fb41 = 0xfb41
mem_fb42 = 0xfb42
mem_fb43 = 0xfb43
mem_fb44 = 0xfb44
mem_fb45 = 0xfb45
mem_fb46 = 0xfb46
mem_fb47 = 0xfb47
mem_fb48 = 0xfb48
mem_fb49 = 0xfb49
mem_fb4a = 0xfb4a
mem_fb4b = 0xfb4b
mem_fb4c = 0xfb4c
mem_fb4d = 0xfb4d
mem_fb4e = 0xfb4e
mem_fb4f = 0xfb4f
mem_fb50 = 0xfb50
mem_fb51 = 0xfb51
mem_fb52 = 0xfb52           ;KWP1281 Login rate limiter countdown
mem_fb53 = 0xfb53
mem_fb54 = 0xfb54
mem_fb55 = 0xfb55
freq_idx = 0xfb56
mem_fb57 = 0xfb57
mem_fb58 = 0xfb58
freq_idx_max = 0xfb59
mem_fb5a = 0xfb5a
mem_fb5b = 0xfb5b
mem_fb5e = 0xfb5e
mem_fb5f = 0xfb5f
mem_fb60 = 0xfb60
mem_fb61 = 0xfb61
mem_fb62 = 0xfb62
mem_fb63 = 0xfb63
mem_fb64 = 0xfb64
mem_fb65 = 0xfb65
mem_fb66 = 0xfb66
mem_fb67 = 0xfb67
mem_fb77 = 0xfb77
mem_fb7b = 0xfb7b
mem_fb68 = 0xfb68
mem_fb69 = 0xfb69
mem_fb6a = 0xfb6a
mem_fb6b = 0xfb6b
mem_fb6c = 0xfb6c
mem_fb6d = 0xfb6d
mem_fb6e = 0xfb6e
mem_fb6f = 0xfb6f           ;Bit 0: off=CD MIX 1,    on=CD MIX 6
                            ;Bit 1: off=TAPE SKIP Y, on=TAPE SKIP N
mem_fb70 = 0xfb70
mem_fb71 = 0xfb71
mem_fb72 = 0xfb72
mem_fb73 = 0xfb73           ;Result of sub_2537_secure_resp security access computation (high byte)
mem_fb74 = 0xfb74           ;Result of sub_2537_secure_resp security access computation (low byte)
mem_fb75 = 0xfb75           ;Entered SAFE code (BCD high byte)
mem_fb76 = 0xfb76           ;Entered SAFE code (BCD low byte)
mem_fb79 = 0xfb79
mem_fb7a = 0xfb7a
mem_fb85 = 0xfb85
mem_fb86 = 0xfb86
mem_fb91 = 0xfb91
mem_fb92 = 0xfb92
mem_fb94 = 0xfb94
mem_fb95 = 0xfb95
mem_fb96 = 0xfb96
mem_fb97 = 0xfb97
mem_fb98 = 0xfb98
mem_fb99 = 0xfb99
mem_fb9a = 0xfb9a
mem_fb9b = 0xfb9b
mem_fb9d = 0xfb9d
mem_fb9e = 0xfb9e
mem_fb9f = 0xfb9f
mem_fba7 = 0xfba7
mem_fbac = 0xfbac
mem_fbad = 0xfbad
mem_fbae = 0xfbae
mem_fbaf = 0xfbaf
mem_fbb0 = 0xfbb0
mem_fbb1 = 0xfbb1
upd_disp_old = 0xfbb2       ;uPD16432B last display buffer sent (11 bytes)
upd_pict_old = 0xfbbd       ;uPD16432B last pictograph buffer sent (8 bytes)
kwp_con_56_state = 0xfbc5   ;KWP1281 connection state on normal radio address (0x56)
kwp_con_3f_state = 0xfbc6   ;KWP1281 connection state on cluster address (0x3F; radio-as-tester)
kwp_con_7f_state = 0xfbc7   ;KWP1281 connection state on DELCO address (0x7c)
mem_fbc8 = 0xfbc8
mem_fbc9 = 0xfbc9
mem_fbca = 0xfbca
kwp_blk_counter = 0xfbcb    ;KWP1281 block counter
mem_fbcc = 0xfbcc
mem_fbcd = 0xfbcd
mem_fbce = 0xfbce
mem_fbcf = 0xfbcf
mem_fbd0 = 0xfbd0
upd_keys_1 = 0xfbd1         ;uPD16432B key scan data (4 bytes)
mem_fbd5 = 0xfbd5
upd_keys = 0xfbd6           ;uPD16432B key scan data received from uPD16432B (4 bytes)
mem_fbda = 0xfbda
i2c_buf  = 0xfbdb           ;I2C buffer (18 bytes?)
mem_fbfc = 0xfbfc
mem_fbfd = 0xfbfd
mem_fbfe = 0xfbfe
mem_fbff = 0xfbff           ;I2C attempt counter used in eeprom_unguarded_write and elsewhere
i2c_tmp_buf = 0xfc00        ;I2C temporary buffer (16 bytes) used during EEPROM write
mem_fc10 = 0xfc10
mem_fc11 = 0xfc11
mem_fc12 = 0xfc12           ;I2C attempt counter used in eeprom_unguarded_read (read EEPROM)
mem_fc14 = 0xfc14
mem_fc16 = 0xfc16
mem_fc17 = 0xfc17

;Faults buffer #1 (9 bytes)
;See also clear_faults
;Each byte contains a fault elaboration code where 0x88 = "no fault"

mem_fc1a = 0xfc1a             ;00668 - Supply Voltage Terminal 30                 mem_f20d  mcm_fc1a
;mem_fc1b                     ;00849 - S-Contact at Ignition/Starter Switch       mem_f20e  mem_fc1b
mem_fc1c = 0xfc1c             ;00850 - Control Output Active; Radio Amplifier     mem_f20f  mem_fc1c
;mem_fc1d                     ;00851 - Loudspeaker(s)                             mem_f210  mem_fc1d
mem_fc1e = 0xfc1e             ;00852 - Loudspeaker(s); Front                      mem_f211  mem_fc1e
mem_fc1f = 0xfc1f             ;00853 - Loudspeaker(s); Rear                       mem_f212  mem_fc1f
mem_fc20 = 0xfc20             ;00854 - Radio Display Output in Dash Panel Insert  mem_f213  mem_fc20
mem_fc21 = 0xfc21             ;00855 - Connection to CD changer                   mem_f214  mem_fc21
mem_fc22 = 0xfc22             ;00856 - Radio Antenna                              mem_f215  mem_fc22

mem_fc23 = 0xfc23
mem_fc24 = 0xfc24
mem_fc25 = 0xfc25
mem_fc26 = 0xfc26
mem_fc27 = 0xfc27
mem_fc28 = 0xfc28
mem_fc29 = 0xfc29
mem_fc2a = 0xfc2a
mem_fc2b = 0xfc2b
mem_fc2c = 0xfc2c
mem_fc2d = 0xfc2d
mem_fc2f = 0xfc2f
mem_fc30 = 0xfc30
mem_fc34 = 0xfc34
mem_fc3c = 0xfc3c
mem_fc3d = 0xfc3d
mem_fc3e = 0xfc3e
mem_fc3f = 0xfc3f
mem_fc40 = 0xfc40
mem_fc41 = 0xfc41
mem_fc42 = 0xfc42
mem_fc43 = 0xfc43
mem_fc45 = 0xfc45
mem_fc48 = 0xfc48
mem_fc4e = 0xfc4e
mem_fc4f = 0xfc4f
mem_fc67 = 0xfc67
mem_fc6b = 0xfc6b
mem_fc6c = 0xfc6c
mem_fc6d = 0xfc6d
cdc_rx_buf = 0xfc6e         ;CDC RX buffer (7 bytes; copied from cdc_isr_rx_buf except first byte)
mem_fc75_cd_num1 = 0xfc75   ;CD number (copy 1 of 3)
mem_fc76_cd_trk = 0xfc76
mem_fc77_cd_mins = 0xfc77
mem_fc78_cd_secs = 0xfc78
mem_fc79 = 0xfc79
mem_fc7b_cd_cd2 = 0xfc7b    ;CD number (copy 2 of 3)
mem_fc7c_last_trk = 0xfc7c  ;CD track number received in previous packet to detect track change
mem_fc7d_upd_cd3 = 0xfc7d   ;CD number (copy 3 of 3)
mem_fc7e = 0xfc7e
mem_fc7f = 0xfc7f
mem_fc80 = 0xfc80
mem_fc81 = 0xfc81
mem_fc82 = 0xfc82
mem_fc84 = 0xfc84
mem_fc85 = 0xfc85
mem_fc86 = 0xfc86
mem_fc87 = 0xfc87
mem_fc88 = 0xfc88
mem_fc89 = 0xfc89
mem_fc8a = 0xfc8a
mem_fc8b = 0xfc8b
mem_fc8c = 0xfc8c
mem_fc8d = 0xfc8d
mem_fc8f = 0xfc8f
mem_fc90 = 0xfc90
mem_fc91 = 0xfc91
mem_fc92 = 0xfc92
mem_fc93 = 0xfc93
mem_fc94 = 0xfc94
mem_fc95 = 0xfc95
mem_fc96 = 0xfc96
mem_fc97 = 0xfc97
mem_fc98 = 0xfc98
mem_fc99 = 0xfc99
mem_fc9a = 0xfc9a
mem_fc9b = 0xfc9b
mem_fc9c = 0xfc9c
mem_fc9d = 0xfc9d
mem_fc9e = 0xfc9e
mem_fc9f = 0xfc9f
mem_fca2_ani_t30 = 0xfca2   ;P91/ANI10 analog: Terminal 30 Constant B+ (V = value * 0.1)
mem_fca3_ani_t58b = 0xfca3  ;P92/ANI20 analog: Terminal 58b Illumination (V = value * 0.06)
mem_fca4_ani = 0xfca4       ;P95/ANI50 analog (unknown)
stack_bottom = 0xfca5       ;Bottom of stack cookie (value 0x55)
                            ;Stack occupies 375 bytes at 0xFCA6-0xFE1E.  Stack pointer
                            ;is initialized to stack_top.  PUSH decrements SP before
                            ;putting an item on the stack.
stack_top = 0xfe1f          ;Top of stack cookie (value 0xAA)
mem_fe20 = 0xfe20
mem_fe21 = 0xfe21
mem_fe22 = 0xfe22
mem_fe23 = 0xfe23           ;Bit 7: off = SAFE mode locked, on = SAFE mode unlocked
mem_fe24 = 0xfe24           ;LED blink countdown
mem_fe25 = 0xfe25
mem_fe26 = 0xfe26
mem_fe27 = 0xfe27
mem_fe28 = 0xfe28
mem_fe29 = 0xfe29
mem_fe2a = 0xfe2a
mem_fe2b = 0xfe2b
mem_fe2c = 0xfe2c
mem_fe2d = 0xfe2d
mem_fe2e = 0xfe2e
mem_fe2f = 0xfe2f
mem_fe30 = 0xfe30
mem_fe31 = 0xfe31
mem_fe32 = 0xfe32
mem_fe34 = 0xfe34
upd_pict = 0xfe35           ;uPD16432B pictograph buffer (8 bytes)
upd_tick = 0xfe3d           ;Increments on watch timer; used for some uPD updates \ Used as 16-bit pseudorandom
upd_leds = 0xfe3e           ;Value to write to uPD16432B LED output latch         / number for cluster security
mem_fe3f = 0xfe3f
mem_fe40 = 0xfe40
mem_fe41 = 0xfe41
mem_fe42 = 0xfe42
mem_fe43_key = 0xfe43       ;Key being pressed; possibly other uses
mem_fe44 = 0xfe44
mem_fe45 = 0xfe45           ;Index for mem_b790 lookup (CDC TX related)
mem_fe46 = 0xfe46
mem_fe47 = 0xfe47
mem_fe49 = 0xfe49
mem_fe4a = 0xfe4a
mem_fe4b = 0xfe4b
mem_fe4c = 0xfe4c
mem_fe4d = 0xfe4d
mem_fe4e = 0xfe4e
mem_fe4f = 0xfe4f
mem_fe50 = 0xfe50
mem_fe51 = 0xfe51
mem_fe52 = 0xfe52
mem_fe54 = 0xfe54
mem_fe55 = 0xfe55
mem_fe56 = 0xfe56
mem_fe57 = 0xfe57
mem_fe58 = 0xfe58
mem_fe59 = 0xfe59
mem_fe5a = 0xfe5a
mem_fe5b = 0xfe5b
mem_fe5c = 0xfe5c
mem_fe5d = 0xfe5d
mem_fe5e = 0xfe5e           ;Bit 1: off=FERN off, on=FERN on
mem_fe5f = 0xfe5f           ;Bit 0: off=SPI packet transfer not yet complete, on=complete
mem_fe60 = 0xfe60
mem_fe61 = 0xfe61
mem_fe62 = 0xfe62
mem_fe63 = 0xfe63
mem_fe64 = 0xfe64           ;Bit 7: on=successful OCLED login, off=no login
mem_fe65 = 0xfe65
mem_fe66 = 0xfe66
mem_fe67 = 0xfe67
mem_fe68 = 0xfe68
mem_fe69 = 0xfe69
mem_fe6a = 0xfe6a
mem_fe6b = 0xfe6b
mem_fe6c = 0xfe6c
mem_fe6d = 0xfe6d
mem_fe6e = 0xfe6e           ;Bit 1: off=MIX off, on=MIX on
mem_fe6f = 0xfe6f           ;Bit 4: off=Dolby off, on=Dolby on
mem_fe70 = 0xfe70
mem_fe71 = 0xfe71           ;Bit 4: off=normal tape, on=metal tape
mem_fe72 = 0xfe72
mem_fe73 = 0xfe73
mem_fe74 = 0xfe74
mem_fe75 = 0xfe75
mem_fe76 = 0xfe76
mem_fe77 = 0xfe77
mem_fe78 = 0xfe78
mem_fe79 = 0xfe79
mem_fe7a = 0xfe7a
mem_fe7b = 0xfe7b
mem_fe7c = 0xfe7c
mem_fe7d = 0xfe7d
mem_fe7e = 0xfe7e
mem_fe7f = 0xfe7f
mem_fe80 = 0xfe80
mem_fe81 = 0xfe81

;0xFE82-0xFECA in High Speed RAM appears completely unused

;High Speed RAM from 0xFECB to 0xFEFF is not cleared on reset:

shadow_p0 = 0xfecb          ;Copy of P0 that will be changed and then written to P0
shadow_p2 = 0xfecc          ;Copy of P2 that will be changed and then written to P2
shadow_p3 = 0xfecd          ;Copy of P3 that will be changed and then written to P3
shadow_p4 = 0xfece          ;Copy of P4 that will be changed and then written to P4
shadow_p5 = 0xfecf          ;Copy of P5 that will be changed and then written to P5
shadow_p6 = 0xfed0          ;Copy of P6 that will be changed and then written to P6
shadow_p7 = 0xfed1          ;Copy of P7 that will be changed and then written to P7
shadow_p8 = 0xfed2          ;Copy of P8 that will be changed and then written to P8
shadow_p9 = 0xfed3          ;Copy of P9 that will be changed and then written to P9
mem_fed4 = 0xfed4           ;Bit 6 off=tape side A, on=tape side B
mem_fed5 = 0xfed5
mem_fed6 = 0xfed6
mem_fed7 = 0xfed7
mem_fed8 = 0xfed8
mem_fed9 = 0xfed9
mem_feda = 0xfeda
mem_fedb = 0xfedb
mem_fedc = 0xfedc
mem_fedd = 0xfedd
mem_fede = 0xfede

;Register Banks are part of the High Speed RAM and are not cleared on reset:

rb3_x = 0xfee0              ;RB3 R0/X  \
rb3_a = 0xfee1              ;RB3 R1/A  |
rb3_c = 0xfee2              ;RB3 R2/C  |
rb3_b = 0xfee3              ;RB3 R3/B  |  RB3 appears completely unused
rb3_e = 0xfee4              ;RB3 R4/E  |
rb3_d = 0xfee5              ;RB3 R5/D  |
rb3_l = 0xfee6              ;RB3 R6/L  |
rb3_h = 0xfee7              ;RB3 R7/H  /

rb2_x = 0xfee8              ;RB2 R0/X  \
rb2_a = 0xfee9              ;RB2 R1/A  |
rb2_c = 0xfeea              ;RB2 R2/C  |
rb2_b = 0xfeeb              ;RB2 R3/B  |  RB2 is used by the SPI interrupt
rb2_e = 0xfeec              ;RB2 R4/E  |  intcsi30_08a9 and by routines
rb2_d = 0xfeed              ;RB2 R5/D  |  that interact with it
rb2_l = 0xfeee              ;RB2 R6/L  |
rb2_h = 0xfeef              ;RB2 R7/H  /

rb1_x = 0xfef0              ;RB1 R0/X  \
rb1_a = 0xfef1              ;RB1 R1/A  |
rb1_c = 0xfef2              ;RB1 R2/C  |
rb1_b = 0xfef3              ;RB1 R3/B  |  RB1 is used only in the
rb1_e = 0xfef4              ;RB1 R4/E  |  watch timer interrupt
rb1_d = 0xfef5              ;RB1 R5/D  |  intwtni0_0135
rb1_l = 0xfef6              ;RB1 R6/L  |
rb1_h = 0xfef7              ;RB1 R7/H  /

rb0_x = 0xfef8              ;RB0 R0/X  \
rb0_a = 0xfef9              ;RB0 R1/A  |
rb0_c = 0xfefa              ;RB0 R2/C  |
rb0_b = 0xfefb              ;RB0 R3/B  |  RB0 is the normal register
rb0_e = 0xfefc              ;RB0 R4/E  |  bank used by most of the code
rb0_d = 0xfefd              ;RB0 R5/D  |
rb0_l = 0xfefe              ;RB0 R6/L  |
rb0_h = 0xfeff              ;RB0 R7/H  /

;Peripheral Registers:

p0 = 0xff00                 ;Port 0
p2 = 0xff02                 ;Port 2
p3 = 0xff03                 ;Port 3
p4 = 0xff04                 ;Port 4
p5 = 0xff05                 ;Port 5
p6 = 0xff06                 ;Port 6
p7 = 0xff07                 ;Port 7
p8 = 0xff08                 ;Port 8
p9 = 0xff09                 ;Port 9
cr000 = 0xff0a              ;16-bit timer capture/compare register 000
cr010 = 0xff0c              ;16-bit timer capture/compare register 010
cr011 = 0xff12              ;16-bit timer capture/compare register 011
tm01 = 0xff14               ;16-bit timer counter 01
adcr00 = 0xff17             ;A/D conversion result register 00
rxb0_txs0 = 0xff18          ;Transmit shift register 0 / Receive buffer register 0
sio30 = 0xff1a              ;Serial shift register 30
sio31 = 0xff1b              ;Serial shift register 31
iic0 = 0xff1f               ;IIC shift register 0
pm0 = 0xff20                ;Port mode register 0
pm2 = 0xff22                ;Port mode register 2
pm3 = 0xff23                ;Port mode register 3
pm4 = 0xff24                ;Port mode register 4
pm5 = 0xff25                ;Port mode register 5
pm6 = 0xff26                ;Port mode register 6
pm7 = 0xff27                ;Port mode register 7
pm8 = 0xff28                ;Port mode register 8
pm9 = 0xff29                ;Port mode register 9
pu0 = 0xff30                ;Pull-up resistor option register 0
pu2 = 0xff32                ;Pull-up resistor option register 2
pu3 = 0xff33                ;Pull-up resistor option register 3
pu4 = 0xff34                ;Pull-up resistor option register 4
pu5 = 0xff35                ;Pull-up resistor option register 5
pu6 = 0xff36                ;Pull-up resistor option register 6
pu7 = 0xff37                ;Pull-up resistor option register 7
wtnm0 = 0xff41              ;Watch timer mode control register 0
wdcs = 0xff42               ;Watchdog timer clock selection register
egp = 0xff48                ;External interrupt rising edge enable register
egn = 0xff49                ;External interrupt falling edge enable register
tmc00 = 0xff60              ;16-bit timer mode control register 00
prm00 = 0xff61              ;Prescaler mode register 00
crc00 = 0xff62              ;Capture/compare control register 00
toc00 = 0xff63              ;16-bit timer output control register 00
tmc01 = 0xff68              ;16-bit timer mode control register 01
adm00 = 0xff80              ;A/D converter mode register 00
ads00 = 0xff81              ;Analog input channel specification register 00
adm01 = 0xff88              ;A/D converter mode register 01
ads01 = 0xff89              ;Analog input channel specification register 01
adcr01 = 0xff8b             ;A/D conversion result register 01
asim0 = 0xffa0              ;Asynchronous serial interface mode register 0
asis0 = 0xffa1              ;Asynchronous serial interface status register 0
brgc0 = 0xffa2              ;Baud rate generator control register 0
iicc0 = 0xffa8              ;IIC control register 0
iics0 = 0xffa9              ;IIC status register 0
iiccl0 = 0xffaa             ;IIC transfer clock selection register 0
csim30 = 0xffb0             ;Serial operation mode register 30
csim31 = 0xffb8             ;Serial operation mode register 31
if0l = 0xffe0               ;Interrupt request flag register 0L
if0h = 0xffe1               ;Interrupt request flag register 0H
if1l = 0xffe2               ;Interrupt request flag register 1L
mk0l = 0xffe4               ;Interrupt mask flag register 0L
mk0h = 0xffe5               ;Interrupt mask flag register 0H
mk1l = 0xffe6               ;Interrupt mask flag register 1L
mk1h = 0xffe7               ;Internal mask flag register 1H
pr0l = 0xffe8               ;Priority level specification flag register 0L
pr0h = 0xffe9               ;Priority level specification flag register 0H
pr1l = 0xffea               ;Priority level specification flag register 1L
ims = 0xfff0                ;Memory size switching register
ixs = 0xfff4                ;Internal expansion RAM size switching register
wdtm = 0xfff9               ;Watchdog timer mode register
pcc = 0xfffb                ;Processor clock control register

;Constants

wd_clk_250ms = 0b00000111   ;Watchdog clock select = watchdog fires after 250ms

wd_run_irq = 0b10000000     ;(Re-)Start watchdog in interval mode (Maskable INTWDT when watchdog fires)
                            ;  Bit 7   RUN=1 Counter is cleared and counting starts
                            ;  Bit 4 WDTM4=0 \ Interval timer mode:
                            ;  Bit 3 WDTM3=0 / Maskable INTWDT occurs when watchdog fires

wd_run_nmi = 0b10010000     ;(Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
                            ;  Bit 7   RUN=1 Counter is cleared and counting starts
                            ;  Bit 4 WDTM4=1 \ Watchdog timer mode 1:
                            ;  Bit 3 WDTM3=0 / Non-maskable INTWDT occurs when watchdog fires

wd_run_rst = 0b10011000     ;(Re-)Start watchdog in mode 2 (RESET when watchdog fires)
                            ;  Bit 7   RUN=1 Counter is cleared and counting starts
                            ;  Bit 4 WDTM4=1 \ Watchdog timer mode 2:
                            ;  Bit 3 WDTM3=1 / RESET is activated when watchdog

wtnm0_conf_a = 0b00010011
wtnm0_conf_b = 0b01110011

brgc0_value = 0x39          ;Baud rate used for KWP1281:
                            ;  0x39 = 10400 baud (the normal baud rate of this radio)
                            ;  0x3b = 9600 baud
                            ;  0x4b = 4800 baud   KWP1281 has been found to work reliably
                            ;  0x5b = 2400 baud   on this radio at all of these baud rates.
                            ;  0x6b = 1200 baud

;Command bytes to send to CDC
cdc_scan = 0x05
cdc_radio = 0x08
cdc_unknown_0c = 0x0c
cdc_reverse = 0x1a
cdc_forward = 0x1b
cdc_load_cd = 0x1c
cdc_prev_track = 0x1e
cdc_next_track = 0x1f
cdc_enable = 0x27
cdc_unknown_28 = 0x28
cdc_cd1 = 0x30
cdc_cd2 = 0x31
cdc_cd3 = 0x32
cdc_cd4 = 0x33
cdc_cd5 = 0x34
cdc_cd6 = 0x35
;See also possible CD commands in table mem_d0b1

;CDC receive buffer indexes (CDC sends an 8-byte packet)
;Note:
;  cdc_isr_rx_buf has all 8 bytes and starts with cdc_r_first
;  cdc_rx_buf has only 7 bytes and starts with cd_r_cd
cdc_r_first = 0
cdc_r_cd = 1
cdc_r_track = 2
cdc_r_minutes = 3
cdc_r_seconds = 4
cdc_r_mode = 5
cdc_r_2ndlast = 6
cdc_r_last = 7

;KWP1281 Group Reading groups
kwp_group_01 = 0x01 ;Group 0x1 (General)
kwp_group_02 = 0x02 ;Group 0x2 (Speakers)
kwp_group_03 = 0x03 ;Group 0x3 (Antenna)
kwp_group_04 = 0x04 ;Group 0x4 (Amplifier)
kwp_group_05 = 0x05 ;Group 0x5 (CD Changer)
kwp_group_06 = 0x06 ;Group 0x6 (External Display)
kwp_group_07 = 0x07 ;Group 0x7 (Steering Wheel Control)
kwp_group_19 = 0x19 ;Group 0x19 (Protection)

;KWP1281 Group Reading formulas
kwp_formula_06 = 0x06
kwp_formula_10 = 0x10
kwp_formula_11 = 0x11
kwp_formula_17 = 0x17
kwp_formula_25 = 0x25

;KWP1281 Group Reading "measurement IDs".  These IDs don't have anything to
;do with the protocol.  They identifiers used only within this firmware.
;Each measurement has a unique value.

meas_id_hi_00 = 0x00 ;
meas_id_hi_d0 = 0xd0 ; High nibble groups like
meas_id_hi_e0 = 0xe0 ; like measurements together
meas_id_hi_f0 = 0xf0 ;

meas_id_gala    = meas_id_hi_00 + 0x00  ;Group 1, first  value: GALA-Signal
meas_id_amp_out = meas_id_hi_d0 + 0x01  ;Group 4, first  value: Amplifier Out
meas_id_scon    = meas_id_hi_e0 + 0x00  ;Group 1, fourth value: S-Contact Status
meas_id_fsp_st  = meas_id_hi_e0 + 0x01  ;Group 2, second value: Front Speaker Status
meas_id_rsp_st  = meas_id_hi_e0 + 0x02  ;Group 2, fourth value: Rear Speak Status
meas_id_ant_st  = meas_id_hi_e0 + 0x04  ;Group 3, third  value: Antenna Status
meas_id_ant_typ = meas_id_hi_e0 + 0x03  ;Group 3, first  value: Antenna Type
meas_id_cdc_st  = meas_id_hi_e0 + 0x05  ;Group 5, second value: CD-Changer Status
meas_id_fis_st  = meas_id_hi_e0 + 0x06  ;Group 6, second value: FIS Status
meas_id_fsp_typ = meas_id_hi_f0 + 0x00  ;Group 2, first  value: Front Speakers Type
meas_id_rsp_typ = meas_id_hi_f0 + 0x01  ;Group 2, third  value: Rear Speakers Type
meas_id_ant_ant = meas_id_hi_f0 + 0x04  ;Group 3, second value: Antenna
meas_id_cdc_cmp = meas_id_hi_f0 + 0x06  ;Group 5, first  value: CD-Changer Component
meas_id_fis_cmp = meas_id_hi_f0 + 0x07  ;Group 6, first  value: FIS Component
meas_id_mfsw    = meas_id_hi_f0 + 0x0c  ;Group 7, first  value: MFSW Buttons
meas_id_t58b    = meas_id_hi_f0 + 0x0e  ;Group 1, third  value: Terminal 58b Illumination %
meas_id_t30     = meas_id_hi_f0 + 0x0f  ;Group 1, second value: Terminal 30 Voltage

;Vectors

rst_vect:
    .word rst_0d88          ;0000  88 0d       VECTOR RST

unused0_vect:
    .word badisr_0d75       ;0002  75 0d       VECTOR (unused)

intwdt_vect:
    .word badisr_0d75       ;0004  75 0d       VECTOR INTWDT

intp0_vect:
    .word intp0_mfsw        ;0006  93 59       VECTOR INTP0

intp1_vect:
    .word intp1_3ecc        ;0008  cc 3e       VECTOR INTP1

intp2_vect:
    .word intp2_3acc        ;000a  cc 3a       VECTOR INTP2

intp3_vect:
    .word badisr_0d75       ;000c  75 0d       VECTOR INTP3

intp4_vect:
    .word intp4_power_key   ;000e  04 59       VECTOR INTP4

intp5_vect:
;Note: P05 is connected to the uPD16432B's KEYREQ line (goes high
;whenever a key is being pressed).  This could be detected with
;INTP5 but is not.  The firmware does seem to use P05 at all.
    .word badisr_0d75       ;0010  75 0d       VECTOR INTP5

intp6_vect:
    .word intp6_stop_key    ;0012  3b 59       VECTOR INTP6

intp7_vect:
    .word intp7_883a        ;0014  3a 88       VECTOR INTP7

intser0_vect:
    .word intser0_32df      ;0016  df 32       VECTOR INTSER0

intsr0_vect:
    .word intsr0_30e8       ;0018  e8 30       VECTOR INTSR0

intst0_vect:
    .word intst0_307e       ;001a  7e 30       VECTOR INTST0

intcsi30_vect:
    .word intcsi30_08a9     ;001c  a9 08       VECTOR INTCSI30

intcsi31_vect:
    .word intcsi31_08f7     ;001e  f7 08       VECTOR INTCSI31

intiic0_vect:
    .word badisr_0d75       ;0020  75 0d       VECTOR INTIIC0

intc2_vect:
    .word badisr_0d75       ;0022  75 0d       VECTOR INTC2

intwtni0_vect:
    .word intwtni0_0135     ;0024  35 01       VECTOR INTWTNI0

inttm000_vect:
    .word inttm000_3b2b     ;0026  2b 3b       VECTOR INTTM000

inttm010_vect:
    .word badisr_0d75       ;0028  75 0d       VECTOR INTTM010

inttm001_vect:
    .word badisr_0d75       ;002a  75 0d       VECTOR INTTM001

inttm011_vect:
    .word inttm011_5b60     ;002c  60 5b       VECTOR INTTM011

intad00_vect:
    .word badisr_0d75       ;002e  75 0d       VECTOR INTAD00

intad01_vect:
    .word badisr_0d75       ;0030  75 0d       VECTOR INTAD01

unused1_vect:
    .word badisr_0d75       ;0032  75 0d       VECTOR (unused)

intwtn0_vect:
    .word badisr_0d75       ;0034  75 0d       VECTOR INTWTN0

intkr_vect:
    .word badisr_0d75       ;0036  75 0d       VECTOR INTKR

unused2_vect:
    .word badisr_0d75       ;0038  75 0d       VECTOR (unused)

unused3_vect:
    .word badisr_0d75       ;003a  75 0d       VECTOR (unused)

unused4_vect:
    .word badisr_0d75       ;003c  75 0d       VECTOR (unused)

brk_i_vect:
    .word badisr_0d75       ;003e  75 0d       VECTOR BRK_I

callt_0_vect:
    .word sub_0994          ;0040  94 09       VECTOR CALLT #0

callt_1_vect:
    .word sub_09b9          ;0042  b9 09       VECTOR CALLT #1

callt_2_vect:
    .word sub_09c6          ;0044  c6 09       VECTOR CALLT #2

callt_3_vect:
    .word sub_096c          ;0046  6c 09       VECTOR CALLT #3

callt_4_vect:
    .word sub_09a7          ;0048  a7 09       VECTOR CALLT #4

callt_5_vect:
    .word badisr_0d75       ;004a  75 0d       VECTOR CALLT #5

callt_6_vect:
    .word badisr_0d75       ;004c  75 0d       VECTOR CALLT #6

callt_7_vect:
    .word badisr_0d75       ;004e  75 0d       VECTOR CALLT #7

callt_8_vect:
    .word badisr_0d75       ;0050  75 0d       VECTOR CALLT #8

callt_9_vect:
    .word badisr_0d75       ;0052  75 0d       VECTOR CALLT #9

callt_10_vect:
    .word badisr_0d75       ;0054  75 0d       VECTOR CALLT #10

callt_11_vect:
    .word badisr_0d75       ;0056  75 0d       VECTOR CALLT #11

callt_12_vect:
    .word badisr_0d75       ;0058  75 0d       VECTOR CALLT #12

callt_13_vect:
    .word badisr_0d75       ;005a  75 0d       VECTOR CALLT #13

callt_14_vect:
    .word badisr_0d75       ;005c  75 0d       VECTOR CALLT #14

callt_15_vect:
    .word badisr_0d75       ;005e  75 0d       VECTOR CALLT #15

callt_16_vect:
    .word badisr_0d75       ;0060  75 0d       VECTOR CALLT #16

callt_17_vect:
    .word badisr_0d75       ;0062  75 0d       VECTOR CALLT #17

callt_18_vect:
    .word badisr_0d75       ;0064  75 0d       VECTOR CALLT #18

callt_19_vect:
    .word badisr_0d75       ;0066  75 0d       VECTOR CALLT #19

callt_20_vect:
    .word badisr_0d75       ;0068  75 0d       VECTOR CALLT #20

callt_21_vect:
    .word badisr_0d75       ;006a  75 0d       VECTOR CALLT #21

callt_22_vect:
    .word badisr_0d75       ;006c  75 0d       VECTOR CALLT #22

callt_23_vect:
    .word badisr_0d75       ;006e  75 0d       VECTOR CALLT #23

callt_24_vect:
    .word badisr_0d75       ;0070  75 0d       VECTOR CALLT #24

callt_25_vect:
    .word badisr_0d75       ;0072  75 0d       VECTOR CALLT #25

callt_26_vect:
    .word badisr_0d75       ;0074  75 0d       VECTOR CALLT #26

callt_27_vect:
    .word badisr_0d75       ;0076  75 0d       VECTOR CALLT #27

callt_28_vect:
    .word badisr_0d75       ;0078  75 0d       VECTOR CALLT #28

callt_29_vect:
    .word badisr_0d75       ;007a  75 0d       VECTOR CALLT #29

callt_30_vect:
    .word badisr_0d75       ;007c  75 0d       VECTOR CALLT #30

callt_31_vect:
    .word badisr_0d75       ;007e  75 0d       VECTOR CALLT #31

mem_0080:
;Defaults written to EEPROM area in RAM: mem_f1b3 - mem_f1e6 (52 bytes)
    .byte 0x1d  ;0080  -> mem_f1b3          EEPROM 0010
    .byte 0x1d  ;0081  -> mem_f1b4          EEPROM 0011
    .byte 0x10  ;0082  -> mem_f1b5          EEPROM 0012
    .byte 0x10  ;0083  -> mem_f1b6          EEPROM 0013
    .byte 0x00  ;0084  -> mem_f1b7          EEPROM 0014
    .byte 0x00  ;0085  -> mem_f1b8          EEPROM 0015
    .byte 0x0c  ;0086  -> mem_f1b9          EEPROM 0016
    .byte 0x12  ;0087  -> mem_f1ba          EEPROM 0017
    .byte 0x40  ;0088  -> mem_f1bb          EEPROM 0018
    .byte 0x40  ;0089  -> mem_f1bc          EEPROM 0019
    .byte 0x40  ;008a  -> mem_f1bd          EEPROM 001A
    .byte 0x4f  ;008b  -> mem_f1be          EEPROM 001B
    .byte 0x00  ;008c  -> mem_f1bf          EEPROM 001C
    .byte 0x65  ;008d  -> mem_f1c0          EEPROM 001D
    .byte 0xc0  ;008e  -> mem_f1c1          EEPROM 001E
    .byte 0x20  ;008f  -> mem_f1c2          EEPROM 001F
    .byte 0xcd  ;0090  -> mem_f1c3          EEPROM 0020
    .byte 0xe6  ;0091  -> mem_f1c4          EEPROM 0021
    .byte 0x04  ;0092  -> mem_f1c5          EEPROM 0022
    .byte 0x80  ;0093  -> mem_f1c6          EEPROM 0023
    .byte 0x02  ;0094  -> mem_f1c7          EEPROM 0024
    .byte 0xd2  ;0095  -> mem_f1c8          EEPROM 0025
    .byte 0x0f  ;0096  -> mem_f1c9          EEPROM 0026
    .byte 0xa1  ;0097  -> mem_f1ca          EEPROM 0027
    .byte 0x0f  ;0098  -> mem_f1cb          EEPROM 0028
    .byte 0x76  ;0099  -> mem_f1cc          EEPROM 0029
    .byte 0x04  ;009a  -> mem_f1cd          EEPROM 002A
    .byte 0xcc  ;009b  -> mem_f1ce          EEPROM 002B
    .byte 0x05  ;009c  -> mem_f1cf          EEPROM 002C
    .byte 0x66  ;009d  -> mem_f1d0          EEPROM 002D
    .byte 0x0f  ;009e  -> mem_f1d1          EEPROM 002E
    .byte 0x2e  ;009f  -> mem_f1d2          EEPROM 002F
    .byte 0x03  ;00a0  -> mem_f1d3          EEPROM 0030
    .byte 0x31  ;00a1  -> mem_f1d4          EEPROM 0031
    .byte 0x00  ;00a2  -> mem_f1d5          EEPROM 0032
    .byte 0x40  ;00a3  -> mem_f1d6          EEPROM 0033
    .byte 0x03  ;00a4  -> mem_f1d7          EEPROM 0034
    .byte 0xd0  ;00a5  -> mem_f1d8          EEPROM 0035
    .byte 0x0f  ;00a6  -> mem_f1d9          EEPROM 0036
    .byte 0x2d  ;00a7  -> mem_f1da          EEPROM 0037
    .byte 0x01  ;00a8  -> mem_f1db          EEPROM 0038
    .byte 0x9a  ;00a9  -> mem_f1dc          EEPROM 0039
    .byte 0x03  ;00aa  -> mem_f1dd          EEPROM 003A
    .byte 0x56  ;00ab  -> mem_f1de          EEPROM 003B
    .byte 0x00  ;00ac  -> mem_f1df          EEPROM 003C
    .byte 0x00  ;00ad  -> mem_f1e0          EEPROM 003D
    .byte 0x07  ;00ae  -> mem_f1e1          EEPROM 003E
    .byte 0xff  ;00af  -> mem_f1e2          EEPROM 003F
    .byte 0x03  ;00b0  -> mem_f1e3          EEPROM 0040
    .byte 0x30  ;00b1  -> mem_f1e4          EEPROM 0041
    .byte 0x03  ;00b2  -> mem_f1e5          EEPROM 0042
    .byte 0x30  ;00b3  -> mem_f1e6          EEPROM 0043

mem_00b4:
;Defaults written to EEPROM area in RAM: mem_f1e7_region - mem_f1f8 (18 bytes)
    .byte 0x00  ;00b4 -> mem_f1e7_region    EEPROM 0046
    .byte 0xaa  ;00b5 -> mem_f1e8           EEPROM 0047
    .byte 0x04  ;00b6 -> mem_f1e9           EEPROM 0048
    .byte 0x41  ;00b7 -> mem_f1ea           EEPROM 0049
    .byte 0x01  ;00b8 -> mem_f1eb           EEPROM 004A
    .byte 0x00  ;00b9 -> mem_f1ec           EEPROM 004B
    .ascii '1'  ;00ba -> mem_f1ed           EEPROM 004C
    .ascii 'J'  ;00bb -> mem_f1ee           EEPROM 004D
    .ascii '0'  ;00bc -> mem_f1ef           EEPROM 004E
    .ascii '0'  ;00bd -> mem_f1f0           EEPROM 004F
    .ascii '3'  ;00be -> mem_f1f1           EEPROM 0050
    .ascii '5'  ;00bf -> mem_f1f2           EEPROM 0051
    .ascii '1'  ;00c0 -> mem_f1f3           EEPROM 0052
    .ascii '8'  ;00c1 -> mem_f1f4           EEPROM 0053
    .ascii '0'  ;00c2 -> mem_f1f5           EEPROM 0054
    .ascii 'B'  ;00c3 -> mem_f1f6           EEPROM 0055
    .ascii ' '  ;00c4 -> mem_f1f7           EEPROM 0056
    .ascii ' '  ;00c5 -> mem_f1f8           EEPROM 0057

mem_00c6:
;Defaults written to EEPROM area in RAM: mem_f1f9 - mem_f201 (9 bytes)
    .byte 0x03  ;00c6 -> mem_f1f9           EEPROM 0058   KWP1281 Soft Coding in binary, high byte
    .byte 0x20  ;00c7 -> mem_f1fa           EEPROM 0059   KWP1281 Soft Coding in binary, low byte
    .byte 0x00  ;00c8 -> mem_f1fb           EEPROM 005A   KWP1281 Workshop Code, high byte
    .byte 0x00  ;00c9 -> mem_f1fc           EEPROM 005B   KWP1281 Workshop Code, low byte
    .byte 0x00  ;00ca -> mem_f1fd           EEPROM 005C
    .byte 0x00  ;00cb -> mem_f1fe           EEPROM 005D
    .byte 0x04  ;00cc -> mem_f1ff           EEPROM 005E
    .byte 0x00  ;00cd -> mem_f200           EEPROM 005F
    .byte 0x00  ;00ce -> mem_f201           EEPROM 0060

mem_00cf:
;Defaults written to EEPROM area in RAM: mem_f206 - mem_f224 (31 bytes)
    .byte 0x00  ;00cf -> mem_f206           EEPROM 0063
    .byte 0x44  ;00d0 -> mem_f207           EEPROM 0064
    .byte 0x00  ;00d1 -> mem_f208           EEPROM 0065
    .byte 0x00  ;00d2 -> mem_f209           EEPROM 0066
    .byte 0x00  ;00d3 -> mem_f20a           EEPROM 0067
    .byte 0x00  ;00d4 -> mem_f20b           EEPROM 0068
    .byte 0x45  ;00d5 -> mem_f20c           EEPROM 0069
    .byte 0x88  ;00d6 -> mem_f20d           EEPROM 006A   Fault 00668 - Supply Voltage Terminal 30
    .byte 0x88  ;00d7 -> mem_f20e           EEPROM 006B   Fault 00849 - S-Contact at Ignition/Starter Switch
    .byte 0x88  ;00d8 -> mem_f20f           EEPROM 006C   Fault 00850 - Control Output Active; Radio Amplifier
    .byte 0x88  ;00d9 -> mem_f210           EEPROM 006D   Fault 00851 - Loudspeaker(s)
    .byte 0x88  ;00da -> mem_f211           EEPROM 006E   Fault 00852 - Loudspeaker(s); Front
    .byte 0x88  ;00db -> mem_f212           EEPROM 006F   Fault 00853 - Loudspeaker(s); Rear
    .byte 0x88  ;00dc -> mem_f213           EEPROM 0070   Fault 00854 - Radio Display Output in Dash Panel Insert
    .byte 0x88  ;00dd -> mem_f214           EEPROM 0071   Fault 00855 - Connection to CD changer
    .byte 0x88  ;00de -> mem_f215           EEPROM 0072   Fault 00856 - Radio Antenna
    .byte 0x23  ;00df -> mem_f216           EEPROM 0073
    .byte 0x88  ;00e0 -> mem_f217           EEPROM 0074
    .byte 0x88  ;00e1 -> mem_f218           EEPROM 0075
    .byte 0x00  ;00e2 -> mem_f219           EEPROM 0076
    .byte 0x00  ;00e3 -> mem_f21a           EEPROM 0077
    .byte 0x00  ;00e4 -> mem_f21b           EEPROM 0078
    .byte 0x00  ;00e5 -> mem_f21c           EEPROM 0079
    .byte 0x00  ;00e6 -> mem_f21d           EEPROM 007A
    .byte 0x00  ;00e7 -> mem_f21e           EEPROM 007B
    .byte 0x00  ;00e8 -> mem_f21f           EEPROM 007C
    .byte 0x00  ;00e9 -> mem_f220           EEPROM 007D
    .byte 0x00  ;00ea -> mem_f221           EEPROM 007E
    .byte 0x00  ;00eb -> mem_f222           EEPROM 007F
    .byte 0x00  ;00ec -> mem_f223           EEPROM 0080
    .byte 0x00  ;00ed -> mem_f224           EEPROM 0081

mem_00ee:
;Defaults written to EEPROM area in RAM: mem_f225 - mem_f26b (71 bytes)
    .byte 0x04  ;00ee -> mem_f225           EEPROM 0082   FM1 Current Frequency Index = 88.3 MHz
    .byte 0x06  ;00ef -> mem_f226           EEPROM 0083
    .byte 0x04  ;00f0 -> mem_f227           EEPROM 0084   FM1 Preset 1 Frequency Index = 88.3 MHz
    .byte 0x06  ;00f1 -> mem_f228           EEPROM 0085
    .byte 0x08  ;00f2 -> mem_f229           EEPROM 0086   FM1 Preset 2 Frequency Index = 89.1 MHz
    .byte 0x06  ;00f3 -> mem_f22a           EEPROM 0087
    .byte 0x21  ;00f4 -> mem_f22b           EEPROM 0088   FM1 Preset 3 Frequency Index = 94.1 MHz
    .byte 0x06  ;00f5 -> mem_f22c           EEPROM 0089
    .byte 0x3a  ;00f6 -> mem_f22d           EEPROM 008A   FM1 Preset 4 Frequency Index = 99.1 MHz
    .byte 0x06  ;00f7 -> mem_f22e           EEPROM 008B
    .byte 0x5d  ;00f8 -> mem_f22f           EEPROM 008C   FM1 Preset 5 Frequency Index = 106.1 MHz
    .byte 0x06  ;00f9 -> mem_f230           EEPROM 008D
    .byte 0x04  ;00fa -> mem_f231           EEPROM 008E   FM1 Preset 6 Frequency Index = 88.3 MHz
    .byte 0x06  ;00fb -> mem_f232           EEPROM 008F
    .byte 0x35  ;00fc -> mem_f233           EEPROM 0090   FM2 Current Frequency Index = 98.1 MHz
    .byte 0x06  ;00fd -> mem_f234           EEPROM 0091
    .byte 0x02  ;00fe -> mem_f235           EEPROM 0092   FM2 Preset 1 Frequency Index = 87.9 MHz
    .byte 0x06  ;00ff -> mem_f236           EEPROM 0093
    .byte 0x03  ;0100 -> mem_f237           EEPROM 0094   FM2 Preset 2 Frequency Index = 88.1 MHz
    .byte 0x06  ;0101 -> mem_f238           EEPROM 0095
    .byte 0x35  ;0102 -> mem_f239           EEPROM 0096   FM2 Preset 3 Frequency Index = 98.1 MHz
    .byte 0x06  ;0103 -> mem_f23a           EEPROM 0097
    .byte 0x2c  ;0104 -> mem_f23b           EEPROM 0098   FM2 Preset 4 Frequency Index = 96.3 MHz
    .byte 0x06  ;0105 -> mem_f23c           EEPROM 0099
    .byte 0x66  ;0106 -> mem_f23d           EEPROM 009A   FM2 Preset 5 Frequency Index = 107.9 MHz
    .byte 0x06  ;0107 -> mem_f23e           EEPROM 009B
    .byte 0x51  ;0108 -> mem_f23f           EEPROM 009C   FM2 Preset 6 Frequency Index = 103.7 MHz
    .byte 0x06  ;0109 -> mem_f240           EEPROM 009D
    .byte 0x01  ;010a -> mem_f241           EEPROM 009E   AM Current Frequency Index = 530 kHz
    .byte 0x06  ;010b -> mem_f242           EEPROM 009F
    .byte 0x01  ;010c -> mem_f243           EEPROM 00A0   AM Preset 1 Frequency Index = 530 kHz
    .byte 0x06  ;010d -> mem_f244           EEPROM 00A1
    .byte 0x08  ;010e -> mem_f245           EEPROM 00A2   AM Preset 2 Frequency Index = 600 kHz
    .byte 0x06  ;010f -> mem_f246           EEPROM 00A3
    .byte 0x35  ;0110 -> mem_f247           EEPROM 00A4   AM Preset 3 Frequency Index = 1050 kHz
    .byte 0x06  ;0111 -> mem_f248           EEPROM 00A5
    .byte 0x58  ;0112 -> mem_f249           EEPROM 00A6   AM Preset 4 Frequency Index = 1400 kHz
    .byte 0x06  ;0113 -> mem_f24a           EEPROM 00A7
    .byte 0x77  ;0114 -> mem_f24b           EEPROM 00A8   AM Preset 5 Frequency Index = 1710 kHz
    .byte 0x06  ;0115 -> mem_f24c           EEPROM 00A9
    .byte 0x01  ;0116 -> mem_f24d           EEPROM 00AA   AM Preset 6 Frequency Index = 530 kHz
    .byte 0x06  ;0117 -> mem_f24e           EEPROM 00AB
    .byte 0x06  ;0118 -> mem_f24f           EEPROM 00AC
    .byte 0x06  ;0119 -> mem_f250           EEPROM 00AD
    .byte 0x06  ;011a -> mem_f251           EEPROM 00AE
    .byte 0x00  ;011b -> mem_f252           EEPROM 00AF   FM1/FM2 = 0x00=FM1
    .byte 0x01  ;011c -> mem_f253           EEPROM 00B0   Mode = 0x01=FM1/FM2
    .byte 0x42  ;011d -> mem_f254_onvol     EEPROM 00B1   ONVOL = 33
    .byte 0x00  ;011e -> mem_f255           EEPROM 00B2
    .byte 0x01  ;011f -> mem_f256           EEPROM 00B3
    .byte 0x0a  ;0120 -> mem_f257_fade      EEPROM 00B4   FADE = CENTER
    .byte 0x0a  ;0121 -> mem_f258_bal       EEPROM 00B5   BAL = CENTER

    .byte 0x0a  ;0122 -> mem_f259_bass      EEPROM 00B6   BASS = 0
    .byte 0x0a  ;0123 -> mem_f25a_mid       EEPROM 00B7   MID = 0
    .byte 0x0a  ;0124 -> mem_f25b_treb      EEPROM 00B8   TREB = 0
    .byte 0x0a  ;0125 -> mem_f25c_eq1_bass  EEPROM 00B9   EQ#1 BASS = 0
    .byte 0x0a  ;0126 -> mem_f25d_eq1_mid   EEPROM 00BA   EQ#1 MID = 0
    .byte 0x0a  ;0127 -> mem_f25e_eq1_treb  EEPROM 00BB   EQ#1 TREB = 0
    .byte 0x0a  ;0128 -> mem_f25f_eq2_bass  EEPROM 00BC   EQ#2 BASS = 0
    .byte 0x0a  ;0129 -> mem_f260_eq2_mid   EEPROM 00BD   EQ#2 MID = 0
    .byte 0x0a  ;012a -> mem_f261_eq2_treb  EEPROM 00BE   EQ#2 TREB = 0
    .byte 0x0a  ;012b -> mem_f262_eq3_bass  EEPROM 00BF   EQ#3 BASS = 0
    .byte 0x0a  ;012c -> mem_f263_eq3_mid   EEPROM 00C0   EQ#3 MID = 0
    .byte 0x0a  ;012d -> mem_f264_eq3_treb  EEPROM 00C1   EQ#3 TREB = 0
    .byte 0x0a  ;012e -> mem_f265_eq4_bass  EEPROM 00C2   EQ#4 BASS = 0
    .byte 0x0a  ;012f -> mem_f266_eq4_mid   EEPROM 00C3   EQ#4 TREB = 0
    .byte 0x0a  ;0130 -> mem_f267_eq4_treb  EEPROM 00C4   EQ#4 TREB = 0

    .byte 0x42  ;0131 -> mem_f268           EEPROM 00C5
    .byte 0x06  ;0132 -> mem_f269           EEPROM 00C6
    .byte 0x06  ;0133 -> mem_f26a           EEPROM 00C7
    .byte 0x55  ;0134 -> mem_f26b           EEPROM 00C8

;Watch timer interrupt handler
intwtni0_0135:
    sel rb1                      ;0135  61 d8
    bf mem_fe2b.7,lab_0148_more  ;0137  31 73 2b 0d   If bit is off, branch to do more than
                                 ;                      just blink the LED

    ;mem_fe2b.7=1 so we are only blinking the LED this time

    ;Enable watch timer interrupts
    mov wtnm0,#wtnm0_conf_b ;013b  13 41 73
    clr1 mk1l.0             ;013e  71 0b e6       Clear WTNIMK0 (enables INTWTNI0)
    clr1 pr1l.0             ;0141  71 0b ea       Clear WTNIPR0 (makes INTWTNI0 high priority)

    call !blink_led         ;0144  9a 1a 25       Decrement LED blink counter and set LED pin state
    reti                    ;0147  8f

lab_0148_more:
    ;mem_fe2b.7=0 so we are doing more watch timer activities,
    ;such as updating the display

    ;Enable watch timer interrupts
    mov wtnm0,#wtnm0_conf_a ;0148  13 41 13
    clr1 mk1l.0             ;014b  71 0b e6       Clear WTNIMK0 (enables INTWTNI0)
    clr1 pr1l.0             ;014e  71 0b ea       Clear WTNIPR0 (makes INTWTNI0 high priority)

    inc mem_fe28              ;0151  81 28
    btclr mem_fe28.7,lab_015a ;0153  31 71 28 03
    br !lab_0265_reti         ;0157  9b 65 02

lab_015a:
    clr1 if1l.0             ;015a  71 0b e2       Clear WTNIIF0 (WTNIIF0 interrupt flag)
    set1 mk1h.0             ;015d  71 0a e7       Set WTNMK0 (disables INTWTN0)

lab_0160:
    ei                      ;0160  7a 1e
    movw hl,#mem_fb00-1     ;0162  16 ff fa
    mov a,#0x08             ;0165  a1 08
    sub a,#0x00             ;0167  1d 00
    callf !sub_0932         ;0169  1c 32
    mov a,!mem_fb79         ;016b  8e 79 fb
    inc a                   ;016e  41
    mov !mem_fb79,a         ;016f  9e 79 fb
    bt mem_fe60.6,lab_018b  ;0172  ec 60 16
    clr1 pu4.5              ;0175  71 5b 34     PU45 pull-up resistor disabled
    set1 pm4.5              ;0178  71 5a 24     PM45=input
    set1 mem_fe60.5         ;017b  5a 60
    bf p4.5,lab_01a0        ;017d  31 53 04 1f  Branch if P4.5=0
    clr1 mem_fe60.5         ;0181  5b 60
    set1 mem_fe60.4         ;0183  4a 60
    set1 mem_fe61.2         ;0185  2a 61
    inc mem_fe26            ;0187  81 26
    br lab_01a0             ;0189  fa 15

lab_018b:
    mov a,!fis_tx_count     ;018b  8e 66 f0     A = FIS number of bytes left to send
    cmp a,#0x01             ;018e  4d 01
    bz lab_019c             ;0190  ad 0a
    clr1 pu4.5              ;0192  71 5b 34     PU45 pull-up resistor disabled
    set1 pm4.5              ;0195  71 5a 24     PM45=input
    bf p4.5,lab_01a0        ;0198  31 53 04 04  Branch if P4.5=0

lab_019c:
    set1 mem_fe61.2         ;019c  2a 61
    set1 mem_fe7c.2         ;019e  2a 7c

lab_01a0:
    call !sub_357c          ;01a0  9a 7c 35     Unknown; related to 5 baud address tx/rx
    mov a,!mem_fb95         ;01a3  8e 95 fb
    inc a                   ;01a6  41
    mov !mem_fb95,a         ;01a7  9e 95 fb
    btclr mem_fe61.3,lab_01cd ;01aa  31 31 61 1f
    set1 mem_fe61.3         ;01ae  3a 61
    bf mem_fe23.4,lab_01b7  ;01b0  31 43 23 03
    call !blink_led_mem_fb00;01b4  9a 0d 25     If mem_fb00=0, set it to 0x3e and do blink_led.

lab_01b7:
    call !sub_308f          ;01b7  9a 8f 30
    bf mem_fe2d.0,lab_01cd  ;01ba  31 03 2d 0f
    bt mem_fe66.5,lab_01cd  ;01be  dc 66 0c
    bt mem_fe78.1,lab_01cd  ;01c1  9c 78 09
    bt mem_fe31.1,lab_01cd  ;01c4  9c 31 06
    bt mem_fe31.2,lab_01cd  ;01c7  ac 31 03
    call !sub_5607          ;01ca  9a 07 56

lab_01cd:
    mov a,!mem_fb03         ;01cd  8e 03 fb
    cmp a,#0x00             ;01d0  4d 00
    bnz lab_0204            ;01d2  bd 30
    mov a,#0x0a             ;01d4  a1 0a
    inc mem_fe29            ;01d6  81 29
    bt mem_fe29.0,lab_01df  ;01d8  8c 29 04
    bt mem_fe29.1,lab_01df  ;01db  9c 29 01
    inc a                   ;01de  41

lab_01df:
    mov !mem_fb03,a         ;01df  9e 03 fb
    movw hl,#mem_fb07       ;01e2  16 07 fb
    mov a,#0x21             ;01e5  a1 21
    sub a,#0x08             ;01e7  1d 08
    callf !sub_0932         ;01e9  1c 32
    mov a,!mem_fb11         ;01eb  8e 11 fb
    cmp a,#0x00             ;01ee  4d 00
    bnz lab_01f9            ;01f0  bd 07
    mov a,#0x0f             ;01f2  a1 0f
    mov !mem_fb11,a         ;01f4  9e 11 fb
    inc upd_tick            ;01f7  81 3d

lab_01f9:
    mov a,!mem_f1e9         ;01f9  8e e9 f1
    bf a.2,lab_2020_br_025a ;01fc  31 2f 03
    call !sub_8178          ;01ff  9a 78 81

lab_2020_br_025a:
    br lab_025a             ;0202  fa 56

lab_0204:
    mov a,!mem_fb0b         ;0204  8e 0b fb
    cmp a,#0x00             ;0207  4d 00
    bnz lab_025a            ;0209  bd 4f
    mov a,#0x0a             ;020b  a1 0a
    mov !mem_fb0b,a         ;020d  9e 0b fb
    movw hl,#mem_fb20       ;0210  16 20 fb
    mov a,#0x4a             ;0213  a1 4a
    sub a,#0x21             ;0215  1d 21
    callf !sub_0932         ;0217  1c 32
    mov a,!mem_fb24         ;0219  8e 24 fb
    cmp a,#0x00             ;021c  4d 00
    bnz lab_025a            ;021e  bd 3a
    mov a,#0x0a             ;0220  a1 0a
    mov !mem_fb24,a         ;0222  9e 24 fb
    movw hl,#mem_fb49       ;0225  16 49 fb
    mov a,#0x50             ;0228  a1 50
    sub a,#0x4a             ;022a  1d 4a
    callf !sub_0932         ;022c  1c 32
    mov a,!mem_fb4b         ;022e  8e 4b fb
    cmp a,#0x00             ;0231  4d 00
    bnz lab_025a            ;0233  bd 25
    mov a,#0x0a             ;0235  a1 0a
    mov !mem_fb4b,a         ;0237  9e 4b fb
    movw hl,#mem_fb4f       ;023a  16 4f fb
    mov a,#0x51             ;023d  a1 51
    sub a,#0x50             ;023f  1d 50
    callf !sub_0932         ;0241  1c 32
    mov a,!mem_fb50         ;0243  8e 50 fb
    cmp a,#0x00             ;0246  4d 00
    bnz lab_025a            ;0248  bd 10
    mov a,#0x06             ;024a  a1 06
    mov !mem_fb50,a         ;024c  9e 50 fb
    movw hl,#mem_fb50       ;024f  16 50 fb
    mov a,#0x56             ;0252  a1 56
    sub a,#0x51             ;0254  1d 51
    bz lab_025a             ;0256  ad 02
    callf !sub_0932         ;0258  1c 32

lab_025a:
    di                      ;025a  7b 1e
    dbnz mem_fe28,lab_0266_br_0160  ;025c  04 28 07
    mov mem_fe28,#0x80      ;025f  11 28 80
    set1 mk1h.0             ;0262  71 0a e7     Set WTNMK0 (disables INTWTN0)

lab_0265_reti:
    reti                    ;0265  8f

lab_0266_br_0160:
    br !lab_0160            ;0266  9b 60 01

sub_0269:
    decw de                 ;0269  94
    mov a,[de]              ;026a  85
    incw de                 ;026b  84
    br lab_0271             ;026c  fa 03

sub_026e:
    decw hl                 ;026e  96
    mov a,[hl]              ;026f  87
    incw hl                 ;0270  86

lab_0271:
    dec a                   ;0271  51
    mov c,a                 ;0272  72
    call !sub_0314          ;0273  9a 14 03
    push psw                ;0276  22
    push de                 ;0277  b5
    pop hl                  ;0278  b6
    callf !add_b_to_hl      ;0279  5c 6d        HL = HL + B
    mov x,#0x00             ;027b  a0 00
    mov a,[hl]              ;027d  87
    pop psw                 ;027e  23
    bc lab_028b             ;027f  8d 0a
    movw de,ax              ;0281  d4
    mov a,[hl+0x01]         ;0282  ae 01
    movw hl,ax              ;0284  d6
    call !sub_02af          ;0285  9a af 02
    addw ax,#mem_0080       ;0288  ca 80 00

lab_028b:
    ret                     ;028b  af

lab_028c:
    decw de                 ;028c  94
    mov a,[de]              ;028d  85
    incw de                 ;028e  84
    br lab_0294             ;028f  fa 03

sub_0291:
    decw hl                 ;0291  96
    mov a,[hl]              ;0292  87
    incw hl                 ;0293  86

lab_0294:
    dec a                   ;0294  51
    mov c,a                 ;0295  72
    call !sub_0314          ;0296  9a 14 03
    push psw                ;0299  22
    mov a,b                 ;029a  63
    rol a,1                 ;029b  26
    push de                 ;029c  b5
    pop hl                  ;029d  b6
    callf !add_a_to_hl      ;029e  5c 67        HL = HL + A
    mov a,[hl]              ;02a0  87
    mov x,a                 ;02a1  70
    mov a,[hl+0x01]         ;02a2  ae 01
    pop psw                 ;02a4  23
    bnc lab_02a8            ;02a5  9d 01
    ret                     ;02a7  af

lab_02a8:
    movw de,ax              ;02a8  d4
    mov a,[hl+0x02]         ;02a9  ae 02
    mov x,a                 ;02ab  70
    mov a,[hl+0x03]         ;02ac  ae 03
    movw hl,ax              ;02ae  d6

sub_02af:
    mov a,mem_fed6          ;02af  f0 d6
    sub a,mem_fed7          ;02b1  1e d7
    mov mem_fed6,a          ;02b3  f2 d6
    mov a,mem_fed4          ;02b5  f0 d4
    sub a,mem_fed7          ;02b7  1e d7
    mov b,a                 ;02b9  73
    mov a,e                 ;02ba  64
    sub l,a                 ;02bb  61 16
    mov a,d                 ;02bd  65
    subc h,a                ;02be  61 37
    bnc lab_02ca            ;02c0  9d 08
    mov a,#0xff             ;02c2  a1 ff
    xor l,a                 ;02c4  61 76
    xor h,a                 ;02c6  61 77
    incw hl                 ;02c8  86
    set1 cy                 ;02c9  20

lab_02ca:
    push psw                ;02ca  22
    mov a,l                 ;02cb  66
    mov x,a                 ;02cc  70
    mov a,b                 ;02cd  63
    mulu x                  ;02ce  31 88        AX = A * X
    xch a,h                 ;02d0  37
    xch a,x                 ;02d1  30
    mov l,a                 ;02d2  76
    mov a,b                 ;02d3  63
    mulu x                  ;02d4  31 88        AX = A * X
    xch a,x                 ;02d6  30
    add h,a                 ;02d7  61 07
    mov a,x                 ;02d9  60
    addc a,#0x00            ;02da  2d 00
    mov b,a                 ;02dc  73
    mov a,mem_fed6          ;02dd  f0 d6
    mov c,a                 ;02df  72
    mov a,h                 ;02e0  67
    mov x,a                 ;02e1  70
    mov a,b                 ;02e2  63
    divuw c                 ;02e3  31 82        AX = AX / C
    cmpw ax,#0xffff         ;02e5  ea ff ff
    bz lab_0311             ;02e8  ad 27
    mov a,x                 ;02ea  60
    mov h,a                 ;02eb  77
    mov a,l                 ;02ec  66
    mov x,a                 ;02ed  70
    mov a,mem_fed6          ;02ee  f0 d6
    xch a,c                 ;02f0  32
    divuw c                 ;02f1  31 82        AX = AX / C
    mov a,x                 ;02f3  60
    mov l,a                 ;02f4  76
    mov a,mem_fed6          ;02f5  f0 d6
    clr1 cy                 ;02f7  21
    rorc a,1                ;02f8  25
    cmp c,a                 ;02f9  61 42
    bc lab_02fe             ;02fb  8d 01
    incw hl                 ;02fd  86

lab_02fe:
    pop psw                 ;02fe  23
    bnc lab_0308            ;02ff  9d 07
    mov a,#0xff             ;0301  a1 ff
    xor l,a                 ;0303  61 76
    xor h,a                 ;0305  61 77
    incw hl                 ;0307  86

lab_0308:
    movw ax,hl              ;0308  c6
    xch a,x                 ;0309  30
    add a,e                 ;030a  61 0c
    xch a,x                 ;030c  30
    addc a,d                ;030d  61 2d
    clr1 cy                 ;030f  21
    ret                     ;0310  af

lab_0311:
    pop psw                 ;0311  23
    set1 cy                 ;0312  20
    ret                     ;0313  af

sub_0314:
    mov b,#0x00             ;0314  a3 00
    mov a,mem_fed4          ;0316  f0 d4
    cmp a,[hl]              ;0318  4f
    bz lab_0326             ;0319  ad 0b
    bc lab_0326             ;031b  8d 09

lab_031d:
    inc b                   ;031d  43
    cmp a,[hl+b]            ;031e  31 4b
    bz lab_0326             ;0320  ad 04
    bc lab_0328             ;0322  8d 04
    dbnz c,lab_031d         ;0324  8a f7

lab_0326:
    set1 cy                 ;0326  20
    ret                     ;0327  af

lab_0328:
    mov a,[hl+b]            ;0328  ab
    mov mem_fed6,a          ;0329  f2 d6
    dec b                   ;032b  53
    mov a,[hl+b]            ;032c  ab
    mov mem_fed7,a          ;032d  f2 d7
    clr1 cy                 ;032f  21
    ret                     ;0330  af

filler_0331:
    .rept 1231
    brk                     ;0331  bf         Force cold start via badisr_0d75
    .endm

sub_0800_mode:
;Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    mov a,!mem_f253         ;0800  8e 53 f2     mem_fb58 = mem_f253
    mov !mem_fb58,a         ;0803  9e 58 fb
    ret                     ;0806  af

sub_0807:
;Compare mem_fb58 to A
    cmp a,!mem_fb58         ;0807  48 58 fb
    ret                     ;080a  af

sub_080b_fm1fm2:
;Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov a,!mem_f252         ;080b  8e 52 f2
    mov !mem_fb57,a         ;080e  9e 57 fb
    ret                     ;0811  af

sub_0812:
;Compare A to mem_fb57
    cmp a,!mem_fb57         ;0812  48 57 fb
    ret                     ;0815  af

sub_0816:
    clr1 mem_fe5b.1         ;0816  1b 5b
    clr1 mem_fe5c.5         ;0818  5b 5c
    call !sub_1c9d_region   ;081a  9a 9d 1c     Set mem_fe5d.4 if mem_f1e7_region & 0x07 = 0, otherwise clear it
    call !sub_080b_fm1fm2   ;081d  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    call !sub_1bff          ;0820  9a ff 1b

sub_0823:
    movw de,#mem_fb66       ;0823  14 66 fb
    movw hl,#mem_fe20       ;0826  16 20 fe
    mov b,#0x02             ;0829  a3 02
    call !sub_0bef          ;082b  9a ef 0b

    movw hl,#freq_idx_max   ;082e  16 59 fb
    mov b,#0x01             ;0831  a3 01
    br !sub_0bf6            ;0833  9b f6 0b

sub_0836:
    clr1 mem_fe5b.2         ;0836  2b 5b
    clr1 mem_fe5b.3         ;0838  3b 5b
    clr1 mem_fe5c.2         ;083a  2b 5c
    mov mem_fe22,#0x0a      ;083c  11 22 0a
    ret                     ;083f  af

sub_0840:
    mov mem_fe22,#0x01      ;0840  11 22 01
    br lab_0848             ;0843  fa 03

sub_0845:
    mov mem_fe22,#0x02      ;0845  11 22 02

lab_0848:
    clr1 mem_fe5b.4         ;0848  4b 5b
    clr1 mem_fe5b.5         ;084a  5b 5b
    call !sub_0800_mode     ;084c  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    mov b,a                 ;084f  73           B = mode
    movw hl,#mem_b408       ;0850  16 08 b4
    mov a,[hl+b]            ;0853  ab
    mov !mem_fb63,a         ;0854  9e 63 fb
    ret                     ;0857  af

sub_0858:
    mov mem_fe22,#0x03      ;0858  11 22 03
    br lab_0860             ;085b  fa 03

sub_085d:
    mov mem_fe22,#0x04      ;085d  11 22 04

lab_0860:
    clr1 mem_fe5d.3         ;0860  3b 5d
    mov a,mem_fe22          ;0862  f0 22
    push ax                 ;0864  b1
    set1 mem_fe69.4         ;0865  4a 69
    call !sub_60ac          ;0867  9a ac 60
    clr1 mem_fe69.4         ;086a  4b 69
    pop ax                  ;086c  b0
    mov mem_fe22,a          ;086d  f2 22

lab_086f:
    clr1 mem_fe5b.6         ;086f  6b 5b
    clr1 mem_fe5b.7         ;0871  7b 5b
    mov a,#0x08             ;0873  a1 08
    mov !mem_fb63,a         ;0875  9e 63 fb
    ret                     ;0878  af

sub_0879:
;Just returns
    ret                     ;0879  af


sub_087a:
;SPI xfer on SIO30 (send byte in A, recv byte in A)
;Performs a single byte SPI transfer without using INTCSI30.
;
;Flag bit mem_fe5f.0 indicates completion:
;  0 = Not complete (failed)
;  1 = Complete (success)
    clr1 if0h.4             ;087a  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    set1 mem_fe5f.0         ;087d  0a 5f        SPI packet complete flag = complete
                            ;                     (will be changed below if transfer fails)
    mov sio30,a             ;087f  f2 1a        Send byte in A out SPI
    push bc                 ;0881  b3
    mov b,#0x00             ;0882  a3 00
lab_0884:
    bt if0h.4,lab_088d      ;0884  31 46 e1 05  Branch if CSIIF30 indicates transfer complete
    dbnz b,lab_0884         ;0888  8b fa        Keep waiting until B reaches zero
    ;SPI transfer not complete
    nop                     ;088a  00
    clr1 mem_fe5f.0         ;088b  0b 5f        SPI packet complete flag = not complete
lab_088d:
    ;SPI transfer complete or B reached zero
    mov a,sio30             ;088d  f0 1a
    pop bc                  ;088f  b2
    ret                     ;0890  af


sio30_disable:
;Disable SIO30 (used for uPD16432B SPI)
    set1 shadow_p3.2        ;0891  2a cd        uPD16432B CLK = high
    set1 shadow_p3.1        ;0893  1a cd        uPD16432B DAT = high
    mov a,shadow_p3         ;0895  f0 cd
    mov p3,a                ;0897  f2 03

    mov csim30,#0x00        ;0899  13 b0 00     SIO30 = operation stopped

    clr1 pm3.2              ;089c  71 2b 23     PM32=output (uPD16432B CLK)
    clr1 pm3.1              ;089f  71 1b 23     PM31=output (uPD16432B DAT out)
    clr1 pu3.0              ;08a2  71 0b 33     PU30 pull-up resistor disabled (uPD16432B DAT in)
    set1 pm3.0              ;08a5  71 0a 23     PM30=input (uPD16432B DAT in)
    ret                     ;08a8  af


intcsi30_08a9:
;ISR: SPI transfer complete on CSI30 (uPD16432B)
;
;Uses RB2:
;  HL = pointer to buffer to transfer
;   B = total number of bytes to transfer
;   C = number of bytes transferred so far
;
;Flag bit mem_fe5f1.1 sets the data direction:
;  0 = Transmit and receive.  Buffer at HL will be transmitted and
;      overwritten with the bytes received.
;  1 = Transmit only.  Buffer at HL will be transmitted and preserved.
;      Bytes received will be ignored.
;
;Flag bit mem_fe5f.0 indicates completion:
;  0 = Not complete
;  1 = Complete
;
;Code running in the main loop initiates the transfer by setting
;up the values in RB2, initializing the two flag bits above, enabling
;this interrupt, and then sending the first byte itself ("mov sio30,a").
;This ISR then takes over the rest of the transfer and sets mem_fe5f
;when the transfer is complete.
;
    sel rb2                 ;08a9  61 f0        Select register bank used by this ISR
    mov a,sio30             ;08ab  f0 1a        A = SPI byte received
    bt mem_fe5f.1,lab_08b1  ;08ad  9c 5f 01     Branch if SPI direction flag = transmit only
    mov [hl],a              ;08b0  97           Store A in receive buffer

lab_08b1:
    mov a,c                 ;08b1  62           A = number of bytes transferred
    cmp a,b                 ;08b2  61 4b        Is it equal to B (total number of bytes)?
    bz lab_08bd             ;08b4  ad 07          Yes: branch lab_08bd
    incw hl                 ;08b6  86           Increment buffer pointer
    inc c                   ;08b7  42           Increment number of bytes transferred
    mov a,[hl]              ;08b8  87           A = current byte in buffer
    mov sio30,a             ;08b9  f2 1a        Send A out SPI
    br lab_08c9             ;08bb  fa 0c        Branch to SEL RB0 and RETI

lab_08bd:
;All bytes have been transferred
    set1 mem_fe5f.0         ;08bd  0a 5f        SPI packet complete flag = complete
    set1 mk0h.4             ;08bf  71 4a e5     Set CSIMK30 (disables INTCSI30)
    bf mem_fe60.7,lab_08c9  ;08c2  31 73 60 03
    call !sub_2f48          ;08c6  9a 48 2f     p4.3=low, p4.4=low (FIS ENA), disable SIO30,
                            ;                     set mem_fe5e.7, clear mem_fe60.7
                            ;Fall through
lab_08c9:
    sel rb0                 ;08c9  61 d0        Select normal register bank
    reti                    ;08cb  8f


sub_08cc:
;SPI transfer on SIO31 (sends byte in A, receives byte in A)
    clr1 if0h.5             ;08cc  71 5b e1     Clear CSIIF31 (INTCSI31 interrupt flag)
    mov sio31,a             ;08cf  f2 1b
    push bc                 ;08d1  b3
    mov b,#0x00             ;08d2  a3 00

lab_08d4:
    bt if0h.5,lab_08db      ;08d4  31 56 e1 03  Branch if CSIIF31 (INTCSI31 interrupt flag) is set
    dbnz b,lab_08d4         ;08d8  8b fa
    nop                     ;08da  00

lab_08db:
    mov a,sio31             ;08db  f0 1b
    pop bc                  ;08dd  b2
    ret                     ;08de  af


sio31_disable:
;Disable SIO31 (used for CDC RX SPI)
    set1 shadow_p2.2        ;08df  2a cc        CDC CLK = 1
    set1 shadow_p2.1        ;08e1  1a cc
    mov a,shadow_p2         ;08e3  f0 cc
    mov p2,a                ;08e5  f2 02
    mov csim31,#0x00        ;08e7  13 b8 00     SIO31 = operation stopped
    clr1 pm2.2              ;08ea  71 2b 22     PM22 = output (CDC CLK)
    clr1 pm2.1              ;08ed  71 1b 22     PM21 = output
    clr1 pu2.0              ;08f0  71 0b 32     PU20 pull-up resistor disabled
    set1 pm2.0              ;08f3  71 0a 22     PM20 = input (CDC DI)
    ret                     ;08f6  af

;CSI31 is the CD changer interface (CDC)
;Receive packet
intcsi31_08f7:
    push ax                 ;08f7  b1
    push bc                 ;08f8  b3
    push de                 ;08f9  b5
    push hl                 ;08fa  b7
    mov a,!cdc_isr_rx_idx   ;08fb  8e 32 f0
    mov b,a                 ;08fe  73
    mov a,!mem_fb0a         ;08ff  8e 0a fb
    cmp a,#0x00             ;0902  4d 00
    bnz lab_0908            ;0904  bd 02
    mov b,#0x00             ;0906  a3 00

lab_0908:
    xch a,sio31             ;0908  83 1b
    movw hl,#cdc_isr_rx_buf ;090a  16 33 f0
    mov [hl+b],a            ;090d  bb
    inc b                   ;090e  43
    mov a,b                 ;090f  63
    cmp a,#0x08             ;0910  4d 08
    bnz lab_0925_more       ;0912  bd 11

    ;Complete CDC packet received
    mov b,#0x07             ;0914  a3 07
    movw hl,#cdc_isr_rx_buf+1 ;0916  16 34 f0
    movw de,#cdc_rx_buf     ;0919  14 6e fc
lab_091c_loop:
    mov a,[hl]              ;091c  87
    mov [de],a              ;091d  95
    incw hl                 ;091e  86
    incw de                 ;091f  84
    dbnz b,lab_091c_loop    ;0920  8b fa

    set1 mem_fe5f.2         ;0922  2a 5f        ;Set bit = CDC packet available
    mov a,b                 ;0924  63

lab_0925_more:
    mov !cdc_isr_rx_idx,a   ;0925  9e 32 f0
    mov a,#0x04             ;0928  a1 04
    mov !mem_fb0a,a         ;092a  9e 0a fb
    pop hl                  ;092d  b6
    pop de                  ;092e  b4
    pop bc                  ;092f  b2
    pop ax                  ;0930  b0
    reti                    ;0931  8f

sub_0932:
    mov b,a                 ;0932  73
lab_0933:
    mov a,[hl+b]            ;0933  ab
    sub a,#0x01             ;0934  1d 01
    bc lab_0939             ;0936  8d 01

    mov [hl+b],a            ;0938  bb
lab_0939:
    dbnz b,lab_0933         ;0939  8b f8
    ret                     ;093b  af

sub_093c_fb86_csm:
    mov a,#0x55             ;093c  a1 55
    add a,mem_fe2d          ;093e  0e 2d
    add a,mem_fe2f          ;0940  0e 2f
    mov b,#0x0b             ;0942  a3 0b
lab_0944_loop:
    movw hl,#mem_fb85       ;0944  16 85 fb
    add a,[hl+b]            ;0947  31 0b
    movw hl,#mem_fb7a       ;0949  16 7a fb
    add a,[hl+b]            ;094c  31 0b
    dbnz b,lab_0944_loop    ;094e  8b f4
    cmp a,mem_fe2e          ;0950  4e 2e
    mov mem_fe2e,a          ;0952  f2 2e
    ret                     ;0954  af

sub_0955:
    movw hl,#mem_fb7b       ;0955  16 7b fb
    cmp a,[hl+b]            ;0958  31 4b
    bz lab_096b             ;095a  ad 0f
    xch a,b                 ;095c  33
    cmp a,#0x0b             ;095d  4d 0b
    xch a,b                 ;095f  33
    bnc lab_096b            ;0960  9d 09
    xch a,mem_fe2e          ;0962  83 2e
    sub a,[hl+b]            ;0964  31 1b
    add a,mem_fe2e          ;0966  0e 2e
    xch a,mem_fe2e          ;0968  83 2e
    mov [hl+b],a            ;096a  bb

lab_096b:
    ret                     ;096b  af

;CALLT #3 (0x0046)
sub_096c:
    xch a,b                 ;096c  33
    mov a,mem_fe2f          ;096d  f0 2f
    xch a,b                 ;096f  33

sub_0970:
    callf !sub_0955         ;0970  1c 55
    movw hl,#mem_fb86       ;0972  16 86 fb
    mov a,[hl+b]            ;0975  ab
    clr1 a.0                ;0976  61 8b
    set1 a.1                ;0978  61 9a

lab_097a:
    movw hl,#mem_fb86       ;097a  16 86 fb
    cmp a,[hl+b]            ;097d  31 4b
    bz lab_0990             ;097f  ad 0f
    xch a,b                 ;0981  33
    cmp a,#0x0b             ;0982  4d 0b
    bnc lab_0990            ;0984  9d 0a
    xch a,b                 ;0986  33
    xch a,mem_fe2e          ;0987  83 2e
    sub a,[hl+b]            ;0989  31 1b
    add a,mem_fe2e          ;098b  0e 2e
    xch a,mem_fe2e          ;098d  83 2e
    mov [hl+b],a            ;098f  bb

lab_0990:
    ret                     ;0990  af

sub_0991:
    mov a,mem_fe2f          ;0991  f0 2f
    mov b,a                 ;0993  73

;CALLT #0 (0x0040)
sub_0994:
    movw hl,#mem_fb86       ;0994  16 86 fb
    mov a,[hl+b]            ;0997  ab
    and a,#0xfc             ;0998  5d fc
    br lab_097a             ;099a  fa de

sub_099c:
    mov a,mem_fe2f          ;099c  f0 2f
    mov b,a                 ;099e  73
    movw hl,#mem_fb86       ;099f  16 86 fb
    mov a,[hl+b]            ;09a2  ab
    or a,#0x03              ;09a3  6d 03
    br lab_097a             ;09a5  fa d3

;CALLT #4 (0x0048)
sub_09a7:
    xch a,b                 ;09a7  33
    mov a,mem_fe2f          ;09a8  f0 2f
    xch a,b                 ;09aa  33
    and a,#0x07             ;09ab  5d 07
    callf !sub_0955         ;09ad  1c 55
    movw hl,#mem_fb86       ;09af  16 86 fb
    mov a,[hl+b]            ;09b2  ab
    clr1 a.1                ;09b3  61 9b
    set1 a.0                ;09b5  61 8a
    br lab_097a             ;09b7  fa c1

;CALLT #1 (0x0042)
sub_09b9:
    xch a,b                 ;09b9  33
    mov a,mem_fe2f          ;09ba  f0 2f
    xch a,b                 ;09bc  33
    xor a,#0xff             ;09bd  7d ff
    movw hl,#mem_fb86       ;09bf  16 86 fb
    and a,[hl+b]            ;09c2  31 5b
    br lab_097a             ;09c4  fa b4

;CALLT #2 (0x0044)
sub_09c6:
    xch a,b                 ;09c6  33
    mov a,mem_fe2f          ;09c7  f0 2f
    xch a,b                 ;09c9  33
    and a,#0xfc             ;09ca  5d fc
    movw hl,#mem_fb86       ;09cc  16 86 fb
    or a,[hl+b]             ;09cf  31 6b
    br lab_097a             ;09d1  fa a7

sub_09d3:
    or a,mem_fe2d           ;09d3  6e 2d
    br lab_09db             ;09d5  fa 04

sub_09d7:
    xor a,#0xff             ;09d7  7d ff
    and a,mem_fe2d          ;09d9  5e 2d

lab_09db:
    xch a,mem_fe2e          ;09db  83 2e
    sub a,mem_fe2d          ;09dd  1e 2d
    add a,mem_fe2e          ;09df  0e 2e
    xch a,mem_fe2e          ;09e1  83 2e
    mov mem_fe2d,a          ;09e3  f2 2d
    ret                     ;09e5  af

sub_09e6:
;HL = #mem_f1b3, DE = #mem_f202, A = DE - HL
    movw hl,#mem_f1b3       ;09e6  16 b3 f1
    movw de,#mem_f202       ;09e9  14 02 f2
    callf !sub_09ef         ;09ec  1c ef      A = DE - HL
    ret                     ;09ee  af

sub_09ef:
;A = DE - HL
;Does AX = DE - HL but swaps A & X at the end so A=low and X=high.
;Preserves DE and HL.
    movw ax,de              ;09ef  c4
    xch a,x                 ;09f0  30
    sub a,l                 ;09f1  61 1e
    xch a,x                 ;09f3  30
    subc a,h                ;09f4  61 3f
    xch a,x                 ;09f6  30
    ret                     ;09f7  af

sub_09f8:
;Called before read or write EEPROM
;TODO 16 might be the EEPROM page size
    mov a,mem_fed5          ;09f8  f0 d5      A = mem_fed5
    mov b,a                 ;09fa  73         Preserve original mem_fed5 in B
    cmp a,#16+1             ;09fb  4d 11
    bc lab_0a07_lt_17       ;09fd  8d 08      Branch if < 16+1

    ;A >= 16+1
    sub a,#16               ;09ff  1d 10      A = A - 16
    mov mem_fed5,a          ;0a01  f2 d5      mem_fed5 = A
    mov a,#16               ;0a03  a1 10      A = 16
    br lab_0a0c_ret         ;0a05  fa 05      Branch to return

lab_0a07_lt_17:
    ;A < 16+1
    mov a,#0                ;0a07  a1 00      A = 0
    mov mem_fed5,a          ;0a09  f2 d5      mem_fed5 = 0
    mov a,b                 ;0a0b  63         A = Recall original mem_fed5
    ;Fall through to return

lab_0a0c_ret:
    ret                     ;0a0c  af

sub_0a0d:
;A=0x66, mem_fed6=0x66 (difference of #mem_f26c_csum_lo - #mem_f206)
    movw ax,#mem_f26c_csum_lo ;0a0d  10 6c f2
    subw ax,#mem_f206         ;0a10  da 06 f2
    mov a,x                   ;0a13  60
    mov mem_fed6,a            ;0a14  f2 d6
    ret                       ;0a16  af

eeram_copy_all_defaults:
;Copy all of the EEPROM defaults from ROM into the EEPROM area in RAM
;ROM tables copied: mem_0080, mem_00b4, mem_00c6, mem_00cf, mem_00ee
;
;Copy 0x4F bytes from mem_0080 to mem_f1b3
;Copy 0x66 bytes from mem_00cf to mem_f206
    callf !eeram_copy_defaults_1_of_2  ;0a17  2c 1c        Copy 0x4F bytes from mem_0080 to mem_f1b3
    callf !eeram_copy_defaults_2_of_2  ;0a19  2c 2c        Copy 0x66 bytes from mem_00cf to mem_f206
    ret                                ;0a1b  af

eeram_copy_defaults_1_of_2:
;Copy some EEPROM defaults from ROM into the EEPROM area in RAM (1 of 2)
;ROM tables copied: mem_0080, mem_00b4, mem_00c6
;
;Copy 0x4F bytes from mem_0080 to mem_f1b3
    movw hl,#mem_f1b3       ;0a1c  16 b3 f1
    movw de,#mem_f202       ;0a1f  14 02 f2
    callf !sub_09ef         ;0a22  1c ef        A = DE - HL
                            ;                   Results in A=0x4F
    movw hl,#mem_0080       ;0a24  16 80 00     HL = source address
    movw de,#mem_f1b3       ;0a27  14 b3 f1     DE = destination address
    br lab_0a34             ;0a2a  fa 08        Branch to Copy A bytes from [HL] to [DE] and return

eeram_copy_defaults_2_of_2:
;Copy some EEPROM defaults from ROM into the EEPROM area in RAM (2 of 2)
;ROM tables copied: mem_00cf, mem_00ee
;
;Copy 0x66 bytes from mem_00cf to mem_f206
    callf !sub_0a0d         ;0a2c  2c 0d        A=0x66, mem_fed6=0x66 (0x66 = #mem_f26c_csum_lo - #mem_f206)
    movw hl,#mem_00cf       ;0a2e  16 cf 00     HL = source address
    movw de,#mem_f206       ;0a31  14 06 f2     DE = destination address

lab_0a34:
    callf !copy             ;0a34  4c 9e        Copy A bytes from [HL] to [DE]
    ret                     ;0a36  af

sub_0a37:
;Reads 2 bytes from EEPROM at address in HL
;Receives EEPROM address in HL
;If EEPROM read fails, returns carry clear (failure).
;If either byte is 0x55, returns carry set (success).
;TODO Returns some status in Z
;Carry clear = failure, carry set = success
    push de                 ;0a37  b5
    push bc                 ;0a38  b3
    mov b,#0x02             ;0a39  a3 02        B = 2 bytes to read from EEPROM in total
    movw de,#i2c_buf        ;0a3b  14 db fb     DE = destination buffer (only 1 byte used)

lab_0a3e_loop:
    mov a,#0x01             ;0a3e  a1 01        A = 1 byte to read from EEPROM this time
    call !eeprom_read       ;0a40  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bnc lab_0a59_ret        ;0a43  9d 14        Branch if EEPROM read failed.  This will
                            ;                     return carry clear (failure).

    ;EEPROM read succeeded
    ;Carry is clear

    mov a,!i2c_buf          ;0a45  8e db fb     A = byte we just read from the EEPROM
    cmp a,#0x55             ;0a48  4d 55        Is it 0x55?
    bz lab_0a58_not1_cy_ret ;0a4a  ad 0c          Yes: Branch to invert carry, which will return
                            ;                          carry set (success).

    ;Byte read from EEPROM is not 0x55

    dec b                   ;0a4c  53           Decrement bytes to read from EEPROM in total
    bz lab_0a53_b_eq_0      ;0a4d  ad 04

    mov mem_fede,a          ;0a4f  f2 de        Store byte from EEPROM in mem_fede
    br lab_0a3e_loop        ;0a51  fa eb        Do it all again for the second byte

lab_0a53_b_eq_0:
;B reached 0 so 2 bytes have been read from the EEPROM (addresses 0x00c8 and 0x00c9)
    cmp a,mem_fede          ;0a53  4e de
    bz lab_0a5c             ;0a55  ad 05

    set1 cy                 ;0a57  20           Set carry and fall through to invert the carry,
                            ;                     which will return carry clear (failure).
lab_0a58_not1_cy_ret:
    not1 cy                 ;0a58  01

lab_0a59_ret:
    pop bc                  ;0a59  b2
    pop de                  ;0a5a  b4
    ret                     ;0a5b  af

lab_0a5c:
    clr1 psw.6              ;0a5c  6b 1e        Clear the Z flag
    br lab_0a58_not1_cy_ret ;0a5e  fa f8


sub_0a60:
    bf mem_fe63.7,lab_0a7e  ;0a60  31 73 63 1a
    mov a,!mem_f207         ;0a64  8e 07 f2
    bf a.6,lab_0a7e         ;0a67  31 6f 14

    ;Copy 0x47 bytes from mem_00ee to mem_f225
    movw hl,#mem_00ee         ;0a6a  16 ee 00     HL = source address
    movw de,#mem_f225         ;0a6d  14 25 f2     DE = destination address
    movw ax,#mem_f26c_csum_lo ;0a70  10 6c f2     AX = #mem_f26c_csum_lo
    subw ax,#mem_f225         ;0a73  da 25 f2     AX = #mem_f26c_csum_lo - #mem_f225 = 0x47
    mov a,x                   ;0a76  60           A = number of bytes to copy (0x47)
    callf !copy               ;0a77  4c 9e        Copy A bytes from [HL] to [DE]

    call !sub_4053          ;0a79  9a 53 40

    clr1 mem_fe63.6         ;0a7c  6b 63

lab_0a7e:
    ret                     ;0a7e  af


bin_to_bcd:
;Convert AX to BCD, store word in mem_fed4
;
;Called with:
;  A = KWP1281 rx buffer byte 3 (login code high byte)
;  X = KWP1281 rx buffer byte 4 (login code low byte)
;
;Returns:
;  mem_fed4: BCD low byte
;  mem_fed5: BCD high byte
;
    movw mem_fed4,#0x0000   ;0a7f  ee d4 00 00
    mov b,#0x10             ;0a83  a3 10

lab_0a85:
    xch a,x                 ;0a85  30
    rolc a,1                ;0a86  27
    xch a,x                 ;0a87  30
    rolc a,1                ;0a88  27
    push ax                 ;0a89  b1
    mov a,mem_fed4          ;0a8a  f0 d4
    addc a,mem_fed4         ;0a8c  2e d4
    adjba                   ;0a8e  61 80
    mov mem_fed4,a          ;0a90  f2 d4
    mov a,mem_fed5          ;0a92  f0 d5
    addc a,mem_fed5         ;0a94  2e d5
    adjba                   ;0a96  61 80
    mov mem_fed5,a          ;0a98  f2 d5
    pop ax                  ;0a9a  b0
    dbnz b,lab_0a85         ;0a9b  8b e8
    ret                     ;0a9d  af

ror_a_4:
;Rotate A >> 4
    ror a,1                 ;0a9e  24
    ror a,1                 ;0a9f  24
    ror a,1                 ;0aa0  24
    ror a,1                 ;0aa1  24
    ret                     ;0aa2  af

sub_0aa3:
    mov x,#0xff             ;0aa3  a0 ff
    br lab_0aa9             ;0aa5  fa 02

sub_0aa7:
    mov x,#0x00             ;0aa7  a0 00

lab_0aa9:
    mov a,c                 ;0aa9  62
    mov d,a                 ;0aaa  75
    add a,#0x07             ;0aab  0d 07
    and a,#0xf8             ;0aad  5d f8
    ror a,1                 ;0aaf  24
    ror a,1                 ;0ab0  24
    ror a,1                 ;0ab1  24
    mov c,a                 ;0ab2  72
    mov b,#0x00             ;0ab3  a3 00

lab_0ab5:
    mov a,[hl]              ;0ab5  87
    cmp a,#0x00             ;0ab6  4d 00
    bnz lab_0ac0            ;0ab8  bd 06
    incw hl                 ;0aba  86
    inc b                   ;0abb  43
    dbnz c,lab_0ab5         ;0abc  8a f7
    clr1 cy                 ;0abe  21
    ret                     ;0abf  af

lab_0ac0:
    push bc                 ;0ac0  b3
    mov b,#0x00             ;0ac1  a3 00

lab_0ac3:
    inc b                   ;0ac3  43
    rorc a,1                ;0ac4  25
    bnc lab_0ac3            ;0ac5  9d fc
    xch a,b                 ;0ac7  33
    mov c,a                 ;0ac8  72
    xch a,b                 ;0ac9  33
    dec c                   ;0aca  52
    xch a,x                 ;0acb  30
    cmp a,#0x00             ;0acc  4d 00
    xch a,x                 ;0ace  30
    bnz lab_0ad5            ;0acf  bd 04

lab_0ad1:
    rol a,1                 ;0ad1  26
    dbnz b,lab_0ad1         ;0ad2  8b fd
    mov [hl],a              ;0ad4  97

lab_0ad5:
    pop ax                  ;0ad5  b0
    rol a,1                 ;0ad6  26
    rol a,1                 ;0ad7  26
    rol a,1                 ;0ad8  26
    add a,c                 ;0ad9  61 0a
    mov b,a                 ;0adb  73
    cmp a,d                 ;0adc  61 4d
    ret                     ;0ade  af

sub_0adf:
    push ax                 ;0adf  b1
    push de                 ;0ae0  b5
    movw de,ax              ;0ae1  d4
    decw hl                 ;0ae2  96
    mov a,[hl]              ;0ae3  87
    cmp a,#0x00             ;0ae4  4d 00
    mov b,a                 ;0ae6  73
    bz lab_0afd             ;0ae7  ad 14
    dec a                   ;0ae9  51
    mov c,a                 ;0aea  72
    add a,c                 ;0aeb  61 0a
    mov c,a                 ;0aed  72

lab_0aee:
    mov a,[hl+c]            ;0aee  aa
    dec c                   ;0aef  52
    xch a,x                 ;0af0  30
    mov a,[hl+c]            ;0af1  aa
    xch a,x                 ;0af2  30
    dec c                   ;0af3  52
    call !sub_0b02          ;0af4  9a 02 0b
    bc lab_0afe             ;0af7  8d 05
    bz lab_0afe             ;0af9  ad 03
    dbnz b,lab_0aee         ;0afb  8b f1

lab_0afd:
    inc b                   ;0afd  43

lab_0afe:
    dec b                   ;0afe  53
    pop de                  ;0aff  b4
    pop ax                  ;0b00  b0
    ret                     ;0b01  af

sub_0b02:
    cmp a,d                 ;0b02  61 4d
    bc lab_0b0c             ;0b04  8d 06
    bnz lab_0b0c            ;0b06  bd 04
    xch a,x                 ;0b08  30
    cmp a,e                 ;0b09  61 4c
    xch a,x                 ;0b0b  30

lab_0b0c:
    ret                     ;0b0c  af

table_find_byte:
;Find A in table [HL] and load its position in B
;
;Called with:
;  A = byte to find in the table
;  HL = first entry in table of bytes
;       note: the byte before it must be the table size
;
;On success:
;  Carry = set
;  B = index of the byte in the table
;  HL = pointer to the byte in the table
;
;On failure:
;  Carry = clear
;  B = 0xFF
;  HL = pointer to the last byte in the table + 1
;
    mov c,a                 ;0b0d  72       C = byte to find in table
    decw hl                 ;0b0e  96       HL = back up to read number of bytes in table
    mov a,[hl]              ;0b0f  87       A = number of table entries
    incw hl                 ;0b10  86       HL = forward to point to first entry again

    ;XXX redundant swaps can be removed
    xch a,c                 ;0b11  32       Swap A and C so that:
                            ;                 A = byte to find in table
                            ;                 C = number of table entries
    xch a,c                 ;0b12  32       Swap A and C again so that:
                            ;                 A = number of table entries
                            ;                 C = byte to find in table

    cmp a,#0x00             ;0b13  4d 00    Number of table entries zero?

    xch a,c                 ;0b15  32       Swap A and C so that:
                            ;                 A = byte to find in table
                            ;                 C = number of table entries

    bz lab_0b21             ;0b16  ad 09    Branch if number of table entries is zero

    ;Number of table entries is not zero

    mov b,#0x00             ;0b18  a3 00
lab_0b1a:
    cmp a,[hl]              ;0b1a  4f       Compare A to current table entry
    bz lab_0b24             ;0b1b  ad 07    Branch if equal

    incw hl                 ;0b1d  86       Increment table pointer
    inc b                   ;0b1e  43       Increment current table index
    dbnz c,lab_0b1a         ;0b1f  8a f9    Decrement entries remaining and loop until end

lab_0b21:
    ;Table empty or byte not found
    mov b,#0xff             ;0b21  a3 ff
    set1 cy                 ;0b23  20
    ;Fall through

lab_0b24:
    ;Byte found in table or fell through
    not1 cy                 ;0b24  01
    ret                     ;0b25  af

sub_0b26:
    mov a,#0xff             ;0b26  a1 ff
    br lab_0b2c             ;0b28  fa 02

lab_0b2a:
    mov a,#0x00             ;0b2a  a1 00

lab_0b2c:
    push bc                 ;0b2c  b3
    push de                 ;0b2d  b5
    mov e,a                 ;0b2e  74
    mov a,b                 ;0b2f  63
    cmp a,c                 ;0b30  61 4a
    bnc lab_0b55            ;0b32  9d 21
    ror a,1                 ;0b34  24
    ror a,1                 ;0b35  24
    ror a,1                 ;0b36  24
    and a,#0x1f             ;0b37  5d 1f
    mov c,a                 ;0b39  72
    mov a,[hl+c]            ;0b3a  aa
    mov d,a                 ;0b3b  75
    mov a,b                 ;0b3c  63
    and a,#0x07             ;0b3d  5d 07
    mov b,a                 ;0b3f  73
    push hl                 ;0b40  b7
    movw hl,#mem_af75_patterns ;0b41  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;0b44  ab
    pop hl                  ;0b45  b6
    xch a,e                 ;0b46  34
    cmp a,#0x00             ;0b47  4d 00
    mov a,e                 ;0b49  64
    bz lab_0b50             ;0b4a  ad 04
    or a,d                  ;0b4c  61 6d
    br lab_0b54             ;0b4e  fa 04

lab_0b50:
    xor a,#0xff             ;0b50  7d ff
    and a,d                 ;0b52  61 5d

lab_0b54:
    mov [hl+c],a            ;0b54  ba

lab_0b55:
    pop de                  ;0b55  b4
    pop bc                  ;0b56  b2
    ret                     ;0b57  af

sub_0b58:
    mulu x                  ;0b58  31 88        AX = A * X
    push bc                 ;0b5a  b3
    xch a,c                 ;0b5b  32
    clr1 cy                 ;0b5c  21
    rorc a,1                ;0b5d  25
    add x,a                 ;0b5e  61 00
    mov a,c                 ;0b60  62
    addc a,#0x00            ;0b61  2d 00
    pop bc                  ;0b63  b2
    divuw c                 ;0b64  31 82        AX = AX / C
    mov a,x                 ;0b66  60
    ret                     ;0b67  af

sub_0b68:
    set1 cy                 ;0b68  20
    br lab_0b6c             ;0b69  fa 01

lab_0b6b:
    clr1 cy                 ;0b6b  21

lab_0b6c:
    push bc                 ;0b6c  b3
    push psw                ;0b6d  22
    and a,#0x0f             ;0b6e  5d 0f
    xch a,b                 ;0b70  33
    clr1 cy                 ;0b71  21
    rorc a,1                ;0b72  25
    push psw                ;0b73  22
    xch a,b                 ;0b74  33
    mov c,a                 ;0b75  72
    mov a,[hl+b]            ;0b76  ab
    pop psw                 ;0b77  23
    bnc lab_0b81            ;0b78  9d 07
    and a,#0x0f             ;0b7a  5d 0f
    xch a,c                 ;0b7c  32
    callf !ror_a_4          ;0b7d  2c 9e        A = A >> 4
    br lab_0b83             ;0b7f  fa 02

lab_0b81:
    and a,#0xf0             ;0b81  5d f0

lab_0b83:
    or a,c                  ;0b83  61 6a
    pop psw                 ;0b85  23
    bnc lab_0b8d            ;0b86  9d 05
    call !eeram_wr_byte_hl_b;0b88  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    br lab_0b8e             ;0b8b  fa 01

lab_0b8d:
    mov [hl+b],a            ;0b8d  bb

lab_0b8e:
    pop bc                  ;0b8e  b2
    ret                     ;0b8f  af


sub_0b90:
;Convert lower nibble of A to hexadecimal digit in ASCII
;
;XXX redundant: a less efficient version of this subroutine can
;be found at sub_6809 that also has many identical copies.
;
    and a,#0x0f             ;0b90  5d 0f
    cmp a,#0x0a             ;0b92  4d 0a
    bnc lab_0b99            ;0b94  9d 03      Branch if A >= 0x0A
    add a,#'0               ;0b96  0d 30      Convert to ASCII '0'-'9'
    ret                     ;0b98  af
lab_0b99:
    add a,#'7               ;0b99  0d 37      Convert to ASCII 'A'-'F'
    ret                     ;0b9b  af


;XXX appears unused
sub_0b9c:
;CDE = C * DE
;Examples:
;  BC=0x0000, DE=0x0000 -> BC=0x0000, DE=0x0000  (0x00 * 0x0000 = 0x000000)
;  BC=0x0002, DE=0x1234 -> BC=0x0000, DE=0x2468  (0x02 * 0x1234 = 0x002468)
;  BC=0x00FF, DE=0xFFFF -> BC=0x00FE, DE=0xFF01  (0xFF * 0xFFFF = 0xFEFF01)
;Preserves B, HL.
;Destroys AX.
    movw ax,bc              ;0b9c  c2
    mov a,e                 ;0b9d  64
    mulu x                  ;0b9e  31 88        AX = A * X
    xchw ax,de              ;0ba0  e4
    xch a,x                 ;0ba1  30
    mov a,c                 ;0ba2  62
    mulu x                  ;0ba3  31 88        AX = A * X
    xch a,x                 ;0ba5  30
    add d,a                 ;0ba6  61 05
    mov a,x                 ;0ba8  60
    addc a,#0x00            ;0ba9  2d 00
    mov c,a                 ;0bab  72
    ret                     ;0bac  af

sub_0bad:
    mov a,mem_fed4          ;0bad  f0 d4
    mov x,a                 ;0baf  70
    mov a,mem_fed6          ;0bb0  f0 d6
    mulu x                  ;0bb2  31 88        AX = A * X
    movw de,ax              ;0bb4  d4
    movw bc,#0x0000         ;0bb5  12 00 00
    mov a,mem_fed4          ;0bb8  f0 d4
    mov x,a                 ;0bba  70
    mov a,mem_fed7          ;0bbb  f0 d7
    mulu x                  ;0bbd  31 88        AX = A * X
    xch a,x                 ;0bbf  30
    add d,a                 ;0bc0  61 05
    mov a,x                 ;0bc2  60
    addc c,a                ;0bc3  61 22
    mov a,mem_fed5          ;0bc5  f0 d5
    mov x,a                 ;0bc7  70
    mov a,mem_fed6          ;0bc8  f0 d6
    mulu x                  ;0bca  31 88        AX = A * X
    xch a,x                 ;0bcc  30
    add d,a                 ;0bcd  61 05
    mov a,x                 ;0bcf  60
    addc c,a                ;0bd0  61 22
    mov a,#0x00             ;0bd2  a1 00
    addc b,a                ;0bd4  61 23
    mov a,mem_fed5          ;0bd6  f0 d5
    mov x,a                 ;0bd8  70
    mov a,mem_fed7          ;0bd9  f0 d7
    mulu x                  ;0bdb  31 88        AX = A * X
    xch a,x                 ;0bdd  30
    add c,a                 ;0bde  61 02
    mov a,x                 ;0be0  60
    addc b,a                ;0be1  61 23
    ret                     ;0be3  af


sub_0be4:
;Convert A to two ASCII hex digits in AX
;A=ASCII hex digit for high nibble, X=ASCII hex digit for low nibble
    mov x,a                 ;0be4  70           Remember original A in X
    callf !sub_0b90         ;0be5  3c 90        Convert A lower nibble to ASCII hex digit
    xch a,x                 ;0be7  30           Store ASCII for lower nibble in X, Recall original A
    ror a,1                 ;0be8  24
    ror a,1                 ;0be9  24
    ror a,1                 ;0bea  24
    ror a,1                 ;0beb  24
    br !sub_0b90            ;0bec  9b 90 0b     Convert A lower nibble to ASCII hex digit


sub_0bef:
    mov x,#0x55             ;0bef  a0 55
    set1 cy                 ;0bf1  20
    br lab_0bf7             ;0bf2  fa 03

lab_0bf4:
    mov x,#0x55             ;0bf4  a0 55

;Unknown
;Called with HL=address, DE=address, and B=number of bytes
;Adds something in [HL+...]
;Reads one byte from [DE], Writes ony byte to [DE]
sub_0bf6:
    clr1 cy                 ;0bf6  21

lab_0bf7:
    push psw                ;0bf7  22
    decw hl                 ;0bf8  96

lab_0bf9_loop:
    mov a,[hl+b]            ;0bf9  ab
    add x,a                 ;0bfa  61 00
    dbnz b,lab_0bf9_loop    ;0bfc  8b fb

    incw hl                 ;0bfe  86
    mov a,[de]              ;0bff  85
    pop psw                 ;0c00  23
    bc lab_0c05_cs          ;0c01  8d 02

    xch a,x                 ;0c03  30
    mov [de],a              ;0c04  95

lab_0c05_cs:
    bf mem_fe31.0,lab_0c0a_done  ;0c05  31 03 31 01
    mov a,x                 ;0c09  60

lab_0c0a_done:
    cmp a,x                 ;0c0a  61 48
    ret                     ;0c0c  af

sub_0c0d:
    mov x,#0x55             ;0c0d  a0 55
    set1 cy                 ;0c0f  20
    br lab_0c15             ;0c10  fa 03

sub_0c12:
    mov x,#0x55             ;0c12  a0 55
    clr1 cy                 ;0c14  21

lab_0c15:
    mov b,a                 ;0c15  73
    push psw                ;0c16  22
    decw hl                 ;0c17  96

    mov a,#0x00             ;0c18  a1 00
lab_0c1a_loop:
    mov mem_feda,a          ;0c1a  f2 da
    mov a,[hl+b]            ;0c1c  ab
    add x,a                 ;0c1d  61 00
    mov a,mem_feda          ;0c1f  f0 da
    addc a,#0x00            ;0c21  2d 00
    dbnz b,lab_0c1a_loop    ;0c23  8b f5

    movw mem_fede,ax        ;0c25  99 de
    movw ax,de              ;0c27  c4
    movw hl,ax              ;0c28  d6
    mov a,[hl]              ;0c29  87
    xch a,x                 ;0c2a  30
    mov a,[hl+0x01]         ;0c2b  ae 01
    movw mem_fedc,ax        ;0c2d  99 dc
    movw ax,mem_fede        ;0c2f  89 de
    pop psw                 ;0c31  23
    bc lab_0c39             ;0c32  8d 05
    xch a,x                 ;0c34  30
    mov [hl],a              ;0c35  97
    xch a,x                 ;0c36  30
    mov [hl+0x01],a         ;0c37  be 01

lab_0c39:
    bf mem_fe31.0,lab_0c3f  ;0c39  31 03 31 02
    movw ax,mem_fedc        ;0c3d  89 dc

lab_0c3f:
    xch a,x                 ;0c3f  30
    cmp a,mem_fedc          ;0c40  4e dc
    bnz lab_0c47            ;0c42  bd 03
    xch a,x                 ;0c44  30
    cmp a,mem_fedd          ;0c45  4e dd

lab_0c47:
    ret                     ;0c47  af


table_get_word:
;Load DE with word at position B in table [HL]
;
;Called with:
;  HL = first entry in table of words
;       note: the byte before it must be the table size
;  B = index of byte to retrieve
;
;Returns:
;  DE = word from table
;  carry set = failed (B is out of range), carry clear = success
;
    decw hl                 ;0c48  96       HL = back up to read number of words in table
    mov a,[hl]              ;0c49  87       A = number of words in table
    incw hl                 ;0c4a  86       HL = forward again to the first entry
    cmp b,a                 ;0c4b  61 43
    bnc lab_0c62            ;0c4d  9d 13
    mov a,b                 ;0c4f  63
    push hl                 ;0c50  b7
    clr1 cy                 ;0c51  21
    rolc a,1                ;0c52  27
    bnc lab_0c56            ;0c53  9d 01
    inc h                   ;0c55  47

lab_0c56:
    add l,a                 ;0c56  61 06
    bnc lab_0c5b            ;0c58  9d 01
    inc h                   ;0c5a  47

lab_0c5b:
    mov a,[hl]              ;0c5b  87
    mov e,a                 ;0c5c  74       E = low byte of word from table
    mov a,[hl+0x01]         ;0c5d  ae 01
    mov d,a                 ;0c5f  75       D = high byte of word from table
    pop hl                  ;0c60  b6
    set1 cy                 ;0c61  20

lab_0c62:
    not1 cy                 ;0c62  01
    ret                     ;0c63  af


;XXX appears unused
table_get_nib:
;Load A with nibble at position B in table [HL]
;
;Call with:
;  HL = address of table
;       note: the byte before it must be the table size in nibbles
;  B = index of nibble in table
;
;Returns:
;  A = nibble from table (in low nibble, high nibble zero)
;  carry set = failed (B is out of range), carry clear = success
;
;Preserves X, BC, DE, HL.
;
;Example:
;  0xFB00  4          HL=0xFB01,B=0 -> A=0x0A, CY=0
;  0xFB01  0xBA       HL=0xFB01,B=1 -> A=0x0B, CY=0
;  0xFB02  0xDC       HL=0xFB01,B=2 -> A=0x0C, CY=0
;                     HL=0xFB01,B=3 -> A=0x0D, CY=0
;                     HL=0xFB01,B=4 -> CY=1 (failed)
;
    decw hl                 ;0c64  96
    mov a,[hl]              ;0c65  87
    incw hl                 ;0c66  86
    cmp b,a                 ;0c67  61 43
    bnc lab_0c7b            ;0c69  9d 10

sub_0c6b:
    push bc                 ;0c6b  b3
    mov a,b                 ;0c6c  63
    clr1 cy                 ;0c6d  21
    rorc a,1                ;0c6e  25
    mov c,a                 ;0c6f  72
    mov a,[hl+c]            ;0c70  aa
    bnc lab_0c77            ;0c71  9d 04
    ror a,1                 ;0c73  24
    ror a,1                 ;0c74  24
    ror a,1                 ;0c75  24
    ror a,1                 ;0c76  24

lab_0c77:
    pop bc                  ;0c77  b2
    and a,#0x0f             ;0c78  5d 0f
    set1 cy                 ;0c7a  20

lab_0c7b:
    not1 cy                 ;0c7b  01
    ret                     ;0c7c  af


table_get_byte:
;Load A with byte at position B in table [HL]
;
;Called with:
;  HL = first entry in table of bytes
;       note: the byte before it must be the table size
;  B = index of byte to retrieve
;
;Returns:
;  A = byte from table
;  carry set = failed (B is out of range), carry clear = success
;
    decw hl                 ;0c7d  96       HL = back up to read number of bytes in table
    mov a,[hl]              ;0c7e  87       A = number of bytes in table
    incw hl                 ;0c7f  86       HL = forward again to the first entry
    cmp b,a                 ;0c80  61 43
    bnc lab_0c85            ;0c82  9d 01    Branch if out of range
    mov a,[hl+b]            ;0c84  ab
lab_0c85:
    not1 cy                 ;0c85  01
    ret                     ;0c86  af


;XXX appears unused
sub_0c87:
    push bc                 ;0c87  b3
    mov a,b                 ;0c88  63
    ror a,1                 ;0c89  24
    ror a,1                 ;0c8a  24
    ror a,1                 ;0c8b  24
    and a,#0x1f             ;0c8c  5d 1f
    mov c,a                 ;0c8e  72
    mov a,[hl+c]            ;0c8f  aa
    xch a,b                 ;0c90  33
    and a,#0x07             ;0c91  5d 07
    push hl                 ;0c93  b7
    movw hl,#mem_af75_patterns ;0c94  16 75 af     HL = pointer to table of bit patterns
    mov c,a                 ;0c97  72
    mov a,[hl+c]            ;0c98  aa
    pop hl                  ;0c99  b6
    and a,b                 ;0c9a  61 5b
    pop bc                  ;0c9c  b2
    ret                     ;0c9d  af


copy:
;Copy A bytes from [HL] to [DE]
;
;Preserves X, BC.
;
;Returns:
;  A = last byte copied
;  HL = pointer to next byte after area read
;  DE = pointer to next byte after area written
;
    push bc                 ;0c9e  b3
    mov b,a                 ;0c9f  73
    cmp a,#0x00             ;0ca0  4d 00
    bz lab_0caa_done        ;0ca2  ad 06
lab_0ca4_loop:
    mov a,[hl]              ;0ca4  87
    mov [de],a              ;0ca5  95
    incw hl                 ;0ca6  86
    incw de                 ;0ca7  84
    dbnz b,lab_0ca4_loop    ;0ca8  8b fa
lab_0caa_done:
    pop bc                  ;0caa  b2
    ret                     ;0cab  af


;XXX appears unused
sub_0cac:
;Swap A bytes between [HL] and [DE]
    push bc                 ;0cac  b3
    push de                 ;0cad  b5
    push hl                 ;0cae  b7
    mov b,a                 ;0caf  73
    cmp a,#0x00             ;0cb0  4d 00
    bz lab_0cbb_done        ;0cb2  ad 07
lab_0cb4_loop:
    mov a,[hl]              ;0cb4  87
    xch a,[de]              ;0cb5  05
    mov [hl],a              ;0cb6  97
    incw hl                 ;0cb7  86
    incw de                 ;0cb8  84
    dbnz b,lab_0cb4_loop    ;0cb9  8b f9
lab_0cbb_done:
    pop hl                  ;0cbb  b6
    pop de                  ;0cbc  b4
    pop bc                  ;0cbd  b2
    ret                     ;0cbe  af


;XXX appears unused
sub_0cbf:
    push ax                 ;0cbf  b1
    add a,#0x80             ;0cc0  0d 80
    xch a,x                 ;0cc2  30
    add a,#0x80             ;0cc3  0d 80
    xch a,x                 ;0cc5  30
    cmp a,x                 ;0cc6  61 48
    pop ax                  ;0cc8  b0
    ret                     ;0cc9  af


compare:
;Compare A bytes between [HL] and [DE]
;Sets Z flag if equal, clears Z flag if not equal
    push bc                 ;0cca  b3
    mov b,a                 ;0ccb  73
    cmp a,#0x00             ;0ccc  4d 00
    bz lab_0cd8             ;0cce  ad 08
lab_0cd0:
    mov a,[de]              ;0cd0  85
    cmp a,[hl]              ;0cd1  4f
    bnz lab_0cd8            ;0cd2  bd 04
    incw hl                 ;0cd4  86
    incw de                 ;0cd5  84
    dbnz b,lab_0cd0         ;0cd6  8b f8
lab_0cd8:
    pop bc                  ;0cd8  b2
    ret                     ;0cd9  af


fill_with_0:
;Fill B bytes in buffer [HL] with 0
    mov a,#0x00             ;0cda  a1 00


fill_with_a:
;Fill B bytes in buffer [HL] with A
    xch a,b                 ;0cdc  33
    cmp a,#0x00             ;0cdd  4d 00
    xch a,b                 ;0cdf  33
    bz lab_0ce7_ret         ;0ce0  ad 05
    decw hl                 ;0ce2  96
lab_0ce3_loop:
    mov [hl+b],a            ;0ce3  bb
    dbnz b,lab_0ce3_loop    ;0ce4  8b fd
    incw hl                 ;0ce6  86
lab_0ce7_ret:
    ret                     ;0ce7  af


sub_0ce8:
;TODO CDC related (see lab_dbee)
;Called with cdc_r_track, cdc_r_minutes, cdc_r_seconds byte from RX buf
;Returns some status in carry
    cmp a,#0xa0             ;0ce8  4d a0
    bnc lab_0cf2_not_cy_ret ;0cea  9d 06
    push ax                 ;0cec  b1
    and a,#0x0f             ;0ced  5d 0f
    cmp a,#0x0a             ;0cef  4d 0a
    pop ax                  ;0cf1  b0
lab_0cf2_not_cy_ret:
    not1 cy                 ;0cf2  01
    ret                     ;0cf3  af


bin_a_to_bcd_ax:
;Convert binary number in A to BCD number in AX
;Example: A=123 -> AX=0x0123
    push de                 ;0cf4  b5
    movw de,#0x0000         ;0cf5  14 00 00
    mov b,#0x08             ;0cf8  a3 08
lab_0cfa:
    rolc a,1                ;0cfa  27
    mov x,a                 ;0cfb  70
    mov a,e                 ;0cfc  64
    addc a,e                ;0cfd  61 2c
    adjba                   ;0cff  61 80
    mov e,a                 ;0d01  74
    mov a,d                 ;0d02  65
    addc a,d                ;0d03  61 2d
    mov d,a                 ;0d05  75
    mov a,x                 ;0d06  60
    dbnz b,lab_0cfa         ;0d07  8b f1
    movw ax,de              ;0d09  c4
    pop de                  ;0d0a  b4
    ret                     ;0d0b  af


;XXX appears unused
sub_0d0c:
;Convert BCD number in BC to four ASCII digits, backwards, at 0xFEDA.
;If the hundreds or thousands place is 0, use a space instead of "0".
;
;Examples:
;  BC=0x0000 -> 0xFEDA-0xFEDD: "00  "
;  BC=0x0001 -> 0xFEDA-0xFEDD: "01  "
;  BC=0x0012 -> 0xFEDA-0xFEDD: "21  "
;  BC=0x0123 -> 0xFEDA-0xFEDD: "321 "
;  BC=0x1234 -> 0xFEDA-0xFEDD: "4321"
;
    mov a,c                 ;0d0c  62
    and a,#0x0f             ;0d0d  5d 0f
    add a,#0x30             ;0d0f  0d 30
    mov mem_feda,a          ;0d11  f2 da
    mov a,c                 ;0d13  62
    ror a,1                 ;0d14  24
    ror a,1                 ;0d15  24
    ror a,1                 ;0d16  24
    ror a,1                 ;0d17  24
    and a,#0x0f             ;0d18  5d 0f
    add a,#'0               ;0d1a  0d 30
    mov mem_fedb,a          ;0d1c  f2 db
    movw mem_fedc,#0x2020   ;0d1e  ee dc 20 20    two space characters
    mov a,b                 ;0d22  63
    cmp a,#0x00             ;0d23  4d 00
    bz lab_0d3a_ret         ;0d25  ad 13
    and a,#0x0f             ;0d27  5d 0f
    add a,#'0               ;0d29  0d 30
    mov mem_fedc,a          ;0d2b  f2 dc
    mov a,b                 ;0d2d  63
    and a,#0xf0             ;0d2e  5d f0
    bz lab_0d3a_ret         ;0d30  ad 08
    ror a,1                 ;0d32  24
    ror a,1                 ;0d33  24
    ror a,1                 ;0d34  24
    ror a,1                 ;0d35  24
    add a,#'0               ;0d36  0d 30
    mov mem_fedd,a          ;0d38  f2 dd
lab_0d3a_ret:
    ret                     ;0d3a  af


sub_0d3b:
;Helper subroutine used only by sub_0d49
    mov x,a                 ;0d3b  70
    and a,#0x0f             ;0d3c  5d 0f
    xch a,x                 ;0d3e  30
    and a,#0xf0             ;0d3f  5d f0
    ror a,1                 ;0d41  24
    add x,a                 ;0d42  61 00
    ror a,1                 ;0d44  24
    ror a,1                 ;0d45  24
    add a,x                 ;0d46  61 08
    ret                     ;0d48  af


sub_0d49:
;Convert BCD number in AX to binary
;Example: AX=0x1234 -> AX=0x04D2
    push ax                 ;0d49  b1
    mov a,x                 ;0d4a  60
    callf !sub_0d3b         ;0d4b  5c 3b
    mov c,a                 ;0d4d  72
    pop ax                  ;0d4e  b0
    callf !sub_0d3b         ;0d4f  5c 3b
    mov x,#0x64             ;0d51  a0 64
    mulu x                  ;0d53  31 88        AX = A * X
    mov b,a                 ;0d55  73
    mov a,c                 ;0d56  62
    add a,x                 ;0d57  61 08
    mov x,a                 ;0d59  70
    mov a,b                 ;0d5a  63
    addc a,#0x00            ;0d5b  2d 00
    ret                     ;0d5d  af


;XXX appears unused
sub_0d5e:
;HL = HL + (A * X)
    mulu x                  ;0d5e  31 88      AX = A * X
                            ;Fall through

add_ax_to_hl:
;HL = HL + AX, preserves AX
;Example: HL=0x1234, AX=0x0101 -> HL=0x1335, AX=0x0101
    xch a,x                 ;0d60  30
    add l,a                 ;0d61  61 06
    xch a,x                 ;0d63  30
    addc h,a                ;0d64  61 27
    ret                     ;0d66  af


add_a_to_hl:
;HL = HL + A
    add l,a                 ;0d67  61 06
    bnc lab_0d6c            ;0d69  9d 01
    inc h                   ;0d6b  47
lab_0d6c:
    ret                     ;0d6c  af


add_b_to_hl:
;HL = HL + B
    xch a,b                 ;0d6d  33
    add l,a                 ;0d6e  61 06
    bnc lab_0d73            ;0d70  9d 01
    inc h                   ;0d72  47
lab_0d73:
    xch a,b                 ;0d73  33
    ret                     ;0d74  af


badisr_0d75:
;Force cold start
;Handles any unexpected interrupt, unexpected CALLT, or the BRK instruction
;Handles watchdog interrupt INTWDT
;Handles watch timer interrupt INTWTN0 (should never occur)
;kwp_7c_1b_2f also branches here
    clr1 shadow_p9.7        ;0d75  7b d3
    clr1 pm9.7              ;0d77  71 7b 29
    mov a,shadow_p9         ;0d7a  f0 d3
    mov p9,a                ;0d7c  f2 09
    mov a,#0x00             ;0d7e  a1 00
    mov !mem_f18e,a         ;0d80  9e 8e f1     Clear cookie to cause a cold start
    mov wdtm,#wd_run_rst    ;0d83  13 f9 98     (Re-)Start watchdog in mode 2 (RESET when watchdog fires)
lab_0d86_wait:
    br lab_0d86_wait        ;0d86  fa fe        Loop forever until watchdog fires, causing RESET


rst_0d88:
;RESET occurred
    di                      ;0d88  7b 1e
    mov wdcs,#wd_clk_250ms  ;0d8a  13 42 07     Watchdog clock select = watchdog fires after 250ms
    mov wdtm,#wd_run_nmi    ;0d8d  13 f9 90     (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
    mov pcc,#0x00           ;0d90  13 fb 00
    movw sp,#stack_top      ;0d93  ee 1c 1f fe  Initialize stack pointer (stack grows down)

    clr1 shadow_p3.4        ;0d97  4b cd        P34 = 0
    clr1 pm3.4              ;0d99  71 4b 23     PM34 = output
    mov a,shadow_p3         ;0d9c  f0 cd
    mov p3,a                ;0d9e  f2 03

    clr1 shadow_p4.6        ;0da0  6b ce        uPD16432B /LCDOFF = 0 (turns LCD off)
    clr1 pm4.6              ;0da2  71 6b 24     PM46 = output
    mov a,shadow_p4         ;0da5  f0 ce
    mov p4,a                ;0da7  f2 04

    mov a,#0x01             ;0da9  a1 01
    callf !sub_09d7         ;0dab  1c d7
    call !sub_3781          ;0dad  9a 81 37
    call !sub_375d          ;0db0  9a 5d 37
    mov a,#0x00             ;0db3  a1 00
    mov !mem_f18b,a         ;0db5  9e 8b f1
    set1 mem_fe7d.1         ;0db8  1a 7d
    clr1 mem_fe69.0         ;0dba  0b 69

    clr1 pm7.0              ;0dbc  71 0b 27
    clr1 shadow_p7.0        ;0dbf  0b d1
    mov a,shadow_p7         ;0dc1  f0 d1
    mov p7,a                ;0dc3  f2 07

    call !sub_4076          ;0dc5  9a 76 40
    bz cold_or_warm_start   ;0dc8  ad 05

    mov a,#0x00             ;0dca  a1 00
    mov !mem_f18e,a         ;0dcc  9e 8e f1     Clear cookie to cause a cold start

cold_or_warm_start:
;Perform some init then do either a cold or warm start
    mov ixs,#0x08           ;0dcf  13 f4 08     Internal expansion RAM size = 2048 bytes
    mov ims,#0xcf           ;0dd2  13 f0 cf     Internal high-speed RAM size = 1024 bytes

    movw sp,#stack_top      ;0dd5  ee 1c 1f fe  Initialize stack pointer (stack grows down)

    mov a,#wd_clk_250ms     ;0dd9  a1 07
    mov wdcs,a              ;0ddb  f6 42        Watchdog clock select = watchdog fires after 250ms
    mov a,#wd_run_nmi       ;0ddd  a1 90        (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
    mov wdtm,a              ;0ddf  f6 f9        Set watchdog mode

    clr1 shadow_p9.7        ;0de1  7b d3
    clr1 pm9.7              ;0de3  71 7b 29
    mov a,shadow_p9         ;0de6  f0 d3
    mov p9,a                ;0de8  f2 09

    clr1 pu0.2              ;0dea  71 2b 30
    set1 pm0.2              ;0ded  71 2a 20
    clr1 mk0l.3             ;0df0  71 3b e4     Clear PMK2 (enables INTP2)
    clr1 pr0l.3             ;0df3  71 3b e8     Clear INTP2 (makes INTP2 high priority)
    clr1 egn.2              ;0df6  71 2b 49     Clear EGN2 (disables INTP2 on falling edge)
    set1 egp.2              ;0df9  71 2a 48     Set EGP2 (enables INTP2 on rising edge)

    ;Inspect RAM to see if we can warm start

    callf !sub_093c_fb86_csm;0dfc  1c 3c        Checksum 11 bytes at 0xfb86
    bnz cold_start          ;0dfe  bd 1b        Branch to cold start if check failed

    mov a,#0x55             ;0e00  a1 55
    cmp a,!mem_f18e         ;0e02  48 8e f1
    bnz cold_start          ;0e05  bd 14        Branch to cold start if check failed
    cmp a,!stack_bottom     ;0e07  48 a5 fc
    bnz cold_start          ;0e0a  bd 0f        Branch to cold start if check failed

    mov a,#0xaa             ;0e0c  a1 aa
    cmp a,!stack_top        ;0e0e  48 1f fe
    bnz cold_start          ;0e11  bd 08        Branch to cold start if check failed
    cmp a,!mem_fb91         ;0e13  48 91 fb
    bnz cold_start          ;0e16  bd 03        Branch to cold start if check failed

    ;RAM is intact so we can warm start

    br !warm_start          ;0e18  9b 13 0f

cold_start:
;Cold start the system
;Wipes all RAM and starts fresh.
    di                      ;0e1b  7b 1e
    mov a,#wd_clk_250ms     ;0e1d  a1 07
    mov wdcs,a              ;0e1f  f6 42        Watchdog clock select = watchdog fires after 250ms
    mov a,#wd_run_nmi       ;0e21  a1 90        (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
    mov wdtm,a              ;0e23  f6 f9        Set watchdog mode

    ;Clear RAM: most of High Speed RAM
    ;Almost 1K: 0xFB00 - 0xFECA
    ;Includes the stack area, stops before peripheral register shadows
    movw hl,#mem_fb00       ;0e25  16 00 fb
    mov a,#0x00             ;0e28  a1 00
lab_0e2a_loop:
    mov [hl],a              ;0e2a  97
    incw hl                 ;0e2b  86
    xchw ax,hl              ;0e2c  e6
    cmpw ax,#shadow_p0      ;0e2d  ea cb fe     Stop at GPIO shadow locations
    xchw ax,hl              ;0e30  e6
    bc lab_0e2a_loop        ;0e31  8d f7

    mov wdtm,#wd_run_nmi    ;0e33  13 f9 90     (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)

    ;Clear RAM: all of Expansion RAM
    ;2K: 0xF000 - 0xF7FF
    movw hl,#mem_f000       ;0e36  16 00 f0
lab_0e39_loop:
    mov [hl],a              ;0e39  97
    incw hl                 ;0e3a  86
    xchw ax,hl              ;0e3b  e6
    cmpw ax,#mem_f000+0x800 ;0e3c  ea 00 f8     Stop at end of Expansion RAM
    xchw ax,hl              ;0e3f  e6
    bc lab_0e39_loop        ;0e40  8d f7

    mov wdtm,#wd_run_nmi    ;0e42  13 f9 90     (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)

    call !eeram_copy_all_defaults ;0e45  9a 17 0a     Copy all of the EEPROM defaults from ROM into the EEPROM area in RAM

    mov b,#0x0b             ;0e48  a3 0b        B = 0x0b bytes to fill
    mov a,#0x80             ;0e4a  a1 80        A = 0x80 value to fill
    movw hl,#mem_fb86       ;0e4c  16 86 fb     HL = pointer to buffer to fill
    callf !fill_with_a      ;0e4f  4c dc        Fill B bytes in buffer [HL] with A
    callf !sub_093c_fb86_csm;0e51  1c 3c        Checksum 11 bytes at 0xfb86

    ;P24/RXD0 connects to L9637D
    clr1 pu2.4              ;0e53  71 4b 32     PU24 pull-up resistor disabled
    set1 pm2.4              ;0e56  71 4a 22     PM24 = input
    ;P25/TXD0 connects to L9637D
    clr1 pu2.5              ;0e59  71 5b 32     PU25 pull-up resistor disabled
    set1 pm2.5              ;0e5c  71 5a 22     PM25 = input
    ;P26 controls K-line resistor
    clr1 pu2.6              ;0e5f  71 6b 32     PU26 pull-up resistor disabled
    set1 pm2.6              ;0e62  71 6a 22     PM26 = output

    mov asim0,#0x00         ;0e65  13 a0 00     UART0 mode register = 0 (UART fully disabled)
    mov brgc0,#brgc0_value  ;0e68  13 a2 39     Baud rate generator 0 = 10400 baud

    ;P25/TXD0 connects to L9637D
    set1 shadow_p2.5        ;0e6b  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;0e6d  f0 cc
    mov p2,a                ;0e6f  f2 02
    ;P26 controls K-line resistor
    clr1 shadow_p2.6        ;0e71  6b cc        P26 = 0 (K-line resistor = disconnected;
                            ;                            radio is not acting as a tester)
    mov a,shadow_p2         ;0e73  f0 cc
    mov p2,a                ;0e75  f2 02

    mov a,#0xdb             ;0e77  a1 db
    mov !kwp_bit_ms,a       ;0e79  9e 77 f0     kwp_bit_ms = 0xDB (219 ms?)

    ;Clear RAM: 0xF068 - 0xF079 (except 0xF077!)
    ;These are all KWP1281 variables.
    ;XXX Note that this is redundant because these addresses are all
    ;    in expansion RAM which was already cleared above at lab_0e39.
    mov a,#0x00             ;0e7c  a1 00
    mov !kwp_tx_idx,a       ;0e7e  9e 68 f0     KWP1281 tx buffer index
    mov !kwp_rx_idx,a       ;0e81  9e 69 f0     KWP1281 rx buffer index
    mov !kwp_last_byte,a    ;0e84  9e 6a f0     KWP1281 last byte sent or received; used for error detection
    mov !kwp_tx_len,a       ;0e87  9e 6b f0     KWP1281 tx block length
    mov !kwp_rx_len,a       ;0e8a  9e 6c f0     KWP1281 rx block length
    mov !kwp_addr_idx,a     ;0e8d  9e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov !mem_f06e,a         ;0e90  9e 6e f0
    mov !mem_f06f,a         ;0e93  9e 6f f0
    mov !kwp_idle_ms,a      ;0e96  9e 70 f0     KWP1281 connection timeout countdown = 0 ms
    mov !mem_f071,a         ;0e99  9e 71 f0
    mov !mem_f072,a         ;0e9c  9e 72 f0
    mov !kwp_tx_address,a   ;0e9f  9e 73 f0     KWP1281 address to send = 0
    mov !kwp_tx_addr_rot,a  ;0ea2  9e 74 f0     KWP1281 address to send being rotated out during 5 baud init = 0
    mov !mem_f075,a         ;0ea5  9e 75 f0
    mov !kwp_tx_bit_count,a ;0ea8  9e 76 f0     KWP1281 bit count for 5 baud init = 0
    ;XXX does not clear kwp_bit_ms
    mov !kwp_conn_attempts,a;0eab  9e 78 f0     KWP1281 radio-as-tester connection attempt count = 0
    mov !kwp_err_retries,a  ;0eae  9e 79 f0     KWP1281 error retries = 0

    clr1 mem_fe7a.2         ;0eb1  2b 7a
    clr1 mem_fe79.0         ;0eb3  0b 79
    clr1 mem_fe79.1         ;0eb5  1b 79
    clr1 mem_fe79.2         ;0eb7  2b 79
    clr1 mem_fe79.3         ;0eb9  3b 79
    clr1 mem_fe79.4         ;0ebb  4b 79
    clr1 mem_fe79.5         ;0ebd  5b 79
    clr1 mem_fe79.6         ;0ebf  6b 79
    clr1 mem_fe79.7         ;0ec1  7b 79
    clr1 mem_fe7a.0         ;0ec3  0b 7a
    clr1 mem_fe7a.1         ;0ec5  1b 7a
    clr1 mem_fe7a.3         ;0ec7  3b 7a
    clr1 mem_fe7a.4         ;0ec9  4b 7a
    clr1 mem_fe7a.5         ;0ecb  5b 7a
    clr1 mem_fe7a.6         ;0ecd  6b 7a
    clr1 mem_fe7a.7         ;0ecf  7b 7a
    clr1 mem_fe7b.0         ;0ed1  0b 7b
    clr1 mem_fe7b.1         ;0ed3  1b 7b
    clr1 mem_fe7b.2         ;0ed5  2b 7b
    clr1 mem_fe7b.3         ;0ed7  3b 7b        Block end byte flag = block end is good
    clr1 mem_fe7b.4         ;0ed9  4b 7b
    clr1 mem_fe7b.5         ;0edb  5b 7b
    clr1 mem_fe7b.6         ;0edd  6b 7b
    clr1 mem_fe61.6         ;0edf  6b 61

    call !sub_3bea          ;0ee1  9a ea 3b

    mov a,#0x00             ;0ee4  a1 00
    mov !mem_f18b,a         ;0ee6  9e 8b f1

    call !sub_3bf7          ;0ee9  9a f7 3b
    call !sub_4234          ;0eec  9a 34 42
    call !sub_4495          ;0eef  9a 95 44
    call !sub_4569          ;0ef2  9a 69 45

    mov a,#0xff             ;0ef5  a1 ff
    mov !mem_fbad,a         ;0ef7  9e ad fb

    call !upd_display_off   ;0efa  9a 1a 4d     Turn uPD16432B display off
    call !sub_7697_snd_cd   ;0efd  9a 97 76     Unknown; snd_msg_idx and CD related
    call !sub_76c9_f1a9_f1ad;0f00  9a c9 76     Unknown; does something with 4 bytes at mem_f1a9 and at mem_f1ad

    mov upd_leds,#0x0f      ;0f03  11 3e 0f     Value to write to uPD16432B LED output latch

    clr1 mem_fe6f.4         ;0f06  4b 6f        Dolby = off
    clr1 mem_fe6d.3         ;0f08  3b 6d        ROM checksum calculation = not performed

    ;Write defaults for 3 analog voltage readings:
    ;mem_fca2_ani_t30, mem_fca3_ani_t58b, mem_fca4_ani
    mov b,#0x03               ;0f0a  a3 03      B = 3 bytes to fill
    mov a,#127                ;0f0c  a1 7f      A = fill value 127 = 12.7 V
    movw hl,#mem_fca2_ani_t30 ;0f0e  16 a2 fc   HL = pointer to buffer to fill
    callf !fill_with_a        ;0f11  4c dc      Fill B bytes in buffer [HL] with A

    ;Cold start finished; fall through into warm start

;Warm start the system
;Reset occurred but RAM is intact (or cold start was just done).
warm_start:
    mov mem_fe7c,#0x00      ;0f13  11 7c 00

    mov b,#0x0b             ;0f16  a3 0b
    movw hl,#mem_fb85       ;0f18  16 85 fb
lab_0f1b_loop:
    mov a,[hl+b]            ;0f1b  ab
    or a,#0x40              ;0f1c  6d 40
    and a,#0xfc             ;0f1e  5d fc
    mov [hl+b],a            ;0f20  bb
    dbnz b,lab_0f1b_loop    ;0f21  8b f8

    callf !sub_093c_fb86_csm;0f23  1c 3c        Checksum 11 bytes at 0xfb86

    mov a,#0x0f             ;0f25  a1 0f
    mov !mem_fb4e,a         ;0f27  9e 4e fb

    mov a,#0x00             ;0f2a  a1 00
    mov !mem_fb94,a         ;0f2c  9e 94 fb
    mov !mem_fb95,a         ;0f2f  9e 95 fb

    clr1 pu7.5              ;0f32  71 5b 37
    set1 pm7.5              ;0f35  71 5a 27
    clr1 pu0.3              ;0f38  71 3b 30
    set1 pm0.3              ;0f3b  71 3a 20
    set1 pm8.3              ;0f3e  71 3a 28
    set1 pm8.4              ;0f41  71 4a 28
    set1 pm8.5              ;0f44  71 5a 28
    set1 pm8.6              ;0f47  71 6a 28
    clr1 pu4.2              ;0f4a  71 2b 34
    set1 pm4.2              ;0f4d  71 2a 24
    clr1 pu3.5              ;0f50  71 5b 33
    set1 pm3.5              ;0f53  71 5a 23     PM35 = input
    set1 pm9.3              ;0f56  71 3a 29
    set1 pm9.6              ;0f59  71 6a 29
    mov a,#0x00             ;0f5c  a1 00
    mov !mem_fb68,a         ;0f5e  9e 68 fb
    clr1 mem_fe5d.7         ;0f61  7b 5d
    clr1 mem_fe5e.2         ;0f63  2b 5e
    call !sio30_disable     ;0f65  9a 91 08     Disable SIO30 (used for uPD16432B SPI)
    set1 mem_fe5e.7         ;0f68  7a 5e
    set1 mem_fe5f.0         ;0f6a  0a 5f        SPI packet complete flag = complete
    set1 mem_fe5f.1         ;0f6c  1a 5f        SPI mode flag = transmit only

    clr1 if0h.4             ;0f6e  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    set1 mk0h.4             ;0f71  71 4a e5     Set CSIMK30 (disables INTCSI30)

    call !sio31_disable     ;0f74  9a df 08     Disable SIO31 (used for CDC RX SPI)
    clr1 mem_fe5f.2         ;0f77  2b 5f        Clear bit = no CDC packet available
    mov a,#0x00             ;0f79  a1 00
    mov !cdc_isr_rx_idx,a   ;0f7b  9e 32 f0
    clr1 if0h.5             ;0f7e  71 5b e1     Clear CSIIF31 (CSIIF31 interrupt flag)
    set1 mk0h.5             ;0f81  71 5a e5     Set CSIMK31 (disables INTCSI31)

    mov a,#0x00             ;0f84  a1 00
    mov !kwp_test_idx,a     ;0f86  9e 4e f0     KWP1281 Output Test index = 0
    clr1 mem_fe5f.5         ;0f89  5b 5f
    call !sub_2d35          ;0f8b  9a 35 2d     Clear bits in mem_fe5f and mem_fe60

    ;P25/TXD0 connects to L9637D
    set1 shadow_p2.5        ;0f8e  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;0f90  f0 cc
    mov p2,a                ;0f92  f2 02
    ;P26 controls K-line resistor
    clr1 shadow_p2.6        ;0f94  6b cc        P26 = 0 (K-line resistor = disconnected;
                            ;                            radio is not acting as a tester)
    mov a,shadow_p2         ;0f96  f0 cc
    mov p2,a                ;0f98  f2 02

    call !kwp_disconnect    ;0f9a  9a 68 34     Disconnect and clear all KWP1281 state

    mov a,rxb0_txs0         ;0f9d  f0 18

    ;P24/RXD0 connects to L9637D
    clr1 pu2.4              ;0f9f  71 4b 32     PU24 pull-up resistor disabled
    set1 pm2.4              ;0fa2  71 4a 22     PM24 = input
    ;P25/TXD0 connects to L9637D
    clr1 pm2.5              ;0fa5  71 5b 22     PM25 = output
    ;P26 controls K-line resistor
    clr1 pm2.6              ;0fa8  71 6b 22     PM26 = output

    ;Enable UART0 interrupts
    clr1 mk0h.1             ;0fab  71 1b e5     Clear SERMK0 (enables INTSER0)
    set1 pr0h.1             ;0fae  71 1a e9     Set SERPR0 (makes INTSER0 low priority)
    clr1 mk0h.2             ;0fb1  71 2b e5     Clear SRMK0 (enables INTSR0)
    set1 pr0h.2             ;0fb4  71 2a e9     Set SRPR0 (makes INTSR0 low priority)
    clr1 mk0h.3             ;0fb7  71 3b e5     Clear STMK0 (enables INTST0)
    clr1 pr0h.3             ;0fba  71 3b e9     Clear STPR0 (makes INTST0 high priority)

    clr1 mem_fe7a.3         ;0fbd  3b 7a
    set1 mem_fe7b.0         ;0fbf  0a 7b
    clr1 mem_fe7a.7         ;0fc1  7b 7a

    ;Enable watch timer interrupts
    mov wtnm0,#wtnm0_conf_a ;0fc3  13 41 13     Bit 3: WTNM02=0 \ Watch timer interrupt =
                            ;                   Bit 2: WTNM02=0 / fires INTWTN0 every 0.5 seconds
                            ;                   Bit 1: WTNM01=1 5-bit counter operation = start
                            ;                   Bit 0: WTNM00=1 Watch timer enable = enabled

    clr1 mk1l.0             ;0fc6  71 0b e6     Clear WTNIMK0 (enables INTWTNI0)
    clr1 pr1l.0             ;0fc9  71 0b ea     Clear WTNIPR0 (makes INTWTNI0 high priority)

    mov a,#0x0a             ;0fcc  a1 0a
    mov !mem_fb03,a         ;0fce  9e 03 fb
    mov !mem_fb0b,a         ;0fd1  9e 0b fb
    mov !mem_fb24,a         ;0fd4  9e 24 fb
    mov !mem_fb4b,a         ;0fd7  9e 4b fb
    mov a,#0x06             ;0fda  a1 06
    mov !mem_fb50,a         ;0fdc  9e 50 fb
    mov mem_fe28,#0x80      ;0fdf  11 28 80
    movw ax,#0x8000         ;0fe2  10 00 80
    call !sub_3ba2          ;0fe5  9a a2 3b     Performs only: movw !mem_f008,ax
    call !sub_3b27          ;0fe8  9a 27 3b     Performs only: mov prm00,#0x00
    bt mem_fe65.1,lab_0ff1  ;0feb  9c 65 03
    call !sub_3b3a          ;0fee  9a 3a 3b     Disable timers and their interrupts

lab_0ff1:
    clr1 pu0.1              ;0ff1  71 1b 30
    set1 pm0.1              ;0ff4  71 1a 20
    bf mem_fe7d.1,lab_1012  ;0ff7  31 13 7d 17
    clr1 mem_fe7d.1         ;0ffb  1b 7d
    clr1 mem_fe2c.2         ;0ffd  2b 2c
    clr1 mem_fe2c.6         ;0fff  6b 2c
    clr1 mem_fe63.1         ;1001  1b 63
    call !sub_3bf7          ;1003  9a f7 3b
    mov a,!mem_fb54         ;1006  8e 54 fb
    cmp a,#0x00             ;1009  4d 00
    bnz lab_1012            ;100b  bd 05
    mov a,#0x02             ;100d  a1 02
    mov !mem_fb54,a         ;100f  9e 54 fb

lab_1012:
    mov a,#0                ;1012  a1 00        A = 0.0 V
    mov !mem_f18d_t30_avg,a ;1014  9e 8d f1

    mov a,#127              ;1017  a1 7f        A = 12.7 V
    mov !mem_fca2_ani_t30,a ;1019  9e a2 fc

    clr1 mk0l.2             ;101c  71 2b e4     Clear PMK1 (enables INTP1)
    clr1 pr0l.2             ;101f  71 2b e8     Clear PPR1 (makes INTP1 high priority)
    set1 egn.1              ;1022  71 1a 49     Set EGN1 (enables INTP1 on falling edge)
    mov a,#0x02             ;1025  a1 02
    mov !mem_f18c,a         ;1027  9e 8c f1
    call !sub_3bf7          ;102a  9a f7 3b
    bz lab_1030             ;102d  ad 01
    brk                     ;102f  bf           Force cold start via badisr_0d75

lab_1030:
    call !sub_4495          ;1030  9a 95 44
    bz lab_1036             ;1033  ad 01
    brk                     ;1035  bf           Force cold start via badisr_0d75

lab_1036:
    clr1 mem_fe64.7         ;1036  7b 64        Clear bit to indicate no DELCO login
    call !sub_4902_illum    ;1038  9a 02 49     Read illumination voltage (P92/ANI20) and ???
    mov a,#0x00             ;103b  a1 00
    mov !mem_fb29,a         ;103d  9e 29 fb
    mov !mem_fb2a,a         ;1040  9e 2a fb
    mov !mem_fb2b,a         ;1043  9e 2b fb
    set1 mem_fe65.2         ;1046  2a 65
    mov a,#0x00             ;1048  a1 00
    mov !mem_fbcd,a         ;104a  9e cd fb
    mov !mem_fbcc,a         ;104d  9e cc fb

    clr1 mk0l.5             ;1050  71 5b e4     Clear PMK4 (enables INTP4)
    set1 pr0l.5             ;1053  71 5a e8     Set PPR4 (makes INTP4 low priority)
    set1 egn.4              ;1056  71 4a 49     Set EGN4 (diables INTP4 on falling edge) (POWER key)
    set1 egp.4              ;1059  71 4a 48     Set EGP4 (enables INTP4 on rising edge) (POWER key)

    clr1 mk0l.7             ;105c  71 7b e4     Clear PMK6 (enables INTP6)
    set1 pr0l.7             ;105f  71 7a e8     Set PPR6 (makes INTP6 low priority)
    set1 egn.6              ;1062  71 6a 49     Set EGN6 (enables INTP6 on falling edge) (STOP/EJECT key)
    clr1 egp.6              ;1065  71 6b 48     Clear EGP6 (disables INTP6 on rising edge) (STOP/EJECT key)

    clr1 mem_fe66.6         ;1068  6b 66
    mov tmc01,#0x00         ;106a  13 68 00
    set1 mk1l.3             ;106d  71 3a e6     Set TMMK001 (disables INTTM001)
    set1 mk1l.4             ;1070  71 4a e6     Set TMMK011 (disables INTTM011; CDC TX)
    mov tmc01,#0x04         ;1073  13 68 04
    set1 mk0l.1             ;1076  71 1a e4     Set PMK0 (disables INTP0)
    mov a,#0x00             ;1079  a1 00
    mov mem_fe34,a          ;107b  f2 34
    mov !mem_f198,a         ;107d  9e 98 f1
    mov !mem_fb05,a         ;1080  9e 05 fb
    clr1 mem_fe67.6         ;1083  6b 67
    clr1 mem_fe67.5         ;1085  5b 67
    clr1 mem_fe67.4         ;1087  4b 67
    clr1 mem_fe67.7         ;1089  7b 67
    clr1 mem_fe68.0         ;108b  0b 68

    clr1 mk0l.1             ;108d  71 1b e4     Clear PMK0 (enables INTP0)
    clr1 pr0l.1             ;1090  71 1b e8     Clear PPR0 (makes INTP0 high priority)
    clr1 egn.0              ;1093  71 0b 49     Clear EGN0 (disables INTP0 on falling edge)
    set1 egp.0              ;1096  71 0a 48     Set EGN0 (enables INTP0 on rising edge)
    ;XXX redundant, sets EGN0 and EGP0 the same again
    set1 egp.0              ;1099  71 0a 48     Set EGN0 (enables INTP0 on rising edge)
    clr1 egn.0              ;109c  71 0b 49     Clear EGN0 (disables INTP0 on falling edge)

    clr1 pm5.7              ;109f  71 7b 25     PM57 = output (CDC TX)
    set1 shadow_p5.7        ;10a2  7a cf        CDC TX = 1
    mov a,shadow_p5         ;10a4  f0 cf
    mov p5,a                ;10a6  f2 05

    mov a,#0x02             ;10a8  a1 02
    callf !sub_09d7         ;10aa  1c d7
    call !sub_6947          ;10ac  9a 47 69     Store 0x80 in mem_f1aa and return
    set1 mem_fe6a.2         ;10af  2a 6a
    clr1 mem_fe6a.0         ;10b1  0b 6a
    clr1 mem_fe6a.1         ;10b3  1b 6a
    clr1 pm2.7              ;10b5  71 7b 22
    set1 shadow_p2.7        ;10b8  7a cc
    mov a,shadow_p2         ;10ba  f0 cc
    mov p2,a                ;10bc  f2 02
    mov mem_fe40,#0x00      ;10be  11 40 00
    mov mem_fe41,#0x00      ;10c1  11 41 00
    mov mem_fe42,#0x00      ;10c4  11 42 00
    mov mem_fe3f,#0x00      ;10c7  11 3f 00
    clr1 mem_fe6b.5         ;10ca  5b 6b
    clr1 mem_fe6b.6         ;10cc  6b 6b
    clr1 mem_fe6c.6         ;10ce  6b 6c
    clr1 mem_fe6c.7         ;10d0  7b 6c
    clr1 mem_fe6c.3         ;10d2  3b 6c
    clr1 mem_fe6c.2         ;10d4  2b 6c
    mov a,#0x00             ;10d6  a1 00
    mov !mem_fb13,a         ;10d8  9e 13 fb
    call !sio31_enable      ;10db  9a 2f 26     Enable SIO31 (used for CDC RX SPI)
    clr1 mk0h.5             ;10de  71 5b e5     Clear CSIMK31 (enables INTCSI31)
    clr1 pr0h.5             ;10e1  71 5b e9     Clear CSIPR31 (makes INTCSI31 high priority)
    callf !sub_08cc         ;10e4  0c cc        SPI xfer on SIO31 (send byte in A, recv byte in A)
    call !sub_d16e          ;10e6  9a 6e d1

    clr1 pm7.0              ;10e9  71 0b 27
    set1 shadow_p7.0        ;10ec  0a d1
    mov a,shadow_p7         ;10ee  f0 d1
    mov p7,a                ;10f0  f2 07

    mov a,#0x10             ;10f2  a1 10
    mov !mem_fb1b,a         ;10f4  9e 1b fb
    set1 mem_fe72.0         ;10f7  0a 72
    mov a,#0x00             ;10f9  a1 00
    mov !mem_fb1c,a         ;10fb  9e 1c fb
    mov !mem_fc89,a         ;10fe  9e 89 fc
    mov !mem_fc8a,a         ;1101  9e 8a fc
    mov a,#0x02             ;1104  a1 02
    mov mem_fe54,a          ;1106  f2 54

    ;Leave 0x55 and 0xAA cookies in RAM that are checked on reset
    ;to determine if a warm start can be performed.

    mov a,#0x55             ;1108  a1 55
    mov !mem_f18e,a         ;110a  9e 8e f1
    mov !stack_bottom,a     ;110d  9e a5 fc

    mov a,#0xaa             ;1110  a1 aa
    mov !stack_top,a        ;1112  9e 1f fe
    mov !mem_fb91,a         ;1115  9e 91 fb

lab_1118:
    mov wdtm,#wd_run_nmi    ;1118  13 f9 90     (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
    mov a,!mem_fb4e         ;111b  8e 4e fb
    cmp a,#0x00             ;111e  4d 00
    bnz lab_1123            ;1120  bd 01
    brk                     ;1122  bf           Force cold start via badisr_0d75

lab_1123:
    di                      ;1123  7b 1e
    mov a,shadow_p0         ;1125  f0 cb
    mov p0,a                ;1127  f2 00
    mov a,shadow_p2         ;1129  f0 cc
    mov p2,a                ;112b  f2 02
    mov a,shadow_p3         ;112d  f0 cd
    mov p3,a                ;112f  f2 03
    mov a,shadow_p4         ;1131  f0 ce
    mov p4,a                ;1133  f2 04
    mov a,shadow_p5         ;1135  f0 cf
    mov p5,a                ;1137  f2 05
    mov a,shadow_p6         ;1139  f0 d0
    mov p6,a                ;113b  f2 06
    mov a,shadow_p7         ;113d  f0 d1
    mov p7,a                ;113f  f2 07
    mov a,shadow_p8         ;1141  f0 d2
    mov p8,a                ;1143  f2 08
    mov a,shadow_p9         ;1145  f0 d3
    mov p9,a                ;1147  f2 09
    ei                      ;1149  7a 1e

    ;Enable watch timer interrupts
    mov wtnm0,#wtnm0_conf_a ;114b  13 41 13
    clr1 mk1l.0             ;114e  71 0b e6       Clear WTNIMK0 (enables INTWTNI0)
    clr1 pr1l.0             ;1151  71 0b ea       Clear WTNIPR0 (makes INTWTNI0 high priority)

    btclr mem_fe61.7,lab_115c ;1154  31 71 61 04  If bit is set indicating INTP2 occurred,
                              ;                     clear that bit and branch
    bf p0.2,lab_118f        ;1158  31 23 00 33    Branch if P0.2=0
                            ;                       (P0.2 is an unknown input whose rising edge triggers INTP2)

lab_115c:
    mov a,#0x02             ;115c  a1 02
    mov !mem_fb4c,a         ;115e  9e 4c fb
    set1 mem_fe7d.2         ;1161  2a 7d
    clr1 shadow_p9.7        ;1163  7b d3
    clr1 pm9.7              ;1165  71 7b 29
    mov a,shadow_p9         ;1168  f0 d3
    mov p9,a                ;116a  f2 09
    clr1 shadow_p9.4        ;116c  4b d3
    clr1 pm9.4              ;116e  71 4b 29
    mov a,shadow_p9         ;1171  f0 d3
    mov p9,a                ;1173  f2 09
    set1 mem_fe2b.7         ;1175  7a 2b        Bit set = watch timer interrupt INTWTNI0 only blinks the LED
    call !sub_3acf          ;1177  9a cf 3a     Disable I2C, disable timers, set many pins to inputs

lab_117a:
    halt                    ;117a  71 10

lab_117c:
    mov wdtm,#wd_run_nmi    ;117c  13 f9 90     (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
    bt p0.2,lab_117a        ;117f  ac 00 f8     Branch if P0.2=1
                            ;                       (P0.2 is an unknown input whose rising edge triggers INTP2)

    set1 mk0l.3             ;1182  71 3a e4     Set INTP2 (disables INTP2)
    clr1 if0l.3             ;1185  71 3b e0     Clear PIF2 (INTP2 interrupt flag)
    set1 mem_fe7d.1         ;1188  1a 7d
    clr1 mem_fe61.7         ;118a  7b 61        Clear bit indicating INTP2 occurred
    br !cold_or_warm_start  ;118c  9b cf 0d

lab_118f:
    call !sub_3dd4          ;118f  9a d4 3d
    and mem_fe7c,#0x07      ;1192  d8 7c 07
    bz lab_11ae             ;1195  ad 17
    mov c,#0x03             ;1197  a2 03
    mov b,#0x00             ;1199  a3 00

lab_119b:
    mov a,mem_fe7c          ;119b  f0 7c
    rorc a,1                ;119d  25
    mov mem_fe7c,a          ;119e  f2 7c
    bnc lab_11ab            ;11a0  9d 09
    movw hl,#mem_b0cd+1     ;11a2  16 ce b0
    mov a,[hl+b]            ;11a5  ab
    push bc                 ;11a6  b3
    mov b,a                 ;11a7  73
    callf !sub_0994         ;11a8  1c 94
    pop bc                  ;11aa  b2

lab_11ab:
    inc b                   ;11ab  43
    dbnz c,lab_119b         ;11ac  8a ed

lab_11ae:
    mov d,#0xfb             ;11ae  a5 fb
    mov b,#0x0b             ;11b0  a3 0b

lab_11b2:
    movw hl,#mem_fb85       ;11b2  16 85 fb
    mov a,[hl+b]            ;11b5  ab
    movw hl,#mem_fb7a       ;11b6  16 7a fb
    bf a.0,lab_11c9         ;11b9  31 0f 0d
    bt a.1,lab_11d5         ;11bc  31 1e 16
    mov a,[hl+b]            ;11bf  ab
    and a,mem_fe2d          ;11c0  5e 2d
    cmp a,[hl+b]            ;11c2  31 4b
    bnz lab_11d5            ;11c4  bd 0f
    br !lab_1250            ;11c6  9b 50 12

lab_11c9:
    bf a.1,lab_1225         ;11c9  31 1f 59
    mov a,[hl+b]            ;11cc  ab
    mov e,a                 ;11cd  74
    mov a,[de]              ;11ce  85
    cmp a,#0x00             ;11cf  4d 00
    bnz lab_11d5            ;11d1  bd 02
    br lab_1250             ;11d3  fa 7b

lab_11d5:
    dbnz b,lab_11b2         ;11d5  8b db
    call !sub_1269          ;11d7  9a 69 12
    bc lab_11df             ;11da  8d 03
    br !lab_1118            ;11dc  9b 18 11

lab_11df:
    movw hl,#mem_fb85       ;11df  16 85 fb
    mov a,!mem_fb92         ;11e2  8e 92 fb
    mov b,a                 ;11e5  73
    cmp a,#0x00             ;11e6  4d 00
    bz lab_11ee             ;11e8  ad 04
    cmp a,#0x0c             ;11ea  4d 0c
    bc lab_11f0             ;11ec  8d 02

lab_11ee:
    mov b,#0x0b             ;11ee  a3 0b

lab_11f0:
    mov c,#0x0b             ;11f0  a2 0b

lab_11f2:
    dbnz b,lab_11f6         ;11f2  8b 02
    mov b,#0x0b             ;11f4  a3 0b

lab_11f6:
    mov a,[hl+b]            ;11f6  ab
    bf a.0,lab_11fd         ;11f7  31 0f 03
    bt a.1,lab_1201         ;11fa  31 1e 04

lab_11fd:
    dbnz c,lab_11f2         ;11fd  8a f3
    br lab_124d             ;11ff  fa 4c

lab_1201:
    mov a,b                 ;1201  63
    mov !mem_fb92,a         ;1202  9e 92 fb

lab_1205:
    movw hl,#mem_fb7a       ;1205  16 7a fb
    mov a,[hl+b]            ;1208  ab
    xch a,mem_fe2e          ;1209  83 2e
    sub a,mem_fe2e          ;120b  1e 2e
    mov mem_fe2e,a          ;120d  f2 2e
    mov a,#0x00             ;120f  a1 00
    mov [hl+b],a            ;1211  bb
    movw hl,#mem_fb85       ;1212  16 85 fb
    mov a,[hl+b]            ;1215  ab
    xch a,mem_fe2e          ;1216  83 2e
    sub a,mem_fe2e          ;1218  1e 2e
    xch a,mem_fe2e          ;121a  83 2e
    and a,#0xfc             ;121c  5d fc
    mov [hl+b],a            ;121e  bb
    xch a,mem_fe2e          ;121f  83 2e
    add a,mem_fe2e          ;1221  0e 2e
    xch a,mem_fe2e          ;1223  83 2e

lab_1225:
    push ax                 ;1225  b1
    dec b                   ;1226  53
    mov a,mem_fe2e          ;1227  f0 2e
    sub a,mem_fe2f          ;1229  1e 2f
    add a,b                 ;122b  61 0b
    mov mem_fe2e,a          ;122d  f2 2e
    mov a,b                 ;122f  63
    mov mem_fe2f,a          ;1230  f2 2f
    movw hl,#mem_b0b6+1     ;1232  16 b7 b0
    callf !table_get_word   ;1235  4c 48        Load DE with word at position B in table [HL]
    bnc lab_123a            ;1237  9d 01        Branch if table lookup succeeded
    brk                     ;1239  bf           Force cold start via badisr_0d75

lab_123a:
    pop bc                  ;123a  b2
    movw ax,#lab_1242       ;123b  10 42 12
    push ax                 ;123e  b1
    movw ax,de              ;123f  c4
    br ax                   ;1240  31 98

lab_1242:
    mov a,mem_fe2e          ;1242  f0 2e
    sub a,mem_fe2f          ;1244  1e 2f
    mov mem_fe2f,#0x0b      ;1246  11 2f 0b
    add a,#0x0b             ;1249  0d 0b
    mov mem_fe2e,a          ;124b  f2 2e

lab_124d:
    br !lab_1118            ;124d  9b 18 11

lab_1250:
    mov a,b                 ;1250  63
    mov c,a                 ;1251  72
    movw hl,#mem_fb85       ;1252  16 85 fb

lab_1255:
    dbnz b,lab_1260         ;1255  8b 09
    call !sub_1269          ;1257  9a 69 12
    bnc lab_124d            ;125a  9d f1
    mov a,c                 ;125c  62
    mov b,a                 ;125d  73
    br lab_1205             ;125e  fa a5

lab_1260:
    mov a,[hl+b]            ;1260  ab
    bt a.1,lab_1255         ;1261  31 1e f1
    bt a.0,lab_1255         ;1264  31 0e ee
    br lab_1225             ;1267  fa bc

sub_1269:
    mov a,!mem_fb95         ;1269  8e 95 fb
    sub a,#0x04             ;126c  1d 04
    bnc lab_1271            ;126e  9d 01
    ret                     ;1270  af

lab_1271:
    mov !mem_fb95,a         ;1271  9e 95 fb
    call !sub_127f          ;1274  9a 7f 12     Call one of the timer routines in mem_b0d
    cmp mem_fe2f,#0x0b      ;1277  c8 2f 0b
    bz lab_127d             ;127a  ad 01
    brk                     ;127c  bf           Force cold start via badisr_0d75

lab_127d:
    clr1 cy                 ;127d  21
    ret                     ;127e  af

sub_127f:
;Seems to be called on a timer, and each time it is called,
;it somehow dispatches to a different routine in the
;mem_b0d1 table, using some kind of round-robin counting.
    mov a,!mem_fb94         ;127f  8e 94 fb
    inc a                   ;1282  41
    mov !mem_fb94,a         ;1283  9e 94 fb

    mov b,#0x08             ;1286  a3 08
lab_1288_loop:
    inc mem_fe2f            ;1288  81 2f
    inc mem_fe2e            ;128a  81 2e
    rorc a,1                ;128c  25
    bc lab_1291             ;128d  8d 02
    dbnz b,lab_1288_loop    ;128f  8b f7  todo timer countdown timers?

    ;The above seems to somehow result in a different routine
    ;from mem_b0d1 being called each time around.

lab_1291:
    movw hl,#mem_b0d1+1     ;1291  16 d2 b0
    callf !table_get_word   ;1294  4c 48        Load DE with word at position B in table [HL]
    bc lab_12d7             ;1296  8d 3f        Branch if table lookup failed
    movw ax,de              ;1298  c4
    br ax                   ;1299  31 98

lab_129b:
    call !sub_1ca9          ;129b  9a a9 1c
    call !sub_3329          ;129e  9a 29 33     Decrements mem_f06f
    call !sub_35e9          ;12a1  9a e9 35     Unknown; related to 5 baud address tx/tx
    call !sub_6305          ;12a4  9a 05 63
    bf mem_fe40.0,lab_12b5  ;12a7  31 03 40 0a
    mov a,!mem_fb12         ;12ab  8e 12 fb
    cmp a,#0x00             ;12ae  4d 00
    bnz lab_12b5            ;12b0  bd 03
    call !sub_7735          ;12b2  9a 35 77

lab_12b5:
    call !sub_d9ec          ;12b5  9a ec d9
    mov a,!mem_f1e9         ;12b8  8e e9 f1
    bf a.2,lab_12c9         ;12bb  31 2f 0b
    cmp mem_fe30,#0x02      ;12be  c8 30 02
    bnz lab_12c9            ;12c1  bd 06
    call !sub_90a6          ;12c3  9a a6 90
    call !sub_90d2          ;12c6  9a d2 90

lab_12c9:
    bf mem_fe2d.0,lab_12d7  ;12c9  31 03 2d 0a
    bt mem_fe73.1,lab_12d7  ;12cd  9c 73 07
    bf mem_fe66.3,lab_12d7  ;12d0  31 33 66 03
    call !sub_9a39          ;12d4  9a 39 9a

lab_12d7:
    mov a,mem_fe2e          ;12d7  f0 2e
    sub a,mem_fe2f          ;12d9  1e 2f
    add a,#0x0b             ;12db  0d 0b
    mov mem_fe2e,a          ;12dd  f2 2e
    mov mem_fe2f,#0x0b      ;12df  11 2f 0b
    ret                     ;12e2  af

lab_12e3:
    call !sub_3518          ;12e3  9a 18 35       Unknown, related to 5 baud address tx/rx
    btclr mem_fe68.0,lab_1312 ;12e6  31 01 68 28
    bt mem_fe67.6,lab_1326  ;12ea  ec 67 39
    bf mem_fe67.4,lab_12f8  ;12ed  31 43 67 07
    mov a,!mem_fb05         ;12f1  8e 05 fb
    cmp a,#0x00             ;12f4  4d 00
    bnz lab_131e            ;12f6  bd 26

lab_12f8:
    clr1 mem_fe67.4         ;12f8  4b 67
    bf mem_fe67.7,lab_1309  ;12fa  31 73 67 0b
    mov a,!mem_fb0f         ;12fe  8e 0f fb
    cmp a,#0x00             ;1301  4d 00
    bnz lab_1358            ;1303  bd 53
    clr1 mem_fe67.7         ;1305  7b 67
    br lab_1312             ;1307  fa 09

lab_1309:
    set1 mem_fe67.7         ;1309  7a 67
    mov a,#0x0f             ;130b  a1 0f
    mov !mem_fb0f,a         ;130d  9e 0f fb
    br lab_1358             ;1310  fa 46

lab_1312:
    mov a,#0xff             ;1312  a1 ff
    mov !mfsw_key,a         ;1314  9e 97 f1   MFSW key code received = 0xFF (no key)
    mov a,!mem_fc26         ;1317  8e 26 fc
    clr1 a.7                ;131a  61 fb
    br lab_133e             ;131c  fa 20

lab_131e:
    cmp a,#0x6f             ;131e  4d 6f
    bnc lab_1358            ;1320  9d 36
    bf mem_fe67.5,lab_1358  ;1322  31 53 67 32

lab_1326:
    clr1 mem_fe67.6         ;1326  6b 67
    clr1 mem_fe67.5         ;1328  5b 67

    mov a,!mfsw_key         ;132a  8e 97 f1   A = MFSW key code received
    movw hl,#mfsw_codes+1   ;132d  16 ad b3   HL = table of supported MFSW key codes
    call !table_find_byte   ;1330  9a 0d 0b   Find A in table [HL] and return its position in B
    bnc lab_12f8            ;1333  9d c3      Branch if find failed

    ;MFSW key code received was found in table

    movw hl,#mfsw_equivs+1  ;1335  16 b2 b3
    callf !table_get_byte   ;1338  4c 7d      Load A with byte at position B in table [HL]
    bc lab_12f8             ;133a  8d bc      Branch if lookup failed

    ;A corresponding value was found in mfsw_equivs

    set1 a.7                ;133c  61 fa

lab_133e:
    bt mem_fe65.5,lab_1349  ;133e  dc 65 08
    mov !mem_fc26,a         ;1341  9e 26 fc
    mov b,#0x00             ;1344  a3 00
    callt [0x0040]          ;1346  c1         Calls sub_0994
    br lab_1358             ;1347  fa 0f

lab_1349:
    mov a,!mem_fc26         ;1349  8e 26 fc
    cmp a,#0x00             ;134c  4d 00
    bz lab_1358             ;134e  ad 08
    clr1 a.7                ;1350  61 fb
    mov !mem_fc26,a         ;1352  9e 26 fc
    mov b,#0x00             ;1355  a3 00
    callt [0x0040]          ;1357  c1         Calls sub_0994

lab_1358:
    bt mem_fe65.5,lab_1385  ;1358  dc 65 2a
    bf mem_fe6b.5,lab_136d  ;135b  31 53 6b 0e
    clr1 mem_fe61.4         ;135f  4b 61
    clr1 mem_fe6b.5         ;1361  5b 6b
    clr1 mem_fe40.6         ;1363  6b 40
    clr1 mem_fe40.7         ;1365  7b 40
    clr1 mem_fe6c.6         ;1367  6b 6c
    clr1 mem_fe6c.7         ;1369  7b 6c
    set1 mem_fe6b.6         ;136b  6a 6b

lab_136d:
    bt mem_fe2c.3,lab_13b1  ;136d  bc 2c 41
    mov mem_fe40,#0x00      ;1370  11 40 00
    mov mem_fe41,#0x00      ;1373  11 41 00
    mov mem_fe42,#0x00      ;1376  11 42 00
    mov mem_fe3f,#0x00      ;1379  11 3f 00
    clr1 mem_fe6c.7         ;137c  7b 6c
    clr1 mem_fe6c.6         ;137e  6b 6c
    clr1 mem_fe6b.6         ;1380  6b 6b
    br !lab_1479            ;1382  9b 79 14

lab_1385:
    bf mem_fe6b.5,lab_138e  ;1385  31 53 6b 05
    clr1 mem_fe41.0         ;1389  0b 41
    br !lab_144f            ;138b  9b 4f 14

lab_138e:
    bt mem_fe6b.6,lab_13a7  ;138e  ec 6b 16
    clr1 shadow_p9.7        ;1391  7b d3
    mov a,shadow_p9         ;1393  f0 d3
    mov p9,a                ;1395  f2 09
    mov a,#0x0f             ;1397  a1 0f
    mov !mem_fb14,a         ;1399  9e 14 fb
    clr1 shadow_p9.4        ;139c  4b d3
    mov a,shadow_p9         ;139e  f0 d3
    mov p9,a                ;13a0  f2 09
    set1 mem_fe6b.6         ;13a2  6a 6b
    br !lab_1479            ;13a4  9b 79 14

lab_13a7:
    mov a,!mem_fb14         ;13a7  8e 14 fb
    cmp a,#0x00             ;13aa  4d 00
    bz lab_13b9             ;13ac  ad 0b
    br !lab_1479            ;13ae  9b 79 14

lab_13b1:
    bt mem_fe41.7,lab_1405  ;13b1  fc 41 51
    set1 mem_fe6b.6         ;13b4  6a 6b
    call !sub_7c51          ;13b6  9a 51 7c

lab_13b9:
    mov a,#0x00             ;13b9  a1 00
    mov !mem_fc16,a         ;13bb  9e 16 fc
    clr1 pm2.7              ;13be  71 7b 22
    clr1 mem_fe40.0         ;13c1  0b 40
    clr1 mem_fe40.1         ;13c3  1b 40
    clr1 shadow_p2.7        ;13c5  7b cc
    mov a,shadow_p2         ;13c7  f0 cc
    mov p2,a                ;13c9  f2 02
    mov a,#0x06             ;13cb  a1 06
    mov !mem_fb07,a         ;13cd  9e 07 fb

lab_13d0:
    mov a,!mem_fb07         ;13d0  8e 07 fb
    cmp a,#0x00             ;13d3  4d 00
    bnz lab_13d0            ;13d5  bd f9
    bf mem_fe65.5,lab_13e7  ;13d7  31 53 65 0c
    set1 mem_fe6b.5         ;13db  5a 6b
    mov a,#0x00             ;13dd  a1 00
    mov !mem_fb38,a         ;13df  9e 38 fb
    mov !mem_fb39,a         ;13e2  9e 39 fb
    br lab_13e9             ;13e5  fa 02

lab_13e7:
    set1 mem_fe41.7         ;13e7  7a 41

lab_13e9:
    movw hl,#mem_fc1a       ;13e9  16 1a fc     HL = faults buffer #1
    movw de,#mem_fb30       ;13ec  14 30 fb
    mov b,#0x08             ;13ef  a3 08
    mov a,#0x00             ;13f1  a1 00

lab_13f3:
    mov [hl+b],a            ;13f3  bb
    mov [de],a              ;13f4  95
    incw de                 ;13f5  84
    dbnz b,lab_13f3         ;13f6  8b fb
    mov [hl+b],a            ;13f8  bb
    mov !mem_fc23,a         ;13f9  9e 23 fc
    mov !mem_fc24,a         ;13fc  9e 24 fc
    set1 shadow_p2.7        ;13ff  7a cc
    mov a,shadow_p2         ;1401  f0 cc
    mov p2,a                ;1403  f2 02

lab_1405:
    bf shadow_p9.4,lab_142e ;1405  31 43 d3 25
    bf mem_fe6b.6,lab_1416  ;1409  31 63 6b 09
    mov a,#0x0f             ;140d  a1 0f
    mov !mem_fb14,a         ;140f  9e 14 fb
    clr1 mem_fe6b.6         ;1412  6b 6b
    br lab_1479             ;1414  fa 63

lab_1416:
    mov a,!mem_fb14         ;1416  8e 14 fb
    cmp a,#0x00             ;1419  4d 00
    bz lab_141f             ;141b  ad 02
    br lab_1479             ;141d  fa 5a

lab_141f:
    bf mem_fe6b.4,lab_1454  ;141f  31 43 6b 31
    mov a,#0x00             ;1423  a1 00
    mov !mem_fc16,a         ;1425  9e 16 fc
    clr1 mem_fe6b.4         ;1428  4b 6b
    clr1 mem_fe41.0         ;142a  0b 41
    br lab_1454             ;142c  fa 26

lab_142e:
    set1 mem_fe41.3         ;142e  3a 41
    mov a,!mem_f1ff         ;1430  8e ff f1
    cmp a,#0x00             ;1433  4d 00
    bz lab_1479             ;1435  ad 42
    bf mem_fe2c.3,lab_1479  ;1437  31 33 2c 3e
    mov a,!mem_f1fe         ;143b  8e fe f1       TODO coding, monsoon related
    cmp a,#0x03             ;143e  4d 03
    bz lab_1479             ;1440  ad 37
    cmp a,#0x03             ;1442  4d 03
    bz lab_1479             ;1444  ad 33
    set1 mem_fe41.0         ;1446  0a 41
    mov a,!mem_fc16         ;1448  8e 16 fc
    cmp a,#0x07             ;144b  4d 07
    bnc lab_1479            ;144d  9d 2a

lab_144f:
    set1 mem_fe6b.4         ;144f  4a 6b
    call !sub_7c51          ;1451  9a 51 7c

lab_1454:
    bf mem_fe62.1,lab_145e  ;1454  31 13 62 06
    clr1 mem_fe40.1         ;1458  1b 40
    clr1 mem_fe40.0         ;145a  0b 40
    br lab_1479             ;145c  fa 1b

lab_145e:
    bt mem_fe40.0,lab_1479  ;145e  8c 40 18
    mov a,!mem_fb13         ;1461  8e 13 fb
    cmp a,#0x00             ;1464  4d 00
    bnz lab_1479            ;1466  bd 11
    mov a,#0x14             ;1468  a1 14
    bt mem_fe65.5,lab_1473  ;146a  dc 65 06
    bf mem_fe6b.4,lab_1473  ;146d  31 43 6b 02
    mov a,#0x0f             ;1471  a1 0f

lab_1473:
    mov !mem_fb13,a         ;1473  9e 13 fb
    call !sub_7712          ;1476  9a 12 77

lab_1479:
    br !lab_12d7            ;1479  9b d7 12

lab_147c:
    bt mem_fe65.5,lab_148f  ;147c  dc 65 10
    clr1 mem_fe5f.5         ;147f  5b 5f

    mov a,!tmp_msg_idx      ;1481  8e a6 f1
    and a,#0x7f             ;1484  5d 7f
    cmp a,#0x0f             ;1486  4d 0f        f Writes " DIAG  "
    bnz lab_148f            ;1488  bd 05

    mov a,#0xff             ;148a  a1 ff
    mov !tmp_msg_idx,a      ;148c  9e a6 f1     f Writes " DIAG  "

lab_148f:
    call !kwp_check_idle    ;148f  9a 3f 33     Decrement KWP1281 idle countdown and disconnect KWP1281 connection if needed
    call !sub_3e1d          ;1492  9a 1d 3e
    call !sub_3d09_term30   ;1495  9a 09 3d     Read analog input 0x01 (P91/ANI10) Terminal 30 and ???
    call !sub_4889_led_illum;1498  9a 89 48     Set uPD16432B LED output latches based on illumination voltage (P92/ANI20) and then ???
    call !sub_58d8_chk_power;149b  9a d8 58     Check POWER key and ???
    call !sub_56cc_upd_keys ;149e  9a cc 56     Read uPD16432B key data if ??? conditions are met
    bf mem_fe2d.0,lab_14a8  ;14a1  31 03 2d 03
    call !sub_9140          ;14a5  9a 40 91

lab_14a8:
    call !read_3_analogs    ;14a8  9a 7b ab     Table-driven analog input routine
    br !lab_12d7            ;14ab  9b d7 12

lab_14ae:
    bf mem_fe65.5,lab_14b5  ;14ae  31 53 65 03
    call !sub_26d6          ;14b2  9a d6 26

lab_14b5:
    bf mem_fe64.7,lab_14bc  ;14b5  31 73 64 03
    call !sub_4625          ;14b9  9a 25 46

lab_14bc:
    call !sub_6853          ;14bc  9a 53 68
    br !lab_12d7            ;14bf  9b d7 12

lab_14c2:
    callf !sub_093c_fb86_csm;14c2  1c 3c        Checksum 11 bytes at 0xfb86
    bz lab_14c9             ;14c4  ad 03        Branch if check failed
    br !cold_or_warm_start  ;14c6  9b cf 0d

lab_14c9:
    mov a,#0xaa             ;14c9  a1 aa        A = 0xAA cookie that should not be touched
    cmp a,!stack_top        ;14cb  48 1f fe
    bnz lab_14d5            ;14ce  bd 05
    cmp a,!mem_fb91         ;14d0  48 91 fb
    bz lab_14d6             ;14d3  ad 01

lab_14d5:
    brk                     ;14d5  bf           Force cold start via badisr_0d75

lab_14d6:
    mov a,#wd_clk_250ms     ;14d6  a1 07
    mov wdcs,a              ;14d8  f6 42        Watchdog clock select = watchdog fires after 250ms
    mov a,#wd_run_nmi       ;14da  a1 90        (Re-)Start watchdog in mode 1 (Non-maskable INTWDT when watchdog fires)
    mov wdtm,a              ;14dc  f6 f9        Set watchdog mode
    mov a,mem_fe2c          ;14de  f0 2c
    push ax                 ;14e0  b1
    call !sub_3e76          ;14e1  9a 76 3e
    pop ax                  ;14e4  b0
    cmp a,mem_fe2c          ;14e5  4e 2c
    bz lab_14ec             ;14e7  ad 03
    mov b,#0x09             ;14e9  a3 09
    callt [0x0040]          ;14eb  c1           Calls sub_0994

lab_14ec:
    bt mem_fe61.7,lab_150c  ;14ec  fc 61 1d     Branch if INTP2 occurred
    bt mem_fe61.6,lab_150c  ;14ef  ec 61 1a
    call !sub_0a60          ;14f2  9a 60 0a
    bf mem_fe63.7,lab_150c  ;14f5  31 73 63 13
    set1 mem_fe61.6         ;14f9  6a 61
    mov a,!mem_f207         ;14fb  8e 07 f2
    bf a.6,lab_150c         ;14fe  31 6f 0b
    set1 mem_fe7d.7         ;1501  7a 7d
    call !sub_9118          ;1503  9a 18 91
    call !sub_1dc4          ;1506  9a c4 1d
    call !sub_461b          ;1509  9a 1b 46

lab_150c:
    br !lab_12d7            ;150c  9b d7 12

lab_150f:
    mov mem_fe28,#0x80      ;150f  11 28 80
    bf mem_fe69.0,lab_1534  ;1512  31 03 69 1e
    mov iiccl0,#0b00001100  ;1516  13 aa 0c
    clr1 iicc0.6            ;1519  71 6b a8
    clr1 iicc0.4            ;151c  71 4b a8
    clr1 shadow_p7.2        ;151f  2b d1        P72=0 (I2C SCL)
    mov a,shadow_p7         ;1521  f0 d1
    mov p7,a                ;1523  f2 07
    clr1 shadow_p7.1        ;1525  1b d1        P71=0 (I2C SDA)
    mov a,shadow_p7         ;1527  f0 d1
    mov p7,a                ;1529  f2 07
    set1 iicc0.7            ;152b  71 7a a8
    clr1 pm7.2              ;152e  71 2b 27     PM72=output (I2C SCL)
    clr1 pm7.1              ;1531  71 1b 27     PM71=output (I2C SDA)

lab_1534:
    br !lab_12d7            ;1534  9b d7 12

lab_1537:
    bf mem_fe5d.7,lab_153e  ;1537  31 73 5d 03
    call !sub_1ec3          ;153b  9a c3 1e

lab_153e:
    clr1 pu7.5              ;153e  71 5b 37
    set1 pm7.5              ;1541  71 5a 27
    clr1 pu0.3              ;1544  71 3b 30
    set1 pm0.3              ;1547  71 3a 20
    set1 pm8.3              ;154a  71 3a 28
    set1 pm8.4              ;154d  71 4a 28
    set1 pm8.5              ;1550  71 5a 28
    set1 pm8.6              ;1553  71 6a 28
    clr1 pu4.2              ;1556  71 2b 34
    set1 pm4.2              ;1559  71 2a 24
    clr1 pu3.5              ;155c  71 5b 33
    set1 pm3.5              ;155f  71 5a 23     PM35 = input
    set1 pm9.3              ;1562  71 3a 29
    set1 pm9.6              ;1565  71 6a 29
    clr1 mem_fe64.2         ;1568  2b 64
    bf mem_fe64.1,lab_1581  ;156a  31 13 64 13
    mov a,!mem_fb27         ;156e  8e 27 fb
    cmp a,#0x00             ;1571  4d 00
    bnz lab_1581            ;1573  bd 0c
    clr1 mem_fe64.1         ;1575  1b 64
    call !sub_44a7          ;1577  9a a7 44
    mov a,#0x00             ;157a  a1 00
    mov !mem_fb2c,a         ;157c  9e 2c fb
    set1 mem_fe64.2         ;157f  2a 64

lab_1581:
    call !sub_4495          ;1581  9a 95 44
    bz lab_158b             ;1584  ad 05
    call !sub_4234          ;1586  9a 34 42
    br lab_159f             ;1589  fa 14

lab_158b:
    cmp mem_fe30,#0x04      ;158b  c8 30 04
    bnc lab_1597            ;158e  9d 07
    mov a,!mem_f190         ;1590  8e 90 f1
    cmp a,#0x04             ;1593  4d 04
    bc lab_159c             ;1595  8d 05

lab_1597:
    call !sub_4234          ;1597  9a 34 42
    br lab_159f             ;159a  fa 03

lab_159c:
    call !sub_42be          ;159c  9a be 42

lab_159f:
    br !lab_12d7            ;159f  9b d7 12

lab_15a2:
    call !sub_3b27          ;15a2  9a 27 3b   Performs only: mov prm00,#0x00
    set1 mem_fe77.4         ;15a5  4a 77
    br !lab_12d7            ;15a7  9b d7 12

sub_15aa:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;15aa  4d 0a
    bc lab_15b4_lt_0x0a     ;15ac  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;15ae  1d 0a      A = A - 0x0A
    add a,#'A               ;15b0  0d 41      Convert to ASCII 'A'-'F'
    br lab_15b6_ret         ;15b2  fa 02
lab_15b4_lt_0x0a:
    add a,#'0               ;15b4  0d 30      Convert to ASCII '0'-'9'
lab_15b6_ret:
    ret                     ;15b6  af

lab_15b7:
    clr1 mem_fe5d.5         ;15b7  5b 5d
    call !sub_0823          ;15b9  9a 23 08
    bnz sub_1601            ;15bc  bd 43
    cmp mem_fe20,#0x05      ;15be  c8 20 05
    bnc sub_1601            ;15c1  9d 3e
    call !sub_1c8d          ;15c3  9a 8d 1c
    bc sub_1601             ;15c6  8d 39
    movw de,#mem_aca7       ;15c8  14 a7 ac
    mov a,mem_fe20          ;15cb  f0 20
    mov b,a                 ;15cd  73
    movw hl,#mem_af75_patterns ;15ce  16 75 af   HL = pointer to table of bit patterns
    mov a,[hl+b]            ;15d1  ab
    call !sub_5c64          ;15d2  9a 64 5c
    bz lab_15f9             ;15d5  ad 22
    mov b,a                 ;15d7  73
    bf mem_fe5d.7,lab_15e5  ;15d8  31 73 5d 09
    mov a,!mem_fb68         ;15dc  8e 68 fb
    cmp a,#0x05             ;15df  4d 05
    bc lab_15f4_am          ;15e1  8d 11
    br lab_15f2_fm          ;15e3  fa 0d

lab_15e5:
    bt mem_fe2c.5,lab_15f4_am ;15e5  dc 2c 0c
    cmp mem_fe43_key,#0x16    ;15e8  c8 43 16     Key = MODE_AM?
    bz lab_15f2_fm            ;15eb  ad 05
    cmp mem_fe43_key,#0x17    ;15ed  c8 43 17     Key = MODE_FM?
    bnz lab_15f4_am           ;15f0  bd 02

lab_15f2_fm:
    mov b,#0xff             ;15f2  a3 ff

lab_15f4_am:
    mov a,b                 ;15f4  63
    cmp a,#0xff             ;15f5  4d ff
    bnz lab_15fc            ;15f7  bd 03

lab_15f9:
    br !lab_168d            ;15f9  9b 8d 16

lab_15fc:
    movw hl,#mem_adae+1     ;15fc  16 af ad
    br lab_167b             ;15ff  fa 7a

sub_1601:
    mov mem_fe20,#0x00      ;1601  11 20 00
    mov mem_fe21,#0x00      ;1604  11 21 00

    mov a,#0x00             ;1607  a1 00
    mov !mem_fb57,a         ;1609  9e 57 fb
    movw hl,#mem_f252       ;160c  16 52 f2     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    call !eeram_wr_byte_hl  ;160f  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,#0x01             ;1612  a1 01
    mov !mem_fb58,a         ;1614  9e 58 fb
    movw hl,#mem_f253       ;1617  16 53 f2
    call !eeram_wr_byte_hl  ;161a  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,#0x00             ;161d  a1 00
    mov !mem_fc2f,a         ;161f  9e 2f fc
    clr1 mem_fe5c.7         ;1622  7b 5c
    call !sub_0816          ;1624  9a 16 08
    call !sub_1c5e          ;1627  9a 5e 1c
    bnc lab_1631            ;162a  9d 05
    movw de,#sub_17ef       ;162c  14 ef 17
    br lab_167f             ;162f  fa 4e

lab_1631:
    movw de,#lab_172e       ;1631  14 2e 17
    br lab_167f             ;1634  fa 49

lab_1636:
    set1 mem_fe5d.5         ;1636  5a 5d
    bt rb0_b.7,lab_1645     ;1638  fc fb 0a
    bf rb0_b.6,lab_165e     ;163b  31 63 fb 1f
    call !sub_0823          ;163f  9a 23 08
    bz lab_164d             ;1642  ad 09
    brk                     ;1644  bf           Force cold start via badisr_0d75

lab_1645:
    mov a,#0x80             ;1645  a1 80
    callt [0x0042]          ;1647  c3           Calls sub_09b9
    call !sub_1601          ;1648  9a 01 16
    br lab_165e             ;164b  fa 11

lab_164d:
    cmp mem_fe30,#0x01      ;164d  c8 30 01
    bnz lab_1658            ;1650  bd 06
    mov mem_fe20,#0x00      ;1652  11 20 00
    mov mem_fe21,#0x00      ;1655  11 21 00

lab_1658:
    call !sub_0816          ;1658  9a 16 08
    mov a,#0xc0             ;165b  a1 c0
    callt [0x0042]          ;165d  c3           Calls sub_09b9

lab_165e:
    mov a,#0x1e             ;165e  a1 1e
    mov !mem_fb08,a         ;1660  9e 08 fb
    mov a,#0x08             ;1663  a1 08
    callt [0x0046]          ;1665  c7           Calls sub_096c
    call !sub_0823          ;1666  9a 23 08
    bnz sub_1601            ;1669  bd 96
    cmp mem_fe20,#0x05      ;166b  c8 20 05
    bnc sub_1601            ;166e  9d 91
    call !sub_1c8d          ;1670  9a 8d 1c
    bc sub_1601             ;1673  8d 8c
    movw hl,#mem_ade3+1     ;1675  16 e4 ad
    mov a,mem_fe21          ;1678  f0 21
    mov b,a                 ;167a  73

lab_167b:
    callf !table_get_word   ;167b  4c 48        Load DE with word at position B in table [HL]
    bc sub_1601             ;167d  8d 82        Branch if table lookup failed

lab_167f:
    movw ax,#lab_1686       ;167f  10 86 16
    push ax                 ;1682  b1
    movw ax,de              ;1683  c4
    br ax                   ;1684  31 98

lab_1686:
    bf mem_fe5c.7,lab_168d  ;1686  31 73 5c 03
    call !sub_1601          ;168a  9a 01 16

lab_168d:
    call !sub_1c6f          ;168d  9a 6f 1c
    bt mem_fe5d.5,lab_1695  ;1690  dc 5d 02
    clr1 mem_fe5c.3         ;1693  3b 5c

lab_1695:
    br !sub_0823            ;1695  9b 23 08

lab_1698:
    callf !sub_099c         ;1698  1c 9c
    ret                     ;169a  af

lab_169b:
    set1 mem_fe5b.0         ;169b  0a 5b
    cmp mem_fe21,#0x0b      ;169d  c8 21 0b
    bnz lab_16a7            ;16a0  bd 05
    call !sub_1a17          ;16a2  9a 17 1a
    br lab_16b1             ;16a5  fa 0a

lab_16a7:
    call !sub_17ef          ;16a7  9a ef 17
    cmp mem_fe20,#0x03      ;16aa  c8 20 03
    bz lab_16b1             ;16ad  ad 02

lab_16af:
    clr1 mem_fe5b.0         ;16af  0b 5b

lab_16b1:
    bt mem_fe5c.3,lab_16f5  ;16b1  bc 5c 41
    mov mem_fe21,#0x00      ;16b4  11 21 00
    call !sub_080b_fm1fm2   ;16b7  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov b,a                 ;16ba  73
    movw hl,#mem_fb5b       ;16bb  16 5b fb
    mov a,mem_fe43_key      ;16be  f0 43
    sub a,#0x00             ;16c0  1d 00
    mov !mem_fb5a,a         ;16c2  9e 5a fb
    mov [hl+b],a            ;16c5  bb
    set1 mem_fe5c.2         ;16c6  2a 5c
    cmp mem_fe21,#0x0a      ;16c8  c8 21 0a
    bz lab_16e9             ;16cb  ad 1c
    cmp mem_fe21,#0x0b      ;16cd  c8 21 0b
    bz lab_16e9             ;16d0  ad 17
    call !sub_a694          ;16d2  9a 94 a6
    cmp a,#0x00             ;16d5  4d 00
    mov a,#0x80             ;16d7  a1 80
    bnz lab_16e6            ;16d9  bd 0b
    mov a,!mem_f1ab         ;16db  8e ab f1
    and a,#0x7f             ;16de  5d 7f
    cmp a,#0x00             ;16e0  4d 00
    bnz lab_16e9            ;16e2  bd 05
    mov a,#0xc0             ;16e4  a1 c0

lab_16e6:
    mov !mem_f1ab,a         ;16e6  9e ab f1

lab_16e9:
    cmp mem_fe20,#0x01      ;16e9  c8 20 01
    bz lab_16f4             ;16ec  ad 06
    btclr mem_fe5b.0,lab_16f4 ;16ee  31 01 5b 02
    br lab_16fb             ;16f2  fa 07

lab_16f4:
    ret                     ;16f4  af

lab_16f5:
    mov a,#0x00             ;16f5  a1 00
    mov !mem_fc2f,a         ;16f7  9e 2f fc
    ret                     ;16fa  af

lab_16fb:
    call !sub_1a82          ;16fb  9a 82 1a
    mov b,a                 ;16fe  73
    call !sub_1a43          ;16ff  9a 43 1a
    call !sub_1a17          ;1702  9a 17 1a
    mov a,#0x80             ;1705  a1 80
    mov !mem_f1ab,a         ;1707  9e ab f1
    br !lab_178e            ;170a  9b 8e 17

lab_170d:
    mov a,!mem_fc91         ;170d  8e 91 fc
    cmp a,#0x00             ;1710  4d 00
    bnz lab_1716            ;1712  bd 02
    set1 mem_fe5b.1         ;1714  1a 5b

lab_1716:
    call !sub_1a82          ;1716  9a 82 1a
    mov b,a                 ;1719  73
    call !sub_1a2c          ;171a  9a 2c 1a
    mov a,#0x80             ;171d  a1 80
    mov !mem_f1ab,a         ;171f  9e ab f1
    mov mem_fe21,#0x00      ;1722  11 21 00
    set1 mem_fe5c.2         ;1725  2a 5c
    call !sub_a74b          ;1727  9a 4b a7
    ret                     ;172a  af

lab_172b:
    call !sub_1a51          ;172b  9a 51 1a

lab_172e:
    call !sub_1d4f          ;172e  9a 4f 1d
    call !get_cur_freq_idx  ;1731  9a 73 1a
    mov !freq_idx,a         ;1734  9e 56 fb
    mov mem_fe20,#0x00      ;1737  11 20 00

lab_173a:
    mov mem_fe21,#0x01      ;173a  11 21 01
    mov a,#0x20             ;173d  a1 20
    callt [0x0042]          ;173f  c3           Calls sub_09b9
    bt mem_fe2d.0,lab_1745  ;1740  8c 2d 02

lab_1743:
    br lab_174c             ;1743  fa 07

lab_1745:
    mov mem_fe21,#0x02      ;1745  11 21 02
    call !sub_1bff          ;1748  9a ff 1b
    ret                     ;174b  af

lab_174c:
    clr1 mem_fe5c.4         ;174c  4b 5c
    ret                     ;174e  af

lab_174f:
    call !sub_1a51          ;174f  9a 51 1a
    br lab_1772             ;1752  fa 1e

lab_1754:
    set1 mem_fe5d.6         ;1754  6a 5d
    set1 mem_fe5d.1         ;1756  1a 5d

lab_1758:
    set1 mem_fe5c.6         ;1758  6a 5c      Freq inc/dec flag = 1=increment
    br lab_1762             ;175a  fa 06

lab_175c:
    set1 mem_fe5d.6         ;175c  6a 5d
    set1 mem_fe5d.1         ;175e  1a 5d

lab_1760:
    clr1 mem_fe5c.6         ;1760  6b 5c      Freq inc/dec flag = 0=decrement

lab_1762:
    cmp mem_fe20,#0x03      ;1762  c8 20 03
    bz lab_176c             ;1765  ad 05
    cmp mem_fe20,#0x02      ;1767  c8 20 02
    bnz lab_176f            ;176a  bd 03

lab_176c:
    call !sub_1a5d          ;176c  9a 5d 1a

lab_176f:
    call !freq_idx_inc_dec  ;176f  9a 4b 1b   Increment or decrement freq_idx based on flag mem_fe5c.6

lab_1772:
    call !sub_1d59          ;1772  9a 59 1d
    call !freq_idx_constrain;1775  9a d1 1a   Constrain freq_idx to its allowed range
    clr1 mem_fe5c.2         ;1778  2b 5c
    call !sub_a694          ;177a  9a 94 a6
    cmp a,#0x00             ;177d  4d 00
    mov a,#0x80             ;177f  a1 80
    bnz lab_1785            ;1781  bd 02
    mov a,#0xc0             ;1783  a1 c0

lab_1785:
    mov !mem_f1ab,a         ;1785  9e ab f1
    bt mem_fe5d.6,lab_178e  ;1788  ec 5d 03
    call !sub_1a17          ;178b  9a 17 1a

lab_178e:
    clr1 mem_fe5d.6         ;178e  6b 5d
    mov c,#0x11             ;1790  a2 11
    call !sub_19f1          ;1792  9a f1 19
    bc lab_1798             ;1795  8d 01
    ret                     ;1797  af

lab_1798:
    br !lab_1945            ;1798  9b 45 19

lab_179b:
    call !sub_1ba5          ;179b  9a a5 1b
    br lab_17bd             ;179e  fa 1d

lab_17a0:
    call !sub_1bbb          ;17a0  9a bb 1b
    br lab_17bd             ;17a3  fa 18

lab_17a5:
    call !sub_0800_mode     ;17a5  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x02             ;17a8  4d 02
    bnz lab_17b8            ;17aa  bd 0c
    ;mem_f253=0x02 (AM)
    cmp mem_fe20,#0x02      ;17ac  c8 20 02
    bz lab_17b6             ;17af  ad 05
    cmp mem_fe20,#0x03      ;17b1  c8 20 03
    bnz lab_17cd            ;17b4  bd 17

lab_17b6:
    br lab_17e2             ;17b6  fa 2a

lab_17b8:
    call !sub_1bc2          ;17b8  9a c2 1b
    br lab_17bd             ;17bb  fa 00

lab_17bd:
    mov mem_fe20,#0x01      ;17bd  11 20 01
    call !sub_1a5d          ;17c0  9a 5d 1a
    call !sub_1b24          ;17c3  9a 24 1b
    mov c,#0x13             ;17c6  a2 13
    call !sub_19f4          ;17c8  9a f4 19
    bc lab_17df             ;17cb  8d 12

lab_17cd:
    ret                     ;17cd  af

lab_17ce:
    bt mem_fe7d.2,lab_17df  ;17ce  ac 7d 0e
    call !sub_1bc8          ;17d1  9a c8 1b
    call !sub_1a5d          ;17d4  9a 5d 1a
    mov c,#0x13             ;17d7  a2 13
    call !sub_19f4          ;17d9  9a f4 19
    bc lab_17df             ;17dc  8d 01
    ret                     ;17de  af

lab_17df:
    call !sub_1b24          ;17df  9a 24 1b

lab_17e2:
    clr1 mem_fe5c.5         ;17e2  5b 5c
    call !sub_1c5e          ;17e4  9a 5e 1c
    bc lab_17ec             ;17e7  8d 03
    br !lab_172e            ;17e9  9b 2e 17

lab_17ec:
    call !sub_1bff          ;17ec  9a ff 1b

sub_17ef:
    call !sub_1a5d          ;17ef  9a 5d 1a
    call !sub_1d4f          ;17f2  9a 4f 1d
    call !sub_a694          ;17f5  9a 94 a6
    cmp a,#0x00             ;17f8  4d 00
    mov a,#0x80             ;17fa  a1 80
    bnz lab_1800            ;17fc  bd 02
    mov a,#0xc0             ;17fe  a1 c0

lab_1800:
    mov !mem_f1ab,a         ;1800  9e ab f1
    call !sub_1ac1          ;1803  9a c1 1a
    call !sub_1a17          ;1806  9a 17 1a
    br !lab_1934            ;1809  9b 34 19

lab_180c:
    cmp mem_fe21,#0x0b      ;180c  c8 21 0b
    bnz sub_17ef            ;180f  bd de
    br !lab_1945            ;1811  9b 45 19

lab_1814:
    set1 mem_fe5c.6         ;1814  6a 5c        Freq inc/dec flag = 1=increment
    call !sub_1b59          ;1816  9a 59 1b
    br !lab_1934            ;1819  9b 34 19

lab_181c:
    set1 mem_fe5c.6         ;181c  6a 5c        Freq inc/dec flag = 1=increment

lab_181e:
    mov mem_fe20,#0x04      ;181e  11 20 04
    call !sub_1b59          ;1821  9a 59 1b
    mov a,#0x85             ;1824  a1 85
    mov !mem_f1ab,a         ;1826  9e ab f1
    mov c,#0x08             ;1829  a2 08
    call !sub_19f1          ;182b  9a f1 19
    bc lab_1831             ;182e  8d 01
    ret                     ;1830  af

lab_1831:
    mov a,#0x32             ;1831  a1 32
    mov !mem_fb21,a         ;1833  9e 21 fb
    mov a,!mem_fb61         ;1836  8e 61 fb
    mov !mem_fb62,a         ;1839  9e 62 fb
    call !sub_0840          ;183c  9a 40 08

lab_183f:
    mov mem_fe21,#0x04      ;183f  11 21 04
    bf mem_fe5b.4,lab_1868  ;1842  31 43 5b 22
    bf mem_fe5b.5,lab_1869  ;1846  31 53 5b 1f
    call !sub_0858          ;184a  9a 58 08

lab_184d:
    mov mem_fe21,#0x05      ;184d  11 21 05
    bf mem_fe5b.6,lab_1868  ;1850  31 63 5b 14
    bf mem_fe5b.7,lab_1869  ;1854  31 73 5b 11

lab_1858:
    call !sub_1a17          ;1858  9a 17 1a
    call !sub_19a1          ;185b  9a a1 19
    mov a,!mem_fb21         ;185e  8e 21 fb
    cmp a,#0x00             ;1861  4d 00
    bz lab_181e             ;1863  ad b9
    mov mem_fe21,#0x06      ;1865  11 21 06

lab_1868:
    ret                     ;1868  af

lab_1869:
    mov a,!mem_fb21         ;1869  8e 21 fb
    cmp a,#0x30             ;186c  4d 30
    bc lab_181e             ;186e  8d ae
    mov mem_fe21,#0x07      ;1870  11 21 07
    ret                     ;1873  af

lab_1874:
    mov mem_fe20,#0x03      ;1874  11 20 03
    call !sub_7697_snd_cd   ;1877  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x83             ;187a  a1 83
    mov !mem_f1ab,a         ;187c  9e ab f1
    ret                     ;187f  af

lab_1880:
    set1 mem_fe5c.6         ;1880  6a 5c        Freq inc/dec flag = 1=increment
    br lab_1886             ;1882  fa 02

lab_1884:
    clr1 mem_fe5c.6         ;1884  6b 5c        Freq inc/dec flag = 0=decrement

lab_1886:
    bt mem_fe66.6,lab_18e9  ;1886  ec 66 60
    mov mem_fe20,#0x03      ;1889  11 20 03
    call !sub_1a17          ;188c  9a 17 1a
    call !sub_1d59          ;188f  9a 59 1d

lab_1892:
    call !sub_7697_snd_cd   ;1892  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x83             ;1895  a1 83
    mov !mem_f1ab,a         ;1897  9e ab f1
    mov a,#0x00             ;189a  a1 00
    mov !mem_fb64,a         ;189c  9e 64 fb
    mov a,!mem_fb60         ;189f  8e 60 fb

lab_18a2:
    mov !mem_fb62,a         ;18a2  9e 62 fb

lab_18a5:
    mov mem_fe21,#0x09      ;18a5  11 21 09
    call !sub_a74b          ;18a8  9a 4b a7
    bc lab_18e9             ;18ab  8d 3c
    call !sub_0836          ;18ad  9a 36 08

lab_18b0:
    mov mem_fe21,#0x0a      ;18b0  11 21 0a
    bf mem_fe5b.2,lab_18e9  ;18b3  31 23 5b 32
    bf mem_fe5b.3,lab_18c3  ;18b7  31 33 5b 08
    call !sub_19df          ;18bb  9a df 19
    bc lab_18a2             ;18be  8d e2
    br !lab_1945            ;18c0  9b 45 19

lab_18c3:
    mov a,#0x32             ;18c3  a1 32
    mov !mem_fb21,a         ;18c5  9e 21 fb
    call !sub_1b24          ;18c8  9a 24 1b

lab_18cb:
    call !sub_19a1          ;18cb  9a a1 19
    mov a,!mem_fb21         ;18ce  8e 21 fb
    cmp a,#0x00             ;18d1  4d 00
    bz lab_1892             ;18d3  ad bd
    cmp mem_fe21,#0x0b      ;18d5  c8 21 0b
    bz lab_18e6             ;18d8  ad 0c
    call !sub_a694          ;18da  9a 94 a6
    cmp a,#0x00             ;18dd  4d 00
    bnz lab_18e6            ;18df  bd 05
    mov a,#0xc9             ;18e1  a1 c9
    mov !mem_f1ab,a         ;18e3  9e ab f1

lab_18e6:
    mov mem_fe21,#0x0b      ;18e6  11 21 0b

lab_18e9:
    ret                     ;18e9  af

lab_18ea:
    set1 mem_fe5c.6         ;18ea  6a 5c        Freq inc/dec flag = 1=increment
    br lab_18f0             ;18ec  fa 02

lab_18ee:
    clr1 mem_fe5c.6         ;18ee  6b 5c        Freq inc/dec flag = 0=decrement

lab_18f0:
    call !sub_1d59          ;18f0  9a 59 1d
    call !sub_7697_snd_cd   ;18f3  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x80             ;18f6  a1 80
    mov !mem_f1ab,a         ;18f8  9e ab f1
    cmp mem_fe20,#0x03      ;18fb  c8 20 03
    bnz lab_1903            ;18fe  bd 03
    call !sub_1a5d          ;1900  9a 5d 1a

lab_1903:
    mov a,#0x00             ;1903  a1 00
    mov !mem_fb64,a         ;1905  9e 64 fb
    mov mem_fe20,#0x02      ;1908  11 20 02
    mov b,#0x00             ;190b  a3 00
    call !sub_1b40          ;190d  9a 40 1b
    mov a,!mem_fb60         ;1910  8e 60 fb

lab_1913:
    mov !mem_fb62,a         ;1913  9e 62 fb

lab_1916:
    mov mem_fe21,#0x0c      ;1916  11 21 0c
    call !sub_a74b          ;1919  9a 4b a7
    bc lab_1933             ;191c  8d 15
    call !sub_0836          ;191e  9a 36 08

lab_1921:
    mov mem_fe21,#0x0d      ;1921  11 21 0d
    bf mem_fe5b.2,lab_1933  ;1924  31 23 5b 0b
    bf mem_fe5b.3,lab_1945  ;1928  31 33 5b 19
    call !sub_19df          ;192c  9a df 19
    bnc lab_1945            ;192f  9d 14
    br lab_1913             ;1931  fa e0

lab_1933:
    ret                     ;1933  af

lab_1934:
    mov c,#0x12             ;1934  a2 12
    call !sub_19f1          ;1936  9a f1 19
    bc lab_193c             ;1939  8d 01
    ret                     ;193b  af

lab_193c:
    set1 mem_fe5d.2         ;193c  2a 5d
    call !sub_60a0          ;193e  9a a0 60
    mov mem_fe21,#0x14      ;1941  11 21 14
    ret                     ;1944  af

lab_1945:
    mov mem_fe20,#0x01      ;1945  11 20 01
    mov mem_fe21,#0x0e      ;1948  11 21 0e
    mov a,!mem_fc2f         ;194b  8e 2f fc
    cmp a,#0x00             ;194e  4d 00
    bz lab_1955             ;1950  ad 03
    br !lab_19de            ;1952  9b de 19

lab_1955:
    call !sub_1ac1          ;1955  9a c1 1a
    mov a,#0x80             ;1958  a1 80
    mov !mem_f1ab,a         ;195a  9e ab f1
    call !sub_a694          ;195d  9a 94 a6
    cmp a,#0x00             ;1960  4d 00
    bnz lab_1969            ;1962  bd 05
    mov a,#0xc0             ;1964  a1 c0
    mov !mem_f1ab,a         ;1966  9e ab f1

lab_1969:
    bf mem_fe5b.3,lab_196f  ;1969  31 33 5b 02
    clr1 mem_fe5b.3         ;196d  3b 5b

lab_196f:
    call !sub_1b24          ;196f  9a 24 1b
    mov a,!mem_fb5a         ;1972  8e 5a fb
    cmp a,#0x00             ;1975  4d 00
    bz lab_1986             ;1977  ad 0d
    set1 mem_fe75.3         ;1979  3a 75
    btclr mem_fe5b.1,lab_1981 ;197b  31 11 5b 02
    clr1 mem_fe75.3         ;197f  3b 75

lab_1981:
    call !sub_a06b          ;1981  9a 6b a0
    br lab_198d             ;1984  fa 07

lab_1986:
    mov a,#0x00             ;1986  a1 00
    mov !mem_fc91,a         ;1988  9e 91 fc
    set1 mem_fe73.3         ;198b  3a 73

lab_198d:
    mov mem_fe21,#0x0f      ;198d  11 21 0f
    mov a,#0x1e             ;1990  a1 1e
    mov !mem_fb09,a         ;1992  9e 09 fb
    call !sub_0800_mode     ;1995  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x02             ;1998  4d 02
    bnz sub_19a1            ;199a  bd 05
    ;mem_f253=0x02 (AM)
    mov a,#0x4b             ;199c  a1 4b
    mov !mem_fb09,a         ;199e  9e 09 fb

sub_19a1:
    call !sub_0800_mode     ;19a1  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;19a4  4d 01
    bnz lab_19aa            ;19a6  bd 02
    ;mem_f253=0x02 (FM1/FM2)
    br lab_19aa             ;19a8  fa 00

lab_19aa:
    mov a,#0x20             ;19aa  a1 20
    callt [0x0044]          ;19ac  c5           Calls sub_09c6
    cmp mem_fe21,#0x0a      ;19ad  c8 21 0a
    bz lab_19ce             ;19b0  ad 1c
    cmp mem_fe21,#0x0b      ;19b2  c8 21 0b
    bz lab_19ce             ;19b5  ad 17
    call !sub_a694          ;19b7  9a 94 a6
    cmp a,#0x00             ;19ba  4d 00
    mov a,#0x80             ;19bc  a1 80
    bnz lab_19cb            ;19be  bd 0b
    mov a,!mem_f1ab         ;19c0  8e ab f1
    and a,#0x7f             ;19c3  5d 7f
    cmp a,#0x00             ;19c5  4d 00
    bnz lab_19ce            ;19c7  bd 05
    mov a,#0xc0             ;19c9  a1 c0

lab_19cb:
    mov !mem_f1ab,a         ;19cb  9e ab f1

lab_19ce:
    call !sub_608d          ;19ce  9a 8d 60
    mov a,!mem_fb09         ;19d1  8e 09 fb
    cmp a,#0x00             ;19d4  4d 00
    bnz lab_19de            ;19d6  bd 06
    call !sub_614a          ;19d8  9a 4a 61
    call !sub_a780          ;19db  9a 80 a7

lab_19de:
    ret                     ;19de  af

sub_19df:
    mov a,!mem_fb64         ;19df  8e 64 fb
    inc a                   ;19e2  41
    mov !mem_fb64,a         ;19e3  9e 64 fb
    cmp a,#0x02             ;19e6  4d 02
    bnc lab_19f0            ;19e8  9d 06
    mov b,a                 ;19ea  73
    movw hl,#mem_fb60       ;19eb  16 60 fb
    mov a,[hl+b]            ;19ee  ab
    set1 cy                 ;19ef  20

lab_19f0:
    ret                     ;19f0  af

sub_19f1:
    call !sub_0800_mode     ;19f1  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58a

sub_19f4:
    mov a,c                 ;19f4  62
    mov !mem_fb65,a         ;19f5  9e 65 fb

lab_19f8:
    call !sub_a74b          ;19f8  9a 4b a7
    bnc lab_1a02            ;19fb  9d 05
    mov mem_fe21,#0x10      ;19fd  11 21 10
    clr1 cy                 ;1a00  21
    ret                     ;1a01  af

lab_1a02:
    mov a,!mem_fb65         ;1a02  8e 65 fb
    mov mem_fe21,a          ;1a05  f2 21
    call !sub_609e          ;1a07  9a 9e 60
    set1 cy                 ;1a0a  20
    ret                     ;1a0b  af

sub_1a0c:
    xch a,b                 ;1a0c  33
    cmp a,#0x07             ;1a0d  4d 07
    bc lab_1a15_bc          ;1a0f  8d 04
    mov a,#0x00             ;1a11  a1 00
    set1 mem_fe5c.7         ;1a13  7a 5c

lab_1a15_bc:
    xch a,b                 ;1a15  33
    ret                     ;1a16  af

sub_1a17:
    mov b,#0x00             ;1a17  a3 00
    call !sub_080b_fm1fm2   ;1a19  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov !mem_fb5e,a         ;1a1c  9e 5e fb
    call !sub_0800_mode     ;1a1f  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;1a22  4d 01
    bnz sub_1a2c            ;1a24  bd 06
    ;mem_f253=0x01 (FM1/FM2)
    call !sub_080b_fm1fm2   ;1a26  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov !mem_fb5f,a         ;1a29  9e 5f fb

sub_1a2c:
    call !find_preset_addr  ;1a2c  9a ea 1a
    cmp mem_fe58,#0x01      ;1a2f  c8 58 01
    bnz lab_1a3c            ;1a32  bd 08
    mov a,!mem_fc9c         ;1a34  8e 9c fc
    mov b,#0x01             ;1a37  a3 01
    call !eeram_wr_byte_hl_b;1a39  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum

lab_1a3c:
    mov a,!freq_idx         ;1a3c  8e 56 fb
    call !eeram_wr_byte_hl  ;1a3f  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    ret                     ;1a42  af

sub_1a43:
    set1 mem_fe5c.2         ;1a43  2a 5c
    mov a,!mem_fb5a         ;1a45  8e 5a fb
    mov b,a                 ;1a48  73
    call !sub_1a66          ;1a49  9a 66 1a
    call !freq_idx_constrain;1a4c  9a d1 1a     Constrain freq_idx to its allowed range
    br lab_1a3c             ;1a4f  fa eb

sub_1a51:
    mov a,!mem_fb5e         ;1a51  8e 5e fb
    mov !mem_fb57,a         ;1a54  9e 57 fb
    movw hl,#mem_f252       ;1a57  16 52 f2     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    call !eeram_wr_byte_hl  ;1a5a  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

sub_1a5d:
    mov b,#0x00             ;1a5d  a3 00
    mov a,#0x00             ;1a5f  a1 00
    mov !mem_fb5a,a         ;1a61  9e 5a fb
    clr1 mem_fe5d.0         ;1a64  0b 5d

sub_1a66:
    call !get_pset_freq_idx ;1a66  9a 75 1a
    mov !freq_idx,a         ;1a69  9e 56 fb
    push hl                 ;1a6c  b7
    mov a,x                 ;1a6d  60
    call !sub_a7ce          ;1a6e  9a ce a7
    pop hl                  ;1a71  b6
    ret                     ;1a72  af

get_cur_freq_idx:
    mov b,#0x00             ;1a73  a3 00        B = 0 (Current Frequency Index)

get_pset_freq_idx:
    call !find_preset_addr  ;1a75  9a ea 1a     HL = address of Frequency Index
    mov a,[hl+0x01]         ;1a78  ae 01
    mov x,a                 ;1a7a  70
    mov a,[hl]              ;1a7b  87
    ret                     ;1a7c  af

sub_1a7d:
    movw hl,#mem_f24f       ;1a7d  16 4f f2
    br lab_1a85             ;1a80  fa 03

sub_1a82:
    movw hl,#mem_fb5b       ;1a82  16 5b fb

lab_1a85:
    call !sub_080b_fm1fm2   ;1a85  9a 0b 08
    mov c,a                 ;1a88  72
    mov a,[hl+c]            ;1a89  aa
    mov b,a                 ;1a8a  73
    ret                     ;1a8b  af

sub_1a8c:
    call !sub_1a82          ;1a8c  9a 82 1a
    cmp a,#0x00             ;1a8f  4d 00
    bz lab_1a97             ;1a91  ad 04
    cmp a,#0x07             ;1a93  4d 07
    bc lab_1a9c             ;1a95  8d 05

lab_1a97:
    mov a,#0x01             ;1a97  a1 01
    mov [hl+c],a            ;1a99  ba
    br lab_1aa8             ;1a9a  fa 0c

lab_1a9c:
    mov b,a                 ;1a9c  73

sub_1a9d:
    call !get_pset_freq_idx ;1a9d  9a 75 1a
    cmp a,!freq_idx         ;1aa0  48 56 fb
    bnz lab_1aa8            ;1aa3  bd 03
    mov a,b                 ;1aa5  63
    clr1 cy                 ;1aa6  21
    ret                     ;1aa7  af

lab_1aa8:
    set1 cy                 ;1aa8  20
    ret                     ;1aa9  af

sub_1aaa:
    clr1 mem_fe5c.2         ;1aaa  2b 5c
    call !sub_1a8c          ;1aac  9a 8c 1a
    bc lab_1ab2             ;1aaf  8d 01
    ret                     ;1ab1  af

lab_1ab2:
    mov b,#0x01             ;1ab2  a3 01

lab_1ab4:
    call !sub_1a9d          ;1ab4  9a 9d 1a
    bnc lab_1ac0            ;1ab7  9d 07
    inc b                   ;1ab9  43
    cmp rb0_b,#0x07         ;1aba  c8 fb 07
    bc lab_1ab4             ;1abd  8d f5
    set1 cy                 ;1abf  20

lab_1ac0:
    ret                     ;1ac0  af

sub_1ac1:
    clr1 mem_fe5c.2         ;1ac1  2b 5c
    call !freq_idx_constrain;1ac3  9a d1 1a     Constrain freq_idx to its allowed range
    call !sub_1aaa          ;1ac6  9a aa 1a
    bc lab_1ad0             ;1ac9  8d 05
    set1 mem_fe5c.2         ;1acb  2a 5c
    mov !mem_fb5a,a         ;1acd  9e 5a fb

lab_1ad0:
    ret                     ;1ad0  af

;Constrain freq_idx to its allowed range
freq_idx_constrain:
    mov a,!freq_idx         ;1ad1  8e 56 fb
    cmp a,!freq_idx_max     ;1ad4  48 59 fb
    bz lab_1ae6_done        ;1ad7  ad 0d
    bc lab_1adf             ;1ad9  8d 04
    mov a,#0x01             ;1adb  a1 01
    br lab_1ae6_done        ;1add  fa 07

lab_1adf:
    cmp a,#0x00             ;1adf  4d 00
    bnz lab_1ae6_done       ;1ae1  bd 03

    mov a,!freq_idx_max     ;1ae3  8e 59 fb

lab_1ae6_done:
    mov !freq_idx,a         ;1ae6  9e 56 fb
    ret                     ;1ae9  af

;Find RAM address of frequency index
;B = Preset number (0=current channel, 1-6)
;Returns location in HL
find_preset_addr:
    push ax                 ;1aea  b1
    mov x,#0x0e             ;1aeb  a0 0e
    call !sub_080b_fm1fm2   ;1aed  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mulu x                  ;1af0  31 88        AX = A * X
    xch a,x                 ;1af2  30
    add a,#<mem_f225        ;1af3  0d 25
    xch a,x                 ;1af5  30
    addc a,#>mem_f225       ;1af6  2d f2
    movw hl,ax              ;1af8  d6
    call !sub_1a0c          ;1af9  9a 0c 1a
    mov a,b                 ;1afc  63
    mov x,#2                ;1afd  a0 02
    mulu x                  ;1aff  31 88        AX = A * X
    xch a,x                 ;1b01  30
    add l,a                 ;1b02  61 06
    xch a,x                 ;1b04  30
    addc h,a                ;1b05  61 27
    pop ax                  ;1b07  b0
    ret                     ;1b08  af

;XXX appears unused
sub_1b09:
    mov b,#0x00             ;1b09  a3 00        B=0 (Current Frequency Index)
    call !find_preset_addr  ;1b0b  9a ea 1a
    mov a,!mem_fc9c         ;1b0e  8e 9c fc
    mov b,#0x01             ;1b11  a3 01
    call !eeram_wr_byte_hl_b;1b13  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    movw hl,#mem_f24f       ;1b16  16 4f f2
    call !sub_080b_fm1fm2   ;1b19  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov b,a                 ;1b1c  73
    mov a,!mem_fc9c         ;1b1d  8e 9c fc
    call !eeram_wr_byte_hl_b;1b20  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    ret                     ;1b23  af

sub_1b24:
    call !sub_1aaa          ;1b24  9a aa 1a
    bc lab_1b3a             ;1b27  8d 11
    set1 mem_fe5c.2         ;1b29  2a 5c
    mov !mem_fb5a,a         ;1b2b  9e 5a fb
    bt mem_fe5d.0,sub_1b40  ;1b2e  8c 5d 0f
    call !get_pset_freq_idx ;1b31  9a 75 1a
    mov a,x                 ;1b34  60
    call !sub_a7ce          ;1b35  9a ce a7
    br sub_1b40             ;1b38  fa 06

lab_1b3a:
    call !sub_1a7d          ;1b3a  9a 7d 1a
    call !sub_a7ce          ;1b3d  9a ce a7

sub_1b40:
    clr1 mem_fe5d.0         ;1b40  0b 5d
    bt mem_fe5d.1,lab_1b48  ;1b42  9c 5d 03
    br !sub_1a17            ;1b45  9b 17 1a

lab_1b48:
    clr1 mem_fe5d.1         ;1b48  1b 5d
    ret                     ;1b4a  af

;Increment or decrement freq_idx based on flag mem_fe5c.6
freq_idx_inc_dec:
    mov a,!freq_idx         ;1b4b  8e 56 fb
    bt mem_fe5c.6,lab_1b54  ;1b4e  ec 5c 03     Freq inc/dec flag = 1=increment
    dec a                   ;1b51  51
    br lab_1b55             ;1b52  fa 01

lab_1b54:
    inc a                   ;1b54  41

lab_1b55:
    mov !freq_idx,a         ;1b55  9e 56 fb
    ret                     ;1b58  af

sub_1b59:
    call !sub_1aaa          ;1b59  9a aa 1a
    bnc lab_1b5e            ;1b5c  9d 00

lab_1b5e:
    mov mem_fed4,a          ;1b5e  f2 d4
    inc mem_fed4            ;1b60  81 d4
    cmp mem_fed4,#0x07      ;1b62  c8 d4 07
    bc lab_1b92             ;1b65  8d 2b
    mov mem_fed4,#0x01      ;1b67  11 d4 01

lab_1b6a:
    call !sub_080b_fm1fm2   ;1b6a  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    inc a                   ;1b6d  41
    movw hl,#mem_f252       ;1b6e  16 52 f2
    mov !mem_fb57,a         ;1b71  9e 57 fb
    call !eeram_wr_byte_hl  ;1b74  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    call !sub_1c32          ;1b77  9a 32 1c
    bnc lab_1b89            ;1b7a  9d 0d

    mov a,#0xff             ;1b7c  a1 ff
    mov !mem_fb57,a         ;1b7e  9e 57 fb
    movw hl,#mem_f252       ;1b81  16 52 f2
    call !eeram_wr_byte_hl  ;1b84  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    br lab_1b6a             ;1b87  fa e1

lab_1b89:
    callf !ror_a_4          ;1b89  2c 9e
    and a,#0x0f             ;1b8b  5d 0f
    call !sub_0807          ;1b8d  9a 07 08
    bnz lab_1b6a            ;1b90  bd d8

lab_1b92:
    mov a,mem_fed4          ;1b92  f0 d4
    mov !mem_fb5a,a         ;1b94  9e 5a fb
    movw hl,#mem_fb5b       ;1b97  16 5b fb
    call !sub_080b_fm1fm2   ;1b9a  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov c,a                 ;1b9d  72
    mov a,!mem_fb5a         ;1b9e  8e 5a fb
    mov [hl+c],a            ;1ba1  ba
    br !sub_1a43            ;1ba2  9b 43 1a

sub_1ba5:
    call !sub_0800_mode     ;1ba5  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;1ba8  4d 01
    bnz sub_1bbb            ;1baa  bd 0f
    ;mem_f253=0x01 (FM1/FM2)

lab_1bac:
    call !sub_1bc8          ;1bac  9a c8 1b
    call !sub_0800_mode     ;1baf  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;1bb2  4d 01
    bnz lab_1bac            ;1bb4  bd f6
    ;mem_f253=0x01 (FM1/FM2)
    call !sub_080b_fm1fm2   ;1bb6  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    br lab_1bf4             ;1bb9  fa 39

sub_1bbb:
    set1 mem_fe5b.1         ;1bbb  1a 5b
    mov a,!mem_fb5f         ;1bbd  8e 5f fb
    br lab_1bf4             ;1bc0  fa 32

sub_1bc2:
    set1 mem_fe5b.1         ;1bc2  1a 5b
    mov a,#0x02             ;1bc4  a1 02
    br lab_1bf4             ;1bc6  fa 2c

sub_1bc8:
    call !sub_080b_fm1fm2   ;1bc8  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    inc a                   ;1bcb  41
    movw hl,#mem_f252       ;1bcc  16 52 f2
    mov !mem_fb57,a         ;1bcf  9e 57 fb
    call !eeram_wr_byte_hl  ;1bd2  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    call !sub_1c32          ;1bd5  9a 32 1c
    bnc lab_1bee            ;1bd8  9d 14
    call !sub_080b_fm1fm2   ;1bda  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    cmp a,#0x05             ;1bdd  4d 05
    bc sub_1bc8             ;1bdf  8d e7

    mov a,#0xff             ;1be1  a1 ff
    mov !mem_fb57,a         ;1be3  9e 57 fb
    movw hl,#mem_f252       ;1be6  16 52 f2
    call !eeram_wr_byte_hl  ;1be9  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    br sub_1bc8             ;1bec  fa da

lab_1bee:
    mov x,a                 ;1bee  70
    and a,#0xf0             ;1bef  5d f0
    callf !ror_a_4          ;1bf1  2c 9e
    xch a,x                 ;1bf3  30

lab_1bf4:
    and a,#0x0f             ;1bf4  5d 0f
    movw hl,#mem_f252       ;1bf6  16 52 f2
    mov !mem_fb57,a         ;1bf9  9e 57 fb
    call !eeram_wr_byte_hl  ;1bfc  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

sub_1bff:
    call !sub_1c32          ;1bff  9a 32 1c
    and a,#0xf0             ;1c02  5d f0
    ror a,1                 ;1c04  24
    ror a,1                 ;1c05  24
    ror a,1                 ;1c06  24
    ror a,1                 ;1c07  24
    push hl                 ;1c08  b7
    movw hl,#mem_f253       ;1c09  16 53 f2
    mov !mem_fb58,a         ;1c0c  9e 58 fb
    call !eeram_wr_byte_hl  ;1c0f  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    pop hl                  ;1c12  b6
    dec a                   ;1c13  51
    mov x,#0x02             ;1c14  a0 02
    mulu x                  ;1c16  31 88        AX = A * X
    mov a,[hl+0x04]         ;1c18  ae 04
    mov !freq_idx_max,a     ;1c1a  9e 59 fb
    mov b,#0x02             ;1c1d  a3 02
    movw hl,#mem_f1b2       ;1c1f  16 b2 f1
    mov a,x                 ;1c22  60
    add l,a                 ;1c23  61 06
    addc rb0_h,#0x00        ;1c25  a8 ff 00

lab_1c28:
    mov a,[hl+b]            ;1c28  ab
    push hl                 ;1c29  b7
    movw hl,#mem_fb5f       ;1c2a  16 5f fb
    mov [hl+b],a            ;1c2d  bb
    pop hl                  ;1c2e  b6
    dbnz b,lab_1c28         ;1c2f  8b f7
    ret                     ;1c31  af

sub_1c32:
    mov a,!mem_f1e7_region          ;1c32  8e e7 f1
    and a,#0x07                     ;1c35  5d 07
    mov b,a                         ;1c37  73
    movw hl,#mem_ad34_freq_tables+1 ;1c38  16 35 ad     Table of pointers to frequency info tables
    callf !table_get_word           ;1c3b  4c 48        Load DE with word at position B in table [HL]
    movw ax,de                      ;1c3d  c4
    movw hl,ax                      ;1c3e  d6
    decw hl                         ;1c3f  96
    mov a,[hl]                      ;1c40  87
    incw hl                         ;1c41  86
    mov x,a                         ;1c42  70
    mov b,a                         ;1c43  73
    mov c,#0x00                     ;1c44  a2 00

lab_1c46:
    mov a,[hl+c]            ;1c46  aa
    and a,#0x0f             ;1c47  5d 0f
    call !sub_0812          ;1c49  9a 12 08     Compare A to mem_fb57
    bz lab_1c55             ;1c4c  ad 07
    add rb0_c,#0x06         ;1c4e  88 fa 06
    dbnz b,lab_1c46         ;1c51  8b f3
    set1 cy                 ;1c53  20
    ret                     ;1c54  af

lab_1c55:
    mov a,c                 ;1c55  62
    add l,a                 ;1c56  61 06
    addc rb0_h,#0x00        ;1c58  a8 ff 00
    mov a,[hl]              ;1c5b  87
    clr1 cy                 ;1c5c  21
    ret                     ;1c5d  af

sub_1c5e:
    mov a,mem_fe30          ;1c5e  f0 30
    mov b,#0x01             ;1c60  a3 01
    movw hl,#mem_ae25       ;1c62  16 25 ae

lab_1c65:
    cmp a,[hl+b]            ;1c65  31 4b
    bz lab_1c6d             ;1c67  ad 04
    dbnz b,lab_1c65         ;1c69  8b fa
    clr1 cy                 ;1c6b  21
    ret                     ;1c6c  af

lab_1c6d:
    set1 cy                 ;1c6d  20
    ret                     ;1c6e  af

sub_1c6f:
    bt mem_fe7d.2,lab_1c8c_ret  ;1c6f  ac 7d 1a

lab_1c72:
    call !sub_1c5e          ;1c72  9a 5e 1c
    bc lab_1c81             ;1c75  8d 0a
    set1 mem_fe5b.1         ;1c77  1a 5b
    cmp mem_fe20,#0x00      ;1c79  c8 20 00
    bz lab_1c8c_ret             ;1c7c  ad 0e
    br !lab_172e            ;1c7e  9b 2e 17

lab_1c81:
    cmp mem_fe20,#0x00      ;1c81  c8 20 00
    bnz lab_1c8c_ret        ;1c84  bd 06
    mov mem_fe20,#0x01      ;1c86  11 20 01
    br !lab_17e2            ;1c89  9b e2 17

lab_1c8c_ret:
    ret                     ;1c8c  af

sub_1c8d:
    call !sub_1c32          ;1c8d  9a 32 1c
    bc lab_1c9c_ret         ;1c90  8d 0a
    and a,#0xf0             ;1c92  5d f0
    callf !ror_a_4          ;1c94  2c 9e
    call !sub_0807          ;1c96  9a 07 08     Compare mem_fb58 to A
    bz lab_1c9c_ret         ;1c99  ad 01
    set1 cy                 ;1c9b  20

lab_1c9c_ret:
    ret                     ;1c9c  af

;Set mem_fe5d.4 if mem_f1e7_region & 0x07 = 0, otherwise clear it
sub_1c9d_region:
    clr1 mem_fe5d.4         ;1c9d  4b 5d
    mov a,!mem_f1e7_region  ;1c9f  8e e7 f1
    and a,#0x07             ;1ca2  5d 07
    bnz lab_1ca8_ret        ;1ca4  bd 02
    set1 mem_fe5d.4         ;1ca6  4a 5d

lab_1ca8_ret:
    ret                     ;1ca8  af

sub_1ca9:
    call !sub_0823          ;1ca9  9a 23 08
    bz lab_1cb1             ;1cac  ad 03
    br !sub_1601            ;1cae  9b 01 16

lab_1cb1:
    movw hl,#mem_ae0e+1     ;1cb1  16 0f ae
    mov a,mem_fe22          ;1cb4  f0 22
    mov b,a                 ;1cb6  73
    call !table_get_word    ;1cb7  9a 48 0c     Load DE with word at position B in table [HL]
    bnc lab_1cbf            ;1cba  9d 03        Branch if table lookup succeeded
    br !sub_1601            ;1cbc  9b 01 16

lab_1cbf:
    movw ax,#sub_0823       ;1cbf  10 23 08
    push ax                 ;1cc2  b1
    movw ax,de              ;1cc3  c4
    br ax                   ;1cc4  31 98

lab_1cc6_maybe_freq_inc_dec:
    mov a,mem_fe20                  ;1cc6  f0 20
    cmp a,#0x02                     ;1cc8  4d 02
    bz lab_1cd0                     ;1cca  ad 04
    cmp a,#0x03                     ;1ccc  4d 03
    bnz lab_1d01_call_sub_1d4f_ret  ;1cce  bd 31

lab_1cd0:
    call !freq_idx_inc_dec    ;1cd0  9a 4b 1b   Increment or decrement freq_idx based on flag mem_fe5c.6
    call !freq_idx_constrain  ;1cd3  9a d1 1a   Constrain freq_idx to its allowed range
    call !sub_609e            ;1cd6  9a 9e 60
    call !sub_0845            ;1cd9  9a 45 08

lab_1cdc:
    bf mem_fe5b.4,lab_1d04_ret  ;1cdc  31 43 5b 24
    bf mem_fe5b.5,lab_1d05      ;1ce0  31 53 5b 21
    call !sub_085d              ;1ce4  9a 5d 08

lab_1ce7:
    bf mem_fe5b.6,lab_1d04_ret    ;1ce7  31 63 5b 19
    bf mem_fe5b.7,lab_1d05        ;1ceb  31 73 5b 16
    call !sub_0800_mode           ;1cef  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x02                   ;1cf2  4d 02
    bz lab_1d01_call_sub_1d4f_ret ;1cf4  ad 0b
    ;mem_f253 != 0x02
    call !sub_1d6e                ;1cf6  9a 6e 1d

lab_1cf9:
    bf mem_fe5c.0,lab_1d04_ret    ;1cf9  31 03 5c 07
    bf mem_fe5c.1,lab_1d05        ;1cfd  31 13 5c 04

lab_1d01_call_sub_1d4f_ret:
    call !sub_1d4f          ;1d01  9a 4f 1d

lab_1d04_ret:
    ret                     ;1d04  af

lab_1d05:
    call !get_cur_freq_idx          ;1d05  9a 73 1a
    cmp a,!freq_idx                 ;1d08  48 56 fb
    bnz lab_1cc6_maybe_freq_inc_dec ;1d0b  bd b9
    set1 mem_fe5b.3                 ;1d0d  3a 5b
    br lab_1d01_call_sub_1d4f_ret   ;1d0f  fa f0

lab_1d11:
    mov a,!mem_fb63         ;1d11  8e 63 fb
    dec a                   ;1d14  51
    mov !mem_fb63,a         ;1d15  9e 63 fb
    bnz lab_1d2b            ;1d18  bd 11
    call !sub_6168          ;1d1a  9a 68 61
    bc lab_1d21             ;1d1d  8d 02
    set1 mem_fe5b.5         ;1d1f  5a 5b

lab_1d21:
    set1 mem_fe5b.4         ;1d21  4a 5b
    cmp mem_fe22,#0x02      ;1d23  c8 22 02
    bnz sub_1d4f            ;1d26  bd 27
    mov mem_fe22,#0x05      ;1d28  11 22 05

lab_1d2b:
    ret                     ;1d2b  af

lab_1d2c:
    mov a,!mem_fb63         ;1d2c  8e 63 fb
    dec a                   ;1d2f  51
    mov !mem_fb63,a         ;1d30  9e 63 fb
    bnz lab_1d4e            ;1d33  bd 19
    call !sub_6177          ;1d35  9a 77 61
    bf mem_fe5b.7,lab_1d44  ;1d38  31 73 5b 08
    bt mem_fe5d.3,lab_1d44  ;1d3c  bc 5d 05
    set1 mem_fe5d.3         ;1d3f  3a 5d
    br !lab_086f            ;1d41  9b 6f 08

lab_1d44:
    set1 mem_fe5b.6         ;1d44  6a 5b
    cmp mem_fe22,#0x04      ;1d46  c8 22 04
    bnz sub_1d4f            ;1d49  bd 04
    mov mem_fe22,#0x06      ;1d4b  11 22 06

lab_1d4e:
    ret                     ;1d4e  af

sub_1d4f:
    set1 mem_fe5b.2         ;1d4f  2a 5b
    set1 mem_fe5b.4         ;1d51  4a 5b
    set1 mem_fe5b.6         ;1d53  6a 5b
    mov mem_fe22,#0x00      ;1d55  11 22 00
    ret                     ;1d58  af

sub_1d59:
    clr1 mem_fe5c.2         ;1d59  2b 5c
    call !sub_080b_fm1fm2   ;1d5b  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    mov c,a                 ;1d5e  72
    movw hl,#mem_fb5b       ;1d5f  16 5b fb
    mov a,#0x00             ;1d62  a1 00
    mov !mem_fb5a,a         ;1d64  9e 5a fb
    mov [hl+c],a            ;1d67  ba
    ret                     ;1d68  af

lab_1d69:
    mov mem_fe22,#0x07      ;1d69  11 22 07
    br lab_1d71             ;1d6c  fa 03

sub_1d6e:
    mov mem_fe22,#0x08      ;1d6e  11 22 08

lab_1d71:
    clr1 mem_fe5c.0         ;1d71  0b 5c
    clr1 mem_fe5c.1         ;1d73  1b 5c
    mov a,#0x01             ;1d75  a1 01
    mov !mem_fb63,a         ;1d77  9e 63 fb
    ret                     ;1d7a  af

lab_1d7b:
    mov a,!mem_fb63         ;1d7b  8e 63 fb
    dec a                   ;1d7e  51
    mov !mem_fb63,a         ;1d7f  9e 63 fb
    bnz lab_1d9a            ;1d82  bd 16
    call !sub_614a          ;1d84  9a 4a 61
    mov a,!mem_fb67         ;1d87  8e 67 fb
    cmp a,#0x33             ;1d8a  4d 33
    bnc lab_1d90            ;1d8c  9d 02
    set1 mem_fe5c.1         ;1d8e  1a 5c

lab_1d90:
    set1 mem_fe5c.0         ;1d90  0a 5c
    cmp mem_fe22,#0x08      ;1d92  c8 22 08
    bnz sub_1d4f            ;1d95  bd b8
    mov mem_fe22,#0x09      ;1d97  11 22 09

lab_1d9a:
    ret                     ;1d9a  af

sub_1d9b:
    push bc                 ;1d9b  b3
    movw mem_fed4,#0x0000   ;1d9c  ee d4 00 00
    movw mem_fed6,#0x0000   ;1da0  ee d6 00 00
    mov a,!mem_fbfd         ;1da4  8e fd fb
    mov mem_fed4,a          ;1da7  f2 d4
    mov a,!mem_fbfe         ;1da9  8e fe fb
    rolc a,1                ;1dac  27
    mov mem_fed6,a          ;1dad  f2 d6
    mov1 mem_fed7.0,cy      ;1daf  71 01 d7
    movw ax,mem_fed4        ;1db2  89 d4
    xch a,x                 ;1db4  30
    add a,mem_fed6          ;1db5  0e d6
    xch a,x                 ;1db7  30
    addc a,mem_fed7         ;1db8  2e d7
    mov c,#0x03             ;1dba  a2 03
    divuw c                 ;1dbc  31 82      AX = AX / C
    xch a,x                 ;1dbe  30
    mov !mem_fb67,a         ;1dbf  9e 67 fb
    pop bc                  ;1dc2  b2
    ret                     ;1dc3  af

sub_1dc4:
    mov a,!mem_f252         ;1dc4  8e 52 f2
    mov !mem_fb57,a         ;1dc7  9e 57 fb
    mov a,!mem_f253         ;1dca  8e 53 f2
    mov !mem_fb58,a         ;1dcd  9e 58 fb
    mov a,#0x00             ;1dd0  a1 00
    movw hl,#mem_fb5a       ;1dd2  16 5a fb
    mov b,#0x03             ;1dd5  a3 03

lab_1dd7:
    mov [hl+b],a            ;1dd7  bb
    dbnz b,lab_1dd7         ;1dd8  8b fd
    mov !mem_fb5a,a         ;1dda  9e 5a fb
    ret                     ;1ddd  af

sub_1dde:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;1dde  4d 0a
    bc lab_1de8_lt_0x0a     ;1de0  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;1de2  1d 0a      A = A - 0x0A
    add a,#'A               ;1de4  0d 41      Convert to ASCII 'A'-'F'
    br lab_1dea_ret         ;1de6  fa 02
lab_1de8_lt_0x0a:
    add a,#'0               ;1de8  0d 30      Convert to ASCII '0'-'9'
lab_1dea_ret:
    ret                     ;1dea  af

lab_1deb:
    movw de,#0xae27         ;1deb  14 27 ae
    mov a,!mem_fb68         ;1dee  8e 68 fb
    mov b,a                 ;1df1  73
    movw hl,#mem_af75_patterns ;1df2  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;1df5  ab
    call !sub_5c64          ;1df6  9a 64 5c
    bz lab_1e0d             ;1df9  ad 12
    cmp a,#0xff             ;1dfb  4d ff
    bz lab_1e0d             ;1dfd  ad 0e
    movw hl,#mem_aebc+1     ;1dff  16 bd ae
    callf !table_get_word   ;1e02  4c 48        Load DE with word at position B in table [HL]
    bc lab_1e0d             ;1e04  8d 07        Branch if table lookup failed
    movw ax,#lab_1e0d       ;1e06  10 0d 1e
    push ax                 ;1e09  b1
    movw ax,de              ;1e0a  c4
    br ax                   ;1e0b  31 98

lab_1e0d:
    ret                     ;1e0d  af

lab_1e0e:
    ret                     ;1e0e  af

lab_1e0f:
    clr1 mem_fe66.6         ;1e0f  6b 66
    ret                     ;1e11  af

lab_1e12:
    bt mem_fe2c.5,lab_1e18  ;1e12  dc 2c 03
    br !lab_1f46_ret        ;1e15  9b 46 1f

lab_1e18:
    cmp mem_fe30,#0x01      ;1e18  c8 30 01
    bz lab_1e20             ;1e1b  ad 03
    br !lab_1f46_ret        ;1e1d  9b 46 1f

lab_1e20:
    call !sub_7697_snd_cd   ;1e20  9a 97 76     Unknown; snd_msg_idx and CD related
    set1 mem_fe5d.7         ;1e23  7a 5d
    clr1 mem_fe5e.0         ;1e25  0b 5e
    mov a,#0x01             ;1e27  a1 01
    mov !mem_fb68,a         ;1e29  9e 68 fb
    br !lab_1ebc            ;1e2c  9b bc 1e

lab_1e2f:
    mov a,#0x1e             ;1e2f  a1 1e
    mov !mem_fb4a,a         ;1e31  9e 4a fb
    mov a,!mem_fb68         ;1e34  8e 68 fb
    inc a                   ;1e37  41
    bt mem_fe5e.0,lab_1e45  ;1e38  8c 5e 0a
    cmp a,#0x05             ;1e3b  4d 05
    bnc lab_1e41            ;1e3d  9d 02
    br lab_1ebc             ;1e3f  fa 7b

lab_1e41:
    mov a,#0x01             ;1e41  a1 01
    br lab_1ebc             ;1e43  fa 77

lab_1e45:
    set1 mem_fe80.0         ;1e45  0a 80
    set1 mem_fe5e.2         ;1e47  2a 5e
    call !sub_1ff3          ;1e49  9a f3 1f
    cmp a,#0x08             ;1e4c  4d 08
    bc lab_1ebc             ;1e4e  8d 6c
    mov a,#0x05             ;1e50  a1 05
    br lab_1ebc             ;1e52  fa 68

lab_1e54:
    mov a,#0x1e             ;1e54  a1 1e
    mov !mem_fb4a,a         ;1e56  9e 4a fb
    mov a,!mem_fb68         ;1e59  8e 68 fb
    dec a                   ;1e5c  51
    bt mem_fe5e.0,lab_1e68  ;1e5d  8c 5e 08
    cmp a,#0x01             ;1e60  4d 01
    bnc lab_1ebc            ;1e62  9d 58
    mov a,#0x04             ;1e64  a1 04
    br lab_1ebc             ;1e66  fa 54

lab_1e68:
    set1 mem_fe80.0         ;1e68  0a 80
    set1 mem_fe5e.2         ;1e6a  2a 5e
    call !sub_1ff3          ;1e6c  9a f3 1f
    cmp a,#0x05             ;1e6f  4d 05
    bnc lab_1ebc            ;1e71  9d 49
    mov a,#0x07             ;1e73  a1 07
    br lab_1ebc             ;1e75  fa 45

lab_1e77:
    clr1 mem_fe5d.7           ;1e77  7b 5d
    bf mem_fe5e.0,lab_1eae    ;1e79  31 03 5e 31
    mov a,!mem_fb6e           ;1e7d  8e 6e fb
    movw hl,#mem_f254_onvol   ;1e80  16 54 f2     HL = address of ONVOL
    call !to_eeram_wr_byte_hl ;1e83  9a 47 1f     Write A to EEPROM area in RAM at [HL], add to checksum
    clr1 mem_fe5e.0           ;1e86  0b 5e
    br lab_1eae               ;1e88  fa 24

lab_1e8a:
    clr1 mem_fe5d.7           ;1e8a  7b 5d
    bf mem_fe5e.0,lab_1eae    ;1e8c  31 03 5e 1e
    clr1 mem_fe5e.0           ;1e90  0b 5e
    call !sub_1ff3            ;1e92  9a f3 1f
    mov a,!mem_fb6d           ;1e95  8e 6d fb
    mov !mem_fe57,a           ;1e98  9e 57 fe
    call !sub_1ffe            ;1e9b  9a fe 1f
    set1 mem_fe73.3           ;1e9e  3a 73
    mov a,!mem_fb6f           ;1ea0  8e 6f fb
    movw hl,#mem_f255         ;1ea3  16 55 f2
    call !to_eeram_wr_byte_hl ;1ea6  9a 47 1f     Write A to EEPROM area in RAM at [HL], add to checksum
    set1 mem_fe80.0           ;1ea9  0a 80
    call !sub_7697_snd_cd     ;1eab  9a 97 76     Unknown; snd_msg_idx and CD related

lab_1eae:
    mov a,#0x00             ;1eae  a1 00
    mov !mem_fb68,a         ;1eb0  9e 68 fb
    mov !mem_fb4a,a         ;1eb3  9e 4a fb
    call !sub_dc4b          ;1eb6  9a 4b dc
    br !lab_1f46_ret        ;1eb9  9b 46 1f

lab_1ebc:
    mov !mem_fb68,a         ;1ebc  9e 68 fb
    dec a                   ;1ebf  51
    mov !mem_f1a9,a         ;1ec0  9e a9 f1

sub_1ec3:
    bf mem_fe5e.0,lab_1ef5  ;1ec3  31 03 5e 2e
    mov a,!mem_fb4a         ;1ec7  8e 4a fb
    cmp a,#0x00             ;1eca  4d 00
    bnz lab_1ed0            ;1ecc  bd 02
    br lab_1e8a             ;1ece  fa ba

lab_1ed0:
    btclr mem_fe5e.2,lab_1ed6 ;1ed0  31 21 5e 02
    br lab_1f46_ret         ;1ed4  fa 70

lab_1ed6:
    mov a,!mem_f254_onvol   ;1ed6  8e 54 f2     A=ONVOL
    mov !mem_fe57,a         ;1ed9  9e 57 fe
    mov a,!mem_fb68         ;1edc  8e 68 fb
    set1 mem_fe73.3         ;1edf  3a 73
    cmp a,#0x06             ;1ee1  4d 06
    mov a,!mem_fe57         ;1ee3  8e 57 fe
    bc lab_1ef0             ;1ee6  8d 08
    mov a,!mem_fb6d         ;1ee8  8e 6d fb
    mov !mem_fe57,a         ;1eeb  9e 57 fe
    set1 mem_fe73.3         ;1eee  3a 73

lab_1ef0:
    call !sub_1ffe          ;1ef0  9a fe 1f
    br lab_1f46_ret         ;1ef3  fa 51

lab_1ef5:
    mov a,!mem_fbfc         ;1ef5  8e fc fb
    cmp a,#0x81             ;1ef8  4d 81
    bc lab_1efe             ;1efa  8d 02
    mov a,#0x00             ;1efc  a1 00

lab_1efe:
    mov mem_fed4,a          ;1efe  f2 d4
    mov a,!mem_fbfe         ;1f00  8e fe fb
    mov mem_fed5,a          ;1f03  f2 d5
    mov a,!mem_fbfd         ;1f05  8e fd fb
    mov mem_fed7,a          ;1f08  f2 d7
    mov a,!mem_fb67         ;1f0a  8e 67 fb
    mov mem_fed6,a          ;1f0d  f2 d6
    mov c,#0x04             ;1f0f  a2 04

lab_1f11:
    mov mem_fed8,#0x10      ;1f11  11 d8 10
    dec c                   ;1f14  52
    mov a,c                 ;1f15  62
    mov b,a                 ;1f16  73
    movw hl,#mem_ae6f+1     ;1f17  16 70 ae
    callf !table_get_word   ;1f1a  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;1f1c  c4
    movw mem_fedc,ax        ;1f1d  99 dc
    movw hl,#mem_fed4       ;1f1f  16 d4 fe
    mov a,[hl+c]            ;1f22  aa
    mov mem_fed9,a          ;1f23  f2 d9

lab_1f25:
    mov a,mem_fed8          ;1f25  f0 d8
    mov b,a                 ;1f27  73
    dec b                   ;1f28  53
    movw ax,mem_fedc        ;1f29  89 dc
    movw hl,ax              ;1f2b  d6
    callf !table_get_byte   ;1f2c  4c 7d        Load A with byte at position B in table [HL]
    cmp a,mem_fed9          ;1f2e  4e d9
    bc lab_1f35             ;1f30  8d 03
    dbnz mem_fed8,lab_1f25  ;1f32  04 d8 f0

lab_1f35:
    mov a,mem_fed8          ;1f35  f0 d8
    movw hl,#mem_fb69       ;1f37  16 69 fb
    mov [hl+c],a            ;1f3a  ba
    inc c                   ;1f3b  42
    dbnz c,lab_1f11         ;1f3c  8a d3
    clr1 mem_fe5e.1         ;1f3e  1b 5e      FERN status = off
    bf shadow_p8.1,lab_1f46_ret  ;1f40  31 13 d2 02
    set1 mem_fe5e.1         ;1f44  1a 5e      FERN status = on

lab_1f46_ret:
    ret                     ;1f46  af

to_eeram_wr_byte_hl:
;Just calls eeram_wr_byte_hl and returns
    call !eeram_wr_byte_hl  ;1f47  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    br lab_1f46_ret         ;1f4a  fa fa        Branch to return

lab_1f4c:
    bf mem_fe2c.5,lab_1f46_ret  ;1f4c  31 53 2c f6
    bf mem_fe66.6,lab_1f57      ;1f50  31 63 66 03
    clr1 mem_fe66.6             ;1f54  6b 66
    ret                         ;1f56  af

lab_1f57:
    set1 mem_fe80.0         ;1f57  0a 80
    set1 mem_fe5d.7         ;1f59  7a 5d
    set1 mem_fe5e.0         ;1f5b  0a 5e
    call !sub_1ff3          ;1f5d  9a f3 1f

    mov a,#0x1e             ;1f60  a1 1e
    mov !mem_fb4a,a         ;1f62  9e 4a fb
    mov a,!mem_fe57         ;1f65  8e 57 fe
    movw hl,#mem_f268       ;1f68  16 68 f2
    call !eeram_wr_byte_hl  ;1f6b  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov !mem_fb6d,a         ;1f6e  9e 6d fb
    mov a,!mem_f254_onvol   ;1f71  8e 54 f2     A=ONVOL
    bf mem_fe74.6,lab_1f86  ;1f74  31 63 74 0e
    cmp a,#0x5b             ;1f78  4d 5b
    bc lab_1f8c             ;1f7a  8d 10

    mov a,#0x5a             ;1f7c  a1 5a
    movw hl,#mem_f254_onvol ;1f7e  16 54 f2     HL = address of ONVOL
    call !eeram_wr_byte_hl  ;1f81  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    br lab_1f8c             ;1f84  fa 06

lab_1f86:
    cmp a,#0x7b             ;1f86  4d 7b
    bc lab_1f8c             ;1f88  8d 02
    mov a,#0x7a             ;1f8a  a1 7a

lab_1f8c:
    mov !mem_fe57,a         ;1f8c  9e 57 fe
    mov !mem_fb6e,a         ;1f8f  9e 6e fb
    call !sub_1ffe          ;1f92  9a fe 1f
    call !sub_7697_snd_cd   ;1f95  9a 97 76     Unknown; snd_msg_idx and CD related
    set1 mem_fe73.3         ;1f98  3a 73
    mov a,!mem_f255         ;1f9a  8e 55 f2
    mov !mem_fb6f,a         ;1f9d  9e 6f fb
    mov a,#0x00             ;1fa0  a1 00
    mov !mem_fbcf,a         ;1fa2  9e cf fb
    mov a,#0x05             ;1fa5  a1 05
    br !lab_1ebc            ;1fa7  9b bc 1e

lab_1faa:
    mov a,#0x1e             ;1faa  a1 1e
    mov !mem_fb4a,a         ;1fac  9e 4a fb
    mov a,#0x00             ;1faf  a1 00
    xch a,!mem_fbcf         ;1fb1  ce cf fb
    clr1 mem_fed4.0         ;1fb4  0b d4
    bt a.7,lab_1fbb         ;1fb6  31 7e 02
    set1 mem_fed4.0         ;1fb9  0a d4

lab_1fbb:
    mov a,!mem_fb68         ;1fbb  8e 68 fb
    cmp a,#0x06             ;1fbe  4d 06
    bz lab_1fcf             ;1fc0  ad 0d
    cmp a,#0x07             ;1fc2  4d 07
    bz lab_1fdb             ;1fc4  ad 15
    mov a,!mem_fe57         ;1fc6  8e 57 fe
    movw hl,#mem_f254_onvol ;1fc9  16 54 f2     HL = address of ONVOL
    br !to_eeram_wr_byte_hl ;1fcc  9b 47 1f     Write A to EEPROM area in RAM at [HL], add to checksum

lab_1fcf:
    mov a,!mem_fb6f         ;1fcf  8e 6f fb
    set1 a.0                ;1fd2  61 8a
    bt mem_fed4.0,lab_1fe5  ;1fd4  8c d4 0e
    clr1 a.0                ;1fd7  61 8b
    br lab_1fe5             ;1fd9  fa 0a

lab_1fdb:
    mov a,!mem_fb6f         ;1fdb  8e 6f fb
    set1 a.1                ;1fde  61 9a
    bt mem_fed4.0,lab_1fe5  ;1fe0  8c d4 02
    clr1 a.1                ;1fe3  61 9b

lab_1fe5:
    mov !mem_fb6f,a         ;1fe5  9e 6f fb
    ret                     ;1fe8  af

lab_1fe9:
    mov a,#60               ;1fe9  a1 3c      A = 6 seconds
    mov !msg_countdown,a    ;1feb  9e 2e fb
    ret                     ;1fee  af

lab_1fef:
    call !sub_7697_snd_cd   ;1fef  9a 97 76     Unknown; snd_msg_idx and CD related
    ret                     ;1ff2  af

sub_1ff3:
    cmp mem_fe5a,#0x00      ;1ff3  c8 5a 00
    bz lab_1ffd             ;1ff6  ad 05
    mov mem_fe5a,#0x00      ;1ff8  11 5a 00
    clr1 mem_fe76.2         ;1ffb  2b 76

lab_1ffd:
    ret                     ;1ffd  af

sub_1ffe:
    cmp a,#0x00             ;1ffe  4d 00
    bnz lab_2008            ;2000  bd 06
    mov a,#0x00             ;2002  a1 00
    mov !mem_fc9f,a         ;2004  9e 9f fc
    ret                     ;2007  af

lab_2008:
    bf mem_fe74.6,lab_2012  ;2008  31 63 74 06
    cmp a,#0x5a             ;200c  4d 5a
    bc lab_201c             ;200e  8d 0c
    br lab_2016             ;2010  fa 04

lab_2012:
    cmp a,#0x7a             ;2012  4d 7a
    bc lab_201c             ;2014  8d 06

lab_2016:
    mov a,#0xff             ;2016  a1 ff
    mov !mem_fc9f,a         ;2018  9e 9f fc
    ret                     ;201b  af

lab_201c:
    mov a,#0x55             ;201c  a1 55
    mov !mem_fc9f,a         ;201e  9e 9f fc
    ret                     ;2021  af

sub_2022:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;2022  4d 0a
    bc lab_202c_lt_0x0a     ;2024  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;2026  1d 0a      A = A - 0x0A
    add a,#'A               ;2028  0d 41      Convert to ASCII 'A'-'F'
    br lab_202e_ret         ;202a  fa 02
lab_202c_lt_0x0a:
    add a,#'0               ;202c  0d 30      Convert to ASCII '0'-'9'
lab_202e_ret:
    ret                     ;202e  af

mem_202f:
    .byte 0x01              ;202f  01          DATA 0x01
    .byte 0x03              ;2030  03          DATA 0x03
    .byte 0x03              ;2031  03          DATA 0x03
    .byte 0x04              ;2032  04          DATA 0x04

mem_2033:
    .byte 0xe1              ;2033  e1          DATA 0xe1
    .byte 0x00              ;2034  00          DATA 0x00
    .byte 0x00              ;2035  00          DATA 0x00
    .byte 0xe1              ;2036  e1          DATA 0xe1

lab_2037:
    bf rb0_b.7,lab_2057     ;2037  31 73 fb 1c
    set1 mem_fe5e.6         ;203b  6a 5e
    mov a,#0xc3             ;203d  a1 c3
    mov !mem_fb71,a         ;203f  9e 71 fb
    mov a,#0x00             ;2042  a1 00
    mov !mem_fb51,a         ;2044  9e 51 fb
    mov !mem_fb52,a         ;2047  9e 52 fb
    mov mem_fe23,a          ;204a  f2 23
    mov a,#0x04             ;204c  a1 04
    mov !mem_fb70,a         ;204e  9e 70 fb
    mov a,#0x80             ;2051  a1 80
    callt [0x0042]          ;2053  c3           Calls sub_09b9
    br !lab_2133            ;2054  9b 33 21

lab_2057:
    bf rb0_b.6,lab_20c0     ;2057  31 63 fb 65
    clr1 mem_fe23.4         ;205b  4b 23
    clr1 mem_fe5e.5         ;205d  5b 5e
    mov a,b                 ;205f  63
    mov mem_fed4,a          ;2060  f2 d4
    mov mem_fe24,#0x30      ;2062  11 24 30     Set initial value for LED blink countdown
    call !blink_led         ;2065  9a 1a 25     Decrement LED blink counter and set LED pin state
    bt mem_fe63.7,lab_206e  ;2068  fc 63 03
    br !lab_2133            ;206b  9b 33 21

lab_206e:
    push bc                 ;206e  b3
    call !sub_24b9          ;206f  9a b9 24
    bnc lab_2079            ;2072  9d 05
    call !sub_2148          ;2074  9a 48 21
    br lab_20ad             ;2077  fa 34

lab_2079:
    mov a,!mem_fb71         ;2079  8e 71 fb
    cmp a,#0xe1             ;207c  4d e1
    bz lab_20a1             ;207e  ad 21
    mov a,#0xc3             ;2080  a1 c3
    call !sub_2482          ;2082  9a 82 24
    mov a,!mem_fb70         ;2085  8e 70 fb
    cmp a,#0x00             ;2088  4d 00
    bz lab_20a1             ;208a  ad 15
    cmp a,#0x06             ;208c  4d 06
    bz lab_20a1             ;208e  ad 11
    mov a,!mem_f20b         ;2090  8e 0b f2
    cmp a,#0x02             ;2093  4d 02
    bc lab_20a1             ;2095  8d 0a
    mov a,#0x05             ;2097  a1 05
    mov !mem_fb70,a         ;2099  9e 70 fb
    mov a,#0x3c             ;209c  a1 3c
    mov !mem_fb51,a         ;209e  9e 51 fb

lab_20a1:
    mov a,!mem_f20a         ;20a1  8e 0a f2
    cmp a,#0x02             ;20a4  4d 02
    bc lab_20ad             ;20a6  8d 05
    mov a,#0x3c             ;20a8  a1 3c
    mov !mem_fb52,a         ;20aa  9e 52 fb

lab_20ad:
    mov a,!mem_f207         ;20ad  8e 07 f2
    mov1 cy,a.6             ;20b0  61 ec
    mov1 mem_fe23.6,cy      ;20b2  71 61 23
    mov1 cy,a.2             ;20b5  61 ac
    mov1 mem_fe23.5,cy      ;20b7  71 51 23
    set1 mem_fe23.4         ;20ba  4a 23
    call !sub_24f1          ;20bc  9a f1 24
    pop bc                  ;20bf  b2

lab_20c0:
    mov a,#0xe0             ;20c0  a1 e0
    callt [0x0042]          ;20c2  c3             Calls sub_09b9
    call !sub_24f1          ;20c3  9a f1 24
    bnz lab_20da            ;20c6  bd 12

lab_20c8:
    bf mem_fe23.3,lab_20cf  ;20c8  31 33 23 03
    call !sub_223a          ;20cc  9a 3a 22

lab_20cf:
    call !sub_214e          ;20cf  9a 4e 21
    br !lab_2107            ;20d2  9b 07 21

lab_20d5:
    call !sub_24f1          ;20d5  9a f1 24
    bz lab_20e0             ;20d8  ad 06

lab_20da:
    call !sub_2138          ;20da  9a 38 21
    br !lab_2107            ;20dd  9b 07 21

lab_20e0:
    movw de,#mem_aefb       ;20e0  14 fb ae
    mov a,!mem_fb70         ;20e3  8e 70 fb
    mov b,a                 ;20e6  73
    bf a.3,lab_20ec         ;20e7  31 3f 02
    mov b,#0x07             ;20ea  a3 07

lab_20ec:
    movw hl,#mem_af75_patterns ;20ec  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;20ef  ab
    call !sub_5c64          ;20f0  9a 64 5c
    cmp a,#0xff             ;20f3  4d ff
    bnz lab_20f9            ;20f5  bd 02
    mov b,#0x00             ;20f7  a3 00

lab_20f9:
    movw hl,#mem_af57+1     ;20f9  16 58 af     HL = pointer to SAFE code entry related code table

lab_20fc:
    callf !table_get_word   ;20fc  4c 48        Load DE with word at position B in table [HL]
    bc sub_2138             ;20fe  8d 38        Branch if table lookup failed
    movw ax,#lab_2107       ;2100  10 07 21
    push ax                 ;2103  b1
    movw ax,de              ;2104  c4
    br ax                   ;2105  31 98

lab_2107:
    mov a,!mem_fb70         ;2107  8e 70 fb
    cmp a,#0xff             ;210a  4d ff
    bz lab_210e             ;210c  ad 00

lab_210e:
    mov a,!mem_fb70         ;210e  8e 70 fb
    mov b,a                 ;2111  73
    movw hl,#mem_aef1+1     ;2112  16 f2 ae
    callf !table_get_byte   ;2115  4c 7d        Load A with byte at position B in table [HL]
    bnc lab_211b            ;2117  9d 02        Branch if lookup succeeded
    mov a,#0xff             ;2119  a1 ff

lab_211b:
    push ax                 ;211b  b1
    mov a,!mem_fb70         ;211c  8e 70 fb
    cmp a,#0x00             ;211f  4d 00
    bz lab_2126             ;2121  ad 03
    pop ax                  ;2123  b0
    br lab_2130             ;2124  fa 0a

lab_2126:
    mov a,!mem_f20b         ;2126  8e 0b f2     A = SAFE code attempt counter
    cmp a,#0x01             ;2129  4d 01
    pop ax                  ;212b  b0
    bnz lab_2130            ;212c  bd 02
    mov a,#0x02             ;212e  a1 02

lab_2130:
    mov !mem_f1a8,a         ;2130  9e a8 f1

lab_2133:
    callf !sub_099c         ;2133  1c 9c
    br !sub_24f1            ;2135  9b f1 24

sub_2138:
    mov a,#0x04             ;2138  a1 04
    mov !mem_fb70,a         ;213a  9e 70 fb
    call !sub_21f4          ;213d  9a f4 21
    mov a,!mem_fb71         ;2140  8e 71 fb
    cmp a,#0xc3             ;2143  4d c3
    bnz sub_2148            ;2145  bd 01
    ret                     ;2147  af

sub_2148:
    mov a,#0xc3             ;2148  a1 c3
    br !sub_2482            ;214a  9b 82 24

lab_214d:
    ret                     ;214d  af

sub_214e:
    mov a,!mem_f20a         ;214e  8e 0a f2
    cmp a,#0x02             ;2151  4d 02
    bc lab_2164             ;2153  8d 0f
    mov a,!mem_fb52         ;2155  8e 52 fb     A = KWP1281 Login rate limiter countdown
    cmp a,#0x00             ;2158  4d 00
    bnz lab_2164            ;215a  bd 08

    mov a,#0x00             ;215c  a1 00
    movw hl,#mem_f20a       ;215e  16 0a f2
    call !eeram_wr_byte_hl  ;2161  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_2164:
    mov a,!mem_fb70         ;2164  8e 70 fb
    cmp a,#0x00             ;2167  4d 00
    bz lab_2173             ;2169  ad 08
    cmp a,#0x07             ;216b  4d 07
    bz lab_2173             ;216d  ad 04
    cmp a,#0x05             ;216f  4d 05
    bnz lab_218b            ;2171  bd 18

lab_2173:
    bt mem_fe62.7,lab_21f3  ;2173  fc 62 7d
    bf mem_fe2c.2,lab_218b  ;2176  31 23 2c 11
    bt mem_fe65.6,lab_21f3  ;217a  ec 65 76
    bf mem_fe23.7,lab_218b  ;217d  31 73 23 0a  Branch if SAFE mode = locked
    call !sub_246b          ;2181  9a 6b 24
    call !sub_248f          ;2184  9a 8f 24
    set1 mem_fe7d.3         ;2187  3a 7d
    br lab_21f3             ;2189  fa 68

lab_218b:
    bf mem_fe5e.3,lab_2192  ;218b  31 33 5e 03
    br !lab_23a7            ;218f  9b a7 23

lab_2192:
    mov a,!mem_fb22         ;2192  8e 22 fb
    cmp a,#0x00             ;2195  4d 00
    bnz lab_21a3            ;2197  bd 0a
    mov a,!mem_fb70         ;2199  8e 70 fb
    cmp a,#0x07             ;219c  4d 07
    bz lab_21f3             ;219e  ad 53
    call !sub_2201          ;21a0  9a 01 22

lab_21a3:
    mov a,!mem_fb70         ;21a3  8e 70 fb
    cmp a,#0x06             ;21a6  4d 06
    bz lab_21cc             ;21a8  ad 22
    cmp a,#0x05             ;21aa  4d 05
    bnz lab_21f3            ;21ac  bd 45
    mov a,!mem_fb51         ;21ae  8e 51 fb
    cmp a,#0x00             ;21b1  4d 00
    bnz lab_21f3            ;21b3  bd 3e

    mov a,#0x00             ;21b5  a1 00
    movw hl,#mem_f20b       ;21b7  16 0b f2     HL = pointer to SAFE code attempt counter
    call !eeram_wr_byte_hl  ;21ba  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,#0x01             ;21bd  a1 01
    mov !mem_fb70,a         ;21bf  9e 70 fb
    mov a,#0xc3             ;21c2  a1 c3
    call !sub_2482          ;21c4  9a 82 24
    call !safe_code_1000    ;21c7  9a 9c 23     Set entered SAFE code to default of 1000
    br lab_21f3             ;21ca  fa 27

lab_21cc:
    mov a,!mem_fb53         ;21cc  8e 53 fb
    cmp a,#0x00             ;21cf  4d 00
    bnz lab_21f3            ;21d1  bd 20
    call !sub_0a60          ;21d3  9a 60 0a
    mov a,!mem_f207         ;21d6  8e 07 f2
    bf a.6,lab_21ec         ;21d9  31 6f 10
    call !sub_9118          ;21dc  9a 18 91
    call !sub_1dc4          ;21df  9a c4 1d
    call !sub_461b          ;21e2  9a 1b 46
    bf mem_fe65.3,lab_21ec  ;21e5  31 33 65 03  Branch if not logged in
    call !sub_ab3c          ;21e9  9a 3c ab

lab_21ec:
    mov a,#0x08             ;21ec  a1 08
    call !sub_2227          ;21ee  9a 27 22
    set1 mem_fe81.4         ;21f1  4a 81

lab_21f3:
    ret                     ;21f3  af

sub_21f4:
    mov a,!mem_fb70         ;21f4  8e 70 fb
    mov b,a                 ;21f7  73
    movw hl,#mem_aed3+1     ;21f8  16 d4 ae
    callf !table_get_byte   ;21fb  4c 7d        Load A with byte at position B in table [HL]
    mov !mem_fb22,a         ;21fd  9e 22 fb
    ret                     ;2200  af

sub_2201:
    mov a,!mem_fb70         ;2201  8e 70 fb
    cmp a,#0x02             ;2204  4d 02
    bnz lab_220b            ;2206  bd 03
    call !safe_code_1000    ;2208  9a 9c 23     Set Entered SAFE code to default of 1000

lab_220b:
    mov b,a                 ;220b  73
    movw hl,#mem_aee7+1     ;220c  16 e8 ae
    callf !table_get_byte   ;220f  4c 7d        Load A with byte at position B in table [HL]
    br lab_221c             ;2211  fa 09

lab_2213:
    mov a,!mem_fb70         ;2213  8e 70 fb
    mov b,a                 ;2216  73
    movw hl,#mem_aedd+1     ;2217  16 de ae
    callf !table_get_byte   ;221a  4c 7d        Load A with byte at position B in table [HL]

lab_221c:
    bc lab_2225             ;221c  8d 07        Branch if lookup failed
    cmp a,#0xff             ;221e  4d ff
    bnz sub_2227            ;2220  bd 05
    br !sub_248f            ;2222  9b 8f 24

lab_2225:
    mov a,#0x03             ;2225  a1 03

sub_2227:
    mov !mem_fb70,a         ;2227  9e 70 fb
    cmp a,#0x03             ;222a  4d 03
    bz sub_21f4             ;222c  ad c6
    mov a,#0xc3             ;222e  a1 c3
    cmp a,!mem_fb71         ;2230  48 71 fb
    bz sub_21f4             ;2233  ad bf
    bt mem_fe2c.5,lab_2225  ;2235  dc 2c ed
    br sub_21f4             ;2238  fa ba

sub_223a:
    bt mem_fe23.4,lab_2242  ;223a  cc 23 05
    set1 mem_fe23.3         ;223d  3a 23
    br !sub_24f1            ;223f  9b f1 24

lab_2242:
    clr1 mem_fe23.3         ;2242  3b 23
    mov a,!mem_fb71         ;2244  8e 71 fb
    cmp a,#0xc3             ;2247  4d c3
    bnz lab_225a            ;2249  bd 0f
    bt mem_fe23.5,lab_225a  ;224b  dc 23 0c
    bf mem_fe23.7,lab_225a  ;224e  31 73 23 08  Branch if SAFE mode = locked
    call !sub_246b          ;2252  9a 6b 24
    call !sub_248f          ;2255  9a 8f 24
    set1 mem_fe7d.3         ;2258  3a 7d

lab_225a:
    mov a,!mem_fb70         ;225a  8e 70 fb
    bf mem_fe2c.3,lab_2299  ;225d  31 33 2c 38
    cmp a,#0x06             ;2261  4d 06
    bnz lab_2267            ;2263  bd 02

lab_2265:
    br lab_2213             ;2265  fa ac

lab_2267:
    cmp a,#0x08             ;2267  4d 08
    bnz lab_226d            ;2269  bd 02
    br lab_2293             ;226b  fa 26

lab_226d:
    cmp a,#0x03             ;226d  4d 03
    bz lab_2265             ;226f  ad f4
    cmp a,#0x05             ;2271  4d 05
    bnz lab_228a            ;2273  bd 15
    btclr mem_fe5e.5,lab_2293 ;2275  31 51 5e 1a
    mov a,!mem_f20a         ;2279  8e 0a f2     A = KWP1281 login attempt count
    cmp a,#0x02             ;227c  4d 02
    mov a,#0x3c             ;227e  a1 3c
    bc lab_2285             ;2280  8d 03
    mov !mem_fb52,a         ;2282  9e 52 fb     Save KWP1281 login rate limiter countdown

lab_2285:
    mov !mem_fb51,a         ;2285  9e 51 fb
    br lab_2293             ;2288  fa 09

lab_228a:
    call !safe_code_1000    ;228a  9a 9c 23     Set Entered SAFE code to default of 1000
    call !sub_248f          ;228d  9a 8f 24
    bt mem_fe2c.3,lab_2265  ;2290  bc 2c d2

lab_2293:
    br !sub_2201            ;2293  9b 01 22

sub_2296:
    mov a,!mem_fb70         ;2296  8e 70 fb

lab_2299:
    cmp a,#0x06             ;2299  4d 06
    bz lab_22a1             ;229b  ad 04
    cmp a,#0x08             ;229d  4d 08
    bnz lab_226d            ;229f  bd cc

lab_22a1:
    call !sub_0a60          ;22a1  9a 60 0a
    mov a,!mem_f207         ;22a4  8e 07 f2
    bf a.6,lab_22ba         ;22a7  31 6f 10
    call !sub_9118          ;22aa  9a 18 91
    call !sub_1dc4          ;22ad  9a c4 1d
    call !sub_461b          ;22b0  9a 1b 46
    bf mem_fe65.3,lab_22ba  ;22b3  31 33 65 03  Branch if not logged in
    call !sub_ab3c          ;22b7  9a 3c ab

lab_22ba:
    mov a,!mem_fb72         ;22ba  8e 72 fb
    mov !mem_fb70,a         ;22bd  9e 70 fb
    call !sub_24f1          ;22c0  9a f1 24
    mov a,!mem_fb70         ;22c3  8e 70 fb
    br lab_226d             ;22c6  fa a5

lab_22c8:
    set1 mem_fe7d.6         ;22c8  6a 7d
    mov a,!mem_f207         ;22ca  8e 07 f2
    bt a.6,lab_22d1         ;22cd  31 6e 01
    ret                     ;22d0  af

lab_22d1:
    mov a,!mem_fb70         ;22d1  8e 70 fb
    cmp a,#0x04             ;22d4  4d 04
    bz lab_22dc             ;22d6  ad 04
    cmp a,#0x05             ;22d8  4d 05
    bnz lab_22f9            ;22da  bd 1d

lab_22dc:
    mov !mem_fb72,a         ;22dc  9e 72 fb
    mov a,#0x10             ;22df  a1 10
    mov !mem_fb53,a         ;22e1  9e 53 fb
    mov a,!mem_f206         ;22e4  8e 06 f2
    inc a                   ;22e7  41
    cmp a,#0x33             ;22e8  4d 33
    bc lab_22f1             ;22ea  8d 05
    mov a,#0x08             ;22ec  a1 08
    br !sub_2227            ;22ee  9b 27 22

lab_22f1:
    movw hl,#mem_f206       ;22f1  16 06 f2
    call !eeram_wr_byte_hl  ;22f4  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    mov a,#0x06             ;22f7  a1 06

lab_22f9:
    br !sub_2227            ;22f9  9b 27 22

sub_22fc:
;Lock or unlock SAFE mode based on security access computation result
;If word at mem_fb73 equals word mem_f208 then access is granted
;called from sub_2537_secure_resp only (title 0x3d security access response processing)
    bt mem_fe23.6,lab_234b_ret  ;22fc  ec 23 4c     Branch to just return
    bt mem_fe23.5,lab_2317  ;22ff  dc 23 15
    clr1 mem_fe23.7         ;2302  7b 23        SAFE mode = locked

    mov a,!mem_fb73         ;2304  8e 73 fb     A = sub_2537_secure_resp security access computation result (high byte)
    cmp a,!mem_f208         ;2307  48 08 f2
    bnz lab_2327            ;230a  bd 1b        Branch if computation result is not equal

    mov a,!mem_fb74         ;230c  8e 74 fb     A = sub_2537_secure_resp security access computation result (low byte)
    cmp a,!mem_f209         ;230f  48 09 f2
    bnz lab_2327            ;2312  bd 13        Branch if computation result is not equal

    ;Computation result is equal

    set1 mem_fe23.7         ;2314  7a 23        SAFE mode = unlocked
    ret                     ;2316  af

lab_2317:
    mov a,!mem_f207         ;2317  8e 07 f2
    clr1 mem_fe23.5         ;231a  5b 23
    mov1 cy,mem_fe23.5      ;231c  71 54 23
    mov1 a.2,cy             ;231f  61 a9
    movw hl,#mem_f207       ;2321  16 07 f2
    call !eeram_wr_byte_hl  ;2324  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_2327:
    mov a,!mem_fb71         ;2327  8e 71 fb
    cmp a,#0xc3             ;232a  4d c3
    bz lab_234b_ret         ;232c  ad 1d        Branch to just return

    mov a,!mem_fb73         ;232e  8e 73 fb     A = sub_2537_secure_resp security access computation result (high byte)
    movw hl,#mem_f208       ;2331  16 08 f2
    call !eeram_wr_byte_hl  ;2334  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,!mem_fb74         ;2337  8e 74 fb     sub_2537_secure_resp security access computation result (low byte)
    movw hl,#mem_f209       ;233a  16 09 f2
    call !eeram_wr_byte_hl  ;233d  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    call !sub_249c          ;2340  9a 9c 24     A = 1 + sum of 6 bytes at mem_f206 - mem_f20b
    movw hl,#mem_f20c       ;2343  16 0c f2
    call !eeram_wr_byte_hl  ;2346  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    set1 mem_fe23.7         ;2349  7a 23        SAFE mode = unlocked

lab_234b_ret:
    ret                     ;234b  af

lab_234c_thous:
;Increment Entered SAFE code BCD thousands place
;Examples: 0000 -> 1000
;          1000 -> 2000
;          9000 -> 0000
    mov a,!mem_fb75         ;234c  8e 75 fb     A = Entered SAFE code (BCD high byte)
    add a,#0x10             ;234f  0d 10
    adjba                   ;2351  61 80
    br lab_2364             ;2353  fa 0f

lab_2355_hunds:
;Increment Entered SAFE code BCD hundreds place
;Examples: 0000 -> 0100
;          0100 -> 0200
;          0900 -> 0000
    mov a,!mem_fb75         ;2355  8e 75 fb     A = Entered SAFE code (BCD high byte)
    mov x,a                 ;2358  70
    add a,#0x01             ;2359  0d 01
    adjba                   ;235b  61 80
    and a,#0x0f             ;235d  5d 0f
    xch a,x                 ;235f  30
    and a,#0xf0             ;2360  5d f0
    or a,x                  ;2362  61 68

lab_2364:
    mov !mem_fb75,a         ;2364  9e 75 fb     A = Entered SAFE code (BCD high byte)
    mov a,!mem_fb70         ;2367  8e 70 fb
    cmp a,#0x01             ;236a  4d 01
    bz lab_2371             ;236c  ad 03
    br !sub_21f4            ;236e  9b f4 21

lab_2371:
    br !lab_2213            ;2371  9b 13 22

lab_2374_tens:
;Increment Entered SAFE code BCD tens place
;Examples: 0000 -> 0010
;          0010 -> 0020
;          0090 -> 0000
    mov a,!mem_fb76         ;2374  8e 76 fb     A = Entered SAFE code (BCD low byte)
    add a,#0x10             ;2377  0d 10
    adjba                   ;2379  61 80
    br lab_238c             ;237b  fa 0f

lab_237d_ones:
;Increment Entered SAFE code BCD ones place
;Examples: 0000 -> 0001
;          0001 -> 0002
;          0009 -> 0000
    mov a,!mem_fb76         ;237d  8e 76 fb     A = Entered SAFE code (BCD low byte)
    mov x,a                 ;2380  70
    add a,#0x01             ;2381  0d 01
    adjba                   ;2383  61 80
    and a,#0x0f             ;2385  5d 0f
    xch a,x                 ;2387  30
    and a,#0xf0             ;2388  5d f0
    or a,x                  ;238a  61 68

lab_238c:
    mov !mem_fb76,a         ;238c  9e 76 fb     A = Entered SAFE code (BCD low byte)
    mov a,!mem_fb70         ;238f  8e 70 fb
    cmp a,#0x01             ;2392  4d 01
    bz lab_2399             ;2394  ad 03
    br !sub_21f4            ;2396  9b f4 21

lab_2399:
    br !lab_2213            ;2399  9b 13 22

safe_code_1000:
;Set entered SAFE code to default of 1000
    mov a,#0x10             ;239c  a1 10
    mov !mem_fb75,a         ;239e  9e 75 fb     Entered SAFE code (BCD high byte)
    mov a,#0x00             ;23a1  a1 00
    mov !mem_fb76,a         ;23a3  9e 76 fb     Entered SAFE code (BCD low byte)
    ret                     ;23a6  af

lab_23a7:
    call !sub_24b9          ;23a7  9a b9 24
    bnc lab_23d0            ;23aa  9d 24
    bt mem_fe5e.4,lab_23d0  ;23ac  cc 5e 21

    mov a,#0x44             ;23af  a1 44
    movw hl,#mem_f207       ;23b1  16 07 f2
    call !eeram_wr_byte_hl  ;23b4  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,#0x00             ;23b7  a1 00
    movw hl,#mem_f20b       ;23b9  16 0b f2     HL = pointer to SAFE code attempt counter
    call !eeram_wr_byte_hl  ;23bc  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,#0x00             ;23bf  a1 00
    movw hl,#mem_f20a       ;23c1  16 0a f2
    call !eeram_wr_byte_hl  ;23c4  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    call !sub_249c          ;23c7  9a 9c 24     A = 1 + sum of 6 bytes at mem_f206 - mem_f20b
    movw hl,#mem_f20c       ;23ca  16 0c f2
    call !eeram_wr_byte_hl  ;23cd  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_23d0:
    set1 mem_fe61.5         ;23d0  5a 61
    call !read_ee_safe      ;23d2  9a 05 26     Read SAFE code from EEPROM:
                            ;                       mem_fed6: BCD high byte
                            ;                       mem_fed7: BCD low byte
    bc lab_23d8             ;23d5  8d 01        Branch if EEPROM read succeeded
    ret                     ;23d7  af

lab_23d8:
;Compare entered SAFE code to actual SAFE code
    mov a,!mem_fb75         ;23d8  8e 75 fb     A = Entered SAFE code (BCD high byte)
    cmp a,mem_fed6          ;23db  4e d6        Compare with actual SAFE code (BCD high byte)
    bnz lab_2432            ;23dd  bd 53        Branch if not equal

    mov a,!mem_fb76         ;23df  8e 76 fb     A = Entered SAFE code (BCD low byte)
    cmp a,mem_fed7          ;23e2  4e d7        Compare with actual SAFE code (BCD low byte)
    bnz lab_2432            ;23e4  bd 4c        Branch if not equal

sub_23e6:
;Entered SAFE code matches actual SAFE code
    call !sub_246b                ;23e6  9a 6b 24
    mov a,#0x00                   ;23e9  a1 00
    mov !mem_fb52,a               ;23eb  9e 52 fb     Save KWP1281 login rate limiter countdown
    bt mem_fe23.7,lab_23f8        ;23ee  fc 23 07     Branch if SAFE mode = unlocked
    bf mem_fe2c.2,lab_23f8        ;23f1  31 23 2c 03
    call !kwp_init_cluster_if_ok  ;23f5  9a fa 25     If mem_fe63.0=0, it's OK to initiate a KWP1281 connection to the cluster,
                                  ;                       so set up to bit-bang 5 baud init to address 0x3F

lab_23f8:
    bf mem_fe65.3,lab_2417  ;23f8  31 33 65 1b  Branch if not logged in
    call !sub_0a60          ;23fc  9a 60 0a
    mov a,!mem_f207         ;23ff  8e 07 f2
    bf a.6,lab_2415         ;2402  31 6f 10
    call !sub_9118          ;2405  9a 18 91
    call !sub_1dc4          ;2408  9a c4 1d
    call !sub_461b          ;240b  9a 1b 46
    bf mem_fe65.3,lab_2415  ;240e  31 33 65 03  Branch if not logged in
    call !sub_ab3c          ;2412  9a 3c ab

lab_2415:
    br lab_2419             ;2415  fa 02

lab_2417:
    set1 mem_fe7d.3         ;2417  3a 7d

lab_2419:
    clr1 mem_fe5e.6         ;2419  6b 5e
    bf mem_fe23.6,lab_242f  ;241b  31 63 23 10
    mov a,!mem_f207         ;241f  8e 07 f2
    clr1 mem_fe23.6         ;2422  6b 23
    mov1 cy,mem_fe23.6      ;2424  71 64 23
    mov1 a.6,cy             ;2427  61 e9
    movw hl,#mem_f207       ;2429  16 07 f2
    call !eeram_wr_byte_hl  ;242c  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_242f:
    br !lab_2213            ;242f  9b 13 22

lab_2432:
;Entered SAFE code does not match actual SAFE code
    bt mem_fe23.6,lab_2438  ;2432  ec 23 03
    bt mem_fe23.7,sub_23e6  ;2435  fc 23 ae     Branch if SAFE mode = unlocked

lab_2438:
    mov a,#0x07             ;2438  a1 07
    cmp a,!mem_fb70         ;243a  48 70 fb
    bz lab_2442             ;243d  ad 03
    br !sub_2201            ;243f  9b 01 22

lab_2442:
    mov a,#30               ;2442  a1 1e        A = 3 seconds
    mov !msg_countdown,a    ;2444  9e 2e fb

    mov a,!mem_f20b         ;2447  8e 0b f2     A = SAFE code attempt counter
    inc a                   ;244a  41
    cmp a,#0x03             ;244b  4d 03
    bnc lab_245e            ;244d  9d 0f

    movw hl,#mem_f20b       ;244f  16 0b f2     HL = pointer to SAFE code attempt counter
    call !eeram_wr_byte_hl  ;2452  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    cmp a,#0x02             ;2455  4d 02
    bnc lab_245e            ;2457  9d 05

    mov a,#0x02             ;2459  a1 02
    br !sub_2227            ;245b  9b 27 22

lab_245e:
    mov a,#0x05             ;245e  a1 05
    mov !mem_fb70,a         ;2460  9e 70 fb
    mov a,#0x3c             ;2463  a1 3c
    mov !mem_fb51,a         ;2465  9e 51 fb
    br !sub_2201            ;2468  9b 01 22

sub_246b:
;Called when entered SAFE code matches actual SAFE code
    mov a,!mem_fb71         ;246b  8e 71 fb
    and a,#0x03             ;246e  5d 03
    mov b,a                 ;2470  73
    mov a,#0x00             ;2471  a1 00
    movw hl,#mem_f20b       ;2473  16 0b f2     HL = pointer to SAFE code attempt counter
    call !eeram_wr_byte_hl  ;2476  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    movw hl,#mem_2033       ;2479  16 33 20
    mov a,#0xe1             ;247c  a1 e1
    call !sub_2482          ;247e  9a 82 24
    ret                     ;2481  af

sub_2482:
    mov !mem_fb71,a         ;2482  9e 71 fb

    call !sub_249c          ;2485  9a 9c 24     A = 1 + sum of 6 bytes at mem_f206 - mem_f20b
    movw hl,#mem_f20c       ;2488  16 0c f2
    call !eeram_wr_byte_hl  ;248b  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    ret                     ;248e  af

sub_248f:
    mov a,!mem_fb71         ;248f  8e 71 fb
    and a,#0x03             ;2492  5d 03
    mov b,a                 ;2494  73
    movw hl,#mem_202f       ;2495  16 2f 20
    mov a,[hl+b]            ;2498  ab
    br !sub_2227            ;2499  9b 27 22

sub_249c:
;A = 1 + sum of 6 bytes at mem_f206 - mem_f20b
    movw hl,#mem_f206-1     ;249c  16 05 f2
    mov b,#0x06             ;249f  a3 06
    mov a,#0x01             ;24a1  a1 01

lab_24a3:
    add a,[hl+b]            ;24a3  31 0b
    dbnz b,lab_24a3         ;24a5  8b fc
    ret                     ;24a7  af

sub_24a8:
    mov a,[hl+b]            ;24a8  ab
    cmp a,#0xa0             ;24a9  4d a0
    bnc lab_24b7            ;24ab  9d 0a
    and a,#0x0f             ;24ad  5d 0f
    cmp a,#0x0a             ;24af  4d 0a
    bnc lab_24b7            ;24b1  9d 04
    dbnz b,sub_24a8         ;24b3  8b f3
    clr1 cy                 ;24b5  21
    ret                     ;24b6  af

lab_24b7:
    set1 cy                 ;24b7  20
    ret                     ;24b8  af

sub_24b9:
    mov a,!mem_f1e8         ;24b9  8e e8 f1
    cmp a,#0xa5             ;24bc  4d a5
    bnz lab_24c5            ;24be  bd 05
    mov a,#0xe1             ;24c0  a1 e1
    call !sub_2482          ;24c2  9a 82 24

lab_24c5:
    mov a,!mem_fb71         ;24c5  8e 71 fb
    cmp a,#0x00             ;24c8  4d 00
    bz lab_24e5             ;24ca  ad 19
    cmp a,#0xe1             ;24cc  4d e1
    bz lab_24d9             ;24ce  ad 09
    cmp a,#0xc3             ;24d0  4d c3
    bz lab_24d9             ;24d2  ad 05
    mov a,#0xc3             ;24d4  a1 c3
    mov !mem_fb71,a         ;24d6  9e 71 fb

lab_24d9:
    clr1 mem_fe5e.4         ;24d9  4b 5e
    call !sub_249c          ;24db  9a 9c 24     A = 1 + sum of 6 bytes at mem_f206 - mem_f20b
    cmp a,!mem_f20c         ;24de  48 0c f2
    bnz lab_24ef            ;24e1  bd 0c
    set1 mem_fe5e.4         ;24e3  4a 5e

lab_24e5:
    mov b,#0x02             ;24e5  a3 02
    movw hl,#mem_f1b6       ;24e7  16 b6 f1
    call !sub_24a8          ;24ea  9a a8 24
    bnc lab_24f0            ;24ed  9d 01

lab_24ef:
    set1 cy                 ;24ef  20

lab_24f0:
    ret                     ;24f0  af

sub_24f1:
    call !sub_249c          ;24f1  9a 9c 24     A = 1 + sum of 6 bytes at mem_f206 - mem_f20b
    movw hl,#mem_f20c       ;24f4  16 0c f2
    call !eeram_wr_byte_hl  ;24f7  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    movw de,#mem_fb77       ;24fa  14 77 fb
    movw hl,#mem_fe23       ;24fd  16 23 fe
    mov b,#0x01             ;2500  a3 01
    call !sub_0bef          ;2502  9a ef 0b

    movw hl,#mem_fb70       ;2505  16 70 fb
    mov b,#0x07             ;2508  a3 07
    br !sub_0bf6            ;250a  9b f6 0b


blink_led_mem_fb00:
;If mem_fb00=0, set it to 0x3e and do blink_led.
    mov a,!mem_fb00         ;250d  8e 00 fb
    cmp a,#0x00             ;2510  4d 00        Is mem_fb00 = 0?
    bz lab_2515_blink       ;2512  ad 01          Yes: go to set mem_fb00=0x3e and do blink_led
    ret                     ;2514  af             No: do nothing and return

lab_2515_blink:
    mov a,#0x3e             ;2515  a1 3e
    mov !mem_fb00,a         ;2517  9e 00 fb
    ;Fall through to blink_led


blink_led:
;Decrement LED blink counter and set LED pin state
    cmp mem_fe24,#0x30      ;251a  c8 24 30     Compare LED blink countdown
    bnc lab_2521            ;251d  9d 02        Skip turning LED off if not counted down yet
    set1 shadow_p3.3        ;251f  3a cd        LED = off

lab_2521:
    dbnz mem_fe24,lab_2532_write_done   ;2521  04 24 0e     Decrement LED blink countdown
    bt mem_fe2c.2,lab_252f_reset_count  ;2524  ac 2c 08     Skip turning LED on if ??? bit is set
    bt mem_fe2c.3,lab_252f_reset_count  ;2527  bc 2c 05     Skip turning LED on if ??? bit is set
    clr1 pm3.3                          ;252a  71 3b 23     PM33=output (LED)
    clr1 shadow_p3.3                    ;252d  3b cd        LED = on

lab_252f_reset_count:
    mov mem_fe24,#0x30      ;252f  11 24 30     Reset blink countdown

lab_2532_write_done:
    mov a,shadow_p3         ;2532  f0 cd
    mov p3,a                ;2534  f2 03
    ret                     ;2536  af

sub_2537_secure_resp:
;Process the title 0x3D Security Access Response block received from
;the instrument cluster.  Perform a computation on the 4 bytes.  Compare
;the computation result to an expected result and either lock or unlock SAFE mode.
;
;TODO unknown constants 0xBDE7 and 0x0018 below are also found in the
;Premium 4 firmware routine sub_e6ca which also seems to be security access related
;
    movw hl,#kwp_rx_buf+3   ;2537  16 8d f0     HL = source address (KWP1281 rx buffer byte 3)
    movw de,#mem_fed4       ;253a  14 d4 fe     DE = destination address
    mov a,#4                ;253d  a1 04        A = 4 bytes to copy
    callf !copy             ;253f  4c 9e        Copy A bytes from [HL] to [DE]

    ;After copying, mem_fed4 contains the 4 bytes from the received block:
    ;  kwp_rx_buf+3 -> mem_fed4
    ;  kwp_rx_buf+4 -> mem_fed5
    ;  kwp_rx_buf+5 -> mem_fed6
    ;  kwp_rx_buf+6 -> mem_fed7

    ;Word at mem_fed4 = Word at mem_fed4 - 0xbde7
    movw ax,mem_fed4        ;2541  89 d4
    subw ax,#0xbde7         ;2543  da e7 bd
    movw mem_fed4,ax        ;2546  99 d4

    ;AX = Word at mem_fed6
    movw ax,mem_fed6        ;2548  89 d6
    ;If previous subtraction resulted in a borrow, decrement AX
    bnc lab_254d_nc         ;254a  9d 01
    decw ax                 ;254c  90

lab_254d_nc:
    ;Word at mem_fed6 = AX - 0x0018
    subw ax,#0x0018         ;254d  da 18 00
    movw mem_fed6,ax        ;2550  99 d6

    ;Word at mem_fed4 = Word at mem_fed4 XOR Word at mem_fed6
    call !sub_258e_xor_words

    mov a,mem_fed4          ;2555  f0 d4      A = low byte of word at mem_fed4
    mov c,#0x02             ;2557  a2 02      C = 2 passes of counting number of "0" bits word at mem_fed4
    mov mem_fed8,#0         ;2559  11 d8 00   mem_fed = 0 (counts number of "0" bits)

lab_255c_c_loop:
    ;Add the count of "0" bits in A to byte in mem_fed8
    ;Original byte in A is preserved
    mov b,#8                ;255c  a3 08      B = 8 bits to rotate
lab_255e_b_loop:
    ror a,1                 ;255e  24         Rotate A to the right around itself
                            ;                 Bit 0 is rotated into both bit 7 and carry flag
    bc lab_2563_cy          ;255f  8d 02      Skip incrementing mem_fed8 if bit rotated out = 1
    ;Bit rotated out = 0
    inc mem_fed8            ;2561  81 d8      Increment mem_fed8
lab_2563_cy:
    dbnz b,lab_255e_b_loop  ;2563  8b f9      Loop until all 8 bits are tested

    mov a,mem_fed5          ;2565  f0 d5      A = high byte of word at mem_fed4
    dbnz c,lab_255c_c_loop  ;2567  8a f3      Loop until C=0

    ;B = count of "0" bits computed above
    mov a,mem_fed8          ;2569  f0 d8
    mov b,a                 ;256b  73         B = Number of "0" bits counted

    ;Carry flag from operations above is used below

lab_256c_b_loop:
    mov a,mem_fed6          ;256c  f0 d6
    rorc a,1                ;256e  25
    mov mem_fed6,a          ;256f  f2 d6      Rotate mem_fed6 once to the right

    mov a,mem_fed7          ;2571  f0 d7
    rorc a,1                ;2573  25
    mov mem_fed7,a          ;2574  f2 d7      Rotate mem_fed7 once to the right

    mov1 mem_fed6.7,cy      ;2576  71 71 d6   Copy carry flag into mem_fed6 bit 7

    dbnz b,lab_256c_b_loop  ;2579  8b f1      Loop once for each "0" bit counted above

    call !sub_258e_xor_words;257b  9a 8e 25   Word at mem_fed4 = Word at mem_fed4 XOR Word at mem_fed6

    ;Copy result of computation into mem_fb73/mem_fb74 for use comparision in sub_22fc
    movw ax,mem_fed4        ;257e  89 d4
    mov !mem_fb73,a         ;2580  9e 73 fb   mem_fb73 = Word at mem_fed4 high byte
    mov a,x                 ;2583  60
    mov !mem_fb74,a         ;2584  9e 74 fb   mem_fb74 = Word at mem_fed5 low byte

    call !sub_22fc          ;2587  9a fc 22   Lock or unlock SAFE mode based on security access computation result
                            ;                 If Word at mem_fb73 equals Word mem_f208 then access is granted

    call !sub_24f1          ;258a  9a f1 24   XXX Unknown
    ret                     ;258d  af

sub_258e_xor_words:
;Word at mem_fed4 = Word at mem_fed4 XOR Word at mem_fed6
    mov a,mem_fed4          ;258e  f0 d4
    xor a,mem_fed6          ;2590  7e d6
    mov mem_fed4,a          ;2592  f2 d4    mem_fed4 = mem_fed4 xor mem_fed6

    mov a,mem_fed5          ;2594  f0 d5
    xor a,mem_fed7          ;2596  7e d7
    mov mem_fed5,a          ;2598  f2 d5    mem_fed5 = mem_fed5 xor mem_fed7
    ret                     ;259a  af

sub_259b_safe_lock:
;Turn SAFE mode = locked
    clr1 mem_fe23.7         ;259b  7b 23    SAFE mode = locked
    ret                     ;259d  af

sub_259e_gen_rand:
;Generate the 4-byte pseudorandom number for the 0xD7 Security Access Request
;block that will be sent to the instrument cluster.  It's based on the upd_tick
;counter value, together the upd_leds value, and some math to obfuscate them.
;
;The Premium 4 firmware generates its pseudorandom number at lab_e3d9.  It also
;uses a timer but completely different math, suggesting that the math below is
;just for obfuscation and not checked as part of the security algorithm.
;
;Returns the 4 bytes in A, X, D, E
;
    movw ax,#upd_tick       ;259e  10 3d fe   X = upd_tick (constantly incremented in watch timer interrupt)
                            ;                 A = upd_leds (uPD16432B LED output latch; usually 0x0F)

    sub a,upd_tick          ;25a1  1e 3d      A = A - upd_tick
    xch a,x                 ;25a3  30         Swap A and X
    movw de,ax              ;25a4  d4         DE = AX

    xor a,x                 ;25a5  61 78      A = A ^ X
    add a,upd_tick          ;25a7  0e 3d      A = A + upd_tick
    mulu x                  ;25a9  31 88      AX = A * X
    ret                     ;25ab  af

auth_login_56_safe:
;Authenticate login on address 0x56 using SAFE code
;Called from kwp_56_2b_login
;
    mov a,!mem_fb52         ;25ac  8e 52 fb     A = KWP1281 rate limit countdown
    cmp a,#0x00             ;25af  4d 00
    bnz lab_25f9_ret        ;25b1  bd 46        Branch to do nothing and return if rate limited

    ;not currently being rate limited

    clr1 mem_fe65.3         ;25b3  3b 65        Clear bit to indicate not logged in

    mov a,!kwp_rx_buf+4     ;25b5  8e 8e f0
    mov x,a                 ;25b8  70           X = KWP1281 rx buffer byte 4 (login code low byte)
    mov a,!kwp_rx_buf+3     ;25b9  8e 8d f0     A = KWP1281 rx buffer byte 3 (login code high byte)

    call !bin_to_bcd        ;25bc  9a 7f 0a     Convert AX to BCD, store word in mem_fed4:
                            ;                       mem_fed4: BCD low byte
                            ;                       mem_fed5: BCD high byte

    call !read_ee_safe      ;25bf  9a 05 26     Read SAFE code from EEPROM:
                            ;                       mem_fed6: BCD high byte
                            ;                       mem_fed7: BCD low byte
    bc lab_25c5_compare     ;25c2  8d 01        Branch if EEPROM read succeeded
    ret                     ;25c4  af

lab_25c5_compare:
    mov a,mem_fed5          ;25c5  f0 d5        A = Login code converted BCD high byte
    cmp a,mem_fed6          ;25c7  4e d6        Compare to SAFE code BCD high byte
    bnz lab_25e0_fail       ;25c9  bd 15        Branch if not equal

    mov a,mem_fed4          ;25cb  f0 d4        A = Login code converted BCD low byte
    cmp a,mem_fed7          ;25cd  4e d7        Compare to SAFE code BCD low byte
    bnz lab_25e0_fail       ;25cf  bd 0f        Branch if not equal

    set1 mem_fe65.3         ;25d1  3a 65        Set bit to indicate successful login
    bf mem_fe23.6,lab_25f9_ret ;25d3  31 63 23 22
    call !sub_23e6          ;25d7  9a e6 23
    call !sub_248f          ;25da  9a 8f 24
    br !sub_24f1            ;25dd  9b f1 24

lab_25e0_fail:
    mov a,!mem_f20a         ;25e0  8e 0a f2     A = KWP1281 login attempt count
    inc a                   ;25e3  41
    cmp a,#0x03             ;25e4  4d 03
    bnc lab_25f4            ;25e6  9d 0c
    movw hl,#mem_f20a       ;25e8  16 0a f2
    call !eeram_wr_byte_hl  ;25eb  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    cmp a,#0x02             ;25ee  4d 02
    bnc lab_25f4            ;25f0  9d 02
    br lab_25f9_ret         ;25f2  fa 05

lab_25f4:
    mov a,#0x3c             ;25f4  a1 3c
    mov !mem_fb52,a         ;25f6  9e 52 fb     Save KWP1281 rate limit countdown

lab_25f9_ret:
    ret                     ;25f9  af


kwp_init_cluster_if_ok:
;If mem_fe63.0=0, it's OK to initiate a KWP1281 connection to the cluster,
;so set up to bit-bang 5 baud init to address 0x3F
    bf mem_fe63.0,lab_25ff  ;25fa  31 03 63 01
    ret                     ;25fe  af

lab_25ff:
;Set up to bit-bang 5 baud init to address 0x3F
    mov a,#0xbf             ;25ff  a1 bf        A = KWP1281 address 0x3F (cluster)
    call !kwp_init_5baud    ;2601  9a 06 35     Set up to bit-bang 5 baud init with address in A
    ret                     ;2604  af


read_ee_safe:
;Read SAFE code from EEPROM, store BCD word in 0xfed6
;Called from login auth_login_56_safe
;
;Stores:
;  mem_fed6: SAFE code BCD high byte
;  mem_fed7: SAFE code BCD low byte
;
;Returns carry set on success, carry clear on failure
;
    clr1 mem_fe5e.3         ;2605  3b 5e
    movw hl,#0x0014         ;2607  16 14 00     HL = EEPROM address 0x0014 (SAFE code)
    movw de,#mem_fed6       ;260a  14 d6 fe     DE = destination buffer
    mov a,#0x02             ;260d  a1 02        A = 2 bytes to read into buffer
    call !eeprom_read       ;260f  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bc lab_2616             ;2612  8d 02        Branch if EEPROM read succeeded
    set1 mem_fe5e.3         ;2614  3a 5e
lab_2616:
    ret                     ;2616  af

sio30_enable:
;Enable SIO30 (used for uPD16432B SPI)
    mov csim30,#0x83        ;2617  13 b0 83     SIO30 mode = ena, tx & rx, clock = fx/2^6 (65.5 kHz)
    clr1 pm3.2              ;261a  71 2b 23     PM32=output (uPD16432B CLK)
    clr1 pm3.1              ;261d  71 1b 23     PM31=output (uPD16432B DAT out)
    clr1 pu3.0              ;2620  71 0b 33     PU30 pull-up resistor disabled (uPD16432B DAT in)
    set1 pm3.0              ;2623  71 0a 23     PM30=input (uPD16432B DAT in)
    clr1 shadow_p3.2        ;2626  2b cd        uPD16432B CLK = low
    clr1 shadow_p3.1        ;2628  1b cd        uPD16432B DAT out = low
    mov a,shadow_p3         ;262a  f0 cd
    mov p3,a                ;262c  f2 03
    ret                     ;262e  af

sio31_enable:
;Enable SIO31 (used for CDC RX SPI)
    mov csim31,#0x84        ;262f  13 b8 84     SIO31 mode = ena, rx only, clock = external to SCK31
    clr1 pu2.2              ;2632  71 2b 32     PU22 pull-up resistor disabled (CDC CLK)
    set1 pm2.2              ;2635  71 2a 22     PM22 = input (CDC CLK)
    clr1 pm2.1              ;2638  71 1b 22     PM21 = output
    clr1 pu2.0              ;263b  71 0b 32     PU20 pull-up resistor disabled
    set1 pm2.0              ;263e  71 0a 22     PM20 = input (CDC DI)
    clr1 shadow_p2.1        ;2641  1b cc
    mov a,shadow_p2         ;2643  f0 cc
    mov p2,a                ;2645  f2 02
    ret                     ;2647  af

sub_2648:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;2648  4d 0a
    bc lab_2652_lt_0x0a     ;264a  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;264c  1d 0a      A = A - 0x0A
    add a,#'A               ;264e  0d 41      Convert to ASCII 'A'-'F'
    br lab_2654_ret         ;2650  fa 02
lab_2652_lt_0x0a:
    add a,#'0               ;2652  0d 30      Convert to ASCII '0'-'9'
lab_2654_ret:
    ret                     ;2654  af

kwp_1j003b180b:
    ;13 bytes including the block end
    .ascii "1J0035180 B "
    .byte 0x03 ;KWP1281 block end

kwp_1c0035180a:
    ;13 bytes including the block end
    .ascii "1C0035180 A "
    .byte 0x03 ;KWP1281 block end

kwp_radio_de2:
    ;13 bytes including the block end
    .ascii " Radio DE2  "
    .byte 0x03 ;KWP1281 block end

kwp_radio_delco:
    ;13 bytes including the block end
    .ascii " Radio DELCO"
    .byte 0x03 ;KWP1281 block end

kwp_0001:
    ;13 bytes including the null and block end
    .ascii "       0001"
    .byte 0x00
    .byte 0x03 ;KWP1281 block end

display_test:
    .ascii "DISPLAY "   ;FIS line 1
    .ascii "  TEST  "   ;FIS line 2

display_test_end:
    .ascii "        "   ;FIS line 1
    .ascii "  END   "   ;FIS line 2


sub_26b6_elab_1:
;Given a fault elaboration in A, return something in E
;that is used for measuring block responses
;
;Called when:
;  "meas_id" = meas_id_fsp_st (Front Speakers Status)
;  "meas_id" = meas_id_rsp_st (Rear Speakers Status)
;  "meas_id" = meas_id_ant_st (Antenna Status)
;
    mov e,#0xc2             ;26b6  a4 c2
    cmp a,#0x00             ;26b8  4d 00
    bz lab_26c8_ret         ;26ba  ad 0c    If A=0 (0 "-") then return with E=0xC2

    cmp a,#0x88             ;26bc  4d 88
    bz lab_26c8_ret         ;26be  ad 08    If A=0x88 (no fault) then return with E=0xC2

    mov e,#0xf2             ;26c0  a4 f2
    cmp a,#0x2c             ;26c2  4d 2c
    bz lab_26c8_ret         ;26c4  ad 02    If A=0x2C (44 "Short Circuit") then return with E=0xF2

    mov e,#0xf3             ;26c6  a4 f3    Otherwise return with E=0xF3
lab_26c8_ret:
    ret                     ;26c8  af


sub_26c9_elab_2:
;Given a fault elaboration in A, return something in E
;that is used for measuring block responses
;
;Called when:
;  "meas_id" = meas_id_cdc_st (CD Changer Status)
;  "meas_id" = meas_id_fis_st (External Display Status)
;
    mov e,#0xc2             ;26c9  a4 c2
    cmp a,#0x00             ;26cb  4d 00
    bz lab_26d5_ret         ;26cd  ad 06    If A=0 (0 "-") then return with E=0xC2

    cmp a,#0x88             ;26cf  4d 88
    bz lab_26d5_ret         ;26d1  ad 02    If A=0x88 (no fault) then return with E=0xC2

    mov e,#0xc3             ;26d3  a4 c3    Otherwise return with E=0xC3
lab_26d5_ret:
    ret                     ;26d5  af


sub_26d6:
    call !sub_7697_snd_cd   ;26d6  9a 97 76     Unknown; snd_msg_idx and CD related

    mov a,#50               ;26d9  a1 32        A = 5 seconds
    mov !msg_countdown,a    ;26db  9e 2e fb

    mov a,#0x8f             ;26de  a1 8f
    mov !tmp_msg_idx,a      ;26e0  9e a6 f1     f Writes " DIAG  "
    ret                     ;26e3  af


kwp_id_part_num:
;Returns DE = pointer to "1J0035180B  ",0x03 (13 bytes)
    movw hl,#mem_f1ed       ;26e4  16 ed f1     HL = source address (EEPROM area "1J0035180B  ")
    movw de,#kwp_tmp_buf    ;26e7  14 3b f0     DE = destination address
    mov a,#0x0c             ;26ea  a1 0c        A = number of bytes to copy (12)
    callf !copy             ;26ec  4c 9e        Copy A bytes from [HL] to [DE]

    movw hl,#kwp_tmp_buf    ;26ee  16 3b f0
    mov a,#0x03             ;26f1  a1 03        A = 0x03 block end
    mov [hl+0x0c],a         ;26f3  be 0c        Put block end after part number

    movw de,#kwp_tmp_buf    ;26f5  14 3b f0     DE = destination address
    ret                     ;26f8  af


kwp_id_radio:
;Returns DE = pointer to " Radio DE2  ",0x03 (13 bytes)
;or DE = pointer to " Radio DELCO",0x03 if in "DELCO mode"
    movw de,#kwp_radio_de2  ;26f9  14 6f 26
    mov a,!mem_f1e9         ;26fc  8e e9 f1
    bf a.7,lab_2705         ;26ff  31 7f 03

    ;"DELCO mode" is on (see also kwp_id_0001)
    movw de,#kwp_radio_delco ;2702  14 7c 26    DE = destination address
lab_2705:
    ret                     ;2705  af


kwp_id_0001:
;Returns DE = pointer to "       0001",0x00,0x03 (13 bytes)
;where the "0001" is an unknown code built from memory
;
;XXX confusing: the actual response we send will only be 12 bytes.
;It will not contain the null byte.  See lab_52d5_id_0001.
;
    movw hl,#kwp_0001       ;2706  16 89 26     HL = source address of "       0001",0x00,0x03
    movw de,#kwp_tmp_buf    ;2709  14 3b f0     DE = destination address
    mov a,#0x0d             ;270c  a1 0d        A = number of bytes to copy (13)
    callf !copy             ;270e  4c 9e        Copy A bytes from [HL] to [DE]

    ;kwp_tmp_buf now contains 13 bytes:
    ;"       0001",0x00,0x03

    ;Overwrite the first ASCII digit in "0001"
    ;  with high nibble of mem_f1ec converted to ASCII
    movw hl,#kwp_tmp_buf    ;2710  16 3b f0
    mov a,!mem_f1ec         ;2713  8e ec f1
    and a,#0xf0             ;2716  5d f0
    ror a,1                 ;2718  24
    ror a,1                 ;2719  24
    ror a,1                 ;271a  24
    ror a,1                 ;271b  24
    add a,#'0               ;271c  0d 30
    mov [hl+0x07],a         ;271e  be 07        kwp_tmp_buf: "       0001",0x00,0x03
                            ;                                        ^

    ;Overwrite the second ASCII digit in "0001"
    ;  with low nibble of mem_f1ec converted to ASCII
    mov a,!mem_f1ec         ;2720  8e ec f1
    and a,#0x0f             ;2723  5d 0f
    add a,#'0               ;2725  0d 30
    mov [hl+0x08],a         ;2727  be 08        kwp_tmp_buf: "       0001",0x00,0x03
                            ;                                         ^

    ;Overwrite the third ASCII digit in "0001"
    ;  with high nibble of mem_f1eb converted to ASCII
    mov a,!mem_f1eb         ;2729  8e eb f1
    and a,#0xf0             ;272c  5d f0
    ror a,1                 ;272e  24
    ror a,1                 ;272f  24
    ror a,1                 ;2730  24
    ror a,1                 ;2731  24
    add a,#'0               ;2732  0d 30
    mov [hl+0x09],a         ;2734  be 09        kwp_tmp_buf: "       0001",0x00,0x03
                            ;                                          ^

    ;Overwrite the fourth ASCII digit in "0001"
    ;  with low nibble of mem_f1eb converted to ASCII
    mov a,!mem_f1eb         ;2736  8e eb f1
    and a,#0x0f             ;2739  5d 0f
    add a,#'0               ;273b  0d 30
    mov [hl+0x0a],a         ;273d  be 0a        kwp_tmp_buf: "       0001",0x00,0x03
                            ;                                           ^

    ;Check for "DELCO mode"
    mov a,!mem_f1e9         ;273f  8e e9 f1
    bf a.7,lab_274a         ;2742  31 7f 05

    ;"DELCO mode" is on (see also kwp_id_radio)
    ;Overwrite the first ASCII digit in "0001" again
    mov a,!mem_f1ea         ;2745  8e ea f1
    mov [hl+0x07],a         ;2748  be 07        kwp_tmp_buf: "       0001",0x00,0x03
                            ;                                        ^

lab_274a:
    movw de,#kwp_tmp_buf    ;274a  14 3b f0     DE = pointer to start of buffer created above
    ret                     ;274d  af


read_next_fault:
;Read the next KWP1281 fault code
;Called from lab_537d (sending response to read or clear faults)
;
;Clear mem_fe5f.3 and then start calling this subroutine to
;read each fault.
;
;If there are no faults, the first call will return a special
;fault meaning "no fault" (AX=0xFFFF, E=0x88) with carry clear.
;Calling again will return the same.
;
;If there are faults, each call will return one with the carry clear.
;When all faults have been read, it will return with the carry set.
;Calling again will start over from the first fault.
;
;Call with:
;  mem_fe5f.3=0 to start reading faults from the beginning
;
;Returns:
;  AX = fault code
;   E = fault elaboration
;  Carry clear = fault, Carry set = no fault
;
    bt mem_fe5f.3,lab_2762_loop  ;274e  bc 5f 11  Branch if we have already started reading faults

    ;We have not started reading faults yet
    call !find_first_fault  ;2751  9a 98 2c     Find the first fault set in the faults buffer
                            ;                     Returns HL=pointer to fault
                            ;                           carry set = found a fault, clear = no fault
    bc lab_275c             ;2754  8d 06        Branch if find_first_fault found at least one fault

    ;No faults are present
    ;Prepare the special fault that means "no fault"
    ;and return it with carry clear
    mov e,#0x88             ;2756  a4 88        0x88 = fault elaboration for "no fault"
    movw ax,#0xffff         ;2758  10 ff ff     0xFF = fault code for "no fault"
    ret                     ;275b  af

lab_275c:
;We just started reading faults.
;We called find_first_fault and it found there is at least one fault.
    set1 mem_fe5f.3         ;275c  3a 5f        Set bit to indicate we have started reading the faults buffer
    movw ax,hl              ;275e  c6           AX = pointer to the first fault found by find_first_fault
    movw !mem_f002,ax       ;275f  03 02 f0     Store pointer in mem_f002

lab_2762_loop:
;Checking each fault elaboration at the mfm_f20d buffer for a fault

    ;Get pointer to current position in faults buffer
    ;Check if it is valid
    movw ax,!mem_f002       ;2762  02 02 f0     A = pointer to faults buffer
    cmpw ax,#mem_f20d       ;2765  ea 0d f2     HL = faults buffer #2
    bc lab_278c_no_fault    ;2768  8d 22        Branch to "no fault" if AX < #mem_f20d
    cmpw ax,#mem_f218+1     ;276a  ea 19 f2
    bnc lab_278c_no_fault   ;276d  9d 1d        Branch to "no fault" if AX >= #mem_f218+1

    ;AX contains a valid pointer into the faults buffer
    ;Move it to DE
    movw de,ax              ;276f  d4           DE = pointer to current fault

    ;Increment pointer to faults buffer for next time around
    incw ax                 ;2770  80           Increment AX for next time around
    movw !mem_f002,ax       ;2771  03 02 f0     Store AX for next time around

    ;Check if a fault is present at [DE]
    mov a,[de]              ;2774  85           A = elaboration code for this fault
    cmp a,#0x88             ;2775  4d 88        0x88 = fault elaboration for "no fault"
    bz lab_2762_loop        ;2777  ad e9        Loop to next position in buffer if no fault

    ;Fault was found in faults buffer at [DE]

    ;Look up the KWP1281 fault code for faults buffer position [DE]
    push ax                 ;2779  b1           Push the fault elaboration code
                            ;                   DE contains the position of the fault we found
    movw hl,#mem_f20d       ;277a  16 0d f2     HL = faults buffer #2
    call !sub_2cbe          ;277d  9a be 2c     A = DE - HL
    mov b,a                 ;2780  73           Copy it to B as index to fault codes table
    movw hl,#fault_codes+1  ;2781  16 e9 af     HL = pointer to table of KWP1281 fault codes
    callf !table_get_word   ;2784  4c 48        Load DE with word at position B in table [HL]

    pop ax                  ;2786  b0           Pop fault elaboration code
    bc lab_278c_no_fault    ;2787  8d 03        Branch if table lookup failed

    ;DE now contains the KWP1281 fault code for the fault
    ;A contains the KWP1281 fault elaboration code for the fault

    mov x,a                 ;2789  70           Move A to X so it ends up in E after XCHW
    xchw ax,de              ;278a  e4           After swapping:
                            ;                     AX = fault code
                            ;                      E = fault elaboration
    ret                     ;278b  af

lab_278c_no_fault:
    clr1 mem_fe5f.3         ;278c  3b 5f        Clear bit to indicate we are done reading the faults buffer
    set1 cy                 ;278e  20           Set carry to indicate no fault
    ret                     ;278f  af


clear_faults:
;Clear faults
;Called from kwp_56_05_clear_faults
;
;This does not guarantee that faults will actually be cleared.  If the
;underlying condition that caused a fault still persists, the fault
;will persist or occur again.
;
    call !sub_2d35          ;2790  9a 35 2d     Clear bits in mem_fe5f and mem_fe60

    movw hl,#mem_f20c       ;2793  16 0c f2
    movw de,#mem_f215       ;2796  14 15 f2
    call !sub_2cbe          ;2799  9a be 2c     A = DE - HL
                            ;                   Results in A=0x9

    cmp a,#0x00             ;279c  4d 00
    bz lab_27ce_ret         ;279e  ad 2e        XXX redundant; never branches

    mov b,a                 ;27a0  73
    movw de,#mem_fc1a       ;27a1  14 1a fc     HL = faults buffer #1
    movw hl,#mem_f20d       ;27a4  16 0d f2     HL = faults buffer #2

lab_27a7_loop:
    mov a,[de]              ;27a7  85
    cmp a,[hl]              ;27a8  4f
    bz lab_27b0             ;27a9  ad 05
    mov a,#0x88             ;27ab  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;27ad  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_27b0:
    incw hl                 ;27b0  86
    incw de                 ;27b1  84
    dbnz b,lab_27a7_loop    ;27b2  8b f3

    movw hl,#mem_f217       ;27b4  16 17 f2     HL = pointer to faults buffer #2 "01195 - End"
    mov a,#0x88             ;27b7  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;27b9  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    movw hl,#mem_f218       ;27bc  16 18 f2     HL = pointer to faults buffer #2 "65535 - Internal Control Module Memory Error"
    mov a,#0x88             ;27bf  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;27c1  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    movw hl,#mem_f219       ;27c4  16 19 f2
    mov a,#0x00             ;27c7  a1 00        A = 0
    call !eeram_wr_byte_hl  ;27c9  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    clr1 mem_fe6d.3         ;27cc  3b 6d        ROM checksum calculation = not performed

lab_27ce_ret:
    ret                     ;27ce  af


perform_next_test:
;Perform the next output test
;Returns:
;  AX = one of the words from the output_tests table
;  Carry set = output tests finished, carry clear = output tests continuing
    push hl                 ;27cf  b7
    push bc                 ;27d0  b3
    call !sub_2d35          ;27d1  9a 35 2d     Clear bits in mem_fe5f and mem_fe60
    mov a,!kwp_test_idx     ;27d4  8e 4e f0     A = KWP1281 Output Test index
    cmp a,#0x03             ;27d7  4d 03
    bc lab_27e6             ;27d9  8d 0b        Branch if kwp_test_idx < 3
    ;Output tests finished
    clr1 mem_fe5f.5         ;27db  5b 5f
    mov a,#0x00             ;27dd  a1 00
    mov !kwp_test_idx,a     ;27df  9e 4e f0     KWP1281 Output Test index = 0
    pop bc                  ;27e2  b2
    pop hl                  ;27e3  b6
    set1 cy                 ;27e4  20           Carry set = output tests finished
    ret                     ;27e5  af

lab_27e6:
;kwp_test_idx < 3
;More output tests are remaining in output_tests table
;Do the next one
    mov b,a                 ;27e6  73           B = KWP1281 Output Test index
    inc a                   ;27e7  41           Increment it
    mov !kwp_test_idx,a     ;27e8  9e 4e f0     Store as KWP1281 Output Test index

    movw hl,#output_tests+1 ;27eb  16 02 b0     HL = pointer to table of Output Test codes
    callf !table_get_word   ;27ee  4c 48        Load DE with word at position B in table [HL]
    bc lab_2818             ;27f0  8d 26        Branch if table lookup failed
                            ;                     (branches to pop registers, clear carry, and ret)

    movw ax,de              ;27f2  c4           AX = word loaded from output_tests table
    cmpw ax,#0x0353         ;27f3  ea 53 03     Compare with 00851 - Loudspeaker(s)
    bnz lab_27ff            ;27f6  bd 07

    ;AX = 0x0353 (00851 - Loudspeaker(s))
    ;XXX redundant: this push/call/pop does nothing because loudspeakers test is unimplemented
    push ax                 ;27f8  b1
    call !sub_7bbd          ;27f9  9a bd 7b     Perform loudspeakers output test (just returns)
    pop ax                  ;27fc  b0

    br lab_2818             ;27fd  fa 19        Branch to pop registers, clear carry, and return

lab_27ff:
    cmpw ax,#0x0356         ;27ff  ea 56 03     Compare with 00854 - Radio Display Output in Dash Panel Insert
    bnz lab_280e            ;2802  bd 0a

    ;AX = 0x0356 (00854 - Radio Display Output in Dash Panel Insert)
    push ax                 ;2804  b1
    call !sub_7bbe          ;2805  9a be 7b
    call !fis_display_test  ;2808  9a 21 28     Copy display_test text into fis_tx_buf
    pop ax                  ;280b  b0

    br lab_2818             ;280c  fa 0a        Branch to pop registers, clear carry, and return

lab_280e:
    cmpw ax,#0x04ab         ;280e  ea ab 04     Compare with 01195 - End
    bnz lab_2818            ;2811  bd 05        Branch to pop registers, clear carry, and return

    ;AX = 0x04ab (01195 - End)
    push ax                     ;2813  b1
    call !fis_display_test_end  ;2814  9a 1c 28     Copy display_test_end text into fis_tx_buf
    pop ax                      ;2817  b0
                                ;                   Fall through to pop registers, clear carry, and ret
lab_2818:
    pop bc                  ;2818  b2           Pop BC pushed at beginning of perform_next_test
    pop hl                  ;2819  b6           Pop HL pushed at beginning of perform_next_test
    clr1 cy                 ;281a  21           Clear carry = output tests are continuing
    ret                     ;281b  af

fis_display_test_end:
;Copy display_test_end text into fis_tx_buf
    movw hl,#display_test_end ;281c  16 a6 26   HL = source address of "        " (FIS line 1)
                              ;                                        "  END   " (FIS line 2)
    br lab_2824               ;281f  fa 03

fis_display_test:
;Copy display_test text into fis_tx_buf
    movw hl,#display_test   ;2821  16 96 26     HL = source address of "DISPLAY " (FIS line 1)
                            ;                                          "  TEST  " (FIS line 2)

lab_2824:
    movw de,#fis_tx_buf+3   ;2824  14 55 f0     DE = destination address
    mov a,#16               ;2827  a1 10        A = 16 bytes to copy (8 chars * 2 lines)
    callf !copy             ;2829  4c 9e        Copy A bytes from [HL] to [DE]
    set1 mem_fe60.3         ;282b  3a 60
    set1 mem_fe5f.5         ;282d  5a 5f
    ret                     ;282f  af

read_next_meas:
;Read the next measurement for a KWP1281 measuring blocks group
;Called from group reading lab_5429_loop
;
;The group number will have been received in kwp_rx_buf+3.  Clear
;mem_fe5f.4 and start calling read_next_meas.  Call it up to 4 times,
;once for each possible measurement.  If a call returns carry=clear,
;measurement data is available in A/X/E.  If a call returns carry=set,
;no more data is available.  Carry=set means either the group had fewer
;than 4 measurements or an error occurred.
;
;After 4 calls were made or carry=set was returned, check the status
;in D.  If D=0xF then an error occurred and a NAK response should be
;sent on KWP1281.  Otherwise, return a group reading response with
;the measurements.
;
;Call with:
;  mem_fe5f.4 = 0 to start reading first measurement
;  kwp_rx_buf+3 = group number
;
;Returns:
;  A = formula byte
;  X = measurement high byte
;  E = measurement low byte
;  D = 0 success, D = 0x0F error occurred
;  Carry clear = measurement data in A/X/E, carry set = no measurement
;
    bt mem_fe5f.4,lab_287a  ;2830  cc 5f 47     Branch if we have already started reading
                            ;                     the measuring block group

    ;We have just started this group reading.  Check the group number, perform setup,
    ;then fall through to return the data for the first measurement in the group

    mov a,!kwp_rx_buf+3     ;2833  8e 8d f0     A = KWP1281 rx buffer byte 3 (group number)
    mov !kwp_group_num,a    ;2836  9e 4f f0     Store group number in kwp_group_num

    cmp a,#kwp_group_19         ;2839  4d 19    Is it KWP1281 group 0x19 (protection)?
    bz lab_285e_group_0x19      ;283b  ad 21      Yes: branch to lab_285e_group_0x19

    cmp a,#kwp_group_06         ;283d  4d 06    Is it KWP1281 group 6 (external display)?
    bnz lab_2849_not_0x19_0x06  ;283f  bd 08      No: branch to lab_2849_not_0x19_0x06

    ;Group number = 6 (external display)
    mov a,!mem_f1e9             ;2841  8e e9 f1
    bt a.0,lab_2858_ret_error   ;2844  31 0e 11     Branch if FIS display is disabled
                                ;                     TODO: is that what bit 0 really means?

    mov a,#kwp_group_06         ;2847  a1 06        XXX redundant; A is already 0x06
    ;Fall through

lab_2849_not_0x19_0x06:
;Group is not 0x19 or 0x06
    movw hl,#group_numbers+1        ;2849  16 8e af     HL = pointer to table of valid group numbers
    call !table_find_byte           ;284c  9a 0d 0b     Find A in table [HL] and load its position in B
    bnc lab_2858_ret_error          ;284f  9d 07        Branch if find failed

    movw hl,#group_data_pointers+1  ;2851  16 97 af     HL = pointer to table of group data pointers
    callf !table_get_word           ;2854  4c 48        Load DE with word at position B in table [HL]
    bnc lab_2862_group_ok           ;2856  9d 0a        Branch if table lookup succeeded
    ;Fall through

;Return D=0x0F (error occurred), CY=1 (no meas data)
lab_2858_ret_error:
    mov d,#0x0f             ;2858  a5 0f        D=0x0F (error occurred)
    ;Fall through

lab_285a_ret_no_data:
    clr1 mem_fe5f.4         ;285a  4b 5f        Clear bit = done reading measuring block group
    set1 cy                 ;285c  20           Set carry = no measurement data returned
    ret                     ;285d  af

lab_285e_group_0x19:
;Group number = 0x19
    set1 mem_fe65.4         ;285e  4a 65        Set bit to indicate group read 0x19 was performed
    br lab_2858_ret_error   ;2860  fa f6        Branch to failure

lab_2862_group_ok:
;Group number lookup succeeded
;DE contains one of the pointers to group reading data from table at group_data_pointers+1
    movw ax,de              ;2862  c4           AX = pointer to group reading data (group_N_data)
    movw !mem_f002,ax       ;2863  03 02 f0     Save it in mem_f002

    decw de                 ;2866  94           DE = back up one to read number of bytes in table
    mov a,[de]              ;2867  85           A = number of bytes in group reading data table
    incw de                 ;2868  84           DE = forward to point to first entry again

    ;A = number of measurements in group
    ;Computed by number of bytes in group data table / 3
    mov x,a                 ;2869  70           X = number of bytes in group reading data table
    mov a,#0x00             ;286a  a1 00        A = 0 (high byte for division)
    mov c,#0x03             ;286c  a2 03        C = 3 bytes per measurement (formula + high + low)
    divuw c                 ;286e  31 82        AX = AX / C
    mov a,x                 ;2870  60           A = X (quotient low byte)

    cmp a,#0x05             ;2871  4d 05
    bc lab_2877             ;2873  8d 02        Branch if number of measurements in group < 5

    ;Number of measurements in group >= 5
    mov a,#0x04             ;2875  a1 04        Cap number of measurements at 4

lab_2877:
    mov !kwp_meas_count,a   ;2877  9e 50 f0     Store number of measurements in group left to read

lab_287a:
;Read the next measurement from the group
    mov d,#0x00             ;287a  a5 00        D=0 (no error)

    mov a,!kwp_meas_count   ;287c  8e 50 f0     A = number of measurements in group left to read
    cmp a,#0x00             ;287f  4d 00        Is it zero?
    bz lab_285a_ret_no_data ;2881  ad d7          Yes: nothing to do, return with no data

    ;At least one measurement left to read

    dec a                   ;2883  51           Decrement number of measurements in group left to read
    mov !kwp_meas_count,a   ;2884  9e 50 f0     Store it decremented value

    set1 mem_fe5f.4         ;2887  4a 5f        Set bit = currently reading a measuring block group

    ;Read the next three values (formula, unknown_value, meas_id) from a group_N_data type

    movw ax,!mem_f002       ;2889  02 02 f0
    movw hl,ax              ;288c  d6           HL = pointer to group reading data (group_N_data)

    mov a,[hl]              ;288d  87           A = formula
    mov e,a                 ;288e  74           E = formula

    incw hl                 ;288f  86           HL = increment pointer to next byte (unknown_value)
    mov a,[hl]              ;2890  87           A = unknown_value
    mov x,a                 ;2891  70           X = unknown_value

    incw hl                 ;2892  86           HL = increment pointer to next byte (meas_id)
    mov a,[hl]              ;2893  87           A = meas_id
    xch a,e                 ;2894  34           Swap so that: A = formula, E = meas_id

    ;At this point:
    ;  A = formula, X = unknown_value, E = meas_id

    ;Increment pointer and save it in mem_f002

    push ax                 ;2895  b1
    incw hl                 ;2896  86           Increment pointer to next byte in a group_N_data table
    movw ax,hl              ;2897  c6
    movw !mem_f002,ax       ;2898  03 02 f0     Save incremented pointer to group reading data
                            ;                     (now pointing at the first byte of the next
                            ;                      measurement in the group)
    pop ax                  ;289b  b0

    ;At this point again:
    ;  A = formula, X = unknown_value, E = meas_id

    push ax                 ;289c  b1           Push onto stack: A = formula, X = unknown_value
    mov a,!kwp_group_num    ;289d  8e 4f f0     A = KWP1281 group number
    cmp a,#0x07             ;28a0  4d 07        Is it 7 (Steering Wheel Control)?
    mov a,e                 ;28a2  64           Move so that: A=meas_id, X=unknown_value, E=meas_id
    bnz lab_28e2            ;28a3  bd 3d

    ;group number = 7 (Steering Wheel Control)
    pop ax                  ;28a5  b0           Pop so that: A = formula, X = unknown_value, E = meas_id
    xch a,e                 ;28a6  34           Swap so that: A = meas_id, X = unknown_value, E = formula
    movw hl,ax              ;28a7  d6

    mov a,!mfsw_key         ;28a8  8e 97 f1     A = key code from MFSW (0xFF = no key)
    cmp a,#0xff             ;28ab  4d ff
    bz lab_28b7             ;28ad  ad 08        Branch if no key was pressed

    ;MFSW key was pressed
    mov !kwp_meas_mfsw_key,a;28af  9e 51 f0     Save key code received from MFSW

    mov a,#0x1e             ;28b2  a1 1e
    mov !mem_fb23,a         ;28b4  9e 23 fb

lab_28b7:
    mov a,!mem_fb23         ;28b7  8e 23 fb
    cmp a,#0x00             ;28ba  4d 00
    bz lab_28da_mfsw_no_key ;28bc  ad 1c

    mov a,#99               ;28be  a1 63
    cmp a,!kwp_meas_mfsw_key;28c0  48 51 f0     Compare with key code received from MFSW
    bc lab_28da_mfsw_no_key ;28c3  8d 15        Branch if kwp_meas_mfsw_key > 99

    ;MFSW key code has been received and is in range 0-99 decimal
    ;Convert it to a 2-digit decimal number in ASCII.
    mov a,!kwp_meas_mfsw_key;28c5  8e 51 f0
    mov x,#0                ;28c8  a0 00
    xch a,x                 ;28ca  30
    mov c,#10               ;28cb  a2 0a
    divuw c                 ;28cd  31 82        AX = AX / C
    mov a,x                 ;28cf  60
    add a,#'0               ;28d0  0d 30
    mov x,a                 ;28d2  70
    mov a,c                 ;28d3  62
    add a,#'0               ;28d4  0d 30
    xch a,e                 ;28d6  34

    ;XE now contains kwp_meas_mfsw_key as a 2-digit decimal number in ASCII
    ;where X is the ten's place and E is the one's place.  Examples:
    ;  MFSW Key       kwp_meas_mfsw_key      X           E
    ;  Volume Down    0x00 (0)               0x30 "0"    0x30 "0"
    ;  Volume Up      0x01 (1)               0x30 "0"    0x31 "1"
    ;  Down           0x0a (10)              0x31 "1"    0x30 "0"
    ;  Up             0x0b (11)              0x31 "1"    0x31 "1"
    br !lab_29b0_ret_e_nopop;28d7  9b b0 29   Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_28da_mfsw_no_key:
;No MFSW key pressed or key code is > 99
    mov a,#0x20             ;28da  a1 20      A = ASCII space character
    mov x,#0x20             ;28dc  a0 20      X = ASCII space character
    xch a,e                 ;28de  34
    ;XE now contains two ASCII spaces
    br !lab_29b0_ret_e_nopop;28df  9b b0 29   Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_28e2:
;group number != 7
;At this point:
;  A=meas_id, X=unknown_value, E=meas_id
;  Top of stack: A = formula, X = unknown_value
    and a,#0xf0             ;28e2  5d f0    A = "meas_id" AND 0xF0
    cmp a,#meas_id_hi_d0    ;28e4  4d d0    Is ANDed value = 0xD0?  (0xD1 = amplifier output)
    bnz lab_2903            ;28e6  bd 1b

    mov a,e                 ;28e8  64       A = meas_id
    cmp a,#meas_id_amp_out  ;28e9  4d d1    Is it = 0xD1 (amplifier output)?
    bnz lab_2900            ;28eb  bd 13

    mov e,#0x00             ;28ed  a4 00

    movw hl,#mem_fc1c       ;28ef  16 1c fc HL = faults buffer "00850 - Control Output Active; Radio Amplifier"
    mov a,[hl]              ;28f2  87       A = fault elaboration
    cmp a,#0x00             ;28f3  4d 00    Is it 0 (0 "-")?
    bz lab_28fd_ok          ;28f5  ad 06    Branch if = 0
    cmp a,#0x88             ;28f7  4d 88    Is it 0x88 (no fault)?
    bz lab_28fd_ok          ;28f9  ad 02    Branch if = 0x88

    ;Fault elaboration is not 0 or 0x88
    mov e,#0x01             ;28fb  a4 01

lab_28fd_ok:
;mem_fc1c = 0 or 0x88
    br !lab_29af_ret_e      ;28fd  9b af 29   Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2900:
    br !lab_29af_ret_e      ;2900  9b af 29   Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2903:
;At this point:
;  A=(meas_id AND 0xF0), X=unknown_value, E=meas_id
;  Top of stack: A = formula, X = unknown_value
    mov a,e                 ;2903  64         A = meas_id
    and a,#0xf0             ;2904  5d f0      A = "meas_id" AND 0xF0
    cmp a,#meas_id_hi_e0    ;2906  4d e0      Is the ANDed value = 0xE0?
                            ;                    0xE0 = S-Contact Status,
                            ;                    0xE1 = Front Speakers Status,
                            ;                    0xE2 = Rear Speakers Status
                            ;                    0xE3 = Antenna Type,
                            ;                    0xE4 = Antenna Status
                            ;                    0xE5 = CD Changer Status
                            ;                    0xE6 = External Display Status
    bnz lab_2972_check_0xff            ;2908  bd 68

    mov a,e                 ;290a  64         E = meas_id
    cmp a,#meas_id_scon     ;290b  4d e0      Is "meas_id" = 0xE0 (S-Contact Status)?
    bnz lab_291e_check_0xe1 ;290d  bd 0f      Branch if not equal

    ;"meas_id" = 0xE0 (S-Contact Status)

    ;XXX It seems that reading the measuring block for the S-Contact has the side effect of
    ;    disabling the radio-as-tester communication to the cluster.  Is this to obscure it?
    set1 mem_fe63.0         ;290f  0a 63      Set bit = do not initiate a KWP1281 connection to the cluster

    mov e,#0x87             ;2911  a4 87      E = 0x87 (S-Contact = on)

    set1 pm9.0              ;2913  71 0a 29   PM90=input (S-Contact: 0=off, 1=on)
    bt p9.0,lab_291b        ;2916  8c 09 02   Branch to keep E=0x87 if P90=1 (S-Contact = on)

    mov e,#0x88             ;2919  a4 88      E = 0x88 (S-Contact = off)

lab_291b:
    br !lab_29af_ret_e      ;291b  9b af 29   Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_291e_check_0xe1:
    cmp a,#meas_id_fsp_st   ;291e  4d e1      Is "meas_id" = 0xE1 (Front Speakers Status)?
    bnz lab_292c_check_0xe2 ;2920  bd 0a      Branch if not equal

    ;"meas_id" = 0xE1 (Front Speakers Status)

    movw hl,#mem_fc1e       ;2922  16 1e fc   HL = faults buffer "00852 - Loudspeaker(s); Front"
    mov a,[hl]              ;2925  87
    call !sub_26b6_elab_1   ;2926  9a b6 26   Given a fault elaboration in A, return something in E
    br !lab_29af_ret_e      ;2929  9b af 29   Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_292c_check_0xe2:
    cmp a,#meas_id_rsp_st   ;292c  4d e2      Is "meas_id" = 0xE2 (Rear Speakers Status)?
    bnz lab_2939_check_0xe3 ;292e  bd 09      Branch if not equal

    ;"meas_id" = 0xE2 (Rear Speakers Status)

    movw hl,#mem_fc1f       ;2930  16 1f fc   HL = faults buffer "00853 - Loudspeaker(s); Rear"
    mov a,[hl]              ;2933  87
    call !sub_26b6_elab_1   ;2934  9a b6 26   Given a fault elaboration in A, return something in E
    br lab_29af_ret_e       ;2937  fa 76      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2939_check_0xe3:
    cmp a,#meas_id_ant_typ  ;2939  4d e3      Is "meas_id" = 0xE3 (Antenna Type)?
    bnz lab_2949_check_0xe4 ;293b  bd 0c      Branch if not equal

    ;"meas_id" = 0xE3 (Antenna Type)

    mov e,#0x12             ;293d  a4 12
    mov a,!mem_f1fd         ;293f  8e fd f1
    bt a.0,lab_2947         ;2942  31 0e 02
    mov e,#0x11             ;2945  a4 11

lab_2947:
    br lab_29af_ret_e       ;2947  fa 66      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2949_check_0xe4:
    cmp a,#meas_id_ant_st   ;2949  4d e4      Is "meas_id" = 0xE4 (Antenna Status)?
    bnz lab_2956_check_0xe5 ;294b  bd 09      Branch if not equal

    ;"meas_id" = 0xE4 (Antenna Status)

    movw hl,#mem_fc22       ;294d  16 22 fc   HL = pointer to faults buffer #2 "00856 - Radio Antenna"
    mov a,[hl]              ;2950  87
    call !sub_26b6_elab_1   ;2951  9a b6 26   Given a fault elaboration in A, return something in E
    br lab_29af_ret_e       ;2954  fa 59      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2956_check_0xe5:
    cmp a,#meas_id_cdc_st   ;2956  4d e5      Is "meas_id" = 0xE5 (CD Changer Status)
    bnz lab_2963_check_0xe6 ;2958  bd 09      Branch if not equal

    ;"meas_id" = 0xE5 (CD Changer Status)

    movw hl,#mem_fc21       ;295a  16 21 fc   HL = pointer to faults buffer #2 "00855 - Connection to CD changer"
    mov a,[hl]              ;295d  87
    call !sub_26c9_elab_2   ;295e  9a c9 26   Given a fault elaboration in A, return something in E
    br lab_29af_ret_e       ;2961  fa 4c      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2963_check_0xe6:
    cmp a,#meas_id_fis_st   ;2963  4d e6      Is "meas_id" = 0xE6 (External Display Status)
    bnz lab_2970_bad_0xe0   ;2965  bd 09      Branch if not equal

    ;"meas_id" = 0xE6 (External Display Status)

    movw hl,#mem_fc20       ;2967  16 20 fc   HL = pointer to faults buffer #2 "00854 - Radio Display Output in Dash Panel Insert"
    mov a,[hl]              ;296a  87
    call !sub_26c9_elab_2   ;296b  9a c9 26   Given a fault elaboration in A, return something in E
    br lab_29af_ret_e       ;296e  fa 3f      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2970_bad_0xe0:
;No matching "meas_id" for 0xE0-0xEF
    br lab_29af_ret_e       ;2970  fa 3d      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

lab_2972_check_0xff:
    mov a,e                 ;2972  64         E = meas_id
    cmp a,#meas_id_t30      ;2973  4d ff      Is "meas_id" = 0xFF (Supply Voltage Terminal 30)?
    bnz lab_297c_check_0xfe ;2975  bd 05      Branch if not equal

    ;"meas_id" = 0xFF (Supply Voltage Terminal 30)

    mov a,!mem_f18d_t30_avg ;2977  8e 8d f1   A = Terminal 30 (V = value * 0.1) averaged(?)
    br lab_29ae_ret_a_in_e  ;297a  fa 32      Branch to Return E=A, D=0 (no error), CY=0 (meas data returned)

lab_297c_check_0xfe:
    cmp a,#meas_id_t58b     ;297c  4d fe      Is "meas_id" = 0xFE (Illumination %)?
    bnz lab_29af_ret_e      ;297e  bd 2f      Branch to Return E as-is, D=0 (no error), CY=0 (meas data returned)

    ;"meas_id" = 0xFE (Illumination %)

    mov a,!mem_fca3_ani_t58b;2980  8e a3 fc   A = P92/ANI20 analog: Terminal 58b Illumination (V = value * 0.06)
    mov b,a                 ;2983  73         Save illumination analog in B

    cmp a,#0x20             ;2984  4d 20
    bnc lab_2990_gte_0x20   ;2986  9d 08      Branch if illumination analog >= 0x20

    ;Illumination analog < 0x20
    cmp a,#0x0c             ;2988  4d 0c
    bc lab_298e             ;298a  8d 02      Branch if illumination analog < 0x0c

    ;Illumination analog >= 0x0d
    mov a,#0x0f             ;298c  a1 0f

lab_298e:
    br lab_29ae_ret_a_in_e  ;298e  fa 1e      Branch to Return E=A, D=0 (no error), CY=0 (meas data returned)

lab_2990_gte_0x20:
;Illumination analog >= 0x20
    mov x,#0x14             ;2990  a0 14
    mulu x                  ;2992  31 88      AX = A * X
    mov c,#0xff             ;2994  a2 ff
    divuw c                 ;2996  31 82      AX = AX / C
    mov a,b                 ;2998  63
    sub a,#0x14             ;2999  1d 14
    add x,a                 ;299b  61 00
    mov a,!mem_f18d_t30_avg ;299d  8e 8d f1   A = Terminal 30 (V = value * 0.1) averaged(?)
    mov c,a                 ;29a0  72
    mov a,#0x9e             ;29a1  a1 9e
    mulu x                  ;29a3  31 88      AX = A * X
    divuw c                 ;29a5  31 82      AX = AX / C
    cmp a,#0x00             ;29a7  4d 00
    bz lab_29ad_ret_x_in_e  ;29a9  ad 02      Branch to Return E=X, D=0 (no error), CY=0 (meas data returned)
    mov x,#0xff             ;29ab  a0 ff

;Return E=X, D=0 (no error), CY=0 (meas data returned)
lab_29ad_ret_x_in_e:
    xch a,x                 ;29ad  30

;Return E=A, D=0 (no error), CY=0 (meas data returned)
lab_29ae_ret_a_in_e:
    mov e,a                 ;29ae  74

;Return E as-is, D=0 (no error), CY=0 (meas data returned)
lab_29af_ret_e:
    pop ax                  ;29af  b0

;Return E as-is, D=0 (no error), CY=0 (meas data returned)
lab_29b0_ret_e_nopop:
    mov d,#0                ;29b0  a5 00        D=0 (no error)
    clr1 cy                 ;29b2  21           Clear carry = measurement data returned
    ret                     ;29b3  af


recode:
;Change the coding to a user-provided value.
;
;The requested coding is first checked.  If any of it is found to be
;invalid, no changes are made.  Otherwise, the coding is changed and
;written to the EEPROM.
;
;Call with:
;  kwp_rx_buf+3 = Soft Coding high byte (binary)
;  kwp_rx_buf+4 = Soft Coding low byte (binary)
;  kwp_rx_buf+5 = Workshop Code high byte (binary)
;  kwp_rx_buf+6 = Workshop Code low byte (binary)
;
;See the description and examples in kwp_56_10_recoding.
;
;Returns:
;  Nothing.  There's no indication of whether recoding succeeded or not.
;
    call !sub_2d35          ;29b4  9a 35 2d     Clear bits in mem_fe5f and mem_fe60

    ;AX = requested coding in binary
    mov a,!kwp_rx_buf+4     ;29b7  8e 8e f0     A = KWP1281 rx buffer byte 4 (coding in binary, low byte)
    mov x,a                 ;29ba  70           Copy it to X
    mov a,!kwp_rx_buf+3     ;29bb  8e 8d f0     A = KWP1281 rx buffer byte 3 (coding in binary, high byte)

    ;AX = AX >> 1
    clr1 cy                 ;29be  21
    rorc a,1                ;29bf  25
    xch a,x                 ;29c0  30
    rorc a,1                ;29c1  25
    xch a,x                 ;29c2  30

    call !coding_bin_to_bcd ;29c3  9a 44 2d     Convert 16-bit binary number in AX to BCD in mem_fed4-mem_fed6
    call !check_coding_bcd  ;29c6  9a 6e 2d     Check that requested coding in BCD is valid
    bc lab_29ce             ;29c9  8d 03        Branch if valid

    ;Requested coding is invalid
    br !lab_2ab9_ret        ;29cb  9b b9 2a     Branch to just return

lab_29ce:
    ;Requested coding is valid
    mov a,mem_fed4          ;29ce  f0 d4
    and a,!mem_f1fd         ;29d0  58 fd f1
    mov b,a                 ;29d3  73           B = mem_fed4 & mem_f1fd
    bt a.0,lab_29df         ;29d4  31 0e 08     Branch to skip clearing antenna fault

    ;mem_fed4.0 & mem_f1fd.0 = 0
    movw hl,#mem_f215       ;29d7  16 15 f2     HL = pointer to faults buffer #2 "00856 - Radio Antenna"
    mov a,#0x88             ;29da  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;29dc  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_29df:
    mov a,b                 ;29df  63           A = recall result of mem_fed4 & mem_f1fd
    bt a.1,lab_29eb         ;29e0  31 1e 08

    ;mem_fed4.1 & mem_f1fd.1 = 0
    movw hl,#mem_f214       ;29e3  16 14 f2     HL = pointer to faults buffer #2 "00855 - Connection to CD changer"
    mov a,#0x88             ;29e6  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;29e8  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_29eb:
    mov a,b                 ;29eb  63           A = recall result of mem_fed4 & mem_f1fd
    bt a.2,lab_29f7         ;29ec  31 2e 08

    ;mem_fed4.2 & mem_f1fd.2 = 0
    movw hl,#mem_f213       ;29ef  16 13 f2     HL = pointer to faults buffer #2 "00854 - Radio Display Output in Dash Panel Insert"
    mov a,#0x88             ;29f2  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;29f4  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_29f7:
    mov a,mem_fed5          ;29f7  f0 d5
    and a,#0b00001111       ;29f9  5d 0f
    cmp a,!mem_f1ff         ;29fb  48 ff f1
    bz lab_2a10             ;29fe  ad 10

    ;mem_fed5 & 0b00001111 != 0
    movw hl,#mem_f211       ;2a00  16 11 f2     HL = pointer to faults buffer #2 "00852 - Loudspeaker(s); Front"
    mov a,#0x88             ;2a03  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;2a05  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    movw hl,#mem_f212       ;2a08  16 12 f2     HL = pointer to faults buffer #2 "00853 - Loudspeaker(s); Rear"
    mov a,#0x88             ;2a0b  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;2a0d  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_2a10:
    movw hl,#mem_f1f9       ;2a10  16 f9 f1     HL = pointer to buffer to sum
    mov a,#0x09             ;2a13  a1 09        A = 9 bytes to sum
    call !sub_2de6          ;2a15  9a e6 2d     AX = sum of A bytes in buffer [HL]
    push ax                 ;2a18  b1           Push sum of 9 bytes at mem_f1f9

    ;Copy coding and workshop from KWP rx buffer:
    ;  kwp_rx_buf+3 -> mem_f1f9 (Soft coding in binary, high byte)
    ;  kwp_rx_buf+4 -> mem_f1fa (Soft coding in binary, low byte)
    ;  kwp_rx_buf+5 -> mem_f1fb (Workshop code, high byte)
    ;  kwp_rx_buf+6 -> mem_f1fc (Workshop code, low byte)

    movw hl,#kwp_rx_buf+3   ;2a19  16 8d f0     HL = source address (KWP1281 rx buffer byte 3)
    movw de,#mem_f1f9       ;2a1c  14 f9 f1     DE = destination address
    mov a,#0x04             ;2a1f  a1 04        A = 4 bytes to copy
    callf !copy             ;2a21  4c 9e        Copy A bytes from [HL] to [DE]

    mov a,mem_fed4          ;2a23  f0 d4
    and a,#0x0f             ;2a25  5d 0f
    mov !mem_f1fd,a         ;2a27  9e fd f1

    mov a,mem_fed4          ;2a2a  f0 d4
    and a,#0xf0             ;2a2c  5d f0
    callf !ror_a_4          ;2a2e  2c 9e        A = A >> 4
    mov !mem_f1fe,a         ;2a30  9e fe f1     TODO coding, monsoon related

    mov a,mem_fed5          ;2a33  f0 d5
    and a,#0x0f             ;2a35  5d 0f
    mov !mem_f1ff,a         ;2a37  9e ff f1

    mov a,mem_fed5          ;2a3a  f0 d5
    and a,#0xf0             ;2a3c  5d f0
    callf !ror_a_4          ;2a3e  2c 9e        A = A >> 4
    mov !mem_f200,a         ;2a40  9e 00 f2

    mov a,mem_fed6          ;2a43  f0 d6
    and a,#0x0f             ;2a45  5d 0f
    mov !mem_f201,a         ;2a47  9e 01 f2

    set1 mem_fe73.5         ;2a4a  5a 73

    movw hl,#mem_f1f9       ;2a4c  16 f9 f1     HL = pointer to buffer to sum
    mov a,#0x09             ;2a4f  a1 09        A = 9 bytes to sum (2 Soft Coding + 2 Workshop Code + 5 more)
    call !sub_2de6          ;2a51  9a e6 2d     AX = sum of A bytes in buffer [HL]
    movw de,ax              ;2a54  d4
    movw mem_fed4,ax        ;2a55  99 d4

    pop bc                  ;2a57  b2           BC = Pop sum of 9 bytes at mem_f1f9
    movw hl,#mem_f202       ;2a58  16 02 f2
    call !sub_2df8          ;2a5b  9a f8 2d     Word [HL] = Word [HL] - BC + DE

lab_2a5e:
    call !eeprom_guard      ;2a5e  9a 17 62     Check if EEPROM is available for use(?)
    bc lab_2a65             ;2a61  8d 02        Branch if available
    br lab_2a5e             ;2a63  fa f9        Repeat until available

lab_2a65:
    ;Read 9 bytes from EEPROM at 0x0058 into mem_fed6
    ;TODO 9 EEPROM addresses 0x0058-0x0060 are protected in lab_2c60
    movw hl,#0x0058         ;2a65  16 58 00     HL = EEPROM address 0x0058
    movw de,#mem_fed6       ;2a68  14 d6 fe     DE = pointer to buffer to receive EEPROM contents
    mov a,#0x09             ;2a6b  a1 09        A = 9 bytes to read from EEPROM
    call !eeprom_read       ;2a6d  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bc lab_2a74_success     ;2a70  8d 02        Branch if EEPROM read succeeded
    br lab_2ab9_ret         ;2a72  fa 45        Branch to just return on failure

lab_2a74_success:
    ;Reading the 9 bytes from EEPROM at 0x0058 succeeded
    ;Now compute BC = sum of the 9 bytes
    movw hl,#mem_fed6       ;2a74  16 d6 fe     HL = pointer to buffer to sum
    mov a,#0x09             ;2a77  a1 09        A = 9 bytes to sum
    call !sub_2de6          ;2a79  9a e6 2d     AX = sum of A bytes in buffer [HL]
    movw bc,ax              ;2a7c  d2           Save the sum in BC

    ;Read 2 bytes from EEPROM at 0x0061 into mem_fed6
    movw hl,#0x0061         ;2a7d  16 61 00     HL = EEPROM address 0x0061
    movw de,#mem_fed6       ;2a80  14 d6 fe     DE = pointer to buffer to receive EEPROM contents
    mov a,#0x02             ;2a83  a1 02        A = 2 bytes to read from EEPROM
    call !eeprom_read       ;2a85  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bc lab_2a8c_success     ;2a88  8d 02        Branch if EEPROM read succeeded
    br lab_2ab9_ret         ;2a8a  fa 2d        Branch to just return on failure

lab_2a8c_success:
    ;Reading the 2 bytes from EEPROM at 0x0061 succeeded
    movw ax,mem_fed4        ;2a8c  89 d4        AX = sum of 9 bytes at mem_f1f9 computed near 2a51 above
    movw de,ax              ;2a8e  d4
    movw hl,#mem_fed6       ;2a8f  16 d6 fe     HL = pointer to buffer to write to EEPROM
    call !sub_2df8          ;2a92  9a f8 2d     Word [HL] = Word [HL] - BC + DE

    movw de,#0x0061         ;2a95  14 61 00     DE = EEPROM address 0x0061
    mov a,#0x02             ;2a98  a1 02        A = 2 bytes to write to EEPROM
    call !eeprom_write      ;2a9a  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    bnc lab_2ab9_ret        ;2a9d  9d 1a        Branch if write failed
    ;Fall through on success

lab_2a9f_loop:
    call !eeprom_guard      ;2a9f  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_2a9f_loop       ;2aa2  9d fb        Repeat until available

    movw hl,#mem_f1f9       ;2aa4  16 f9 f1     HL = pointer to buffer to write to EEPROM
    ;TODO 9 EEPROM addresses 0x0058-0x0060 are protected in lab_2c60
    movw de,#0x0058         ;2aa7  14 58 00     DE = EEPROM address 0x0058
    mov a,#0x09             ;2aaa  a1 09        A = 9 bytes to write to EEPROM (2 Soft Coding + 2 Workshop Code + 5 more)
    call !eeprom_write      ;2aac  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    bnc lab_2ab9_ret        ;2aaf  9d 08        Branch if write failed

    movw hl,#mem_f216       ;2ab1  16 16 f2     HL = pointer to faults buffer #2 "01044 - Control Module Incorrectly Coded"
    mov a,#0x88             ;2ab4  a1 88        A = 0x88 (fault elaboration for "no fault")
    call !eeram_wr_byte_hl  ;2ab6  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_2ab9_ret:
    ret                     ;2ab9  af


login_56_success:
;Login on address 0x56 has just been authenticated
;Process the successful login
    call !sub_2d35          ;2aba  9a 35 2d     Clear bits in mem_fe5f and mem_fe60

    ;Sum the 9 bytes before making any changes

    movw hl,#mem_f1f9       ;2abd  16 f9 f1     HL = pointer to buffer to sum
    mov a,#0x09             ;2ac0  a1 09        A = 9 bytes to sum (2 Soft Coding + 2 Workshop Code + 5 more)
    call !sub_2de6          ;2ac2  9a e6 2d     AX = sum of A bytes in buffer [HL]
    push ax                 ;2ac5  b1           Push sum of 9 bytes at mem_f1f9

    ;Replace bit 0 in the Soft Coding low byte with bit 0 from
    ;KWP1281 rx buffer byte 5 (Unknown byte).  TODO: what does this do?

    mov a,!kwp_rx_buf+5     ;2ac6  8e 8f f0     A = KWP1281 rx buffer byte 5 (Unknown byte)
    and a,#0b00000001       ;2ac9  5d 01        Mask to leave only bit 0
    mov x,a                 ;2acb  70           Move it to X

    mov a,!mem_f1fa         ;2acc  8e fa f1     A = Soft coding in binary, low byte
    and a,#0b11111110       ;2acf  5d fe        Clear bit 0 of existing soft coding low byte
    or a,x                  ;2ad1  61 68        Replace bit 0 with bit 0 from KWP1281 rx buffer byte 5 (Unknown byte)
    mov !mem_f1fa,a         ;2ad3  9e fa f1     Store as Soft coding in binary, low byte

    ;Store Workshop Code from KWP1281 rx buffer

    mov a,!kwp_rx_buf+6     ;2ad6  8e 90 f0     KWP1281 rx buffer byte 6
    mov !mem_f1fb,a         ;2ad9  9e fb f1     Store as Workshop Code (high byte)
    mov a,!kwp_rx_buf+7     ;2adc  8e 91 f0     KWP1281 rx buffer byte 7
    mov !mem_f1fc,a         ;2adf  9e fc f1     Store as Workshop Code (low byte)

    ;Sum the 9 bytes again now that the changes have been made

    movw hl,#mem_f1f9       ;2ae2  16 f9 f1     HL = pointer to buffer to sum
    mov a,#0x09             ;2ae5  a1 09        A = 9 bytes to sum (2 Soft Coding + 2 Workshop Code + 5 more)
    call !sub_2de6          ;2ae7  9a e6 2d     AX = sum of A bytes in buffer [HL]

    movw de,ax              ;2aea  d4
    movw mem_fed4,ax        ;2aeb  99 d4
    pop bc                  ;2aed  b2           Pop sum of 9 bytes at mem_f1f9
    movw hl,#mem_f202       ;2aee  16 02 f2
    call !sub_2df8          ;2af1  9a f8 2d     Word [HL] = Word [HL] - BC + DE

lab_2af4_loop:
    call !eeprom_guard      ;2af4  9a 17 62     Check if EEPROM is available for use(?)
    bc lab_2afb_success     ;2af7  8d 02        Branch if available
    br lab_2af4_loop        ;2af9  fa f9        Repeat until available

lab_2afb_success:
    ;TODO 9 EEPROM addresses 0x0058-0x0060 are protected in lab_2c60
    movw hl,#0x0058         ;2afb  16 58 00     HL = EEPROM address 0x0058
    movw de,#mem_fed6       ;2afe  14 d6 fe     DE = pointer to buffer to receive EEPROM contents
    mov a,#0x09             ;2b01  a1 09        A = 9 bytes to read from EEPROM
    call !eeprom_read       ;2b03  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bc lab_2b0a_success     ;2b06  8d 02        Branch if EEPROM read succeeded
    br lab_2b45_ret         ;2b08  fa 3b        Branch to just return on failure

lab_2b0a_success:
    movw hl,#mem_fed6       ;2b0a  16 d6 fe     HL = pointer to buffer to sum
    mov a,#0x09             ;2b0d  a1 09        A = 9 bytes to sum
    call !sub_2de6          ;2b0f  9a e6 2d     AX = sum of A bytes in buffer [HL]
    movw bc,ax              ;2b12  d2           Save the sum in BC

    movw hl,#0x0061         ;2b13  16 61 00     HL = EEPROM address 0x0061
    movw de,#mem_fed6       ;2b16  14 d6 fe     DE = pointer to buffer to receive EEPROM contents
    mov a,#0x02             ;2b19  a1 02        A = 2 bytes to read from EEPROM
    call !eeprom_read       ;2b1b  9a 38 62     Read A bytes from EEPROM address HL into [DE]

    bc lab_2b22_success     ;2b1e  8d 02        Branch if EEPROM read succeeded
    br lab_2b45_ret         ;2b20  fa 23        Branch to just return on failure

lab_2b22_success:
    movw ax,mem_fed4        ;2b22  89 d4
    movw de,ax              ;2b24  d4
    movw hl,#mem_fed6       ;2b25  16 d6 fe     HL = pointer to buffer to write to EEPROM
    call !sub_2df8          ;2b28  9a f8 2d     Word [HL] = Word [HL] - BC + DE
    movw de,#0x0061         ;2b2b  14 61 00     DE = EEPROM address 0x0061
    mov a,#0x02             ;2b2e  a1 02        A = 2 bytes to write to EEPROM
    call !eeprom_write      ;2b30  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    bnc lab_2b45_ret        ;2b33  9d 10        Branch to just return if write failed
    ;Fall through to success

lab_2b35_success:
    call !eeprom_guard      ;2b35  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_2b35_success    ;2b38  9d fb        Repeat until available

    movw hl,#mem_f1fa       ;2b3a  16 fa f1     HL = pointer to buffer to write to EEPROM
                            ;                        (Soft coding in binary, low byte)
    movw de,#0x0059         ;2b3d  14 59 00     DE = EEPROM address 0x0059
    mov a,#0x03             ;2b40  a1 03        A = 3 bytes to write to EEPROM:
                            ;                         0x0059 = mem_f1fa Soft coding in binary, low byte
                            ;                         0x005a = mem_f1fb Workshop code, high byte
                            ;                         0x005c = mem_f1fc Workshop code, low byte
    call !eeprom_write      ;2b42  9a 8e 62     Write A bytes to EEPROM address DE from [HL]

lab_2b45_ret:
    ret                     ;2b45  af

get_coding:
;Get the Soft Coding (in binary) into AX
;
;This returns the KWP1281 representation.  The scan tool will
;receive this number, divide it by 2, then show it to the user
;as a 15-bit decimal number (0-32767).
;
;Example:
;  If the radio is coded for 01404 (decimal), then
;  this subroutine will return AX=0x0AF8.
;
;Returns:
;  A = Soft Coding in binary, high byte (mem_f1f9)
;  X = Soft Coding in binary, low byte (mem_f1fa)
;  DE = #mem_f1f9 (pointer to high byte)
    movw de,#mem_f1fa       ;2b46  14 fa f1
    br lab_2b4e             ;2b49  fa 03

get_workshop:
;Get the Workshop Code into AX
;
;Returns:
;  A = Workshop Code high byte (mem_f1fb)
;  X = Workshop Code low byte (mem_f1fc)
;  DE = #mem_f1fb (pointer to low byte)
    movw de,#mem_f1fc       ;2b4b  14 fc f1

lab_2b4e:
;Returns X = value at [DE]
;Returns A = value at [DE - 1]
    mov a,[de]              ;2b4e  85         A = value at [DE]
    mov x,a                 ;2b4f  70         Save it in X
    decw de                 ;2b50  94         Decrement DE
    mov a,[de]              ;2b51  85         A = value at [DE]
    ret                     ;2b52  af

sub_2b53:
;Called from lab_5581_read_eeprom
;
;Returns:
;  A = number of bytes read (XXX not used by caller)
;  Carry clear = success, Carry set = failure
;
    push hl                 ;2b53  b7
    call !sub_2d35          ;2b54  9a 35 2d     Clear bits in mem_fe5f and mem_fe60

    set1 mem_fe60.2         ;2b57  2a 60        Set bit = address is an EEPROM address

    call !read_rx_addr_len  ;2b59  9a 8b 2c     Read address and length from KWP1281 rx buffer:
                            ;                       A = KWP1281 rx buffer byte 3 (number of bytes)
                            ;                       D = KWP1281 rx buffer byte 4 (address high)
                            ;                       E = KWP1281 rx buffer byte 5 (address low)

    mov !kwp_rw_total,a     ;2b5c  9e 4c f0     Store number of bytes to read in total

    xchw ax,de              ;2b5f  e4           Swap so that:
                            ;                     AX = EEPROM address
                            ;                     D  = number of bytes
    movw !mem_f000,ax       ;2b60  03 00 f0     Store as mem addr for KWP1281 read ram / read eeprom
    xchw ax,de              ;2b63  e4           Swap again so that:
                            ;                     DE = EEPROM address
                            ;                     A  = number of bytes

    ;At this point:
    ;  mem_f000: EEPROM address to read (2 bytes)
    ;  kwp_rw_total: number of bytes to read in total
    call !sub_2bd4          ;2b64  9a d4 2b     Prepare for KWP1281 read RAM or read EEPROM
    bc lab_2b6c             ;2b67  8d 03        Branch if invalid

    mov a,!kwp_rw_total     ;2b69  8e 4c f0     A = number of bytes to read in total
                            ;                   XXX this is not used by the caller

lab_2b6c:
    pop hl                  ;2b6c  b6
    ret                     ;2b6d  af

read_ee_sanitized:
;Read EEPROM into temporary buffer with SAFE code sanitization
;Called from KWP1281 Read EEPROM
;
;When sanitization is enabled by mem_fe65.5=1, the two SAFE
;code locations will be zeroed.  All other EEPROM locations
;will be passed straight through.
;
;Call with:
;  DE = EEPROM address
;  C = number of bytes to read
;  mem_fe65.5 = 0 to sanitize, 1 to not sanitize
;
;Returns:
;  DE = pointer to buffer with data (kwp_tmp_buf)
;  Carry set = failed, carry clear = success (XXX not used by caller)
;
    push hl                 ;2b6e  b7
    movw ax,de              ;2b6f  c4
    push ax                 ;2b70  b1
    movw hl,ax              ;2b71  d6
    mov a,c                 ;2b72  62
    movw de,#kwp_tmp_buf    ;2b73  14 3b f0     DE = pointer to buffer to receive EEPROM contents
    call !eeprom_read       ;2b76  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    pop ax                  ;2b79  b0
    bnc lab_2bb6_failed     ;2b7a  9d 3a        Branch if EEPROM read failed
    push bc                 ;2b7c  b3
    bf mem_fe65.5,lab_2bb0_done  ;2b7d  31 53 65 2f  Skip sanitizing if ?? bit is off

    ;Some addresses will be sanitized

    cmpw ax,#0x0016         ;2b81  ea 16 00
    bnc lab_2bb0_done       ;2b84  9d 2a        Branch if AX >= 0x0016

    ;AX < 0x0016

    dec c                   ;2b86  52
    xch a,x                 ;2b87  30
    add a,c                 ;2b88  61 0a
    xch a,x                 ;2b8a  30
    addc a,#0x00            ;2b8b  2d 00
    inc c                   ;2b8d  42

    cmpw ax,#0x0014         ;2b8e  ea 14 00
    bc lab_2bb0_done        ;2b91  8d 1d        Branch if AX < 0x0014 (SAFE code location in EEPROM)

    ;AX >= 0x0014
    movw hl,#kwp_tmp_buf    ;2b93  16 3b f0
    decw hl                 ;2b96  96

lab_2b97_loop:
    cmpw ax,#0x0015         ;2b97  ea 15 00
    bnz lab_2ba3_ne_0x0015  ;2b9a  bd 07        Branch if AX != 0x0015

    ;AX = 0x0015 (SAFE code low byte)
    ;Overwrite with it 0 in the buffer
    mov b,#0x00             ;2b9c  a3 00
    xch a,b                 ;2b9e  33
    mov [hl+c],a            ;2b9f  ba
    xch a,b                 ;2ba0  33
    br lab_2bad_next        ;2ba1  fa 0a

lab_2ba3_ne_0x0015:
    cmpw ax,#0x0014         ;2ba3  ea 14 00
    bnz lab_2bad_next       ;2ba6  bd 05        Branch if AX != 0x0014

    ;AX = 0x0014 (SAFE code high byte)
    ;Overwrite with it 0 in the buffer
    mov b,#0x00             ;2ba8  a3 00
    xch a,b                 ;2baa  33
    mov [hl+c],a            ;2bab  ba
    xch a,b                 ;2bac  33

lab_2bad_next:
    decw ax                 ;2bad  90
    dbnz c,lab_2b97_loop    ;2bae  8a e7

lab_2bb0_done:
    pop bc                  ;2bb0  b2
    pop hl                  ;2bb1  b6
    set1 mem_fe5f.7         ;2bb2  7a 5f
    clr1 cy                 ;2bb4  21
    ret                     ;2bb5  af

lab_2bb6_failed:
    pop hl                  ;2bb6  b6
    set1 cy                 ;2bb7  20
    ret                     ;2bb8  af

sub_2bb9:
;Called from lab_552a_read_ram (Read RAM related)
    push hl                 ;2bb9  b7
    call !sub_2d35          ;2bba  9a 35 2d     Clear bits in mem_fe5f and mem_fe60
    call !read_rx_addr_len  ;2bbd  9a 8b 2c     Read address and length from KWP1281 rx buffer
                            ;                        A = KWP1281 rx buffer byte 3 (number of bytes)
                            ;                        D = KWP1281 rx buffer byte 4 (RAM address high)
                            ;                        E = KWP1281 rx buffer byte 5 (RAM address low)
    mov !kwp_rw_total,a     ;2bc0  9e 4c f0     Store number of bytes to read in total

    xchw ax,de              ;2bc3  e4
    movw !mem_f000,ax       ;2bc4  03 00 f0     Store memory address to read
    xchw ax,de              ;2bc7  e4

    call !sub_2bd4          ;2bc8  9a d4 2b     Prepare for KWP1281 read RAM or read EEPROM
    bc lab_2bd2             ;2bcb  8d 05        Branch if invalid

    mov a,!kwp_rw_total     ;2bcd  8e 4c f0     A = number of bytes to read in total
    set1 mem_fe5f.6         ;2bd0  6a 5f

lab_2bd2:
    pop hl                  ;2bd2  b6
    ret                     ;2bd3  af

sub_2bd4:
;Prepare for KWP1281 read RAM or read EEPROM
;Checks if number of bytes to read != 0
;Checks if all addresses that would be read are valid
;
;Call with:
;  DE = address
;  A  = number of bytes to read
;
;Returns:
;  Carry set = failure, Carry clear = success
;
    cmp a,#0x01             ;2bd4  4d 01        Number of bytes to read = 0?
    bc lab_2bf3_ret         ;2bd6  8d 1b          Yes: branch to exit on failure

    mov !kwp_rw_count,a     ;2bd8  9e 4b f0     Number of bytes left to send = number requested
    movw ax,de              ;2bdb  c4
    movw !mem_f002,ax       ;2bdc  03 02 f0
    call !dec_rw_count_0x0d ;2bdf  9a 11 2d     Decrease kwp_rw_count by 0x0D, return A = decrease

    mov l,a                 ;2be2  76           HL = number of bytes to read
    mov h,#0x00             ;2be3  a7 00

    movw ax,!mem_f002       ;2be5  02 02 f0
    call !sub_2cdf          ;2be8  9a df 2c     Check if a region in memory or EEPROM is valid
                            ;                       AX = start address
                            ;                       HL = number of bytes
                            ;                       mem_fe60.2 = address type (0=memory, 1=EEPROM)
                            ;                   Returns:
                            ;                       AX = end address
                            ;                       HL = start address
    bc lab_2bf3_ret         ;2beb  8d 06        Branch if invalid
    movw !mem_f002,ax       ;2bed  03 02 f0
    movw ax,hl              ;2bf0  c6
    movw de,ax              ;2bf1  d4
    clr1 cy                 ;2bf2  21           Carry clear = success

lab_2bf3_ret:
    ret                     ;2bf3  af

sub_2bf4:
;Called only from lab_55b6
    push hl                 ;2bf4  b7
    set1 cy                 ;2bf5  20
    bf mem_fe5f.7,lab_2c05  ;2bf6  31 73 5f 0b
    clr1 mem_fe5f.7         ;2bfa  7b 5f
    set1 mem_fe60.2         ;2bfc  2a 60        Set bit = address is an EEPROM address
    call !sub_2c1a          ;2bfe  9a 1a 2c
    bc lab_2c05             ;2c01  8d 02        Branch if invalid
    set1 mem_fe5f.7         ;2c03  7a 5f

lab_2c05:
    pop hl                  ;2c05  b6
    ret                     ;2c06  af

sub_2c07:
    push hl                 ;2c07  b7
    set1 cy                 ;2c08  20
    bf mem_fe5f.6,lab_2c18  ;2c09  31 63 5f 0b
    clr1 mem_fe5f.6         ;2c0d  6b 5f
    clr1 mem_fe60.2         ;2c0f  2b 60        Set bit = address is not an EEPROM address
    call !sub_2c1a          ;2c11  9a 1a 2c
    bc lab_2c18             ;2c14  8d 02        Branch if invalid
    set1 mem_fe5f.6         ;2c16  6a 5f

lab_2c18:
    pop hl                  ;2c18  b6
    ret                     ;2c19  af

sub_2c1a:
;Returns carry set = invalid, carry clear = valid
    call !dec_rw_count_0x10 ;2c1a  9a 23 2d   Decrease kwp_rw_count by 0x10, return A = decrease

    cmp a,#0x00+1           ;2c1d  4d 01
    bc lab_2c32             ;2c1f  8d 11      Branch if A < 0x00+1

    ;A >= 0x00+1

    mov l,a                 ;2c21  76         HL = number of bytes
    mov h,#0x00             ;2c22  a7 00

    movw ax,!mem_f002       ;2c24  02 02 f0
    call !sub_2cdf          ;2c27  9a df 2c   Check if a region in memory or EEPROM is valid
                            ;                     AX = start address
                            ;                     HL = number of bytes
                            ;                     mem_fe60.2 = address type (0=memory, 1=EEPROM)
                            ;                 Returns:
                            ;                     AX = end address
                            ;                     HL = start address
    bc lab_2c32             ;2c2a  8d 06      Branch if invalid
    movw !mem_f002,ax       ;2c2c  03 02 f0
    movw ax,hl              ;2c2f  c6
    movw de,ax              ;2c30  d4
    clr1 cy                 ;2c31  21         Carry clear = success

lab_2c32:
    ret                     ;2c32  af

sub_2c33:
;Perform EEPROM write from KWP1281 request
;Called from lab_4f47, lab_50ec (Write EEPROM related)
;Returns carry clear = success, carry set = failure
    call !eeprom_guard      ;2c33  9a 17 62     Check if EEPROM is available for use(?)
    bnc sub_2c33            ;2c36  9d fb        Repeat until available

    call !sub_2d35          ;2c38  9a 35 2d     Clear bits in mem_fe5f and mem_fe60

    set1 mem_fe60.2         ;2c3b  2a 60        Set bit to indicate region is in EEPROM

    call !read_rx_addr_len  ;2c3d  9a 8b 2c     Read address and length from KWP1281 rx buffer:
                            ;                       A = KWP1281 rx buffer byte 3 (number of bytes)
                            ;                       D = KWP1281 rx buffer byte 4 (EEPROM addr high)
                            ;                       E = KWP1281 rx buffer byte 5 (EEPROM addr low)

    mov !kwp_rw_total,a     ;2c40  9e 4c f0     Store number of bytes to write in total

    mov l,a                 ;2c43  76           HL = number of bytes to write
    mov h,#0x00             ;2c44  a7 00

    movw ax,de              ;2c46  c4           AX = EEPROM address to write
    movw !mem_f004,ax       ;2c47  03 04 f0     Store EEPROM address

    call !sub_2cdf          ;2c4a  9a df 2c     Check if a region in memory or EEPROM is valid
                            ;                       AX = start address
                            ;                       HL = number of bytes
                            ;                       mem_fe60.2 = address type (0=memory, 1=EEPROM)
                            ;                   Returns:
                            ;                       AX = end address
                            ;                       HL = start address
    bc lab_2c7b_failed      ;2c4d  8d 2c        Branch if invalid

    bf mem_fe65.5,lab_2c6c_write ;2c4f  31 53 65 19   Skip protection checks if ?? bit is off

    movw ax,de              ;2c53  c4           Copy EEPROM address into AX for comparisons

    ;Protect 2 EEPROM addresses: 0x0014-0x0015 (SAFE code)
    cmpw ax,#0x0014         ;2c54  ea 14 00
    bc lab_2c60             ;2c57  8d 07        Branch if EEPROM address < 0x0014
    cmpw ax,#0x0016         ;2c59  ea 16 00
    bnc lab_2c60            ;2c5c  9d 02        Branch if EEPROM address >= 0x0016
    br lab_2c77_success     ;2c5e  fa 17        Address is protected; skip write and
                            ;                     falsely report success

lab_2c60:
;Protect 9 EEPROM addresses: 0x0058-0x0060
    cmpw ax,#0x0058         ;2c60  ea 58 00
    bc lab_2c6c_write       ;2c63  8d 07        Branch if EEPROM address < 0x0058
    cmpw ax,#0x0061         ;2c65  ea 61 00
    bnc lab_2c6c_write      ;2c68  9d 02        Branch if EEPROM address >= 0x0061
    br lab_2c77_success     ;2c6a  fa 0b        Address is protected; skip write and
                            ;                     falsely report success

lab_2c6c_write:
;Perform EEPROM write
    movw hl,#kwp_rx_buf+6   ;2c6c  16 90 f0     HL = pointer to KWP1281 rx buffer bytes 6+
    mov a,!kwp_rw_total     ;2c6f  8e 4c f0     A = number of bytes to write to EEPROM in total
    call !eeprom_write      ;2c72  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    bnc lab_2c7b_failed     ;2c75  9d 04        Branch if write failed

    ;write succeeded

lab_2c77_success:
    clr1 cy                 ;2c77  21           Clear carry = success
    set1 mem_fe60.1         ;2c78  1a 60
    ret                     ;2c7a  af

lab_2c7b_failed:
    set1 cy                 ;2c7b  20           Set carry = failure
    clr1 mem_fe60.1         ;2c7c  1b 60
    ret                     ;2c7e  af

sub_2c7f:
;called from write eeprom lab_55c5
;Returns DE = word at mem_f004
;Returns X = KWP1281 rx buffer byte 6
;Returns A = number of bytes to write in total
    movw ax,!mem_f004       ;2c7f  02 04 f0
    movw de,ax              ;2c82  d4           DE = word at mem_f004
    mov a,!kwp_rx_buf+6     ;2c83  8e 90 f0
    mov x,a                 ;2c86  70           X = KWP1281 rx buffer byte 6
    mov a,!kwp_rw_total     ;2c87  8e 4c f0     A = number of bytes to write in total
    ret                     ;2c8a  af

read_rx_addr_len:
;Read address and length from KWP1281 rx buffer
;Used by Read RAM, Read EEPROM, and Write EEPROM commands
;
;Returns:
;  A = KWP1281 rx buffer byte 3 (number of bytes)
;  D = KWP1281 rx buffer byte 4 (address high)
;  E = KWP1281 rx buffer byte 5 (address low)
;
    movw hl,#kwp_rx_buf+3   ;2c8b  16 8d f0
    mov a,[hl]              ;2c8e  87
    mov e,a                 ;2c8f  74         E = KWP1281 rx buffer byte 3 (number of bytes)

    incw hl                 ;2c90  86
    mov a,[hl]              ;2c91  87
    mov d,a                 ;2c92  75         D = KWP1281 rx buffer byte 4 (address high)

    incw hl                 ;2c93  86
    mov a,[hl]              ;2c94  87         A = KWP1281 rx buffer byte 5 (address low)

    xch a,e                 ;2c95  34         Swap A and E so that:
                            ;                   A = KWP1281 rx buffer byte 3 (number of bytes)
                            ;                   E = KWP1281 rx buffer byte 5 (EEPROM addr low)
    ret                     ;2c96  af

    ret                     ;2c97  af         XXX redundant; already returned

find_first_fault:
;Find the first fault set in the faults buffer
;
;Checks 0x0C bytes in the faults buffer at mem_f20d.  Any byte that is not equal
;to 0x88 ("no fault") is a fault.
;
;Returns:
;  HL = pointer to the fault in the buffer
;  Carry set = found a fault, carry clear = no faults set in the buffer
;
    movw hl,#mem_f20d       ;2c98  16 0d f2   HL = faults buffer #2
    movw de,#mem_f218+1     ;2c9b  14 19 f2
    call !sub_2cbe          ;2c9e  9a be 2c   A = DE - HL
                            ;                 Results in A=0x0c
    mov b,a                 ;2ca1  73         Copy it to B (number of faults to check)

lab_2ca2_loop:
    mov a,[hl]              ;2ca2  87         A = read an elaboration from the faults buffer
    cmp a,#0x88             ;2ca3  4d 88      0x88 = fault elaboration for "no fault"
    bnz lab_2cac_fault      ;2ca5  bd 05      If not equal, branch because a fault has occurred
    incw hl                 ;2ca7  86         Increment pointer to next fault elaboration byte
    dbnz b,lab_2ca2_loop    ;2ca8  8b f8      Decrement B, loop until all faults are checked
    ;No faults
    clr1 cy                 ;2caa  21         Return carry clear for no faults
    ret                     ;2cab  af

lab_2cac_fault:
    set1 cy                 ;2cac  20         Return carry set for faults
    ret                     ;2cad  af

sub_2cae:
;Write 0 to mem_f218 and A to mem_f219 via eeram_wr_byte_hl
    mov x,#0x00             ;2cae  a0 00

sub_2cb0:
;Write X to mem_f218 and A to mem_f219 via eeram_wr_byte_hl
    push ax                 ;2cb0  b1
    xch a,x                 ;2cb1  30
    movw hl,#mem_f218       ;2cb2  16 18 f2
    call !eeram_wr_byte_hl  ;2cb5  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    incw hl                 ;2cb8  86           Increment HL to 0xf219
    pop ax                  ;2cb9  b0
    call !eeram_wr_byte_hl  ;2cba  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    ret                     ;2cbd  af

sub_2cbe:
;A = DE - HL
;
;Note: it actually performs AX = DE - HL and then swaps
;A and X, so A contains the low byte of the difference and
;X contains the high byte.  However, no callers use X.
;
    movw ax,de              ;2cbe  c4
    xch a,x                 ;2cbf  30
    sub a,l                 ;2cc0  61 1e
    xch a,x                 ;2cc2  30
    subc a,h                ;2cc3  61 3f
    xch a,x                 ;2cc5  30
    ret                     ;2cc6  af

lab_2cc7:
    mov a,[hl]              ;2cc7  87
    cmp a,#0x32             ;2cc8  4d 32
    bnc lab_2cd0            ;2cca  9d 04
    inc a                   ;2ccc  41
    call !eeram_wr_byte_hl  ;2ccd  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_2cd0:
    ret                     ;2cd0  af

lab_2cd1:
    cmp a,#0x00             ;2cd1  4d 00
    bz lab_2cde             ;2cd3  ad 09
    mov b,a                 ;2cd5  73

lab_2cd6:
    mov a,[de]              ;2cd6  85
    call !eeram_wr_byte_hl  ;2cd7  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    incw hl                 ;2cda  86
    incw de                 ;2cdb  84
    dbnz b,lab_2cd6         ;2cdc  8b f8

lab_2cde:
    ret                     ;2cde  af


sub_2cdf:
;Check if a region in memory or EEPROM is valid for
;KWP1281 read or write.
;
;Called with:
;  AX = start address
;  HL = number of bytes
;  mem_fe60.2 = address type (0=memory, 1=EEPROM)
;
;Valid regions (range inclusive):
;  EEPROM:
;    0x0000 - 0x01FF    All 512 bytes of M24C04
;  Memory:
;    0x0000 - 0xEFFE    All of Flash ROM except last byte
;    0xF000 - 0xF7FD    All of Expansion RAM except last 2 bytes
;    0xFB00 - 0xFFFE    All of High Speed RAM except last byte
;
;XXX The regions above were determined by running this code
;    with AX=address and HL=1.  The missing bytes at the end
;    of the regions is mostly likely a bug.
;
;Returns:
;  HL = start address
;  AX = end address
;  Carry set = invalid, carry clear = valid
;
;Preserves BC and DE.
;
;See also eeprom_check_range for another EEPROM range check.
;
    callf !add_ax_to_hl     ;2cdf  5c 60      HL = HL + AX, preserves AX
                            ;                 HL now contains end address of region + 1

    xchw ax,hl              ;2ce1  e6         HL = start address of region
                            ;                 AX = end address of region + 1

    bc lab_2d0f_invalid      ;2ce2  8d 2b

    bt mem_fe60.2,lab_2d08  ;2ce4  ac 60 21   Branch if address is an EEPROM address

    ;Address is memory (not EEPROM)

    cmpw ax,#mem_f000       ;2ce7  ea 00 f0
    bnc lab_2cee            ;2cea  9d 02
    br lab_2d0f_valid       ;2cec  fa 1f

lab_2cee:
    xchw ax,hl              ;2cee  e6
    cmpw ax,#mem_fb00       ;2cef  ea 00 fb
    xchw ax,hl              ;2cf2  e6
    bnc lab_2d0f_valid      ;2cf3  9d 18
    cmpw ax,#mem_f000       ;2cf5  ea 00 f0
    bc lab_2d0f_invalid     ;2cf8  8d 15
    cmpw ax,#mem_f000+0x7ff ;2cfa  ea ff f7
    bnc lab_2d0f_invalid    ;2cfd  9d 10
    xchw ax,hl              ;2cff  e6
    cmpw ax,#mem_f000       ;2d00  ea 00 f0
    xchw ax,hl              ;2d03  e6
    bnc lab_2d0f_valid      ;2d04  9d 07
    br lab_2d0f_invalid     ;2d06  fa 07

lab_2d08:
    ;Address is EEPROM (not memory)

    cmpw ax,#512+1          ;2d08  ea 01 02
    bnc lab_2d0f_invalid    ;2d0b  9d 02

lab_2d0f_valid:
    clr1 cy                 ;2d0d  21
    ret                     ;2d0e  af

lab_2d0f_invalid:
    set1 cy                 ;2d0f  20
    ret                     ;2d10  af


;Decrease kwp_rw_count by 0x0D, return A = decrease
;
;if kwp_rw_count <= 0x0d:
;  A, C = kwp_rw_count
;  kwp_rw_count = 0
;else:
;  A, C = 0x0d
;  kwp_rw_count = kwp_rw_count - 0x0d
;
dec_rw_count_0x0d:
    mov a,#0x00             ;2d11  a1 00
    xch a,!kwp_rw_count     ;2d13  ce 4b f0     A = kwp_rw_count, kwp_rw_count = 0

    cmp a,#0x0d+1           ;2d16  4d 0e
    bc lab_2d21             ;2d18  8d 07        Branch if A < 0x0d+1

    ;A >= 0x0d+1
    sub a,#0x0d             ;2d1a  1d 0d        A = A - 0x0d
    mov !kwp_rw_count,a     ;2d1c  9e 4b f0     Store result in mem_f04d

    mov a,#0x0d             ;2d1f  a1 0d        A = 0x0d
lab_2d21:
    mov c,a                 ;2d21  72           C = A (XXX C is not used by caller)
    ret                     ;2d22  af


;Decrease kwp_rw_count by 0x10, return A = decrease
;
;if kwp_rw_count <= 0x10:
;  A, C = kwp_rw_count
;  kwp_rw_count = 0
;else:
;  A, C = 0x10
;  kwp_rw_count = kwp_rw_count - 0x10
dec_rw_count_0x10:
    mov a,#0x00             ;2d23  a1 00
    xch a,!kwp_rw_count     ;2d25  ce 4b f0     A = kwp_rw_count, kwp_rw_count = 0

    cmp a,#0x10+1           ;2d28  4d 11
    bc lab_2d33             ;2d2a  8d 07        Branch if A < 0x10+1

    ;A >= 0x10+1
    sub a,#0x10             ;2d2c  1d 10        A = A - 0x10
    mov !kwp_rw_count,a     ;2d2e  9e 4b f0     Store result in kwp_rw_count

    mov a,#0x10             ;2d31  a1 10        A = 0x10
lab_2d33:
    mov c,a                 ;2d33  72           C = A (XXX C is not used by caller)
    ret                     ;2d34  af


sub_2d35:
;Clear bits in mem_fe5f and mem_fe60
    clr1 mem_fe5f.3         ;2d35  3b 5f      Clear bit = not currently reading the faults buffer
    clr1 mem_fe5f.4         ;2d37  4b 5f      Clear bit = not currently reading a measuring block group
    clr1 mem_fe5f.6         ;2d39  6b 5f
    clr1 mem_fe5f.7         ;2d3b  7b 5f
    clr1 mem_fe60.0         ;2d3d  0b 60
    clr1 mem_fe60.1         ;2d3f  1b 60
    clr1 mem_fe60.2         ;2d41  2b 60      Clear bit = address is memory (not EEPROM)
    ret                     ;2d43  af


coding_bin_to_bcd:
;Convert 16-bit binary number in AX to BCD in mem_fed4-mem_fed6
;Used only for KWP1281 coding
;
;Call with:
;  AX = 16-bit binary number (X=low, A=high)
;
;Returns BCD number in mem_fed4-mem_fed6:
;  mem_fed4 low nibble:  BCD ones place
;  mem_fed4 high nibble: BCD tens place
;  mem_fed5 low nibble:  BCD hundreds place
;  mem_fed5 high nibble: BCD thousands place
;  mem_fed6 low nibble:  BCD ten thousands place
;
;Examples:
; AX=0x0000 -> mem_fed4=0x00, mem_fed5=0x00, mem_fed6=0x00 (0)
; AX=0x04d2 -> mem_fed4=0x34, mem_fed5=0x12, mem_fed6=0x00 (1234)
; AX=0xFFFF -> mem_fed4=0x35, mem_fed5=0x55, mem_fed6=0x06 (65535)
;
    movw mem_fed4,#0x0000   ;2d44  ee d4 00 00
    mov mem_fed6,#0x00      ;2d48  11 d6 00
    mov b,#0x10             ;2d4b  a3 10

lab_2d4d_loop:
    xch a,x                 ;2d4d  30
    rolc a,1                ;2d4e  27
    xch a,x                 ;2d4f  30
    rolc a,1                ;2d50  27
    push ax                 ;2d51  b1
    mov a,mem_fed4          ;2d52  f0 d4
    addc a,mem_fed4         ;2d54  2e d4
    adjba                   ;2d56  61 80
    mov mem_fed4,a          ;2d58  f2 d4
    mov a,mem_fed5          ;2d5a  f0 d5
    addc a,mem_fed5         ;2d5c  2e d5
    adjba                   ;2d5e  61 80
    mov mem_fed5,a          ;2d60  f2 d5
    mov a,mem_fed6          ;2d62  f0 d6
    addc a,mem_fed6         ;2d64  2e d6
    adjba                   ;2d66  61 80
    mov mem_fed6,a          ;2d68  f2 d6
    pop ax                  ;2d6a  b0
    dbnz b,lab_2d4d_loop    ;2d6b  8b e0
    ret                     ;2d6d  af


check_coding_bcd:
;Check that the requested coding in BCD is valid
;
;Call with:
;  mem_fed4-mem_fed6 = Requested coding in BCD from coding_bin_to_bcd
;
;Returns:
;  carry set = valid, carry clear = invalid
;
;mem_fed4 low nibble:  BCD ones place           = 0-7 Antenna/CD/FIS
;mem_fed4 high nibble: BCD tens place           = 0-1 Amplifier System
;mem_fed5 low nibble:  BCD hundreds place       = 0-4 Speakers
;mem_fed5 high nibble: BCD thousands place      = 0-9 Car Model
;mem_fed6 low nibble:  BCD ten thousands place  = 0
;
    mov a,mem_fed4          ;2d6e  f0 d4
    and a,#0x0f             ;2d70  5d 0f        Mask to leave only low nibble (BCD ones place)
    cmp a,#0x08             ;2d72  4d 08
    bnc lab_2dd5_ret        ;2d74  9d 5f        Branch if >= 0x08 (invalid)
    cmp a,#0x04             ;2d76  4d 04
    bc lab_2d80             ;2d78  8d 06        Branch if < 0x04
    ;A >= 0x04
    mov a,!mem_f1e9         ;2d7a  8e e9 f1
    bt a.0,lab_2dd5_ret     ;2d7d  31 0e 55

lab_2d80:
    mov a,mem_fed4          ;2d80  f0 d4
    and a,#0xf0             ;2d82  5d f0        Mask to leave only high nibble (BCD tens place)
    callf !ror_a_4          ;2d84  2c 9e        A = A >> 4
    cmp a,#0x05             ;2d86  4d 05
    bnc lab_2dd5_ret        ;2d88  9d 4b        Branch if >= 0x05 (invalid)
    cmp a,#0x00             ;2d8a  4d 00
    bz lab_2dc4_speakers    ;2d8c  ad 36        Branch if = 0x00
    cmp a,#0x03             ;2d8e  4d 03
    bz lab_2daf_cars_2      ;2d90  ad 1d        Branch if = 0x03
    cmp a,#0x04             ;2d92  4d 04
    bz lab_2d9a_cars_1      ;2d94  ad 04        Branch if = 0x04
    ;A = 0x01, 0x02
    clr1 cy                 ;2d96  21           Clear carry = coding is invalid
    br !lab_2dd5_ret        ;2d97  9b d5 2d     Branch to return (invalid)

lab_2d9a_cars_1:
;Check car model is one of:
;  All with MFSW, Golf/GTI, Jetta, All without MFSW
    mov a,mem_fed5          ;2d9a  f0 d5
    and a,#0xf0             ;2d9c  5d f0        Mask to leave only high nibble (BCD thousands place)
    callf !ror_a_4          ;2d9e  2c 9e        A = A >> 4

    movw hl,#cars_1+1       ;2da0  16 e0 af     HL = pointer to table of car models
    mov b,#0x03             ;2da3  a3 03        B = offset to last table entry for HL+B
lab_2da5_loop:
    cmp a,[hl+b]            ;2da5  31 4b
    bz lab_2dc4_speakers    ;2da7  ad 1b
    dbnz b,lab_2da5_loop    ;2da9  8b fa

    clr1 cy                 ;2dab  21           Clear carry = coding is invalid
    br !lab_2dd5_ret        ;2dac  9b d5 2d     Branch to return (invalid)

lab_2daf_cars_2:
;Check car model is one of:
;  All without MFSW, Golf/GTI, New Beetle
    mov a,mem_fed5          ;2daf  f0 d5
    and a,#0xf0             ;2db1  5d f0        Mask to leave only high nibble (BCD thousands place)
    callf !ror_a_4          ;2db3  2c 9e        A = A >> 4

    movw hl,#cars_2+1       ;2db5  16 e5 af     HL = pointer to table of car models
    mov b,#0x02             ;2db8  a3 02        B = offset to last table entry for HL+B
lab_2dba_loop:
    cmp a,[hl+b]            ;2dba  31 4b
    bz lab_2dc4_speakers    ;2dbc  ad 06
    dbnz b,lab_2dba_loop    ;2dbe  8b fa

    clr1 cy                 ;2dc0  21           Clear carry = coding is invalid
    br !lab_2dd5_ret        ;2dc1  9b d5 2d     Branch to return (invalid)

lab_2dc4_speakers:
    mov a,mem_fed5          ;2dc4  f0 d5
    and a,#0x0f             ;2dc6  5d 0f        Mask to leave only low nibble (BCD hundreds place)
    cmp a,#0x05             ;2dc8  4d 05
    bnc lab_2dd5_ret        ;2dca  9d 09        Branch if >= 0x05 (invalid)

    mov a,mem_fed6          ;2dcc  f0 d6
    and a,#0x0f             ;2dce  5d 0f        Mask to leave only low nibble (BCD ten thousands place)
    cmp a,#0x01             ;2dd0  4d 01
    bnc lab_2dd5_ret        ;2dd2  9d 01        Branch if >= 0x01 (invalid)

    set1 cy                 ;2dd4  20           Set carry = coding is valid

lab_2dd5_ret:
    ret                     ;2dd5  af


fake_rx_addr_len:
;Fake KWP1281 address and byte count in KWP1281 rx buffer
;See also read_rx_addr_len
;
;Call with:
;  mem_f000 = address to read
;  kwp_rw_total = number of bytes to read in total
;
;Writes to the KWP1281 rx buffer as if the values had been
;received from the remote.
;
    movw hl,#kwp_rx_buf+3   ;2dd6  16 8d f0     HL = pointer to KWP1281 rx buffer byte 3
                            ;                        (number of bytes to read)
    mov a,!kwp_rw_total     ;2dd9  8e 4c f0     A = number of bytes to read in total
    mov [hl],a              ;2ddc  97           Store it in KWP1281 rx buffer byte 3

    incw hl                 ;2ddd  86           HL = pointer to KWP1281 rx buf byte 4 (address high)
    movw ax,!mem_f000       ;2dde  02 00 f0     AX = value at mem_f000
    mov [hl],a              ;2de1  97           Store it (address low byte) in KWP1281 rx buf byte 4

    incw hl                 ;2de2  86           HL = pointer to KWP1281 rx buf byte 5 (address low)
    mov a,x                 ;2de3  60           A = value at mem_f001
    mov [hl],a              ;2de4  97           Store it (addr high byte) in KWP1281 rx buf byte 5
    ret                     ;2de5  af


sub_2de6:
;AX = sum of A bytes in buffer [HL]
    push bc                 ;2de6  b3
    decw hl                 ;2de7  96
    mov b,a                 ;2de8  73
    mov a,#0                ;2de9  a1 00
    mov x,#0                ;2deb  a0 00
lab_2ded_loop:
    mov c,a                 ;2ded  72
    mov a,[hl+b]            ;2dee  ab
    add x,a                 ;2def  61 00
    mov a,c                 ;2df1  62
    addc a,#0               ;2df2  2d 00
    dbnz b,lab_2ded_loop    ;2df4  8b f7
    pop bc                  ;2df6  b2
    ret                     ;2df7  af


sub_2df8:
;Word [HL] = Word [HL] - BC + DE
;Read word at HL, subtract BC from it, add DE to it, store result at HL
    mov a,[hl]              ;2df8  87
    sub a,c                 ;2df9  61 1a
    xch a,x                 ;2dfb  30
    mov a,[hl+0x01]         ;2dfc  ae 01
    subc a,b                ;2dfe  61 3b
    xch a,x                 ;2e00  30
    add a,e                 ;2e01  61 0c
    mov [hl],a              ;2e03  97
    xch a,x                 ;2e04  30
    addc a,d                ;2e05  61 2d
    mov [hl+0x01],a         ;2e07  be 01
    ret                     ;2e09  af


sub_2e0a:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;2e0a  4d 0a
    bc lab_2e14_lt_0x0a     ;2e0c  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;2e0e  1d 0a      A = A - 0x0A
    add a,#'A               ;2e10  0d 41      Convert to ASCII 'A'-'F'
    br lab_2e16_ret         ;2e12  fa 02
lab_2e14_lt_0x0a:
    add a,#'0               ;2e14  0d 30      Convert to ASCII '0'-'9'
lab_2e16_ret:
    ret                     ;2e16  af

lab_2e17:
    bt rb0_b.7,lab_2e1e     ;2e17  fc fb 04
    bf rb0_b.6,lab_2e38     ;2e1a  31 63 fb 1a

lab_2e1e:
    mov a,#0xc0             ;2e1e  a1 c0
    callt [0x0042]          ;2e20  c3             Calls sub_09b9

    ;Set up "Navi" mode command in FIS buffer to write to the
    ;top 2 lines of the FIS display
    mov a,#0x81             ;2e21  a1 81
    mov !fis_tx_buf+0,a     ;2e23  9e 52 f0       Byte 0 = command 0x81
    mov a,#0x12             ;2e26  a1 12
    mov !fis_tx_buf+1,a     ;2e28  9e 53 f0       Byte 1 = 18 bytes of data
    mov a,#0xf0             ;2e2b  a1 f0
    mov !fis_tx_buf+2,a     ;2e2d  9e 54 f0       Byte 2 = constant 0xF0

    set1 mem_fe61.2         ;2e30  2a 61
    mov mem_fe27,#0x03      ;2e32  11 27 03
    call !sub_2e5d          ;2e35  9a 5d 2e

lab_2e38:
    mov a,#0x40             ;2e38  a1 40
    mov !mem_fb01,a         ;2e3a  9e 01 fb
    mov a,#0x01             ;2e3d  a1 01
    callt [0x0046]          ;2e3f  c7           Calls sub_096c
    bf mem_fe60.5,lab_2e4b  ;2e40  31 53 60 07
    bf mem_fe60.4,lab_2e4b  ;2e44  31 43 60 03
    call !sub_2f0a          ;2e48  9a 0a 2f

lab_2e4b:
    mov a,mem_fe25          ;2e4b  f0 25
    mov b,a                 ;2e4d  73
    movw hl,#mem_b019_fis+1 ;2e4e  16 1a b0     FIS-related routines
    callf !table_get_word   ;2e51  4c 48        Load DE with word at position B in table [HL]
    bc sub_2e5d             ;2e53  8d 08        Branch if table lookup failed
    movw ax,#lab_2e5c       ;2e55  10 5c 2e
    push ax                 ;2e58  b1
    movw ax,de              ;2e59  c4
    br ax                   ;2e5a  31 98

lab_2e5c:
    ret                     ;2e5c  af

sub_2e5d:
    mov a,#0x00             ;2e5d  a1 00
    mov !fis_tx_count,a     ;2e5f  9e 66 f0     Store as FIS number of bytes left to send
    mov mem_fe25,#0x00      ;2e62  11 25 00
    mov mem_fe26,a          ;2e65  f2 26
    clr1 mem_fe60.6         ;2e67  6b 60
    clr1 mem_fe60.7         ;2e69  7b 60
    ret                     ;2e6b  af

fis_checksum:
;Compute FIS buffer checksum
;
;Buffer is 20 bytes at fis_tx_buf, containing:
;
;    fis_tx_buf+0x00   0x81   Command 0x81
;    fis_tx_buf+0x01     19   Length (includes checksum)
;    fis_tx_buf+0x02   0xF0   Constant 0xF0
;    fis_tx_buf+0x03   <FIS line 1: 8 bytes at 0x03 - 0x0a>
;    fis_tx_buf+0x0b   <FIS line 2: 8 bytes at 0x0b - 0x12>
;    fis_tx_buf+0x13   Checksum
;
;XXX Hardcoded Length
;
;    This routine is hardcoded for a length of 19 bytes:
;        mov b,#19
;
;    It could be generalized so other FIS commands could be sent:
;        mov a,fis_tx_buf+0x01
;        mov b,a
;
;    Note: the length is also hardcoded in fis_cksum_and_send and lab_2fb9.
;
    mov b,#19               ;2e6c  a3 13        B=19 bytes to checksum
    movw hl,#fis_tx_buf-1   ;2e6e  16 51 f0     HL = pointer to FIS buffer
    mov x,#0x00             ;2e71  a0 00        Checksum initial value = 0
lab_2e73_loop:
    mov a,[hl+b]            ;2e73  ab           A = byte from FIS buffer
    xor x,a                 ;2e74  61 70        XOR it with the checksum
    dbnz b,lab_2e73_loop    ;2e76  8b fb        Loop until all bytes are XOR'ed
    mov a,x                 ;2e78  60           A = checksum
    dec a                   ;2e79  51           Decrement checksum by 1
    mov !fis_tx_buf+0x13,a  ;2e7a  9e 65 f0     Store it in the FIS buffer
    ret                     ;2e7d  af

fis_clear:
;Fill all characters on the FIS display with 0x20 (space)
    mov b,#16               ;2e7e  a3 10        B = 16 bytes to fill (8 chars * 2 lines)
    movw hl,#fis_tx_buf+3   ;2e80  16 55 f0     HL = pointer to buffer to fill
    mov a,#0x20             ;2e83  a1 20        A = fill value (space character)
    callf !fill_with_a      ;2e85  4c dc        Fill B bytes in buffer [HL] with A
    ret                     ;2e87  af

fis_zero:
;Fill all characters on the FIS display with 0
    mov b,#16               ;2e88  a3 10        B = 16 bytes to fill (8 chars * 2 lines)
    movw hl,#fis_tx_buf+3   ;2e8a  16 55 f0     HL = pointer to buffer to fill
    callf !fill_with_0      ;2e8d  4c da        Fill B bytes in buffer [HL] with 0
    ret                     ;2e8f  af

fis_build_from_upd:
;Build the FIS display from the uPD16432B display.
;Assumes FIS display has already been cleared to all spaces.
;
;Returns carry set = blank, carry clear = not blank
;
    call !upd_is_blank      ;2e90  9a fc 2e     Check if upd_disp is blank (all spaces)
    bnz lab_2e9a_not_blank  ;2e93  bd 05        Branch if not blank

    ;upd_disp is blank
    call !fis_zero          ;2e95  9a 88 2e     Fill all chars on FIS display with 0
    set1 cy                 ;2e98  20           Carry set = blank
    ret                     ;2e99  af

lab_2e9a_not_blank:
;upd_disp is not blank
    ;Copy from uPD16432B:
    ;   "XX........."
    ;to FIS:
    ;   "XX......"
    ;   "........"
    mov a,#0x02             ;2e9a  a1 02        A = 2 bytes to copy
    movw hl,#upd_disp       ;2e9c  16 9a f1     HL = source address
    movw de,#fis_tx_buf+3   ;2e9f  14 55 f0     DE = destination address
    callf !copy             ;2ea2  4c 9e        Copy A bytes from [HL] to [DE]

    cmp mem_fe30,#0x01      ;2ea4  c8 30 01
    bz lab_2eb5             ;2ea7  ad 0c

    ;Copy from uPD16432B:
    ;    "..XX......."
    ;to FIS:
    ;    "..XX...."
    ;    "........"
    mov a,#0x02             ;2ea9  a1 02        A = 2 bytes to copy
    movw hl,#upd_disp+2     ;2eab  16 9c f1     HL = source address
    movw de,#fis_tx_buf+5   ;2eae  14 57 f0     DE = destination address
    callf !copy             ;2eb1  4c 9e        Copy A bytes from [HL] to [DE]

    br lab_2edc             ;2eb3  fa 27

lab_2eb5:
;mem_fe30 = 0x01
    call !sub_0800_mode     ;2eb5  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x02             ;2eb8  4d 02        Mode = 0x02 AM?

    ;Copy from uPD16432B:
    ;  "..X........" (e.g. the "2" in "FM2")
    mov a,!upd_disp+2       ;2eba  8e 9c f1     A = "1"/"2"/" " for "FM1", "FM2", or "AM "
    bz lab_2ec5             ;2ebd  ad 06        Branch if AM mode

    ;FM1 or FM2

    cmp a,#0x20             ;2ebf  4d 20        Compare to space character
    bnc lab_2ec5            ;2ec1  9d 02        Branch if >= space

    ;A < space
    add a,#'1               ;2ec3  0d 31

lab_2ec5:
    ;Copy to FIS:
    ;    "..X....."
    ;    "........"
    mov !fis_tx_buf+5,a     ;2ec5  9e 57 f0

    ;Read from uPD16432B:
    ;    "...X......."
    mov a,!upd_disp+3       ;2ec8  8e 9d f1     A = preset character

    ;Set up HL pointer to FIS:
    ;    "...X...."
    ;    "........"
    movw hl,#fis_tx_buf+6   ;2ecb  16 58 f0     HL = pointer to FIS first line, fourth char
    bf mem_fe5c.2,lab_2edb  ;2ece  31 23 5c 09

    cmp a,#0x20             ;2ed2  4d 20        Compare to space character
    bnc lab_2edb            ;2ed4  9d 05        Branch if >= space

    ;A < space
    add a,#'0-1             ;2ed6  0d 2f        Convert character code for preset to ASCII
                            ;                     (preset 1 = code 2)

    ;Set up HL pointer to FIS:
    ;    "....X..."
    ;    "........"
    movw hl,#fis_tx_buf+7   ;2ed8  16 59 f0     HL = pointer to FIS first line, fifth char

lab_2edb:
    ;A contains this char from uPD16432B:
    ;    "...X......."
    ;
    ;Write it to FIS dispay at pointer.  One of:
    ;    "...X...."     "....X..."
    ;    "........"     "........"
    mov [hl],a              ;2edb  97           Write A into fis_tx_buf
                            ;                     at first line, either fourth or fifth char

lab_2edc:
    ;Copy 3 bytes from uPD16432B:
    ;    "....XXX...."
    ;
    ;to FIS:
    ;    "........"
    ;    "XXX....."
    mov a,#0x03               ;2edc  a1 03        A = 3 bytes to copy
    movw hl,#upd_disp+4       ;2ede  16 9e f1     HL = source address
    movw de,#fis_tx_buf+0x0b  ;2ee1  14 5d f0     DE = destination address
    callf !copy               ;2ee4  4c 9e        Copy A bytes from [HL] to [DE]

    ;HL now points to uPD16432B:
    ;    ".......X...."
    ;
    ;DE now points to FIS:
    ;    "........"
    ;    "...X...."

    bf upd_pict+4.5,lab_2eee ;2ee6  31 53 39 04  Branch if period pictograph is off

    ;Period pictograph is on
    ;Write a period pictograph to FIS:
    ;    "........"
    ;    "...X...."
    mov a,#'.               ;2eea  a1 2e        A = period character
    mov [de],a              ;2eec  95           Write it into the FIS buffer

    ;Increment FIS pointer to:
    ;    "........"
    ;    "....X..."
    incw de                 ;2eed  84           Increment FIS buffer pointer

lab_2eee:
    ;Copy 4 bytes from uPD16432B

    mov a,#0x04             ;2eee  a1 04        A = 4 bytes to copy
    callf !copy             ;2ef0  4c 9e        Copy A bytes from [HL] to [DE]

    ;Convert the entire FIS display to uppercase:
    ;    "XXXXXXXX"
    ;    "XXXXXXXX"
    mov b,#16               ;2ef2  a3 10        B = number of bytes to convert (8 chars * 2 lines)
    movw hl,#fis_tx_buf+3-1 ;2ef4  16 54 f0     HL = buffer address - 1
    call !sub_306f          ;2ef7  9a 6f 30     Convert B bytes in [HL+1] to uppercase

    clr1 cy                 ;2efa  21           Carry clear = not blank
    ret                     ;2efb  af

upd_is_blank:
;Check if upd_disp is blank (all spaces)
;Returns Z=1 if blank, Z=0 if not blank
;
    mov b,#0x0b             ;2efc  a3 0b        B = 11 bytes to compare
    movw hl,#upd_disp-1     ;2efe  16 99 f1     HL = source address - 1
    mov a,#0x20             ;2f01  a1 20        A = space character
lab_2f03:
    cmp a,[hl+b]            ;2f03  31 4b        Is this byte in buffer a space?
    bnz lab_2f09_ret        ;2f05  bd 02          No: branch to return
    dbnz b,lab_2f03         ;2f07  8b fa        Loop until end of buffer
lab_2f09_ret:
    ret                     ;2f09  af

sub_2f0a:
    clr1 mem_fe60.4         ;2f0a  4b 60
    mov a,#0x00             ;2f0c  a1 00
    xch a,mem_fe26          ;2f0e  83 26
    mov c,#0x09             ;2f10  a2 09
    mov b,#0x00             ;2f12  a3 00
    movw hl,#mem_b008+1     ;2f14  16 09 b0
    mov x,a                 ;2f17  70

lab_2f18:
    mov a,[hl+b]            ;2f18  ab
    mov mem_fed4,a          ;2f19  f2 d4
    and a,#0x0f             ;2f1b  5d 0f
    cmp a,x                 ;2f1d  61 48
    bz lab_2f25             ;2f1f  ad 04
    inc b                   ;2f21  43
    dbnz c,lab_2f18         ;2f22  8a f4
    ret                     ;2f24  af

lab_2f25:
    mov a,mem_fed4          ;2f25  f0 d4
    and a,#0xf0             ;2f27  5d f0
    callf !ror_a_4          ;2f29  2c 9e        A = A >> 4
    mov b,a                 ;2f2b  73
    movw hl,#mem_b012+1     ;2f2c  16 13 b0
    callf !table_get_word   ;2f2f  4c 48        Load DE with word at position B in table [HL]
    movw ax,#lab_2f38       ;2f31  10 38 2f
    push ax                 ;2f34  b1
    movw ax,de              ;2f35  c4
    br ax                   ;2f36  31 98

lab_2f38:
    ret                     ;2f38  af

lab_2f39:
    set1 mem_fe60.3         ;2f39  3a 60
    clr1 mem_fe61.1         ;2f3b  1b 61
    ret                     ;2f3d  af

lab_2f3e:
    set1 mem_fe60.3         ;2f3e  3a 60
    clr1 mem_fe61.1         ;2f40  1b 61
    ret                     ;2f42  af

lab_2f43:
    set1 mem_fe60.3         ;2f43  3a 60
    clr1 mem_fe61.1         ;2f45  1b 61
    ret                     ;2f47  af

sub_2f48:
;p4.3=low, p4.4=low (FIS ENA), disable SIO30, set mem_fe5e.7, clear mem_fe60.7
    clr1 shadow_p4.3        ;2f48  3b ce        P43 = 0
    clr1 pm4.3              ;2f4a  71 3b 24     PM43 = output
    mov a,shadow_p4         ;2f4d  f0 ce
    mov p4,a                ;2f4f  f2 04

    clr1 shadow_p4.4        ;2f51  4b ce        P44 = 0 (FIS ENA)
    clr1 pm4.4              ;2f53  71 4b 24     PM44 = output
    mov a,shadow_p4         ;2f56  f0 ce
    mov p4,a                ;2f58  f2 04

    callf !sio30_disable    ;2f5a  0c 91        Disable SIO30 (used for uPD16432B SPI)
    set1 mem_fe5e.7         ;2f5c  7a 5e
    clr1 mem_fe60.7         ;2f5e  7b 60
    ret                     ;2f60  af

lab_2f61_fis:
;FIS-related (entered from mem_b019_fis table)
    bt mem_fe60.4,lab_2fa9_ret          ;2f61  cc 60 45       Branch to return
    bt mem_fe60.3,lab_2f6b              ;2f64  bc 60 04
    bf mem_fe61.1,lab_2fa9_ret          ;2f67  31 13 61 3e    Branch to return

lab_2f6b:
;mem_fe60.3 = 1
    bt mem_fe5f.5,fis_cksum_and_send    ;2f6b  dc 5f 27     Compute checksum and start sending FIS buf
    bf mem_fe6a.2,fis_clear_build_send  ;2f6e  31 23 6a 18
    cmp mem_fe27,#0x00                  ;2f72  c8 27 00
    bnz lab_2f79                        ;2f75  bd 02
    br lab_2fa9_ret                     ;2f77  fa 30        Branch to return

lab_2f79:
;mem_fe27 != 0
    dec mem_fe27                        ;2f79  91 27
    call !fis_zero                      ;2f7b  9a 88 2e     Fill all chars on FIS display with 0
    br fis_cksum_and_send               ;2f7e  fa 15        Compute checksum and start sending FIS buf

lab_2f80:
    bt mem_fe65.5,fis_clear_build_send  ;2f80  dc 65 07
    bt mem_fe2c.3,fis_clear_build_send  ;2f83  bc 2c 04
    clr1 mem_fe60.3                     ;2f86  3b 60
    br lab_2fa9_ret                     ;2f88  fa 1f        Branch to return

fis_clear_build_send:
;mem_fe65.5 = 1 or mem_fe2c.3 = 1
    call !fis_clear                     ;2f8a  9a 7e 2e     Fill all chars on FIS display with space
    call !fis_build_from_upd            ;2f8d  9a 90 2e     Build the FIS display from the uPD16432B display
    bc lab_2fa9_ret                     ;2f90  8d 17        Branch to return if display is blank
    mov mem_fe27,#0x03                  ;2f92  11 27 03
    ;Fall through to compute checksum and start sending FIS buf

fis_cksum_and_send:
;Compute checksum and start sending FIS buf
    call !fis_checksum                  ;2f95  9a 6c 2e     Compute FIS buffer checksum
    set1 mem_fe61.0                     ;2f98  0a 61
    clr1 mem_fe60.3                     ;2f9a  3b 60
    movw ax,#fis_tx_buf                 ;2f9c  10 52 f0
    movw !fis_tx_ptr,ax                 ;2f9f  03 06 f0
    mov a,#20                           ;2fa2  a1 14        A = 20 bytes in FIS buffer to send
                                        ;                       XXX hardcoded FIS command length
    mov !fis_tx_count,a                 ;2fa4  9e 66 f0     Store as FIS number of bytes left to send
    br lab_2faa_fis                         ;2fa7  fa 01

lab_2fa9_ret:
    ret                     ;2fa9  af

lab_2faa_fis:
;FIS-related (entered from mem_b019_fis table)
    mov mem_fe25,#0x01      ;2faa  11 25 01
    clr1 cy                 ;2fad  21
    btclr mem_fe5e.7,lab_2fb5 ;2fae  31 71 5e 03
    set1 cy                 ;2fb2  20
    set1 mem_fe7c.2         ;2fb3  2a 7c

lab_2fb5:
    bnc lab_2fb9            ;2fb5  9d 02
    br lab_302d             ;2fb7  fa 74

lab_2fb9:
    mov a,!fis_tx_count     ;2fb9  8e 66 f0     A = FIS number of bytes left to send
    cmp a,#20+1             ;2fbc  4d 15        Compare to FIS command length + 1
                            ;                     XXX hardcoded FIS command length
    bc lab_2fc3             ;2fbe  8d 03        Branch if less
    br !lab_3066_fis            ;2fc0  9b 66 30

lab_2fc3:
    cmp a,#0x00             ;2fc3  4d 00        0 bytes remaning?
    bnz lab_2fca            ;2fc5  bd 03          No: Branch to send next byte?

    ;No bytes remaining: the complete FIS packet has been sent
    br !lab_3066_fis            ;2fc7  9b 66 30

lab_2fca:
;More bytes left to send in FIS packet
    set1 mem_fe60.6         ;2fca  6a 60
    set1 mem_fe60.7         ;2fcc  7a 60
    callf !sio30_disable    ;2fce  0c 91        Disable SIO30 (used for uPD16432B SPI)

    set1 shadow_p4.3        ;2fd0  3a ce        P43=1
    clr1 pm4.3              ;2fd2  71 3b 24     PM43=output
    mov a,shadow_p4         ;2fd5  f0 ce
    mov p4,a                ;2fd7  f2 04

    bf mem_fe61.0,lab_2ff4  ;2fd9  31 03 61 17

    clr1 mem_fe61.0         ;2fdd  0b 61

    set1 shadow_p4.4        ;2fdf  4a ce        P44=1 (FIS ENA)
    clr1 pm4.4              ;2fe1  71 4b 24     PM44=output
    mov a,shadow_p4         ;2fe4  f0 ce
    mov p4,a                ;2fe6  f2 04

    ;Busy loop
    push bc                 ;2fe8  b3
    mov b,#0x0e             ;2fe9  a3 0e
lab_2feb:
    dbnz b,lab_2feb         ;2feb  8b fe
    pop bc                  ;2fed  b2

    clr1 shadow_p4.4        ;2fee  4b ce        P44=0 (FIS ENA)
    mov a,shadow_p4         ;2ff0  f0 ce
    mov p4,a                ;2ff2  f2 04

lab_2ff4:
    clr1 pu4.5              ;2ff4  71 5b 34     PU45 pull-up resistor disabled
    set1 pm4.5              ;2ff7  71 5a 24     PM45=input
    call !sio30_enable      ;2ffa  9a 17 26     Enable SIO30 (used for uPD16432B SPI)
    set1 mem_fe5f.1         ;2ffd  1a 5f        SPI mode flag = transmit only
    clr1 if0h.4             ;2fff  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;3002  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;3005  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,!fis_tx_ptr     ;3008  02 06 f0
    push ax                 ;300b  b1           Push: pointer to buffer to transfer
    mov a,#0x01             ;300c  a1 01
    push ax                 ;300e  b1           Push: number of bytes to transfer

    sel rb2                 ;300f  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;3011  b2           Pop: B  = number of bytes to transfer (1)
    pop hl                  ;3012  b6           Pop: HL = pointer to buffer to transfer (fis_tx_ptr)

    clr1 mem_fe5f.0         ;3013  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;3015  a2 01        C = number of bytes sent
    mov a,[hl]              ;3017  87           A = first byte in buffer to transfer
    ei                      ;3018  7a 1e
    mov sio30,a             ;301a  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;301c  61 d0        Select normal register bank
    movw ax,!fis_tx_ptr     ;301e  02 06 f0
    incw ax                 ;3021  80
    movw !fis_tx_ptr,ax     ;3022  03 06 f0

    mov mem_fe25,#0x02      ;3025  11 25 02
    mov a,#0x03             ;3028  a1 03
    mov !mem_fb02,a         ;302a  9e 02 fb

lab_302d:
    ret                     ;302d  af

lab_302e_fis:
;FIS-related (entered from mem_b019_fis table)
    clr1 pu4.5              ;302e  71 5b 34     PU45 pull-up resistor disabled
    set1 pm4.5              ;3031  71 5a 24     PM45=input
    mov a,!fis_tx_count     ;3034  8e 66 f0     A = FIS number of bytes left to send
    cmp a,#0x01             ;3037  4d 01
    bz lab_3066_fis         ;3039  ad 2b
    bf p4.5,lab_304b        ;303b  31 53 04 0c  Branch if P4.5=0
    dec a                   ;303f  51
    mov !fis_tx_count,a     ;3040  9e 66 f0     Store as FIS number of bytes left to send
    mov a,#0x0a             ;3043  a1 0a
    mov !fis_f067,a         ;3045  9e 67 f0     Store as FIS unknown (timer countdown?)
    br !lab_2faa_fis       ;3048  9b aa 2f

lab_304b:
    mov a,!mem_fb02         ;304b  8e 02 fb
    cmp a,#0x00             ;304e  4d 00
    bnz lab_3065            ;3050  bd 13
    mov a,!fis_f067         ;3052  8e 67 f0     A = FIS unknown (timer countdown?)
    cmp a,#0x00             ;3055  4d 00
    bz lab_3061             ;3057  ad 08
    dec a                   ;3059  51
    mov !fis_f067,a         ;305a  9e 67 f0     Store as FIS unknown (timer countdown?)
    set1 mem_fe60.3         ;305d  3a 60
    br lab_3066_fis         ;305f  fa 05

lab_3061:
    clr1 mem_fe61.2         ;3061  2b 61
    br lab_3066_fis         ;3063  fa 01

lab_3065:
    ret                     ;3065  af

lab_3066_fis:
;FIS-related (entered from mem_b019_fis table)
    call !sub_2f48          ;3066  9a 48 2f     p4.3=low, p4.4=low (FIS ENA), disable SIO30,
                            ;                     set mem_fe5e.7, clear mem_fe60.7
    clr1 mem_fe60.6         ;3069  6b 60
    mov mem_fe25,#0x00      ;306b  11 25 00
    ret                     ;306e  af

sub_306f:
;Convert B bytes in [HL+1] to uppercase
;
    mov a,[hl+b]            ;306f  ab           A = byte from buffer
    cmp a,#'a               ;3070  4d 61
    bc lab_307b_next        ;3072  8d 07        Branch if < 'a'
    cmp a,#'z+1             ;3074  4d 7b
    bnc lab_307b_next       ;3076  9d 03        Branch if >= 'z'+1
    ;A >= 'a', A <= 'z'
    sub a,#'a-'A            ;3078  1d 20        Convert lowercase to uppercase
    mov [hl+b],a            ;307a  bb           Write it to the buffer
lab_307b_next:
    dbnz b,sub_306f         ;307b  8b f2        Loop until entire buffer is converted
    ret                     ;307d  af

intst0_307e:
;UART0 transmit complete interrupt
    push ax                 ;307e  b1
    bt mem_fe7a.2,lab_308d  ;307f  ac 7a 0b
    clr1 mem_fe79.0         ;3082  0b 79
    set1 shadow_p2.5        ;3084  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;3086  f0 cc
    mov p2,a                ;3088  f2 02
    clr1 asim0.7            ;308a  71 7b a0     TXE0=0 (disable UART0 transmit)
lab_308d:
    pop ax                  ;308d  b0
    reti                    ;308e  8f

sub_308f:
    bf mem_fe7a.2,lab_30e7_ret  ;308f  31 23 7a 54
    bf mem_fe79.1,lab_30e7_ret  ;3093  31 13 79 50
    bf p2.4,lab_30e7_ret        ;3097  31 43 02 4c  Branch if P24/RxD0 = 0

    mov a,!mem_f06e         ;309b  8e 6e f0
    dec a                   ;309e  51
    mov !mem_f06e,a         ;309f  9e 6e f0

    bnz lab_30e7_ret        ;30a2  bd 43

    clr1 mem_fe79.1         ;30a4  1b 79
    clr1 shadow_p2.5        ;30a6  5b cc        P25/TxD0 = 0
    mov a,shadow_p2         ;30a8  f0 cc
    mov p2,a                ;30aa  f2 02
    bt mem_fe79.6,lab_30d7_send_comp  ;30ac  ec 79 28       Branch to send complement of last byte received
    bt mem_fe79.3,lab_30cb_send_0x55  ;30af  bc 79 19       Branch to send KWP1281 sync byte (0x55)
    bt mem_fe79.4,lab_30cf_send_0x01  ;30b2  cc 79 1a       Branch to send KWP1281 first keyword byte (0x01)
    bt mem_fe79.5,lab_30d3_send_0x8a  ;30b5  dc 79 1b       Branch to send KWP1281 second keyword byte (0x8A)

    mov a,!kwp_tx_idx       ;30b8  8e 68 f0       A = KWP1281 tx buffer index
    and a,#0x0f             ;30bb  5d 0f
    mov b,a                 ;30bd  73

    mov a,!kwp_tx_idx       ;30be  8e 68 f0       A = KWP1281 tx buffer index
    inc a                   ;30c1  41             Increment it
    mov !kwp_tx_idx,a       ;30c2  9e 68 f0       Store as new KWP1281 tx buffer index

    movw hl,#kwp_tx_buf     ;30c5  16 7a f0       HL = pointer to KWP1281 tx buffer
    mov a,[hl+b]            ;30c8  ab             A = read byte from KWP1281 tx buffer
    br lab_30de_send_a      ;30c9  fa 13          Branch to send KWP1281 byte in A out UART0

lab_30cb_send_0x55:
    mov a,#0x55             ;30cb  a1 55          A = KWP1281 sync byte (0x55)
    br lab_30de_send_a      ;30cd  fa 0f          Branch to send KWP1281 byte in A out UART0

lab_30cf_send_0x01:
    mov a,#0x01             ;30cf  a1 01          A = KWP1281 first keyword byte (0x01)
    br lab_30de_send_a      ;30d1  fa 0b          Branch to send KWP1281 byte in A out UART0

lab_30d3_send_0x8a:
    mov a,#0x8a             ;30d3  a1 8a          A = KWP1281 second keyword byte (0x8A)
    br lab_30de_send_a      ;30d5  fa 07          Branch to send KWP1281 byte in A out UART0

lab_30d7_send_comp:
;Send complement of last byte received out UART0
    mov a,!kwp_last_byte    ;30d7  8e 6a f0       A = KWP1281 last byte sent or received; used for error detection
    xor a,#0xff             ;30da  7d ff          Complement it
    br lab_30de_send_a      ;30dc  fa 00          XXX useless branch (could just fall through)

lab_30de_send_a:
;Send byte in A out UART0
    set1 mem_fe79.0         ;30de  0a 79
    mov !kwp_last_byte,a    ;30e0  9e 6a f0       Store as KWP1281 last byte sent or received; used for error detection
    mov rxb0_txs0,a         ;30e3  f2 18          Send the byte out UART0
    br lab_30e7_ret         ;30e5  fa 00          XXX useless branch (could just fall through)

lab_30e7_ret:
    ret                     ;30e7  af

intsr0_30e8:
;UART0 receive complete interrupt
    push ax                 ;30e8  b1
    push bc                 ;30e9  b3
    push hl                 ;30ea  b7
    push de                 ;30eb  b5
    mov a,rxb0_txs0         ;30ec  f0 18        A = KWP1281 byte received from UART
    bf mem_fe7a.2,lab_3148  ;30ee  31 23 7a 56
    btclr mem_fe79.0,lab_313f_br_echo ;30f2  31 01 79 49    Branch to check echo received for last byte sent
    btclr mem_fe79.7,lab_3142_br_comp ;30f6  31 71 79 48    Branch to check complement received for last byte sent
    btclr mem_fe79.3,lab_3158_sync_55 ;30fa  31 31 79 5a    Branch to check received KWP1281 sync byte (0x55)
    btclr mem_fe79.4,lab_3167_kw_01   ;30fe  31 41 79 65    Branch to check received KWP1281 first keyword byte (0x01)
    bt mem_fe79.5,lab_3176_kw_8a      ;3102  dc 79 71       Branch to check received KWP1281 second keyword byte (0x8a)
    bf mem_fe7a.0,lab_3153_pop_reti   ;3105  31 03 7a 4a    Branch to pop registers and reti
    clr1 mem_fe79.2         ;3109  2b 79
    mov x,a                 ;310b  70           X = Remember KWP1281 byte received from UART

    mov a,!kwp_rx_idx       ;310c  8e 69 f0     A = KWP1281 rx buffer index
    mov c,a                 ;310f  72           Copy rx buffer index to C
    cmp a,#0x00             ;3110  4d 00        Are we receiving the first byte (block length)?
    bnz lab_3118            ;3112  bd 04          No: skip storing block length

    ;Received first byte (block length)
    mov a,x                 ;3114  60           A = Recall KWP1281 byte received from UART
    mov !kwp_rx_len,a       ;3115  9e 6c f0     Save as KWP1281 rx block length

lab_3118:
    mov a,c                 ;3118  62           A = KWP1281 rx buffer index
    cmp a,!kwp_rx_len       ;3119  48 6c f0     Compare to KWP1281 rx block length
    bz lab_3145_br_31f6     ;311c  ad 27        Branch if equal (entire block has been received)

    ;Check if rx buffer index is within bounds of rx buffer
    cmp a,#0xff             ;311e  4d ff        A = length of KWP1281 rx buffer (0xFF)
    bc lab_3127             ;3120  8d 05        Branch if KWP1281 rx buffer index < 0xFF
    bz lab_3127             ;3122  ad 03        Branch if KWP1281 rx buffer index = 0xFF

    ;No more room in RX buffer
    mov a,x                 ;3124  60           A = Recall KWP1281 byte received from UART
    br lab_312c             ;3125  fa 05        Branch to skip over storing in rx buffer

lab_3127:
    ;Store byte received in rx buffer
    movw hl,#kwp_rx_buf     ;3127  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,x                 ;312a  60           A = Recall KWP1281 byte received from UART
    mov [hl+c],a            ;312b  ba           Store byte receved in KWP1281 rx buffer

lab_312c:
    mov !kwp_last_byte,a    ;312c  9e 6a f0     Store as KWP1281 last byte sent or received; used for error detection

    inc c                   ;312f  42           Increment KWP1281 rx buffer index in C
    mov a,c                 ;3130  62           Move it to A
    mov !kwp_rx_idx,a       ;3131  9e 69 f0     Store as KWP1281 rx buffer index

    mov a,#0x02             ;3134  a1 02
    mov !mem_f06e,a         ;3136  9e 6e f0     mem_f06e = 2 (maybe 20ms?)

    set1 mem_fe79.6         ;3139  6a 79
    set1 mem_fe79.1         ;313b  1a 79
    br lab_3153_pop_reti    ;313d  fa 14        Branch to pop registers and reti

lab_313f_br_echo:
;Branch to check echo received for last byte sent
    br !lab_3242_echo       ;313f  9b 42 32

lab_3142_br_comp:
;Branch to check complement received for last byte sent
    br !lab_3190_comp       ;3142  9b 90 31

lab_3145_br_31f6:
;Entire block has been received
    br !lab_31f6            ;3145  9b f6 31

lab_3148:
    bf mem_fe2b.7,lab_3150  ;3148  31 73 2b 04  Branch if bit is off, indicating that we are
                            ;                     doing more than just blinking the LED in INTWTNI0
    clr1 mem_fe7b.6         ;314c  6b 7b
    br lab_3153_pop_reti    ;314e  fa 03        Branch to pop registers and reti

lab_3150:
    clr1 asim0.6            ;3150  71 6b a0     RXE0=0 (disable UART0 receive)

lab_3153_pop_reti:
;Pop all registers off stack and return from interrupt
    pop de                  ;3153  b4
    pop hl                  ;3154  b6
    pop bc                  ;3155  b2
    pop ax                  ;3156  b0
    reti                    ;3157  8f

lab_3158_sync_55:
;Check received KWP1281 sync byte (0x55) received from cluster
    cmp a,#0x55             ;3158  4d 55
    bnz lab_318a_unexpected ;315a  bd 2e

    ;Sync byte (0x55) is OK
    mov a,#0x04             ;315c  a1 04
    mov !mem_f06f,a         ;315e  9e 6f f0     mem_f06f = 4 (maybe 40ms?)

    set1 mem_fe79.4         ;3161  4a 79
    set1 mem_fe79.2         ;3163  2a 79
    br lab_3153_pop_reti    ;3165  fa ec        Branch to pop registers and reti

lab_3167_kw_01:
;Check received KWP1281 first keyword byte (0x01) received from cluster
    cmp a,#0x01             ;3167  4d 01
    bnz lab_318a_unexpected ;3169  bd 1f

    ;First keyword byte (0x01) is OK
    mov a,#0x04             ;316b  a1 04
    mov !mem_f06f,a         ;316d  9e 6f f0     mem_f06f = 4 (maybe 40ms?)

    set1 mem_fe79.5         ;3170  5a 79
    set1 mem_fe79.2         ;3172  2a 79
    br lab_3153_pop_reti    ;3174  fa dd        Branch to pop registers and reti

lab_3176_kw_8a:
;Check received KWP1281 second keyword byte (0x8a) received from cluster
    cmp a,#0x8a             ;3176  4d 8a
    bnz lab_318a_unexpected ;3178  bd 10

    ;Second keyword byte (0x8a) is OK
    mov !kwp_last_byte,a    ;317a  9e 6a f0     Store as KWP1281 last byte sent or received; used for error detection

    mov a,#0x0e             ;317d  a1 0e
    mov !mem_f06e,a         ;317f  9e 6e f0     mem_f06e = 14 (maybe 140ms?)

    set1 mem_fe79.6         ;3182  6a 79
    set1 mem_fe79.1         ;3184  1a 79
    clr1 mem_fe79.2         ;3186  2b 79
    br lab_3153_pop_reti    ;3188  fa c9        Branch to pop registers and reti

lab_318a_unexpected:
;Sync byte or one of the keyword bytes received from cluster is not the expected value
    call !kwp_disconnect    ;318a  9a 68 34     Disconnect and clear all KWP1281 state
    br !lab_3153_pop_reti   ;318d  9b 53 31     Branch to pop registers and reti

lab_3190_comp:
;Check complement received for last byte sent
    clr1 mem_fe79.2         ;3190  2b 79
    xor a,#0xff             ;3192  7d ff        Complement byte just received to make original byte again
    cmp a,!kwp_last_byte    ;3194  48 6a f0     Is it the same as the byte we sent?
    bnz lab_31bf_bad_comp   ;3197  bd 26          No: Branch to handle bad complement

    ;Complement byte received is good

    bt mem_fe79.5,lab_31ec  ;3199  dc 79 50     TODO seems to be branching if we are checking
                            ;                       the keyword bytes during init; unsure

    ;TODO We are not checking the keyword bytes during initial connection

    mov a,!kwp_tx_idx       ;319c  8e 68 f0     A = KWP1281 tx buffer index
    and a,#0x0f             ;319f  5d 0f
    bnz lab_31aa            ;31a1  bd 07

    set1 mem_fe7c.0         ;31a3  0a 7c
    mov a,#0x06             ;31a5  a1 06        0x06 = Unknown; seems to be Read RAM / EEPROM related
    mov !mem_fbc9,a         ;31a7  9e c9 fb

lab_31aa:
    mov a,#0x02             ;31aa  a1 02
    mov !mem_f06e,a         ;31ac  9e 6e f0     mem_f06e = 2 (maybe 20ms?)

    mov a,!mem_fbc9         ;31af  8e c9 fb
    cmp a,#0x06             ;31b2  4d 06
    bnz lab_31bb            ;31b4  bd 05

    mov a,#0x08             ;31b6  a1 08
    mov !mem_f06e,a         ;31b8  9e 6e f0     mem_f06e = 8 (maybe 80ms?)

lab_31bb:
    set1 mem_fe79.1         ;31bb  1a 79
    br lab_31e9_br_pop_reti ;31bd  fa 2a        Branch to pop registers and reti

lab_31bf_bad_comp:
;Complement received for last byte sent is bad
    btclr mem_fe79.5,lab_31d2 ;31bf  31 51 79 0f  Branch if we are not checking the two keyword
                              ;                     bytes during the initial connection

    ;We received a bad complement byte during the keyword bytes

    movw hl,#kwp_f06f_values+1 ;31c3  16 37 b0
    mov a,!kwp_addr_idx     ;31c6  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;31c9  73
    mov a,[hl+b]            ;31ca  ab
    mov !mem_f06f,a         ;31cb  9e 6f f0     mem_f06f = 8 (every table entry is the same) (maybe 80ms?)

    set1 mem_fe79.2         ;31ce  2a 79
    br lab_31e9_br_pop_reti ;31d0  fa 17        Branch to pop registers and reti

lab_31d2:
    ;We received a bad complement byte during a regular KWP1281 block

    ;Increment kwp_err_retries count
    mov a,!kwp_err_retries     ;31d2  8e 79 f0
    inc a                   ;31d5  41
    mov !kwp_err_retries,a     ;31d6  9e 79 f0

    ;We allow 1 retry (kwp_err_retries: 0->1).  Have we done 1 retry?
    cmp a,#0x02             ;31d9  4d 02
    bnc lab_31e4            ;31db  9d 07        Branch if A >= 2 (We exceeded the kwp_err_retries count)

    ;Set up for another retry.
    set1 mem_fe7c.0         ;31dd  0a 7c
    mov a,#0x02             ;31df  a1 02        0x02 = Sets UART baud and mode
    mov !mem_fbc9,a         ;31e1  9e c9 fb

lab_31e4:
    bc lab_31e9_br_pop_reti ;31e4  8d 03        If we have not exceeded the kwp_err_retries
                            ;                     count, branch to pop registers and reti.

    ;We exceeded the kwp_err_retries count, so give up.
    call !kwp_disconnect    ;31e6  9a 68 34     Disconnect and clear all KWP1281 state

lab_31e9_br_pop_reti:
    br !lab_3153_pop_reti   ;31e9  9b 53 31     Branch to pop registers and reti

lab_31ec:
    set1 mem_fe7c.0         ;31ec  0a 7c
    mov a,#0x05             ;31ee  a1 05        0x05 = Clears some state bits only
    mov !mem_fbc9,a         ;31f0  9e c9 fb
    br !lab_3153_pop_reti   ;31f3  9b 53 31     Branch to pop registers and reti

lab_31f6:
;Entire block has been received
    mov a,x                 ;31f6  60           A = Recall KWP1281 byte received from UART
    cmp a,#0x03             ;31f7  4d 03        Is it the Block End byte (0x03)?
    bnz lab_322c            ;31f9  bd 31          No: Branch to handle bad block end byte

    ;Block End byte is good

    movw hl,#kwp_idle_ms_values+1 ;31fb  16 3c b0
    mov a,!kwp_addr_idx     ;31fe  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;3201  73
    mov a,[hl+b]            ;3202  ab
    mov !kwp_idle_ms,a      ;3203  9e 70 f0

    set1 mem_fe79.2         ;3206  2a 79        XXX useless; mem_fe79.2 will be cleared immediately
    clr1 mem_fe79.2         ;3208  2b 79

    clr1 mem_fe7a.0         ;320a  0b 7a
    clr1 mem_fe7b.3         ;320c  3b 7b        Block end byte flag = block end is good

    ;Check if the entire block we just received fit in the RX buffer
    ;This is done because we can receive a block longer than the RX buffer and
    ;the overflow will not be stored (see the comparison near lab_3118).  However,
    ;because the RX buffer length is 0xFF, this overflow never actually occurs.
    mov a,#0xff             ;320e  a1 ff        A = length of KWP1281 rx buffer (0xFF)
    cmp a,!kwp_rx_len       ;3210  48 6c f0     Compare to KWP1281 rx block length
    bc lab_3223             ;3213  8d 0e        Branch if RX block length > 0xFF
                            ;                   XXX with A=0xFF, the carry will never be set for any
                            ;                       value of kwp_rx_len.  this branch is never taken.

    ;RX block length <= 0xFF

    mov a,#0x00             ;3215  a1 00
    mov !kwp_err_retries,a  ;3217  9e 79 f0     KWP1281 error retries count = 0

    set1 mem_fe7c.0         ;321a  0a 7c
    mov a,#0x04             ;321c  a1 04        0x04 = Block received and it fit in RX buffer; dispatch it
    mov !mem_fbc9,a         ;321e  9e c9 fb
    br lab_323c_br_pop_reti ;3221  fa 19        Branch to pop registers and reti

lab_3223:
;Block received exceeded RX buffer length
;This is never reached (see comments above)
    set1 mem_fe7c.0         ;3223  0a 7c
    mov a,#0x07             ;3225  a1 07        0x07 = Block received exceeded RX buffer length
    mov !mem_fbc9,a         ;3227  9e c9 fb
    br lab_323c_br_pop_reti ;322a  fa 10        Branch to pop registers and reti

lab_322c:
;Block End byte received is bad
    mov a,#0x1e             ;322c  a1 1e
    mov !mem_f06f,a         ;322e  9e 6f f0     mem_f06f = 14 (maybe 140ms?)

    set1 mem_fe7b.3         ;3231  3a 7b        Block end byte flag = block end is bad
    set1 mem_fe79.2         ;3233  2a 79

    mov a,#0x00             ;3235  a1 00
    mov !kwp_rx_idx,a       ;3237  9e 69 f0     KWP1281 rx buffer index = 0

    br lab_323c_br_pop_reti ;323a  fa 00        XXX redundant; could just fall through

lab_323c_br_pop_reti:
    br !lab_3153_pop_reti   ;323c  9b 53 31     Branch to pop registers and reti

lab_323f_error:
;An receive error has occurred.   We are not acting in radio-as-tester mode.
;The routine is reached if an actual receive error interrupt from the UART
;occurs or if the echo we received from the last byte send did not match.
;
    mov a,!kwp_last_byte    ;323f  8e 6a f0     A = KWP1281 last byte sent or received; used for error detection

lab_3242_echo:
;Check echo received for last byte sent
    cmp a,!kwp_last_byte    ;3242  48 6a f0     A = last byte sent out UART0
    bnz lab_328d_bad_echo   ;3245  bd 46        Branch if echo is bad

    ;Echo of last byte sent is good
    btclr mem_fe79.6,lab_32a7 ;3247  31 61 79 5c
    bt mem_fe79.3,lab_31ec  ;324b  bc 79 9e
    bt mem_fe79.4,lab_31ec  ;324e  cc 79 9b
    bt mem_fe79.5,lab_3296  ;3251  dc 79 42

    mov a,!kwp_tx_idx       ;3254  8e 68 f0     A = KWP1281 tx buffer index
    cmp a,#0x00             ;3257  4d 00
    bz lab_3263             ;3259  ad 08

    mov a,!kwp_tx_len       ;325b  8e 6b f0     A = KWP1281 tx block length
    cmp a,!kwp_tx_idx       ;325e  48 68 f0     Compare with KWP1281 tx buffer index
    bnc lab_3296            ;3261  9d 33        Branch if kwp_tx_len >= kwp_tx_idx

lab_3263:
    clr1 cy                 ;3263  21
    bf mem_fe7b.2,lab_3269  ;3264  31 23 7b 01
    set1 cy                 ;3268  20

lab_3269:
    bc lab_3288             ;3269  8d 1d
    clr1 mem_fe7a.1         ;326b  1b 7a
    set1 mem_fe7a.0         ;326d  0a 7a

    mov a,#0x00             ;326f  a1 00
    mov !kwp_rx_idx,a       ;3271  9e 69 f0     KWP1281 rx buffer index

    mov a,#0x00             ;3274  a1 00
    mov !mem_f06f,a         ;3276  9e 6f f0     mem_f06f = 0 (maybe 0ms?)

    movw hl,#kwp_idle_ms_values+1 ;3279  16 3c b0
    mov a,!kwp_addr_idx     ;327c  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;327f  73
    mov a,[hl+b]            ;3280  ab
    mov !kwp_idle_ms,a      ;3281  9e 70 f0

    set1 mem_fe79.2         ;3284  2a 79
    br lab_32dc_br_pop_reti ;3286  fa 54        Branch to pop registers and reti

lab_3288:
    call !kwp_disconnect    ;3288  9a 68 34     Disconnect and clear all KWP1281 state
    br lab_32dc_br_pop_reti ;328b  fa 4f        Branch to pop registers and reti

lab_328d_bad_echo:
;Echo received for last byte sent is bad
    bf shadow_p2.6,lab_323f_error ;328d  31 63 cc ae  Branch if P26 = 0 (K-line resistor = disconnected;
                            ;                                      radio is not acting as a tester)

    ;Radio is acting as a tester and echo received from last byte is bad

    call !kwp_disconnect    ;3291  9a 68 34     Disconnect and clear all KWP1281 state
    br lab_32dc_br_pop_reti ;3294  fa 46        Branch to pop registers and reti

lab_3296:
    movw hl,#kwp_f06f_values+1 ;3296  16 37 b0
    mov a,!kwp_addr_idx     ;3299  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;329c  73
    mov a,[hl+b]            ;329d  ab
    mov !mem_f06f,a         ;329e  9e 6f f0     mem_f06f = 8 (every table entry is the same) (maybe 80ms?)

    set1 mem_fe79.2         ;32a1  2a 79
    set1 mem_fe79.7         ;32a3  7a 79
    br lab_32dc_br_pop_reti ;32a5  fa 35        Branch to pop registers and reti

lab_32a7:
    movw hl,#kwp_f06f_values+1 ;32a7  16 37 b0
    mov a,!kwp_addr_idx     ;32aa  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;32ad  73
    mov a,[hl+b]            ;32ae  ab
    mov !mem_f06f,a         ;32af  9e 6f f0     mem_f06f = 8 (every table entry is the same) (maybe 80ms?)

    set1 mem_fe79.2         ;32b2  2a 79
    btclr mem_fe79.5,lab_32ba ;32b4  31 51 79 02
    br lab_32dc_br_pop_reti ;32b8  fa 22       Branch to pop registers and reti

lab_32ba:
    clr1 mem_fe7a.1         ;32ba  1b 7a
    set1 mem_fe7a.0         ;32bc  0a 7a
    mov a,#0x00             ;32be  a1 00
    mov !kwp_rx_idx,a       ;32c0  9e 69 f0     KWP1281 rx buffer index

    movw hl,#kwp_asim0_b031+1 ;32c3  16 32 b0
    mov a,!kwp_addr_idx     ;32c6  8e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;32c9  73
    mov a,[hl+b]            ;32ca  ab
    mov asim0,a             ;32cb  f6 a0        Load UART0 mode register

    movw hl,#kwp_idle_ms_values+1 ;32cd  16 3c b0
    mov a,!kwp_addr_idx     ;32d0  8e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;32d3  73
    mov a,[hl+b]            ;32d4  ab
    mov !kwp_idle_ms,a         ;32d5  9e 70 f0

    set1 mem_fe79.2         ;32d8  2a 79
    br lab_32dc_br_pop_reti ;32da  fa 00        Branch to pop registers and reti

lab_32dc_br_pop_reti:
    br !lab_3153_pop_reti   ;32dc  9b 53 31     Branch to pop registers and reti


intser0_32df:
;UART0 receive error interrupt
    push ax                 ;32df  b1
    push bc                 ;32e0  b3
    push hl                 ;32e1  b7
    push de                 ;32e2  b5

    mov a,asis0             ;32e3  f4 a1          A = UART0 status register when interrupt occurred
    mov x,a                 ;32e5  70             Save UART0 status register in X

    mov a,rxb0_txs0         ;32e6  f0 18          A = byte received
    clr1 if0h.2             ;32e8  71 2b e1       Clear SRIF0 (INTSR0 interrupt flag)

    bf mem_fe7a.2,lab_3304  ;32eb  31 23 7a 15
    bt shadow_p2.6,lab_331c ;32ef  ec cc 2a       Branch if P26 = 1 (K-line resistor = connected;
                            ;                                        radio is acting as a tester)

    ;K-line resistor = disconnected (radio is not acting as a tester)
    bt mem_fe79.0,lab_3301_br_lab_323f_error    ;32f2  8c 79 0c  If ??? branch to handle receive error
    bt mem_fe7a.1,lab_32fd_br_lab_3324_pop_reti ;32f5  9c 7a 05  If ??? branch to pop registers off stack and reti
    bt mem_fe7a.0,lab_32ff_br_lab_3324_pop_reti ;32f8  8c 7a 04  If ??? branch to pop registers off stack and reti
    br lab_3324_pop_reti                      ;32fb  fa 27     Branch to pop registers off stack and reti

lab_32fd_br_lab_3324_pop_reti:
    br lab_3324_pop_reti    ;32fd  fa 25          Branch to pop registers off stack and reti

lab_32ff_br_lab_3324_pop_reti:
    br lab_3324_pop_reti    ;32ff  fa 23          Branch to pop registers off stack and reti

lab_3301_br_lab_323f_error:
    br !lab_323f_error      ;3301  9b 3f 32       Branch to handle receive error

lab_3304:
    bf mem_fe2b.7,lab_3321  ;3304  31 73 2b 19    Bit off = we doing more than just blinking the LED in INTWTNI0
                            ;                     Branch to disable UART0 RX, pop registers, and reti

    bf mem_fe2c.2,lab_3321  ;3308  31 23 2c 15    Branch to disable UART0 RX, pop registers, and reti

    mov a,x                 ;330c  60             A = UART0 status register when interrupt occurred
    cmp a,#0b00000010       ;330d  4d 02          Is it a framing error (FE0)?
    bnz lab_3318            ;330f  bd 07            No: branch to handle non-framing error

    ;Receive error is a framing error
    bt mem_fe7b.6,lab_3321  ;3311  ec 7b 0d       Branch to disable UART0 RX, pop registers, and reti
    set1 mem_fe7b.7         ;3314  7a 7b
    br lab_3321             ;3316  fa 09          Branch to disable UART0 RX, pop registers, and reti

lab_3318:
    ;Receive error is not a framing error
    clr1 mem_fe7b.6         ;3318  6b 7b
    br lab_3324_pop_reti    ;331a  fa 08          Branch to pop registers off stack and reti

lab_331c:
    ;K-line resistor = connected (radio is acting as a tester)
    clr1 mem_fe7b.4         ;331c  4b 7b
    call !kwp_disconnect    ;331e  9a 68 34       Disconnect and clear all KWP1281 state

lab_3321:
    clr1 asim0.6            ;3321  71 6b a0       RXE0=0 (disable UART0 receive)

lab_3324_pop_reti:
;Pop registers off stack and reti
    pop de                  ;3324  b4
    pop hl                  ;3325  b6
    pop bc                  ;3326  b2
    pop ax                  ;3327  b0
    reti                    ;3328  8f


sub_3329:
;Decrements mem_f06f
    bf mem_fe79.2,lab_336f_ret  ;3329  31 23 79 42

    mov a,!mem_f06f         ;332d  8e 6f f0
    cmp a,#0x00             ;3330  4d 00
    bz lab_336f_ret         ;3332  ad 3b        Branch to return

    dec a                   ;3334  51
    mov !mem_f06f,a         ;3335  9e 6f f0
    bnz lab_336f_ret        ;3338  bd 35        If ..., branch to return

    call !sub_339e          ;333a  9a 9e 33     Unknown, but loads kwp_idle_ms countdown from kwp_idle_ms_values table
    br lab_336f_ret         ;333d  fa 30        Branch to return


kwp_check_idle:
;Decrement KWP1281 idle countdown and the disconnect KWP1281 connection if needed
;
    bf mem_fe7a.2,lab_336f_ret  ;333f  31 23 7a 2c
    bt mem_fe79.2,lab_3356      ;3343  ac 79 10

    mov a,!mem_f06e         ;3346  8e 6e f0

    bf mem_fe79.1,lab_335d_check_idle  ;3349  31 13 79 10
    cmp a,#0x00                        ;334d  4d 00
    bz lab_335d_check_idle             ;334f  ad 0c
    bt p2.4,lab_336f_ret               ;3351  cc 02 1b     Branch if P25/RxD0 = 1
    br lab_335d_check_idle             ;3354  fa 07

lab_3356:
    mov a,!mem_f06f         ;3356  8e 6f f0
    cmp a,#0x00             ;3359  4d 00
    bnz lab_336f_ret        ;335b  bd 12        If ..., branch to return

lab_335d_check_idle:
    mov a,!kwp_idle_ms      ;335d  8e 70 f0
    cmp a,#0x00             ;3360  4d 00
    bz lab_336f_ret         ;3362  ad 0b        If idle countdown is already at zero, it means were were at
                            ;                     idle and we still are.  Nothing to do, so return.

    ;Idle countdown is non-zero.  There's an active connection right now.
    ;Decrement the idle countdown.

    dec a                   ;3364  51           Decrement idle countdown
    mov !kwp_idle_ms,a      ;3365  9e 70 f0     Save decremented value

    bnz lab_336f_ret        ;3368  bd 05        If idle countdown has not reached zero yet,
                            ;                     branch to return.

    ;Idle countdown has just been decremented to 0.
    ;There's been activity for too long so we are now idle.  It's time to disconnect.

    call !sub_3370_disconnect_or_reconnect  ;336a  9a 70 33
    br lab_336f_ret                         ;336d  fa 00    ;XXX useless branch (could just fall through)

lab_336f_ret:
    ret                     ;336f  af


sub_3370_disconnect_or_reconnect:
;Disconnect KWP1281 if radio is not acting as a tester.
;If acting as a tester, try to connect again.
;
    clr1 mem_fe79.2                     ;3370  2b 79
    bf shadow_p2.6,lab_3392_disconnect  ;3372  31 63 cc 1c    Branch if P26 = 0 (K-line resistor = disconnected;
                                        ;                                        radio is not acting as a tester)

    ;Radio is acting as a tester

    mov a,!kwp_conn_attempts;3376  8e 78 f0       A = KWP1281 radio-as-tester connection attempt count
    cmp a,#0x01             ;3379  4d 01
    bnc lab_3392_disconnect ;337b  9d 15          Branch to give up if too many attempts (A >= 1)
    inc a                   ;337d  41
    mov !kwp_conn_attempts,a;337e  9e 78 f0       Save incremented count

    ;Attempt to connect again

    mov a,!kwp_tx_address   ;3381  8e 73 f0       A = KWP1281 address to send
    mov !kwp_tx_addr_rot,a  ;3384  9e 74 f0       Copy it so the bits can be rotated out during 5 baud init

    set1 mem_fe7a.3         ;3387  3a 7a
    set1 mem_fe7a.6         ;3389  6a 7a

    mov a,#0x1b             ;338b  a1 1b
    mov !kwp_bit_ms,a       ;338d  9e 77 f0       kwp_bit_ms = 0x1b (27ms?)

    set1 mem_fe7b.4         ;3390  4a 7b

lab_3392_disconnect:
    set1 shadow_p2.5        ;3392  5a cc          P25/TxD0 = 1
    mov a,shadow_p2         ;3394  f0 cc
    mov p2,a                ;3396  f2 02
    mov asim0,#0x00         ;3398  13 a0 00       UART0 mode register = 0 (UART fully disabled)
    br !kwp_disconnect      ;339b  9b 68 34       Disconnect and clear all KWP1281 state

sub_339e:
;Unknown, but loads kwp_idle_ms countdown from kwp_idle_ms_values table
    bt mem_fe7a.0,lab_33de  ;339e  8c 7a 3d
    bt mem_fe7a.1,lab_3401  ;33a1  9c 7a 5d
    btclr mem_fe79.3,sub_3370_disconnect_or_reconnect ;33a4  31 31 79 c8
    btclr mem_fe79.4,sub_3370_disconnect_or_reconnect ;33a8  31 41 79 c4
    btclr mem_fe79.5,lab_33be ;33ac  31 51 79 0e

    movw hl,#kwp_idle_ms_values+1 ;33b0  16 3c b0
    mov a,!kwp_addr_idx     ;33b3  8e 6d f0       KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;33b6  73
    mov a,[hl+b]            ;33b7  ab
    mov !kwp_idle_ms,a         ;33b8  9e 70 f0

    set1 mem_fe79.2         ;33bb  2a 79
    ret                     ;33bd  af

lab_33be:
    bf mem_fe79.7,sub_3370_disconnect_or_reconnect  ;33be  31 73 79 ae
    clr1 mem_fe79.2         ;33c2  2b 79
    clr1 mem_fe79.7         ;33c4  7b 79

    ;Increment kwp_err_retries count
    mov a,!kwp_err_retries  ;33c6  8e 79 f0
    inc a                   ;33c9  41
    mov !kwp_err_retries,a  ;33ca  9e 79 f0

    ;We allow 1 retry (kwp_err_retries: 0->1).  Have we done 1 retry?
    cmp a,#0x02             ;33cd  4d 02
    bnc lab_33d8            ;33cf  9d 07        Branch if A >= 2 (We exceeded the kwp_err_retries count)

    ;Set up for another retry.
    set1 mem_fe7c.0         ;33d1  0a 7c
    mov a,#0x02             ;33d3  a1 02        0x02 = Sets UART baud and mode
    mov !mem_fbc9,a         ;33d5  9e c9 fb

lab_33d8:
    bc lab_33dd_ret         ;33d8  8d 03        If we have not exceeded the kwp_err_retries,
                            ;                     count, branch to return.

    ;We exceeded the kwp_err_retries count, so give up.
    br !kwp_disconnect      ;33da  9b 68 34     Disconnect and clear all KWP1281 state

lab_33dd_ret:
    ret                     ;33dd  af

lab_33de:
    btclr mem_fe7b.3,lab_33f5 ;33de  31 31 7b 13  If Block end byte flag = block end is bad,
                              ;                     clear the flag to "block end is good" and branch

    mov a,#0x00             ;33e2  a1 00
    mov !kwp_rx_idx,a       ;33e4  9e 69 f0       KWP1281 rx buffer index

    movw hl,#kwp_idle_ms_values+1 ;33e7  16 3c b0
    mov a,!kwp_addr_idx     ;33ea  8e 6d f0       KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;33ed  73
    mov a,[hl+b]            ;33ee  ab
    mov !kwp_idle_ms,a         ;33ef  9e 70 f0

    set1 mem_fe79.2         ;33f2  2a 79
    ret                     ;33f4  af

lab_33f5:
;Block end byte is bad
    clr1 mem_fe79.2         ;33f5  2b 79
    clr1 mem_fe7a.0         ;33f7  0b 7a
    set1 mem_fe7c.0         ;33f9  0a 7c
    mov a,#0x08             ;33fb  a1 08        0x08 = State that will cause a NAK resend (lab_5344_nak_resend)
    mov !mem_fbc9,a         ;33fd  9e c9 fb
    ret                     ;3400  af

lab_3401:
    btclr mem_fe7b.1,lab_3422 ;3401  31 11 7b 1d
    set1 mem_fe7b.1         ;3405  1a 7b

    movw hl,#kwp_f06f_values+1 ;3407  16 37 b0
    mov a,!kwp_addr_idx     ;340a  8e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;340d  73
    mov a,[hl+b]            ;340e  ab
    mov !mem_f06f,a         ;340f  9e 6f f0     mem_f06f = 8 (every table entry is the same)

    set1 mem_fe79.2         ;3412  2a 79

    movw hl,#kwp_idle_ms_values+1 ;3414  16 3c b0
    mov a,!kwp_addr_idx     ;3417  8e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;341a  73
    mov a,[hl+b]            ;341b  ab
    mov !kwp_idle_ms,a      ;341c  9e 70 f0

    set1 mem_fe79.2         ;341f  2a 79
    ret                     ;3421  af

lab_3422:
    clr1 mem_fe79.2         ;3422  2b 79

    ;Increment kwp_err_retries count
    mov a,!kwp_err_retries  ;3424  8e 79 f0
    inc a                   ;3427  41
    mov !kwp_err_retries,a  ;3428  9e 79 f0

    cmp a,#0x0a             ;342b  4d 0a          A = 0x0A
    bc lab_3456             ;342d  8d 27          Branch if < 10

    clr1 cy                 ;342f  21
    bf mem_fe7b.2,lab_3435  ;3430  31 23 7b 01
    set1 cy                 ;3434  20

lab_3435:
    bc lab_3453_br_kwp_disconnect ;3435  8d 1c    Disconnect and clear all KWP1281 state

    clr1 mem_fe7a.1         ;3437  1b 7a
    set1 mem_fe7a.0         ;3439  0a 7a

    mov a,#0x00             ;343b  a1 00
    mov !kwp_rx_idx,a       ;343d  9e 69 f0       KWP1281 rx buffer index

    mov a,#0x00             ;3440  a1 00
    mov !mem_f06f,a         ;3442  9e 6f f0       mem_f06f = 0 (maybe 0ms?)

    movw hl,#kwp_idle_ms_values+1 ;3445  16 3c b0
    mov a,!kwp_addr_idx     ;3448  8e 6d f0       KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;344b  73
    mov a,[hl+b]            ;344c  ab
    mov !kwp_idle_ms,a      ;344d  9e 70 f0

    set1 mem_fe79.2         ;3450  2a 79
    ret                     ;3452  af

lab_3453_br_kwp_disconnect:
    br !kwp_disconnect      ;3453  9b 68 34     Disconnect and clear all KWP1281 state


lab_3456:
    mov a,#0x0f             ;3456  a1 0f        A = 0x0F
    cmp a,!kwp_tx_len       ;3458  48 6b f0     Compare A with KWP1281 tx block length
    bc lab_3460             ;345b  8d 03        Branch if tx block length > 0x0F

    ;KWP1281 tx block length <= 0x0F

    br !send_kwp_tx_buf     ;345d  9b f7 34     Set flags to start sending the KWP1281 tx buffer


lab_3460:
;KWP1281 tx block length > 0x0F
    set1 mem_fe7c.0         ;3460  0a 7c
    mov a,#0x09             ;3462  a1 09        0x09 = Send Read RAM / EEPROM response
    mov !mem_fbc9,a         ;3464  9e c9 fb
    ret                     ;3467  af


kwp_disconnect:
;Disconnect and clear all KWP1281 state
    clr1 mem_fe7a.2         ;3468  2b 7a

    set1 shadow_p2.5        ;346a  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;346c  f0 cc
    mov p2,a                ;346e  f2 02

    btclr mem_fe7b.4,lab_348b ;3470  31 41 7b 17

    clr1 shadow_p2.6        ;3474  6b cc        P26 = 0 (K-line resistor = disconnected;
                            ;                            radio is not acting as a tester)
    mov a,shadow_p2         ;3476  f0 cc
    mov p2,a                ;3478  f2 02

    bt mem_fe2c.2,lab_3481  ;347a  ac 2c 04
    clr1 mem_fe7a.4         ;347d  4b 7a
    clr1 mem_fe7a.3         ;347f  3b 7a

lab_3481:
    bf mem_fe65.6,lab_348b  ;3481  31 63 65 06
    bf mem_fe62.1,lab_348b  ;3485  31 13 62 02
    set1 mem_fe7d.0         ;3489  0a 7d

lab_348b:
    mov a,#0x00             ;348b  a1 00        0x00 = Sets mem_fbc9=0, does nothing
    mov !mem_fbc9,a         ;348d  9e c9 fb
    bf mem_fe65.5,kwp_clear_more  ;3490  31 53 65 0e  Clear many KWP1281 state bits + 3 more
    set1 mem_fe7d.3         ;3494  3a 7d
    clr1 mem_fe61.4         ;3496  4b 61
    clr1 mem_fe5f.5         ;3498  5b 5f

    mov a,#0                ;349a  a1 00        A = 0 seconds
    mov !msg_countdown,a    ;349c  9e 2e fb

    mov !kwp_test_idx,a     ;349f  9e 4e f0     KWP1281 Output Test index = 0

kwp_clear_more:
;Clear many KWP1281 state bits + 3 more
    clr1 mem_fe65.5         ;34a2  5b 65
    clr1 mem_fe65.7         ;34a4  7b 65
    clr1 mem_fe65.6         ;34a6  6b 65

kwp_clear_state:
;Clear many KWP1281 state bits
    clr1 mem_fe79.2         ;34a8  2b 79
    clr1 mem_fe79.1         ;34aa  1b 79
    clr1 mem_fe7a.0         ;34ac  0b 7a
    clr1 mem_fe7a.1         ;34ae  1b 7a
    clr1 mem_fe79.3         ;34b0  3b 79
    clr1 mem_fe79.4         ;34b2  4b 79
    clr1 mem_fe79.5         ;34b4  5b 79
    clr1 mem_fe7a.4         ;34b6  4b 7a
    clr1 mem_fe7a.5         ;34b8  5b 7a
    clr1 mem_fe79.0         ;34ba  0b 79
    clr1 mem_fe79.6         ;34bc  6b 79
    clr1 mem_fe79.7         ;34be  7b 79
    clr1 mem_fe7b.1         ;34c0  1b 7b
    clr1 mem_fe7b.2         ;34c2  2b 7b
    clr1 mem_fe7b.3         ;34c4  3b 7b        Block end byte flag = block end is good
    clr1 mem_fe7b.4         ;34c6  4b 7b
    clr1 mem_fe7b.5         ;34c8  5b 7b
    clr1 mem_fe7b.6         ;34ca  6b 7b

    mov a,#0x00             ;34cc  a1 00
    mov !kwp_err_retries,a;34ce  9e 79 f0

    clr1 mem_fe63.0         ;34d1  0b 63        Clear bit = it's OK to initiate a KWP1281 connection to the cluster
    ret                     ;34d3  af


sub_34d4:
;XXX appears unused
    clr1 cy                     ;34d4  21
    bt mem_fe7a.2,lab_34de_ret  ;34d5  ac 7a 06
    set1 mem_fe7a.2             ;34d8  2a 7a
    mov !kwp_addr_idx,a         ;34da  9e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    set1 cy                     ;34dd  20
lab_34de_ret:
    ret                         ;34de  af


sub_34df:
;XXX appears unused
    cmp a,!kwp_addr_idx         ;34df  48 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    clr1 cy                     ;34e2  21
    bnz lab_34e8_ret            ;34e3  bd 03
    clr1 mem_fe7a.2             ;34e5  2b 7a
    set1 cy                     ;34e7  20
lab_34e8_ret:
    ret                         ;34e8  af


sub_34e9:
;XXX appears unused
    cmp a,!kwp_addr_idx         ;34e9  48 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    clr1 cy                     ;34ec  21
    bnz lab_34f6_ret            ;34ed  bd 07
    bt mem_fe7a.1,lab_34f6_ret  ;34ef  9c 7a 04
    bt mem_fe7a.0,lab_34f6_ret  ;34f2  8c 7a 01
    set1 cy                     ;34f5  20
lab_34f6_ret:
    ret                         ;34f6  af


send_kwp_tx_buf:
;Set flags to start sending the KWP1281 tx buffer
    mov a,#0x02             ;34f7  a1 02
    mov !mem_f06e,a         ;34f9  9e 6e f0     mem_f06e = 2 (maybe 2ms?)

lab_34fc:
    mov a,#0x00             ;34fc  a1 00
    mov !kwp_tx_idx,a       ;34fe  9e 68 f0     Store as KWP1281 tx buffer index
    set1 mem_fe79.1         ;3501  1a 79
    set1 mem_fe7a.1         ;3503  1a 7a
    ret                     ;3505  af


kwp_init_5baud:
;Set up to bit-bang 5 baud init with address in A
;Used to start a radio-as-tester KWP1281 connection to the cluster
    mov !kwp_tx_address,a   ;3506  9e 73 f0     KWP1281 address to send = A

    mov a,#0x00             ;3509  a1 00
    mov !kwp_conn_attempts,a;350b  9e 78 f0     KWP1281 radio-as-tester connection attempt count = 0

    mov a,#0xdb             ;350e  a1 db
    mov !kwp_bit_ms,a    ;3510  9e 77 f0     kwp_bit_ms = 0xdb (219 ms?)

    clr1 mem_fe7a.4         ;3513  4b 7a
    set1 mem_fe7a.3         ;3515  3a 7a
    ret                     ;3517  af


sub_3518:
;Unknown, related to 5 baud address tx/rx
    bf mem_fe7a.3,lab_357b_ret  ;3518  31 33 7a 5f
    bt mem_fe7a.2,lab_357b_ret  ;351c  ac 7a 5c
    bt mem_fe7a.5,lab_357b_ret  ;351f  dc 7a 59
    bt mem_fe62.1,lab_352a      ;3522  9c 62 05
    bt p2.4,lab_3541            ;3525  cc 02 19     Branch if P24/RxD0 = 1
    clr1 mem_fe7a.6             ;3528  6b 7a

lab_352a:
    clr1 shadow_p2.6        ;352a  6b cc        P26 = 0 (K-line resistor = disconnected;
                            ;                            radio is not acting as a tester)
    mov a,shadow_p2         ;352c  f0 cc
    mov p2,a                ;352e  f2 02

    set1 shadow_p2.5        ;3530  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;3532  f0 cc
    mov p2,a                ;3534  f2 02

    mov a,#0xdb             ;3536  a1 db
    mov !kwp_bit_ms,a    ;3538  9e 77 f0     kwp_bit_ms = 0xdb (219 ms?)

    clr1 mem_fe7a.4         ;353b  4b 7a
    clr1 mem_fe65.6         ;353d  6b 65
    br lab_357b_ret         ;353f  fa 3a

lab_3541:
    set1 mem_fe7a.6         ;3541  6a 7a
    set1 mem_fe65.6         ;3543  6a 65

    mov a,!kwp_bit_ms    ;3545  8e 77 f0
    cmp a,#0x00             ;3548  4d 00
    bz lab_3554             ;354a  ad 08

    dec a                   ;354c  51
    mov !kwp_bit_ms,a    ;354d  9e 77 f0

    cmp a,#0x00             ;3550  4d 00
    bnz lab_357b_ret        ;3552  bd 27

lab_3554:
;kwp_bit_ms has reached 0
    mov asim0,#0x00         ;3554  13 a0 00     UART0 mode register = 0 (UART fully disabled)

    set1 shadow_p2.6        ;3557  6a cc        P26 = 1 (K-line resistor = connected;
                            ;                            radio is acting as a tester)
    mov a,shadow_p2         ;3559  f0 cc
    mov p2,a                ;355b  f2 02

    clr1 shadow_p2.5        ;355d  5b cc        P25/TxD0 = 0
    mov a,shadow_p2         ;355f  f0 cc
    mov p2,a                ;3561  f2 02

    mov a,#0x00             ;3563  a1 00
    mov !mem_f071,a         ;3565  9e 71 f0

    mov a,#0x00             ;3568  a1 00
    mov !kwp_tx_bit_count,a ;356a  9e 76 f0     KWP1281 bit count for 5 baud init = 0
    clr1 mem_fe7a.6         ;356d  6b 7a

    mov a,!kwp_tx_address   ;356f  8e 73 f0     A = KWP1281 address to send
    mov !kwp_tx_addr_rot,a  ;3572  9e 74 f0     Copy it so the bits can be rotated out during 5 baud init

    clr1 mem_fe7a.3         ;3575  3b 7a
    set1 mem_fe7a.4         ;3577  4a 7a
    clr1 mem_fe7a.5         ;3579  5b 7a

lab_357b_ret:
    ret                     ;357b  af


sub_357c:
;Unknown, related to 5 baud address tx/rx
    bf mem_fe7a.4,lab_35e8_ret  ;357c  31 43 7a 68

    mov a,!mem_f071             ;3580  8e 71 f0
    inc a                       ;3583  41
    mov !mem_f071,a             ;3584  9e 71 f0

    cmp a,#0xcd                 ;3587  4d cd
    bz lab_35ab                 ;3589  ad 20

    bf mem_fe7a.6,lab_35e8_ret  ;358b  31 63 7a 59
    bt p2.4,lab_35e8_ret        ;358f  cc 02 56     Branch if P24/RxD0 = 1

    clr1 shadow_p2.6        ;3592  6b cc        P26 = 0 (K-line resistor = disconnected;
                            ;                            radio is not acting as a tester)
    mov a,shadow_p2         ;3594  f0 cc
    mov p2,a                ;3596  f2 02

    set1 shadow_p2.5        ;3598  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;359a  f0 cc
    mov p2,a                ;359c  f2 02

    mov a,#0xdb             ;359e  a1 db
    mov !kwp_bit_ms,a    ;35a0  9e 77 f0     kwp_bit_ms = 0xdb (219 ms?)

    clr1 mem_fe7a.4         ;35a3  4b 7a
    set1 mem_fe7a.3         ;35a5  3a 7a
    clr1 mem_fe65.6         ;35a7  6b 65
    br lab_35e8_ret         ;35a9  fa 3d

lab_35ab:
    mov a,#0x00             ;35ab  a1 00
    mov !mem_f071,a         ;35ad  9e 71 f0

    mov a,!kwp_tx_bit_count ;35b0  8e 76 f0     A = KWP1281 bit count for 5 baud init
    inc a                   ;35b3  41           Increment it
    mov !kwp_tx_bit_count,a ;35b4  9e 76 f0     Save incremented bit count

    cmp a,#0x09             ;35b7  4d 09
    bz lab_35d2             ;35b9  ad 17
    cmp a,#0x09             ;35bb  4d 09
    bnc lab_35dc            ;35bd  9d 1d

    mov a,!kwp_tx_addr_rot  ;35bf  8e 74 f0     A = KWP1281 address to send being rotated out
    ror a,1                 ;35c2  24           Rotate one bit to the right
    mov !kwp_tx_addr_rot,a  ;35c3  9e 74 f0     Save rotated value

    mov1 mem_fe7a.6,cy      ;35c6  71 61 7a
    mov1 shadow_p2.5,cy     ;35c9  71 51 cc     P25/TxD0 = CY
    mov a,shadow_p2         ;35cc  f0 cc
    mov p2,a                ;35ce  f2 02
    br lab_35e8_ret         ;35d0  fa 16        Branch to return

lab_35d2:
    set1 mem_fe7a.6         ;35d2  6a 7a
    set1 shadow_p2.5        ;35d4  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;35d6  f0 cc
    mov p2,a                ;35d8  f2 02
    br lab_35e8_ret         ;35da  fa 0c        Branch to return

lab_35dc:
    set1 mem_fe7c.0         ;35dc  0a 7c
    mov a,#0x03             ;35de  a1 03        0x03 = Address sent; dispatch to handler
    mov !mem_fbc9,a         ;35e0  9e c9 fb
    call !kwp_clear_state   ;35e3  9a a8 34     Clears KWP1281 many state bits
    set1 mem_fe7a.2         ;35e6  2a 7a

lab_35e8_ret:
    ret                     ;35e8  af


sub_35e9:
;Unknown; related to 5 baud address tx/tx
    bt mem_fe2c.2,lab_35f6  ;35e9  ac 2c 0a
    bt mem_fe2c.5,lab_35f6  ;35ec  dc 2c 07
    bt mem_fe2c.3,lab_35f6  ;35ef  bc 2c 04
    clr1 mem_fe7a.5         ;35f2  5b 7a
    br lab_362d_br_lab_36ad_ret ;35f4  fa 37

lab_35f6:
    bt mem_fe7a.2,lab_362d_br_lab_36ad_ret  ;35f6  ac 7a 34
    bt mem_fe7a.4,lab_362d_br_lab_36ad_ret  ;35f9  cc 7a 31
    bt mem_fe7a.5,lab_362f  ;35fc  dc 7a 30
    bf p2.4,lab_3607        ;35ff  31 43 02 04  Branch if P24/RxD0 = 0
    clr1 mem_fe7b.6         ;3603  6b 7b
    br lab_362d_br_lab_36ad_ret ;3605  fa 26

lab_3607:
    clr1 mem_fe65.6         ;3607  6b 65

    clr1 shadow_p2.6        ;3609  6b cc        P26 = 0 (K-line resistor = disconnected;
                            ;                            radio is not acting as a tester)
    mov a,shadow_p2         ;360b  f0 cc
    mov p2,a                ;360d  f2 02

    set1 shadow_p2.5        ;360f  5a cc        P25/TxD0 = 1
    mov a,shadow_p2         ;3611  f0 cc
    mov p2,a                ;3613  f2 02
    bt mem_fe7b.6,lab_362d_br_lab_36ad_ret  ;3615  ec 7b 15
    set1 mem_fe7a.5         ;3618  5a 7a
    clr1 mem_fe7a.6         ;361a  6b 7a
    mov a,#0x00             ;361c  a1 00
    mov !mem_f072,a         ;361e  9e 72 f0
    mov a,#0x00             ;3621  a1 00
    mov !kwp_tx_bit_count,a ;3623  9e 76 f0     KWP1281 bit count for 5 baud init = 0
    mov a,#0x00             ;3626  a1 00
    mov !mem_f075,a         ;3628  9e 75 f0
    clr1 mem_fe7b.5         ;362b  5b 7b

lab_362d_br_lab_36ad_ret:
    br lab_36ad_ret             ;362d  fa 7e

lab_362f:
    bt mem_fe7a.6,lab_3649  ;362f  ec 7a 17
    bf p2.4,lab_3650        ;3632  31 43 02 1a  Branch if P24/RxD0 = 0
    set1 mem_fe7a.6         ;3636  6a 7a

lab_3638:
    mov a,!mem_f072         ;3638  8e 72 f0
    inc a                   ;363b  41
    mov !mem_f072,a         ;363c  9e 72 f0
    cmp a,#0x19             ;363f  4d 19
    bnc lab_365d            ;3641  9d 1a
    cmp a,#0x04             ;3643  4d 04
    bc lab_367d             ;3645  8d 36
    br lab_36ab             ;3647  fa 62

lab_3649:
    bt p2.4,lab_3650        ;3649  cc 02 04     Branch if P24/RxD0 = 1
    clr1 mem_fe7a.6         ;364c  6b 7a
    br lab_3638             ;364e  fa e8

lab_3650:
    mov a,!mem_f072         ;3650  8e 72 f0
    inc a                   ;3653  41
    mov !mem_f072,a         ;3654  9e 72 f0
    cmp a,#0x19             ;3657  4d 19
    bnc lab_365d            ;3659  9d 02
    br lab_36ad_ret             ;365b  fa 50

lab_365d:
    mov a,#0x00             ;365d  a1 00
    mov !mem_f072,a         ;365f  9e 72 f0

    mov a,!kwp_tx_bit_count ;3662  8e 76 f0     A = KWP1281 bit count for 5 baud init
    inc a                   ;3665  41           Increment it
    mov !kwp_tx_bit_count,a ;3666  9e 76 f0     Save incremented bit count

    cmp a,#0x09             ;3669  4d 09
    bz lab_3697_ret         ;366b  ad 2a        Branch to just return

    cmp a,#0x09             ;366d  4d 09        All bits of KWP1281 address byte received?
    bnc lab_3699            ;366f  9d 28        Yes: branch to process the address

    ;Rotate new bit into the KWP1281 address byte being received
    mov a,!mem_f075         ;3671  8e 75 f0
    mov1 cy,mem_fe7a.6      ;3674  71 64 7a
    rorc a,1                ;3677  25
    mov !mem_f075,a         ;3678  9e 75 f0
    br lab_36ad_ret         ;367b  fa 30

lab_367d:
    mov a,#0x00             ;367d  a1 00
    mov !mem_f072,a         ;367f  9e 72 f0

    mov a,!kwp_tx_bit_count ;3682  8e 76 f0     A = KWP1281 bit count for 5 baud init
    cmp a,#0x09             ;3685  4d 09
    bz lab_3693             ;3687  ad 0a

    mov a,!mem_f075         ;3689  8e 75 f0
    xor a,#0x80             ;368c  7d 80
    mov !mem_f075,a         ;368e  9e 75 f0
    br lab_36ad_ret         ;3691  fa 1a          Branch to just return

lab_3693:
    bf mem_fe7a.6,lab_36ae  ;3693  31 63 7a 17

lab_3697_ret:
    br lab_36ad_ret         ;3697  fa 14          Branch to just return

lab_3699:
    bf mem_fe7a.6,lab_36ae  ;3699  31 63 7a 11
    mov a,!mem_f075         ;369d  8e 75 f0
    call !sub_36e1          ;36a0  9a e1 36
    bc lab_36ab             ;36a3  8d 06
    mov a,!mem_f075         ;36a5  8e 75 f0
    call !sub_36bb          ;36a8  9a bb 36       Compare KWP1281 address in A, sets a bunch of state

lab_36ab:
    clr1 mem_fe7a.5         ;36ab  5b 7a

lab_36ad_ret:
    ret                     ;36ad  af

lab_36ae:
    clr1 mem_fe7b.6         ;36ae  6b 7b
    mov a,!mem_f075         ;36b0  8e 75 f0
    cmp a,#0x00             ;36b3  4d 00
    bnz lab_36ab            ;36b5  bd f4
    set1 mem_fe7b.6         ;36b7  6a 7b
    br lab_36ab             ;36b9  fa f0

sub_36bb:
;Compare KWP1281 address in A, sets a bunch of state
;
    movw hl,#kwp_addresses+1 ;36bb  16 23 b0      HL = pointer to KWP1281 addresses table
    mov b,#0x03             ;36be  a3 03          B = index to last entry in table
lab_36c0:
    cmp a,[hl+b]            ;36c0  31 4b          Compare A to address in table
    bz lab_36c7             ;36c2  ad 03          Branch if address matches
    dbnz b,lab_36c0         ;36c4  8b fa
    ret                     ;36c6  af

lab_36c7:
;KWP1281 address found in table
    movw hl,#kwp_modes+1    ;36c7  16 28 b0     HL = pointer to KWP1281 modes table
    mov a,[hl+b]            ;36ca  ab           A = value from table (0=normal, 1="radio as tester")
    cmp a,#0x00             ;36cb  4d 00        Is it a normal address (i.e. not address 0x3F for cluster security)?
    bz lab_36d0             ;36cd  ad 01          Yes: Continue
    ret                     ;36cf  af             No, it's "radio as tester" for cluster security: Just return

lab_36d0:
;KWP1281 address is recognized and is not 0x3F (cluster security)
    mov a,b                 ;36d0  63
    mov !kwp_addr_idx,a     ;36d1  9e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    set1 mem_fe7c.0         ;36d4  0a 7c
    mov a,#0x01             ;36d6  a1 01        0x01 = Sets UART baud and mode
    mov !mem_fbc9,a         ;36d8  9e c9 fb
    call !kwp_clear_state   ;36db  9a a8 34     Clear many KWP1281 state bits
    set1 mem_fe7a.2         ;36de  2a 7a
    ret                     ;36e0  af

sub_36e1:
    bf mem_fe7b.0,lab_3705  ;36e1  31 03 7b 20
    bt mem_fe7a.7,lab_36ff  ;36e5  fc 7a 17
    rol a,1                 ;36e8  26
    xor1 cy,a.7             ;36e9  61 ff
    xor1 cy,a.6             ;36eb  61 ef
    xor1 cy,a.5             ;36ed  61 df
    xor1 cy,a.4             ;36ef  61 cf
    xor1 cy,a.3             ;36f1  61 bf
    xor1 cy,a.2             ;36f3  61 af
    xor1 cy,a.1             ;36f5  61 9f
    bnc lab_36ff            ;36f7  9d 06
    bt mem_fe7a.7,lab_3714  ;36f9  fc 7a 18
    clr1 cy                 ;36fc  21
    br lab_3714             ;36fd  fa 15

lab_36ff:
    bt mem_fe7a.7,lab_3714  ;36ff  fc 7a 12
    set1 cy                 ;3702  20
    br lab_3714             ;3703  fa 0f

lab_3705:
    rol a,1                 ;3705  26
    bc lab_370e             ;3706  8d 06
    bt mem_fe7a.7,lab_3714  ;3708  fc 7a 09
    set1 cy                 ;370b  20
    br lab_3714             ;370c  fa 06

lab_370e:
    bt mem_fe7a.7,lab_3714  ;370e  fc 7a 03
    clr1 cy                 ;3711  21
    br lab_3714             ;3712  fa 00

lab_3714:
    ret                     ;3714  af

lab_3715:
    bt rb0_b.7,lab_371c     ;3715  fc fb 04
    bf rb0_b.6,lab_3722     ;3718  31 63 fb 06

lab_371c:
    mov a,#0xc0             ;371c  a1 c0
    callt [0x0042]          ;371e  c3           Calls sub_09b9
    call !sub_3755          ;371f  9a 55 37

lab_3722:
    mov a,#0x0c             ;3722  a1 0c
    callt [0x0046]          ;3724  c7           Calls sub_096c
    call !sub_374a          ;3725  9a 4a 37
    bnz sub_3755            ;3728  bd 2b
    mov a,mem_fe2a          ;372a  f0 2a
    mov b,a                 ;372c  73
    movw hl,#mem_b040+1     ;372d  16 41 b0
    callf !table_get_word   ;3730  4c 48        Load DE with word at position B in table [HL]
    bc sub_3755             ;3732  8d 21        Branch if table lookup failed
    movw ax,#lab_373b       ;3734  10 3b 37
    push ax                 ;3737  b1
    movw ax,de              ;3738  c4
    br ax                   ;3739  31 98

lab_373b:
    mov a,!mem_fb0c         ;373b  8e 0c fb
    cmp a,#0x00             ;373e  4d 00
    bnz lab_3747            ;3740  bd 05
    mov a,#0x0a             ;3742  a1 0a
    mov !mem_fb0c,a         ;3744  9e 0c fb

lab_3747:
    call !sub_375d          ;3747  9a 5d 37

sub_374a:
    movw de,#mem_fb7a       ;374a  14 7a fb
    movw hl,#mem_fe2a       ;374d  16 2a fe
    mov b,#0x02             ;3750  a3 02
    br !lab_0bf4            ;3752  9b f4 0b

sub_3755:
    mov mem_fe2a,#0x00      ;3755  11 2a 00
    mov mem_fe2b,#0x00      ;3758  11 2b 00
    br sub_374a             ;375b  fa ed

sub_375d:
    clr1 pm8.0              ;375d  71 0b 28
    mov a,shadow_p8         ;3760  f0 d2
    mov p8,a                ;3762  f2 08
    clr1 pm9.7              ;3764  71 7b 29
    mov a,shadow_p9         ;3767  f0 d3
    mov p9,a                ;3769  f2 09
    clr1 pm9.4              ;376b  71 4b 29
    mov a,shadow_p9         ;376e  f0 d3
    mov p9,a                ;3770  f2 09
    clr1 pm8.2              ;3772  71 2b 28
    mov a,shadow_p8         ;3775  f0 d2
    mov p8,a                ;3777  f2 08
    clr1 pm8.1              ;3779  71 1b 28
    mov a,shadow_p8         ;377c  f0 d2
    mov p8,a                ;377e  f2 08
    ret                     ;3780  af

sub_3781:
    mov a,#0x02             ;3781  a1 02
    mov !mem_fb0c,a         ;3783  9e 0c fb

sub_3786:
    mov mem_fe2a,#0x01      ;3786  11 2a 01
    clr1 shadow_p9.7        ;3789  7b d3
    clr1 shadow_p9.4        ;378b  4b d3
    clr1 shadow_p8.2        ;378d  2b d2        P82=0 (Monsoon amplifier power off)

    call !switched_5v_on    ;378f  9a 06 3a     Turn the switched 5V supply on

    mov a,!mem_fb0c         ;3792  8e 0c fb
    cmp a,#0x00             ;3795  4d 00
    bz lab_379a             ;3797  ad 01
    ret                     ;3799  af

lab_379a:
    clr1 pm7.0              ;379a  71 0b 27     PM70=output
    clr1 shadow_p7.0        ;379d  0b d1        P70=0
    mov a,shadow_p7         ;379f  f0 d1
    mov p7,a                ;37a1  f2 07

    mov a,#0x01             ;37a3  a1 01
    callf !sub_09d3         ;37a5  1c d3

lab_37a7:
    mov mem_fe2a,#0x02      ;37a7  11 2a 02
    clr1 shadow_p9.7        ;37aa  7b d3
    mov a,#0x00             ;37ac  a1 00
    mov !mem_fb0c,a         ;37ae  9e 0c fb
    mov !mem_fb1f,a         ;37b1  9e 1f fb

lab_37b4:
    mov mem_fe2a,#0x03      ;37b4  11 2a 03
    clr1 shadow_p9.4        ;37b7  4b d3
    mov a,!mem_fb0c         ;37b9  8e 0c fb
    cmp a,#0x00             ;37bc  4d 00
    bz lab_37c1             ;37be  ad 01
    ret                     ;37c0  af

lab_37c1:
    br lab_37c5             ;37c1  fa 02

lab_37c3:
    clr1 mem_fe61.4         ;37c3  4b 61

lab_37c5:
    mov mem_fe2a,#0x04      ;37c5  11 2a 04
    mov a,#0x01             ;37c8  a1 01
    callf !sub_09d3         ;37ca  1c d3
    mov mem_fe2b,#0x40      ;37cc  11 2b 40

    call !switched_5v_on    ;37cf  9a 06 3a     Turn the switched 5V supply on

    bf mem_fe61.5,lab_37da  ;37d2  31 53 61 04
    set1 shadow_p9.4        ;37d6  4a d3
    br lab_37ef             ;37d8  fa 15

lab_37da:
    mov mem_fe2a,#0x05      ;37da  11 2a 05
    mov a,#0x0a             ;37dd  a1 0a
    mov !mem_fb0c,a         ;37df  9e 0c fb

lab_37e2:
    mov a,!mem_fb0c         ;37e2  8e 0c fb
    cmp a,#0x00             ;37e5  4d 00
    bz lab_37ea             ;37e7  ad 01
    ret                     ;37e9  af

lab_37ea:
    mov mem_fe2a,#0x04      ;37ea  11 2a 04
    clr1 shadow_p9.4        ;37ed  4b d3

lab_37ef:
    bt mem_fe65.5,lab_37f6  ;37ef  dc 65 04
    clr1 shadow_p8.2        ;37f2  2b d2        P82=0 (Monsoon amplifier power off)
    clr1 shadow_p8.1        ;37f4  1b d2

lab_37f6:
    bt mem_fe61.5,lab_37fb  ;37f6  dc 61 02
    clr1 shadow_p9.7        ;37f9  7b d3

lab_37fb:
    mov mem_fe2a,#0x04      ;37fb  11 2a 04
    bt mem_fe2c.7,lab_3804  ;37fe  fc 2c 03
    br !lab_38dd            ;3801  9b dd 38

lab_3804:
    bt mem_fe2c.5,lab_3830  ;3804  dc 2c 29
    bt mem_fe2c.3,lab_3830  ;3807  bc 2c 26
    ret                     ;380a  af

lab_380b:
    mov mem_fe2a,#0x06      ;380b  11 2a 06
    mov mem_fe2b,#0x20      ;380e  11 2b 20

    call !switched_5v_on    ;3811  9a 06 3a     Turn the switched 5V supply on

    bf mem_fe61.5,lab_381c  ;3814  31 53 61 04
    set1 shadow_p9.4        ;3818  4a d3
    br lab_381e             ;381a  fa 02

lab_381c:
    clr1 shadow_p9.4        ;381c  4b d3

lab_381e:
    bt mem_fe65.5,lab_3823  ;381e  dc 65 02
    clr1 shadow_p8.1        ;3821  1b d2

lab_3823:
    bt mem_fe61.5,lab_3828  ;3823  dc 61 02
    clr1 shadow_p9.7        ;3826  7b d3

lab_3828:
    bt mem_fe2c.5,lab_3830  ;3828  dc 2c 05
    bt mem_fe2c.3,lab_3830  ;382b  bc 2c 02
    br lab_37c3             ;382e  fa 93

lab_3830:
    clr1 mem_fe61.4         ;3830  4b 61
    set1 shadow_p8.1        ;3832  1a d2
    set1 shadow_p8.2        ;3834  2a d2        P82=1 (Monsoon amplifier power on)

lab_3836:
    mov mem_fe2a,#0x07      ;3836  11 2a 07
    clr1 mem_fe2b.7         ;3839  7b 2b        Clear bit = do more than just blink the LED in INTWTNI0
    clr1 mem_fe2b.6         ;383b  6b 2b
    bf mem_fe2c.5,lab_384c  ;383d  31 53 2c 0b
    bt mem_fe2b.4,lab_3856  ;3841  cc 2b 12
    clr1 mem_fe7d.4         ;3844  4b 7d
    set1 mem_fe7d.3         ;3846  3a 7d
    set1 mem_fe2b.4         ;3848  4a 2b
    br lab_3856             ;384a  fa 0a

lab_384c:
    bf mem_fe2b.4,lab_3856  ;384c  31 43 2b 06
    set1 mem_fe7d.4         ;3850  4a 7d
    clr1 mem_fe7d.3         ;3852  3b 7d
    clr1 mem_fe2b.4         ;3854  4b 2b

lab_3856:
    set1 mem_fe2b.5         ;3856  5a 2b
    bt mem_fe2c.6,lab_385d  ;3858  ec 2c 02
    clr1 mem_fe2b.5         ;385b  5b 2b

lab_385d:
    bt shadow_p9.4,lab_3870 ;385d  cc d3 10
    mov mem_fe2a,#0x08      ;3860  11 2a 08
    mov a,#0x73             ;3863  a1 73
    mov !mem_fb0c,a         ;3865  9e 0c fb

lab_3868:
    mov a,!mem_fb0c         ;3868  8e 0c fb
    cmp a,#0x00             ;386b  4d 00
    bz lab_3870             ;386d  ad 01
    ret                     ;386f  af

lab_3870:
    mov mem_fe2a,#0x07      ;3870  11 2a 07
    bt mem_fe65.5,lab_3878  ;3873  dc 65 02
    set1 shadow_p9.4        ;3876  4a d3

lab_3878:
    bt mem_fe2c.3,lab_387d  ;3878  bc 2c 02
    br lab_38d0             ;387b  fa 53

lab_387d:
    bf mem_fe61.5,lab_38a2  ;387d  31 53 61 21
    set1 shadow_p9.7        ;3881  7a d3
    mov a,!mem_fb71         ;3883  8e 71 fb
    cmp a,#0xc3             ;3886  4d c3
    bnz lab_38a2            ;3888  bd 18
    mov mem_fe2a,#0x0a      ;388a  11 2a 0a

lab_388d:
    bt mem_fe61.5,lab_38dc  ;388d  dc 61 4c
    clr1 shadow_p9.7        ;3890  7b d3
    mov mem_fe2a,#0x0b      ;3892  11 2a 0b
    mov a,#0x0a             ;3895  a1 0a
    mov !mem_fb0c,a         ;3897  9e 0c fb

lab_389a:
    mov a,!mem_fb0c         ;389a  8e 0c fb
    cmp a,#0x00             ;389d  4d 00
    bz lab_38a2             ;389f  ad 01
    ret                     ;38a1  af

lab_38a2:
    mov mem_fe2a,#0x07      ;38a2  11 2a 07
    bf mem_fe2c.5,lab_38dc  ;38a5  31 53 2c 33

    call !switched_5v_on    ;38a9  9a 06 3a     Turn the switched 5V supply on

    bt mem_fe61.4,lab_38c7  ;38ac  cc 61 18
    mov mem_fe2a,#0x09      ;38af  11 2a 09
    mov a,#0x55             ;38b2  a1 55
    mov !mem_fb0c,a         ;38b4  9e 0c fb

lab_38b7:
    mov a,!mem_fb0c         ;38b7  8e 0c fb
    cmp a,#0x00             ;38ba  4d 00
    bz lab_38c3             ;38bc  ad 05
    bf mem_fe2c.3,lab_38d0  ;38be  31 33 2c 0e
    ret                     ;38c2  af

lab_38c3:
    set1 mem_fe7e.0         ;38c3  0a 7e
    set1 mem_fe61.4         ;38c5  4a 61

lab_38c7:
    mov mem_fe2a,#0x07      ;38c7  11 2a 07
    bt mem_fe65.5,lab_38cf  ;38ca  dc 65 02
    set1 shadow_p9.7        ;38cd  7a d3

lab_38cf:
    ret                     ;38cf  af

lab_38d0:
    call !sub_a74b          ;38d0  9a 4b a7
    set1 mem_fe7d.4         ;38d3  4a 7d
    clr1 shadow_p8.1        ;38d5  1b d2
    clr1 shadow_p8.2        ;38d7  2b d2        P82=0 (Monsoon amplifier power off)
    br !lab_37c3            ;38d9  9b c3 37

lab_38dc:
    ret                     ;38dc  af

lab_38dd:
    mov mem_fe2a,#0x0c      ;38dd  11 2a 0c
    mov a,#0x00             ;38e0  a1 00
    mov !mem_fb26,a         ;38e2  9e 26 fb
    mov a,#0x05             ;38e5  a1 05
    mov !mem_fb0c,a         ;38e7  9e 0c fb
    br lab_3924             ;38ea  fa 38

lab_38ec:
    mov mem_fe2a,#0x0c      ;38ec  11 2a 0c
    mov a,#0x05             ;38ef  a1 05
    mov !mem_fb0c,a         ;38f1  9e 0c fb
    bf mem_fe2c.7,lab_38fb  ;38f4  31 73 2c 03
    br !sub_3781            ;38f8  9b 81 37

lab_38fb:
    mov a,!mem_fb26         ;38fb  8e 26 fb
    cmp a,#0x00             ;38fe  4d 00
    bz lab_392c             ;3900  ad 2a
    call !sub_a74b          ;3902  9a 4b a7
    bc lab_390e             ;3905  8d 07
    mov a,!mem_fbff         ;3907  8e ff fb       TODO mem_fbff is I2C attempt counter
    cmp a,#0x00             ;390a  4d 00
    bz lab_390f             ;390c  ad 01

lab_390e:
    ret                     ;390e  af

lab_390f:
    mov b,#0x0b             ;390f  a3 0b
    movw hl,#mem_fb85       ;3911  16 85 fb

lab_3914:
    mov a,[hl+b]            ;3914  ab
    and a,#0xe0             ;3915  5d e0
    bnz lab_391d            ;3917  bd 04
    dbnz b,lab_3914         ;3919  8b f9
    br lab_392c             ;391b  fa 0f

lab_391d:
    mov a,!mem_fb25         ;391d  8e 25 fb
    cmp a,#0x00             ;3920  4d 00
    bnz lab_392b            ;3922  bd 07

lab_3924:
    mov a,#0x00             ;3924  a1 00
    mov !mem_fb25,a         ;3926  9e 25 fb
    set1 mem_fe7e.4         ;3929  4a 7e

lab_392b:
    ret                     ;392b  af

lab_392c:
    bf mem_fe62.0,lab_393e  ;392c  31 03 62 0e
    clr1 mem_fe62.0         ;3930  0b 62
    call !sub_4109          ;3932  9a 09 41
    bf mem_fe62.0,lab_393e  ;3935  31 03 62 05
    mov a,#0x03             ;3939  a1 03
    call !sub_2cae          ;393b  9a ae 2c       Write 0 to mem_f218 and A to mem_f219 via eeram_wr_byte_hl

lab_393e:
    call !sub_8090          ;393e  9a 90 80       Perform ROM checksum if not already performed
    mov a,#0x01             ;3941  a1 01
    callf !sub_09d7         ;3943  1c d7
    clr1 shadow_p9.7        ;3945  7b d3
    clr1 shadow_p9.4        ;3947  4b d3
    mov a,shadow_p9         ;3949  f0 d3
    mov p9,a                ;394b  f2 09
    mov a,#0x04             ;394d  a1 04
    mov !mem_fb0c,a         ;394f  9e 0c fb

lab_3952:
    mov mem_fe2a,#0x0d      ;3952  11 2a 0d
    mov a,!mem_fb0c         ;3955  8e 0c fb
    cmp a,#0x00             ;3958  4d 00
    bz lab_395d_power_off_and_halt ;395a  ad 01
    ret                     ;395c  af

lab_395d_power_off_and_halt:
    call !switched_5v_off_p70_1 ;395d  9a 10 3a     Turn the switched 5V supply off (also P70=1???)
    mov asim0,#0x00         ;3960  13 a0 00     UART0 mode register = 0 (UART fully disabled)
    mov brgc0,#0x7e         ;3963  13 a2 7e     Baud rate generator = 546 baud (???)
    mov asim0,#0x48         ;3966  13 a0 48     UART0 mode register = RX only, N81
    call !sub_3acf          ;3969  9a cf 3a     Disable I2C, disable timers, set many pins to inputs
    mov mem_fe2a,#0x0e      ;396c  11 2a 0e
    mov mem_fe2b,#0x80      ;396f  11 2b 80
    call !sub_374a          ;3972  9a 4a 37
    clr1 mem_fe7b.7         ;3975  7b 7b
    clr1 mem_fe7a.5         ;3977  5b 7a

lab_3979_ei_halt:
;Enable interrupts then halt
    ei                      ;3979  7a 1e
    halt                    ;397b  71 10

lab_397d:
    mov a,#wd_run_irq       ;397d  a1 80        (Re-)Start watchdog in interval mode (Maskable INTWDT when watchdog fires)
    mov !wdtm,a             ;397f  9e f9 ff     Set watchdog mode
    bf mem_fe7b.7,lab_3991  ;3982  31 73 7b 0b
    call !sub_3a23          ;3986  9a 23 3a
    bf mem_fe7b.5,lab_3991  ;3989  31 53 7b 04
    clr1 mem_fe7b.5         ;398d  5b 7b
    br lab_39ed_power_on_and_start  ;398f  fa 5c        Branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start

lab_3991:
    btclr mem_fe7b.5,lab_39ed_power_on_and_start ;3991  31 51 7b 58  If ??? clear bit and Branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    bf p2.4,lab_39a2        ;3995  31 43 02 09    Branch if P24/RxD0 = 0
    bf mem_fe7b.6,lab_39a2  ;3999  31 63 7b 05
    clr1 mem_fe7b.6         ;399d  6b 7b
    set1 asim0.6            ;399f  71 6a a0       RXE0=1 (enable UART0 receive)

lab_39a2:
    call !sub_4902_illum    ;39a2  9a 02 49     Read illumination voltage (P92/ANI20) and ???
    bt mem_fe65.1,lab_39ed_power_on_and_start  ;39a5  9c 65 45     If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    bt mem_fe7d.6,lab_39ed_power_on_and_start  ;39a8  ec 7d 42     If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    bt mem_fe67.0,lab_39ed_power_on_and_start  ;39ab  8c 67 3f     If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    mov a,!mem_f1e9         ;39ae  8e e9 f1
    bf a.0,lab_39bf         ;39b1  31 0f 0b
    bt p0.4,lab_39bc        ;39b4  cc 00 05     Branch if the POWER key is not being pressed

    ;POWER key is being pressed
    bt mem_fe66.7,lab_39bf  ;39b7  fc 66 05
    br lab_39ed_power_on_and_start   ;39ba  fa 31        If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start

lab_39bc:
    bt mem_fe66.7,lab_39ed_power_on_and_start  ;39bc  fc 66 2e     If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start

lab_39bf:
    bt mem_fe7d.7,lab_39ed_power_on_and_start  ;39bf  fc 7d 2b     If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    set1 pm9.0              ;39c2  71 0a 29     PM90=input (S-Contact: 0=off, 1=on)
    bf mem_fe2c.2,lab_39d4  ;39c5  31 23 2c 0b
    mov1 cy,p9.0            ;39c9  71 04 09     CY = P90 (S-Contact: 0=off, 1=on)
    mov1 mem_fe2c.2,cy      ;39cc  71 21 2c
    mov1 mem_fe2c.6,cy      ;39cf  71 61 2c
    br lab_39d7             ;39d2  fa 03

lab_39d4:
    bt p9.0,lab_39ed_power_on_and_start ;39d4  8c 09 16     If P90=1 (S-Contact is on) branch to:
                                        ;                     turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    ;S-Contact is off

lab_39d7:
    bt mem_fe2c.3,lab_39ed_power_on_and_start  ;39d7  bc 2c 13     If ??? branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    bt mem_fe62.5,lab_39ed_power_on_and_start  ;39da  dc 62 10     If INTP1 occurred branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start
    bf p6.7,lab_39eb_br_ei_halt ;39dd  31 73 06 0a
    cmp mem_fe4c,#0x00          ;39e1  c8 4c 00
    bnz lab_39eb_br_ei_halt     ;39e4  bd 05
    cmp mem_fe50,#0x01          ;39e6  c8 50 01
    bnz lab_39ed_power_on_and_start ;39e9  bd 02        Branch to turn on switched 5V, P70=1(???), call unknown, then cold or warm start

lab_39eb_br_ei_halt:
    br lab_3979_ei_halt         ;39eb  fa 8c        Branch to enable interrupts then halt

lab_39ed_power_on_and_start:
;PM70=output, P70=1 ???
;Call to turn on switched 5V power
;Call unknown subroutine sub_3dbd
;Branch to cold or warm start
    clr1 pm7.0              ;39ed  71 0b 27     PM70=output
    set1 shadow_p7.0        ;39f0  0a d1        P70=1
    mov a,shadow_p7         ;39f2  f0 d1
    mov p7,a                ;39f4  f2 07

    call !switched_5v_on    ;39f6  9a 06 3a     Turn the switched 5V supply on

    clr1 mem_fe2b.7         ;39f9  7b 2b        Clear bit = do more than just blink the LED in INTWTNI0
    mov mem_fe2a,#0x00      ;39fb  11 2a 00
    mov a,#0x02             ;39fe  a1 02
    call !sub_3dbd          ;3a00  9a bd 3d
    br !cold_or_warm_start  ;3a03  9b cf 0d

switched_5v_on:
;Turn the switched 5V supply on
;PM80=output, P80=1  Powers up uPD16432B, TEA6840H, SAA7705H, HEF401060BT, TDA3613T, TA2025P
    clr1 pm8.0              ;3a06  71 0b 28     PM80 = output
    set1 shadow_p8.0        ;3a09  0a d2        P80 = 1
    mov a,shadow_p8         ;3a0b  f0 d2
    mov p8,a                ;3a0d  f2 08
    ret                     ;3a0f  af

switched_5v_off_p70_1:
;Turn the switched 5V supply off (also P70=1???)
;PM80=output, P80=0  Powers down uPD16432B, TEA6840H, SAA7705H, HEF401060BT, TDA3613T, TA2025P
;PM70=output, P7.0=1 ???
    clr1 pm8.0              ;3a10  71 0b 28     PM80 = output
    clr1 shadow_p8.0        ;3a13  0b d2        P80 = 0
    mov a,shadow_p8         ;3a15  f0 d2
    mov p8,a                ;3a17  f2 08

    clr1 pm7.0              ;3a19  71 0b 27     PM70 = output
    set1 shadow_p7.0        ;3a1c  0a d1        P70 = 1
    mov a,shadow_p7         ;3a1e  f0 d1
    mov p7,a                ;3a20  f2 07
    ret                     ;3a22  af

sub_3a23:
    bf mem_fe7a.5,lab_3a41  ;3a23  31 53 7a 1a
    set1 mem_fe7a.6         ;3a27  6a 7a
    bt p2.4,lab_3a5e        ;3a29  cc 02 32     Branch if P24/RxD0 = 1
    clr1 mem_fe7a.6         ;3a2c  6b 7a
    br lab_3a5e             ;3a2e  fa 2e

lab_3a30:
    mov a,!mem_f072         ;3a30  8e 72 f0
    inc a                   ;3a33  41
    mov !mem_f072,a         ;3a34  9e 72 f0
    cmp a,#0x03             ;3a37  4d 03
    bnc lab_3a6b            ;3a39  9d 30
    cmp a,#0x02             ;3a3b  4d 02
    bc lab_3a8d             ;3a3d  8d 4e
    br lab_3ab8_disable_uart_ret  ;3a3f  fa 77   Disable UART and return

lab_3a41:
    bt mem_fe2c.2,lab_3a47  ;3a41  ac 2c 03
    br !lab_3acb_ret        ;3a44  9b cb 3a     Branch to return

lab_3a47:
    mov asim0,#0x00         ;3a47  13 a0 00     UART0 mode register = 0 (UART fully disabled)
    set1 mk0h.1             ;3a4a  71 1a e5     Set SERMK0 (disables INTSER0)
    set1 mem_fe7a.5         ;3a4d  5a 7a
    clr1 mem_fe7a.6         ;3a4f  6b 7a
    mov a,#0x00             ;3a51  a1 00
    mov !mem_f072,a         ;3a53  9e 72 f0
    mov !kwp_tx_bit_count,a ;3a56  9e 76 f0     KWP1281 bit count for 5 baud init = 0
    mov !mem_f075,a         ;3a59  9e 75 f0
    br lab_3acb_ret         ;3a5c  fa 6d        Branch to return

lab_3a5e:
    mov a,!mem_f072         ;3a5e  8e 72 f0
    inc a                   ;3a61  41
    mov !mem_f072,a         ;3a62  9e 72 f0
    cmp a,#0x03             ;3a65  4d 03
    bnc lab_3a6b            ;3a67  9d 02
    br lab_3acb_ret         ;3a69  fa 60        Branch to return

lab_3a6b:
    mov a,#0x00             ;3a6b  a1 00
    mov !mem_f072,a         ;3a6d  9e 72 f0

    mov a,!kwp_tx_bit_count ;3a70  8e 76 f0     A = KWP1281 bit count for 5 baud init = 0
    inc a                   ;3a73  41           Increment it
    mov !kwp_tx_bit_count,a ;3a74  9e 76 f0     Save incremented bit count

    cmp a,#0x09             ;3a77  4d 09
    bc lab_3a81             ;3a79  8d 06
    cmp a,#0x0b             ;3a7b  4d 0b
    bz lab_3aa1             ;3a7d  ad 22

    br lab_3acb_ret         ;3a7f  fa 4a        Branch to return

lab_3a81:
    mov a,!mem_f075         ;3a81  8e 75 f0
    mov1 cy,mem_fe7a.6      ;3a84  71 64 7a
    rolc a,1                ;3a87  27
    mov !mem_f075,a         ;3a88  9e 75 f0
    br lab_3acb_ret         ;3a8b  fa 3e        Branch to return

lab_3a8d:
    mov a,#0x00             ;3a8d  a1 00
    mov !mem_f072,a         ;3a8f  9e 72 f0

    mov a,!kwp_tx_bit_count ;3a92  8e 76 f0     A = KWP1281 bit count for 5 baud init
    cmp a,#0x09             ;3a95  4d 09
    bz lab_3a9b             ;3a97  ad 02
    br lab_3acb_ret         ;3a99  fa 30        Branch to return

lab_3a9b:
    bf mem_fe7a.6,lab_3ab8_disable_uart_ret ;3a9b  31 63 7a 19   Disable UART and return
    br lab_3acb_ret                         ;3a9f  fa 2a         Branch to return

lab_3aa1:
    bf mem_fe7a.6,lab_3ab8_disable_uart_ret ;3aa1  31 63 7a 13   Disable UART and return
    mov a,!mem_f075                         ;3aa5  8e 75 f0
    cmp a,#0x35                             ;3aa8  4d 35
    bz lab_3ab0                             ;3aaa  ad 04
    cmp a,#0x6b                             ;3aac  4d 6b
    bnz lab_3ab8_disable_uart_ret           ;3aae  bd 08         Disable UART and return

lab_3ab0:
    set1 mem_fe7b.5         ;3ab0  5a 7b
    clr1 mem_fe7a.5         ;3ab2  5b 7a
    clr1 mem_fe7b.7         ;3ab4  7b 7b
    br lab_3acb_ret         ;3ab6  fa 13      Branch to return

lab_3ab8_disable_uart_ret:
    clr1 mem_fe7a.5         ;3ab8  5b 7a
    clr1 mem_fe7b.7         ;3aba  7b 7b
    mov asim0,#0x00         ;3abc  13 a0 00   UART0 mode register = 0 (UART fully disabled)
    mov brgc0,#0x7e         ;3abf  13 a2 7e   Baud rate generator 0 = 546 baud (???)
    mov asim0,#0x48         ;3ac2  13 a0 48   UART0 mode register = RX only, N81
    clr1 mk0h.1             ;3ac5  71 1b e5   Clear SERMK0 (enables INTSER0)
    set1 pr0h.1             ;3ac8  71 1a e9   Set SERPR0 (makes INTSER0 low priority)

lab_3acb_ret:
    ret                     ;3acb  af

intp2_3acc:
;INTP2 interrupt handler
;Fires on rising edge of P02 (unknown input)
    set1 mem_fe61.7         ;3acc  7a 61      Set bit to indicate INTP2 occurred
    reti                    ;3ace  8f

sub_3acf:
;Disable I2C, disable timers, set many pins to inputs
    call !sub_6078          ;3acf  9a 78 60   Disable I2C, set SCL and SDA pins to inputs
    call !sub_4d63          ;3ad2  9a 63 4d   Disable timers and their interrupts, set uPD16432B pins to inputs

    ;P24/RXD0 connects to L9637D
    clr1 pu2.4              ;3ad5  71 4b 32   PU24 pull-up resistor disabled
    set1 pm2.4              ;3ad8  71 4a 22   PM24 = input

    ;P25/TXD0 connects to L9637D
    clr1 pu2.5              ;3adb  71 5b 32   PU25 pull-up resistor disabled
    set1 pm2.5              ;3ade  71 5a 22   PM25 = input

    ;P26 controls K-line resistor
    clr1 pu2.6              ;3ae1  71 6b 32   PU26 pull-up resistor disabled
    set1 pm2.6              ;3ae4  71 6a 22   PM26 = input

    clr1 shadow_p2.7        ;3ae7  7b cc
    mov a,shadow_p2         ;3ae9  f0 cc
    mov p2,a                ;3aeb  f2 02

    clr1 pu5.7              ;3aed  71 7b 35   PU57 pull-up resistor disabled
    set1 pm5.7              ;3af0  71 7a 25   PM57 = input
    clr1 pu7.0              ;3af3  71 0b 37
    set1 pm7.0              ;3af6  71 0a 27
    clr1 pu5.0              ;3af9  71 0b 35
    set1 pm5.0              ;3afc  71 0a 25
    clr1 pu5.1              ;3aff  71 1b 35
    set1 pm5.1              ;3b02  71 1a 25
    clr1 pu5.2              ;3b05  71 2b 35
    set1 pm5.2              ;3b08  71 2a 25
    clr1 pu5.3              ;3b0b  71 3b 35
    set1 pm5.3              ;3b0e  71 3a 25
    clr1 pu5.4              ;3b11  71 4b 35
    set1 pm5.4              ;3b14  71 4a 25
    clr1 pu5.5              ;3b17  71 5b 35
    set1 pm5.5              ;3b1a  71 5a 25
    set1 pm8.7              ;3b1d  71 7a 28
    clr1 pu3.6              ;3b20  71 6b 33
    set1 pm3.6              ;3b23  71 6a 23
    ret                     ;3b26  af

sub_3b27:
    mov prm00,#0x00         ;3b27  13 61 00
    ret                     ;3b2a  af

inttm000_3b2b:
    push ax                 ;3b2b  b1
    call !sub_3b80          ;3b2c  9a 80 3b
    pop ax                  ;3b2f  b0
    reti                    ;3b30  8f

;XXX sub_3b31 appears unused
sub_3b31:
    set1 shadow_p3.4        ;3b31  4a cd      P34 = 1
    br sub_3b37             ;3b33  fa 02

sub_3b35:
    clr1 shadow_p3.4        ;3b35  4b cd      P34 = 0

sub_3b37:
    clr1 pm3.4              ;3b37  71 4b 23   PM34 = output

sub_3b3a:
;Disable timers and their interrupts
    mov tmc00,#0x00         ;3b3a  13 60 00
    mov toc00,#0x00         ;3b3d  13 63 00
    set1 mk1l.1             ;3b40  71 1a e6   Set WTNIMK0 (disables INTWTNI0)
    set1 mk1l.2             ;3b43  71 2a e6   Set TMMK000 (disables INTTM000)
    movw ax,#0x0000         ;3b46  10 00 00
    movw !mem_f00a,ax       ;3b49  03 0a f0
    ret                     ;3b4c  af

sub_3b4d:
    movw mem_fed4,ax        ;3b4d  99 d4
    movw ax,!mem_f008       ;3b4f  02 08 f0
    movw mem_fed6,ax        ;3b52  99 d6
    call !sub_0bad          ;3b54  9a ad 0b
    movw ax,!mem_f00a       ;3b57  02 0a f0
    cmp a,b                 ;3b5a  61 4b
    bnz lab_3b6a            ;3b5c  bd 0c
    mov a,x                 ;3b5e  60
    cmp a,c                 ;3b5f  61 4a
    bnz lab_3b6a            ;3b61  bd 07
    cmpw ax,#0x0000         ;3b63  ea 00 00
    bnz lab_3b79            ;3b66  bd 11
    br lab_3b7f             ;3b68  fa 15

lab_3b6a:
    movw ax,bc              ;3b6a  c2
    cmpw ax,#0x0000         ;3b6b  ea 00 00
    bz sub_3b35             ;3b6e  ad c5
    movw !mem_f00a,ax       ;3b70  03 0a f0
    clr1 if1l.1             ;3b73  71 1b e2     Clear TMIF000 (INTTM000 interrupt flag)
    clr1 mk1l.1             ;3b76  71 1b e6     Clear WTNIMK0 (enables INTWTNI0)

lab_3b79:
    mov a,tmc00             ;3b79  f4 60
    cmp a,#0x0c             ;3b7b  4d 0c
    bnz sub_3b80            ;3b7d  bd 01

lab_3b7f:
    ret                     ;3b7f  af

sub_3b80:
    mov tmc00,#0x00         ;3b80  13 60 00
    set1 mk1l.1             ;3b83  71 1a e6     Set WTNIMK0 (disables INTWTNI0)
    set1 mk1l.2             ;3b86  71 2a e6     Set TMMK000 (disables INTTM000)
    movw ax,!mem_f00a       ;3b89  02 0a f0
    movw cr010,ax           ;3b8c  99 0c
    movw ax,!mem_f008       ;3b8e  02 08 f0
    movw cr000,ax           ;3b91  99 0a
    mov crc00,#0x00         ;3b93  13 62 00
    mov toc00,#0x1b         ;3b96  13 63 1b
    clr1 pm3.4              ;3b99  71 4b 23     PM34 = output
    clr1 shadow_p3.4        ;3b9c  4b cd        P34 = 0
    mov tmc00,#0x0c         ;3b9e  13 60 0c
    ret                     ;3ba1  af

sub_3ba2:
    movw !mem_f008,ax       ;3ba2  03 08 f0
    ret                     ;3ba5  af

sub_3ba6:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;3ba6  4d 0a
    bc lab_3bb0_lt_0x0a     ;3ba8  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;3baa  1d 0a      A = A - 0x0A
    add a,#'A               ;3bac  0d 41      Convert to ASCII 'A'-'F'
    br lab_3bb2_ret         ;3bae  fa 02
lab_3bb0_lt_0x0a:
    add a,#'0               ;3bb0  0d 30      Convert to ASCII '0'-'9'
lab_3bb2_ret:
    ret                     ;3bb2  af

lab_3bb3:
    call !sub_3bf7          ;3bb3  9a f7 3b
    bnz sub_3bea            ;3bb6  bd 32
    movw de,#mem_b05f       ;3bb8  14 5f b0
    mov a,#0x20             ;3bbb  a1 20
    bt mem_fe2c.5,lab_3bcc  ;3bbd  dc 2c 0c
    mov a,#0x08             ;3bc0  a1 08
    bt mem_fe2c.3,lab_3bcc  ;3bc2  bc 2c 07
    mov a,#0x40             ;3bc5  a1 40
    bt mem_fe2c.6,lab_3bcc  ;3bc7  ec 2c 02
    mov a,#0x80             ;3bca  a1 80

lab_3bcc:
    call !sub_5c64          ;3bcc  9a 64 5c
    bz lab_3be9             ;3bcf  ad 18
    cmp a,#0xff             ;3bd1  4d ff
    bz lab_3be9             ;3bd3  ad 14
    movw hl,#mem_b0a1+1     ;3bd5  16 a2 b0
    callf !table_get_word   ;3bd8  4c 48        Load DE with word at position B in table [HL]
    bc sub_3bea             ;3bda  8d 0e        Branch if table lookup failed
    movw ax,#lab_3be3       ;3bdc  10 e3 3b
    push ax                 ;3bdf  b1
    movw ax,de              ;3be0  c4
    br ax                   ;3be1  31 98

lab_3be3:
    call !sub_3e76          ;3be3  9a 76 3e
    mov b,#0x09             ;3be6  a3 09
    callt [0x0040]          ;3be8  c1           Calls sub_0994

lab_3be9:
    ret                     ;3be9  af

sub_3bea:
    mov a,#0x00             ;3bea  a1 00
    mov mem_fe2c,a          ;3bec  f2 2c
    clr1 mem_fe63.0         ;3bee  0b 63        Clear bit = it's OK to initiate a KWP1281 connection to the cluster
    clr1 mem_fe62.7         ;3bf0  7b 62
    mov a,#0x02             ;3bf2  a1 02
    call !sub_3dbd          ;3bf4  9a bd 3d

sub_3bf7:
    movw de,#mem_f18a       ;3bf7  14 8a f1
    movw hl,#mem_fe2c       ;3bfa  16 2c fe
    mov b,#0x01             ;3bfd  a3 01
    br !lab_0bf4            ;3bff  9b f4 0b

lab_3c02:
    ret                     ;3c02  af

lab_3c03:
    mov a,#0x02             ;3c03  a1 02
    br !sub_3dbd            ;3c05  9b bd 3d

lab_3c08:
    bt mem_fe62.7,lab_3c58      ;3c08  fc 62 4d
    bt mem_fe62.1,lab_3c58      ;3c0b  9c 62 4a
    bf mem_fe65.5,lab_3c1a      ;3c0e  31 53 65 08
    cmp mem_fe43_key,#0x33      ;3c12  c8 43 33
    bz lab_3c58                 ;3c15  ad 41
    call !kwp_logout_disconnect ;3c17  9a c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_3c1a:
    set1 mem_fe2c.3         ;3c1a  3a 2c
    mov a,!mem_f1e9         ;3c1c  8e e9 f1
    bf a.0,lab_3c29         ;3c1f  31 0f 07
    bt mem_fe66.7,lab_3c29  ;3c22  fc 66 04
    clr1 mem_fe2c.3         ;3c25  3b 2c
    br lab_3c58             ;3c27  fa 2f

lab_3c29:
    mov a,!mem_fb71         ;3c29  8e 71 fb
    cmp a,#0xc3             ;3c2c  4d c3
    bnz lab_3c3f            ;3c2e  bd 0f
    mov a,!mem_fb70         ;3c30  8e 70 fb
    cmp a,#0x06             ;3c33  4d 06
    bz lab_3c3f             ;3c35  ad 08
    cmp mem_fe43_key,#0x33  ;3c37  c8 43 33
    bnz lab_3c58            ;3c3a  bd 1c
    clr1 mem_fe2c.3         ;3c3c  3b 2c
    ret                     ;3c3e  af

lab_3c3f:
    set1 mem_fe2c.5         ;3c3f  5a 2c
    set1 mem_fe2c.7         ;3c41  7a 2c
    mov a,!mem_f1fe         ;3c43  8e fe f1       TODO coding, monsoon related
    cmp a,#0x03             ;3c46  4d 03
    bz lab_3c4e             ;3c48  ad 04          Branch if coded for Monsoon
    cmp a,#0x04             ;3c4a  4d 04
    bnz lab_3c58            ;3c4c  bd 0a          Branch if not Monsoon

lab_3c4e:
;Monsoon
    mov a,#0x80             ;3c4e  a1 80
    mov !tmp_msg_idx,a      ;3c50  9e a6 f1       0 Writes "    MONSOON"

    mov a,#30               ;3c53  a1 1e          A = 3 seconds
    mov !msg_countdown,a    ;3c55  9e 2e fb

lab_3c58:
;Not Monsoon
    ret                     ;3c58  af

lab_3c59:
    mov a,#0x3d             ;3c59  a1 3d
    mov !mem_fb54,a         ;3c5b  9e 54 fb
    br lab_3c08             ;3c5e  fa a8

lab_3c60:
    clr1 mem_fe2c.3         ;3c60  3b 2c
    clr1 mem_fe62.6         ;3c62  6b 62

lab_3c64:
    clr1 mem_fe2c.5             ;3c64  5b 2c
    bf mem_fe65.5,lab_3c6d      ;3c66  31 53 65 03
    call !kwp_logout_disconnect ;3c6a  9a c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_3c6d:
    bt mem_fe2c.2,lab_3c7f  ;3c6d  ac 2c 0f
    mov a,!mem_fb54         ;3c70  8e 54 fb
    cmp a,#0x00             ;3c73  4d 00
    bz lab_3c59             ;3c75  ad e2
    cmp mem_fe43_key,#0x43  ;3c77  c8 43 43
    bnz lab_3c7d            ;3c7a  bd 01
    ret                     ;3c7c  af

lab_3c7d:
    clr1 mem_fe2c.3         ;3c7d  3b 2c

lab_3c7f:
    mov a,#0x00             ;3c7f  a1 00
    mov !mem_fb54,a         ;3c81  9e 54 fb
    ret                     ;3c84  af

lab_3c85:
    bt mem_fe62.7,lab_3cf2  ;3c85  fc 62 6a
    mov a,!mem_fb54         ;3c88  8e 54 fb
    cmp a,#0x00             ;3c8b  4d 00
    bz lab_3c91             ;3c8d  ad 02
    set1 mem_fe5e.5         ;3c8f  5a 5e

lab_3c91:
    mov a,#0x00             ;3c91  a1 00
    mov !mem_fb54,a         ;3c93  9e 54 fb
    set1 mem_fe2c.6         ;3c96  6a 2c
    mov a,!mem_f1e9         ;3c98  8e e9 f1
    bf a.0,lab_3ca7         ;3c9b  31 0f 09
    bf mem_fe66.7,lab_3cad  ;3c9e  31 73 66 0b
    bt mem_fe7d.6,lab_3cad  ;3ca2  ec 7d 08
    br lab_3cab             ;3ca5  fa 04

lab_3ca7:
    bf mem_fe62.6,lab_3cad  ;3ca7  31 63 62 02

lab_3cab:
    set1 mem_fe2c.3         ;3cab  3a 2c

lab_3cad:
    mov a,!mem_f207         ;3cad  8e 07 f2
    bt a.6,lab_3ccd         ;3cb0  31 6e 1a
    bt mem_fe23.7,lab_3cd4  ;3cb3  fc 23 1e       Branch if SAFE mode = unlocked
    bf a.2,lab_3cbc         ;3cb6  31 2f 03
    bt mem_fe5e.6,lab_3ccd  ;3cb9  ec 5e 11

lab_3cbc:
    mov a,!mem_f18b         ;3cbc  8e 8b f1
    cmp a,#0x15             ;3cbf  4d 15
    bnc lab_3cc6            ;3cc1  9d 03
    call !kwp_init_cluster_if_ok  ;3cc3  9a fa 25  If mem_fe63.0=0, it's OK to initiate a KWP1281 connection to the cluster,
                                  ;                  so set up to bit-bang 5 baud init to address 0x3F

lab_3cc6:
    mov a,!mem_fb71         ;3cc6  8e 71 fb
    cmp a,#0xc3             ;3cc9  4d c3
    bnz lab_3cd4            ;3ccb  bd 07

lab_3ccd:
    mov a,!mem_fb70         ;3ccd  8e 70 fb
    cmp a,#0x06             ;3cd0  4d 06
    bnz lab_3cf2            ;3cd2  bd 1e

lab_3cd4:
    bf mem_fe2c.3,lab_3cf2  ;3cd4  31 33 2c 1a
    bt mem_fe2c.5,lab_3cf2  ;3cd8  dc 2c 17
    set1 mem_fe2c.5         ;3cdb  5a 2c
    mov a,!mem_f1fe         ;3cdd  8e fe f1       TODO coding, monsoon related
    cmp a,#0x03             ;3ce0  4d 03
    bz lab_3ce8             ;3ce2  ad 04          Branch if coded for Monsoon
    cmp a,#0x04             ;3ce4  4d 04
    bnz lab_3cf2            ;3ce6  bd 0a          Branch if not Monsoon

lab_3ce8:
;Monsoon
    mov a,#0x80             ;3ce8  a1 80
    mov !tmp_msg_idx,a      ;3cea  9e a6 f1       0 Writes "    MONSOON"

    mov a,#30               ;3ced  a1 1e          A = 3 seconds
    mov !msg_countdown,a    ;3cef  9e 2e fb

lab_3cf2:
;Not Monsoon
    ret                     ;3cf2  af

lab_3cf3:
    call !kwp_logout_disconnect ;3cf3  9a c3 51     Branch to Clear KWP1281 auth bits and disconnect
    clr1 mem_fe2c.5             ;3cf6  5b 2c
    clr1 mem_fe62.6             ;3cf8  6b 62
    bf mem_fe2c.3,lab_3d00      ;3cfa  31 33 2c 02
    set1 mem_fe62.6             ;3cfe  6a 62

lab_3d00:
    clr1 mem_fe2c.3         ;3d00  3b 2c
    clr1 mem_fe2c.4         ;3d02  4b 2c
    clr1 mem_fe2c.6         ;3d04  6b 2c
    clr1 mem_fe63.1         ;3d06  1b 63
    ret                     ;3d08  af

sub_3d09_term30:
;Read analog input 0x01 (P91/ANI10) Terminal 30 and ???
    bf mem_fe62.1,lab_3d18  ;3d09  31 13 62 0b
    movw ax,#(0x01<<8)+127  ;3d0d  10 7f 01     A = analog input 0x01 (P91/ANI10)
                            ;                   X = 127 (12.7 V)
    call !read_analog       ;3d10  9a c3 ab     Read analog input number A and do ???
    bc lab_3d57_ret         ;3d13  8d 42        Branch to return if failed

    mov !mem_fca2_ani_t30,a ;3d15  9e a2 fc

lab_3d18:
    mov a,!mem_fca2_ani_t30 ;3d18  8e a2 fc
    sub a,!mem_f18d_t30_avg ;3d1b  18 8d f1
    bnc lab_3d34_nc         ;3d1e  9d 14
    xor a,#0xff             ;3d20  7d ff
    inc a                   ;3d22  41
    cmp a,#0x02             ;3d23  4d 02
    bc lab_3d4d             ;3d25  8d 26
    mov a,!mem_f18d_t30_avg ;3d27  8e 8d f1
    cmp a,#0x00             ;3d2a  4d 00
    bz lab_3d57_ret         ;3d2c  ad 29
    dec a                   ;3d2e  51
    mov !mem_f18d_t30_avg,a ;3d2f  9e 8d f1
    br lab_3d55             ;3d32  fa 21

lab_3d34_nc:
    cmp a,#0x02             ;3d34  4d 02
    bc lab_3d4d             ;3d36  8d 15
    mov a,!mem_f18d_t30_avg ;3d38  8e 8d f1
    cmp a,#0x00             ;3d3b  4d 00
    bnz lab_3d47_ne         ;3d3d  bd 08
    mov a,!mem_fca2_ani_t30 ;3d3f  8e a2 fc
    mov !mem_f18d_t30_avg,a ;3d42  9e 8d f1
    br lab_3d55             ;3d45  fa 0e

lab_3d47_ne:
    inc a                   ;3d47  41
    mov !mem_f18d_t30_avg,a ;3d48  9e 8d f1
    br lab_3d55             ;3d4b  fa 08

lab_3d4d:
    bf mem_fe62.1,lab_3d57_ret  ;3d4d  31 13 62 06
    bf mem_fe65.5,lab_3d57_ret  ;3d51  31 53 65 02

lab_3d55:
    set1 mem_fe7e.3         ;3d55  3a 7e

lab_3d57_ret:
    ret                     ;3d57  af

lab_3d58:
    clr1 mem_fe62.4         ;3d58  4b 62
    mov a,!mem_f18d_t30_avg ;3d5a  8e 8d f1
    cmp a,#253              ;3d5d  4d fd        Compare with 25.3V
    bc lab_3d64             ;3d5f  8d 03
    br !lab_3c60            ;3d61  9b 60 3c

lab_3d64:
    cmp a,#179              ;3d64  4d b3        Compare with 17.9V
    bc lab_3d6a             ;3d66  8d 02
    br lab_3d80             ;3d68  fa 16

lab_3d6a:
    cmp a,#98               ;3d6a  4d 62        Compare with 9.8V
    bc lab_3d7c             ;3d6c  8d 0e
    clr1 mem_fe62.3         ;3d6e  3b 62
    bf mem_fe62.1,lab_3dbc_ret  ;3d70  31 13 62 48
    clr1 mem_fe62.1         ;3d74  1b 62
    clr1 mem_fe62.2         ;3d76  2b 62
    set1 mem_fe7d.3         ;3d78  3a 7d
    br lab_3dbc_ret         ;3d7a  fa 40

lab_3d7c:
    cmp a,#97               ;3d7c  4d 61        COmpare with 9.7V
    bnc lab_3dbc_ret        ;3d7e  9d 3c

lab_3d80:
    mov mem_fed4,a          ;3d80  f2 d4
    bt mem_fe62.3,lab_3d8c  ;3d82  bc 62 07
    set1 mem_fe62.3         ;3d85  3a 62
    mov a,#0x96             ;3d87  a1 96
    mov !mem_fb0d,a         ;3d89  9e 0d fb

lab_3d8c:
    bt mem_fe62.1,lab_3d9a  ;3d8c  9c 62 0b
    mov a,!mem_fb0d         ;3d8f  8e 0d fb
    cmp a,#0x00             ;3d92  4d 00
    bnz lab_3dbc_ret        ;3d94  bd 26
    mov a,mem_fed4          ;3d96  f0 d4
    set1 mem_fe7d.4         ;3d98  4a 7d

lab_3d9a:
    cmp a,#0x45             ;3d9a  4d 45
    bc lab_3da6             ;3d9c  8d 08
    clr1 mem_fe67.0         ;3d9e  0b 67
    set1 mem_fe62.1         ;3da0  1a 62
    set1 mem_fe62.2         ;3da2  2a 62
    br lab_3dbc_ret         ;3da4  fa 16

lab_3da6:
    cmp a,#0x35                 ;3da6  4d 35
    bc lab_3db5                 ;3da8  8d 0b
    clr1 mem_fe62.2             ;3daa  2b 62
    bf mem_fe65.5,lab_3dbc_ret  ;3dac  31 53 65 0c
    call !kwp_logout_disconnect ;3db0  9a c3 51     Branch to Clear KWP1281 auth bits and disconnect
    br lab_3dbc_ret             ;3db3  fa 07

lab_3db5:
    set1 mem_fe62.4         ;3db5  4a 62
    mov a,#0x32             ;3db7  a1 32
    mov !mem_fb0d,a         ;3db9  9e 0d fb

lab_3dbc_ret:
    ret                     ;3dbc  af

sub_3dbd:
    cmp a,!mem_fb4c         ;3dbd  48 4c fb
    bc lab_3dc5             ;3dc0  8d 03
    mov !mem_fb4c,a         ;3dc2  9e 4c fb

lab_3dc5:
    bt mem_fe2c.7,lab_3dd3  ;3dc5  fc 2c 0b
    set1 mem_fe2c.7         ;3dc8  7a 2c
    mov a,#0x01             ;3dca  a1 01
    callt [0x0048]          ;3dcc  c9         Calls sub_09a7
    call !sub_3bf7          ;3dcd  9a f7 3b
    mov b,#0x09             ;3dd0  a3 09
    callt [0x0040]          ;3dd2  c1         Calls sub_0994

lab_3dd3:
    ret                     ;3dd3  af

sub_3dd4:
    btclr mem_fe62.5,lab_3df9 ;3dd4  31 51 62 21  If bit is set indicating INTP1 occurred,
                              ;                     clear that bit and branch
    bf p0.1,lab_3df9        ;3dd8  31 13 00 1d
    bt mem_fe62.4,lab_3df1  ;3ddc  cc 62 12
    mov a,#0x00             ;3ddf  a1 00
    mov !mem_fb0d,a         ;3de1  9e 0d fb
    bf mem_fe62.7,lab_3df0  ;3de4  31 73 62 08
    clr1 mem_fe62.7         ;3de8  7b 62
    clr1 mem_fe2c.6         ;3dea  6b 2c
    clr1 mem_fe2c.2         ;3dec  2b 2c
    clr1 mem_fe66.7         ;3dee  7b 66

lab_3df0:
    ret                     ;3df0  af

lab_3df1:
    mov a,!mem_fb0d         ;3df1  8e 0d fb
    cmp a,#0x00             ;3df4  4d 00
    bz lab_3df9             ;3df6  ad 01
    ret                     ;3df8  af

lab_3df9:
    bt mem_fe62.7,lab_3e1c  ;3df9  fc 62 20
    set1 mem_fe62.7         ;3dfc  7a 62
    set1 mem_fe7d.4         ;3dfe  4a 7d
    clr1 mem_fe2c.3         ;3e00  3b 2c
    clr1 mem_fe62.6         ;3e02  6b 62
    clr1 mem_fe2c.5         ;3e04  5b 2c
    call !sub_3bf7          ;3e06  9a f7 3b
    mov a,#0xc3             ;3e09  a1 c3
    cmp a,!mem_fb71         ;3e0b  48 71 fb
    bnz lab_3e14            ;3e0e  bd 04
    call !sub_2296          ;3e10  9a 96 22
    ret                     ;3e13  af

lab_3e14:
    call !sub_2482          ;3e14  9a 82 24
    call !sub_248f          ;3e17  9a 8f 24
    clr1 mem_fe23.7         ;3e1a  7b 23        SAFE mode = locked

lab_3e1c:
    ret                     ;3e1c  af

sub_3e1d:
    set1 pm9.0                  ;3e1d  71 0a 29     PM90=input (S-Contact: 0=off, 1=on)
    bt mem_fe63.0,lab_3e75_ret  ;3e20  8c 63 52     If mem_fe63.0=1, we're not supposed to initiate a KWP1281
                                ;                     connection to the cluster right now, so just return.
    bt mem_fe2c.2,lab_3e3f      ;3e23  ac 2c 19
    mov a,#0x02                 ;3e26  a1 02
    bf p9.0,lab_3e72            ;3e28  31 03 09 46  Branch if P90=0 (S-Contact is off)

    ;S-Contact is on

    bf mem_fe63.7,lab_3e75_ret  ;3e2c  31 73 63 45

lab_3e30:
    mov a,!mem_f18c         ;3e30  8e 8c f1
    dec a                   ;3e33  51
    bnz lab_3e72            ;3e34  bd 3c
    set1 cy                 ;3e36  20
    xor1 cy,mem_fe2c.2      ;3e37  71 27 2c
    mov1 mem_fe2c.2,cy      ;3e3a  71 21 2c
    br lab_3ead             ;3e3d  fa 6e

lab_3e3f:
    mov a,#0x08                    ;3e3f  a1 08
    bf p9.0,lab_3e30               ;3e41  31 03 09 eb    Branch if P90=0 (S-Contact is off)

    ;S-Contact is on

    bt mem_fe63.1,lab_3e72         ;3e45  9c 63 2a
    push ax                        ;3e48  b1
    mov a,!mem_f207                ;3e49  8e 07 f2
    bt a.6,lab_3e71                ;3e4c  31 6e 22
    bf mem_fe23.7,lab_3e5a_locked  ;3e4f  31 73 23 07    Branch if SAFE mode = locked
    mov a,#0x00                    ;3e53  a1 00
    mov !mem_f18b,a                ;3e55  9e 8b f1
    br lab_3e6f                    ;3e58  fa 15

lab_3e5a_locked:
    bt mem_fe5e.6,lab_3e71  ;3e5a  ec 5e 14
    mov a,!mem_fb4d         ;3e5d  8e 4d fb
    cmp a,#0x00             ;3e60  4d 00
    bnz lab_3e71            ;3e62  bd 0d
    mov a,!mem_f18b         ;3e64  8e 8b f1
    cmp a,#0x15             ;3e67  4d 15
    bnc lab_3e71            ;3e69  9d 06
    inc a                   ;3e6b  41
    mov !mem_f18b,a         ;3e6c  9e 8b f1

lab_3e6f:
    set1 mem_fe63.1         ;3e6f  1a 63

lab_3e71:
    pop ax                  ;3e71  b0

lab_3e72:
    mov !mem_f18c,a         ;3e72  9e 8c f1

lab_3e75_ret:
    ret                     ;3e75  af

sub_3e76:
    set1 mem_fe2c.7         ;3e76  7a 2c
    bt mem_fe2c.3,lab_3e7d  ;3e78  bc 2c 02
    br lab_3e8d             ;3e7b  fa 10

lab_3e7d:
    bt mem_fe2c.6,lab_3ead  ;3e7d  ec 2c 2d
    mov a,!mem_fb54         ;3e80  8e 54 fb
    cmp a,#0x00             ;3e83  4d 00
    bnz lab_3ead            ;3e85  bd 26
    clr1 mem_fe2c.5         ;3e87  5b 2c
    clr1 mem_fe2c.3         ;3e89  3b 2c
    clr1 mem_fe62.6         ;3e8b  6b 62

lab_3e8d:
    mov a,!mem_fb4c         ;3e8d  8e 4c fb
    cmp a,#0x00             ;3e90  4d 00
    bnz lab_3ead            ;3e92  bd 19
    bt mem_fe65.5,lab_3ead  ;3e94  dc 65 16
    bt mem_fe65.6,lab_3ead  ;3e97  ec 65 13
    bt mem_fe65.7,lab_3ead  ;3e9a  fc 65 10
    bt mem_fe7a.2,lab_3ead  ;3e9d  ac 7a 0d
    bt mem_fe7a.5,lab_3ead  ;3ea0  dc 7a 0a
    cmp mem_fe27,#0x00      ;3ea3  c8 27 00
    bnz lab_3ead            ;3ea6  bd 05
    bt mem_fe65.1,lab_3ead  ;3ea8  9c 65 02
    clr1 mem_fe2c.7         ;3eab  7b 2c

lab_3ead:
    bt mem_fe2c.2,lab_3eba  ;3ead  ac 2c 0a
    bf mem_fe2c.6,lab_3ec9  ;3eb0  31 63 2c 15
    clr1 mem_fe7d.0         ;3eb4  0b 7d
    set1 mem_fe7d.1         ;3eb6  1a 7d
    br lab_3ec9             ;3eb8  fa 0f

lab_3eba:
    bt mem_fe2c.6,lab_3ec9  ;3eba  ec 2c 0c
    bt mem_fe62.7,lab_3ec9  ;3ebd  fc 62 09
    set1 mem_fe7d.0         ;3ec0  0a 7d
    clr1 mem_fe7d.1         ;3ec2  1b 7d
    mov a,#0x14             ;3ec4  a1 14
    mov !mem_fb4d,a         ;3ec6  9e 4d fb

lab_3ec9:
    br !sub_3bf7            ;3ec9  9b f7 3b

intp1_3ecc:
    set1 mem_fe62.5         ;3ecc  5a 62      Set bit to indicate INTP1 occurred
    reti                    ;3ece  8f

lab_3ecf:
    movw de,#mem_b0e4       ;3ecf  14 e4 b0
    mov a,#0xff             ;3ed2  a1 ff
    call !sub_5c64          ;3ed4  9a 64 5c
    cmp a,#0xff             ;3ed7  4d ff
    bnz lab_3edd            ;3ed9  bd 02
    mov b,#0x00             ;3edb  a3 00

lab_3edd:
    movw hl,#mem_b0eb       ;3edd  16 eb b0
    br lab_3f4a             ;3ee0  fa 68

lab_3ee2:
    bf rb0_b.7,lab_3efb     ;3ee2  31 73 fb 15
    mov a,#0x05             ;3ee6  a1 05
    mov !mem_fb97,a         ;3ee8  9e 97 fb
    mov !mem_fb98,a         ;3eeb  9e 98 fb
    mov a,#0x00             ;3eee  a1 00
    mov !mem_fb96,a         ;3ef0  9e 96 fb
    mov a,#0x00             ;3ef3  a1 00
    mov !mem_fb9a,a         ;3ef5  9e 9a fb
    mov a,#0x80             ;3ef8  a1 80
    callt [0x0042]          ;3efa  c3           Calls sub_09b9

lab_3efb:
    bf rb0_b.6,lab_3f2f     ;3efb  31 63 fb 30
    clr1 mem_fe63.6         ;3eff  6b 63
    call !eeprom_guard      ;3f01  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_3f2e            ;3f04  9d 28        Branch to just return if not available

lab_3f06:
    mov a,!mem_fb9a         ;3f06  8e 9a fb
    cmp a,#0x55             ;3f09  4d 55
    bz lab_3f26             ;3f0b  ad 19
    call !sub_4109          ;3f0d  9a 09 41
    bt mem_fe63.4,lab_3f2e  ;3f10  cc 63 1b     Branch to just return
    mov a,!mem_fb9a         ;3f13  8e 9a fb
    cmp a,#0x55             ;3f16  4d 55
    bz lab_3f22             ;3f18  ad 08

lab_3f1a:
    call !eeprom_guard      ;3f1a  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_3f1a            ;3f1d  9d fb        Repeat until available

    br !cold_or_warm_start  ;3f1f  9b cf 0d

lab_3f22:
    btclr mem_fe63.3,lab_3f1a ;3f22  31 31 63 f4

lab_3f26:
    call !sub_4086          ;3f26  9a 86 40
    set1 mem_fe63.7         ;3f29  7a 63
    mov a,#0x40             ;3f2b  a1 40
    callt [0x0042]          ;3f2d  c3           Calls sub_09b9

lab_3f2e:
    ret                     ;3f2e  af

lab_3f2f:
    mov a,#0x00             ;3f2f  a1 00
    mov !mem_fb9a,a         ;3f31  9e 9a fb

    call !eeprom_guard      ;3f34  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_3f2e            ;3f37  9d f5        Branch to just return if not available

    callf !sub_099c         ;3f39  1c 9c
    callf !sub_09e6         ;3f3b  1c e6        HL = #mem_f1b3, DE = #mem_f202, A = DE - HL
    callf !sub_0c0d         ;3f3d  4c 0d
    bz lab_3f43             ;3f3f  ad 02
    br lab_3f06             ;3f41  fa c3

lab_3f43:
    movw hl,#mem_b0ef+1     ;3f43  16 f0 b0     HL = pointer to table to read with table_get_word
    mov a,!mem_fb96         ;3f46  8e 96 fb
    mov b,a                 ;3f49  73           B = table position for table_get_word

lab_3f4a:
    callf !table_get_word   ;3f4a  4c 48        Load DE with word at position B in table [HL]
    bc lab_3f56             ;3f4c  8d 08        Branch if table lookup failed

    movw ax,#lab_3f55       ;3f4e  10 55 3f
    push ax                 ;3f51  b1
    movw ax,de              ;3f52  c4
    br ax                   ;3f53  31 98

lab_3f55:
    ret                     ;3f55  af

lab_3f56:
    ;Value in mem_fb96 is not a valid index for the table at mem_b0ef

    movw hl,#0x00c8         ;3f56  16 c8 00     HL = EEPROM address to read
    movw de,#i2c_buf        ;3f59  14 db fb     DE = pointer to buffer to receive EEPROM contents
    mov a,#0x01             ;3f5c  a1 01        A = 1 byte to read from EEPROM
    call !eeprom_read       ;3f5e  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bnc lab_3f70_failed     ;3f61  9d 0d        Branch if EEPROM read failed

    ;EEPROM read succeeded, i2c_buf = value from EEPROM address 0x00c8

    call !sub_4023          ;3f63  9a 23 40
    bnc lab_3f70_failed     ;3f66  9d 08        Branch if sub_4023 failed

    mov a,#0x00             ;3f68  a1 00
    mov !mem_fb96,a         ;3f6a  9e 96 fb

    br !cold_or_warm_start  ;3f6d  9b cf 0d

lab_3f70_failed:
    mov a,#0x01             ;3f70  a1 01
    mov !mem_fb96,a         ;3f72  9e 96 fb
    ret                     ;3f75  af

lab_3f76:
    clr1 mem_fe63.2         ;3f76  2b 63
    mov a,#0x00             ;3f78  a1 00
    mov !mem_fb96,a         ;3f7a  9e 96 fb
    set1 mem_fe63.7         ;3f7d  7a 63
    mov a,#0x05             ;3f7f  a1 05
    mov !mem_fb97,a         ;3f81  9e 97 fb
    mov !mem_fb98,a         ;3f84  9e 98 fb
    bt mem_fe63.5,lab_3f96  ;3f87  dc 63 0c
    mov a,#0x01             ;3f8a  a1 01
    xch a,!mem_fb55         ;3f8c  ce 55 fb
    cmp a,#0x00             ;3f8f  4d 00
    bz lab_3f96             ;3f91  ad 03
    bt mem_fe63.6,lab_3f2e  ;3f93  ec 63 98     Branch to just return

lab_3f96:
    set1 mem_fe63.5         ;3f96  5a 63
    mov a,#0x20             ;3f98  a1 20
    callt [0x0044]          ;3f9a  c5           Calls sub_09c6
    callf !sub_0a0d         ;3f9b  2c 0d        A=0x66, mem_fed6=0x66 (0x66 = #mem_f26c_csum_lo - #mem_f206)
    mov a,!mem_fb99         ;3f9d  8e 99 fb
    mov b,a                 ;3fa0  73
    movw de,#0x0063         ;3fa1  14 63 00
    cmp a,mem_fed6          ;3fa4  4e d6
    bnc lab_3faa            ;3fa6  9d 02
    br lab_3fbe             ;3fa8  fa 14

lab_3faa:
    movw de,#0x0063         ;3faa  14 63 00
    mov a,#0x00             ;3fad  a1 00
    mov !mem_fb99,a         ;3faf  9e 99 fb
    mov b,a                 ;3fb2  73
    bf mem_fe63.6,lab_3fbc  ;3fb3  31 63 63 05
    clr1 mem_fe63.5         ;3fb7  5b 63
    mov a,#0x20             ;3fb9  a1 20
    callt [0x0042]          ;3fbb  c3           Calls sub_09b9

lab_3fbc:
    set1 mem_fe63.6         ;3fbc  6a 63

lab_3fbe:
    mov a,b                 ;3fbe  63
    mov mem_fed7,a          ;3fbf  f2 d7
    mov a,mem_fed6          ;3fc1  f0 d6
    sub a,b                 ;3fc3  61 1b
    cmp a,#0x10             ;3fc5  4d 10
    bc lab_3fcb             ;3fc7  8d 02
    mov a,#0x10             ;3fc9  a1 10

lab_3fcb:
    mov mem_fed4,a          ;3fcb  f2 d4
    movw ax,de              ;3fcd  c4
    movw hl,ax              ;3fce  d6
    mov a,mem_fed7          ;3fcf  f0 d7
    callf !add_a_to_hl      ;3fd1  5c 67        HL = HL + A
    mov a,mem_fed4          ;3fd3  f0 d4
    push hl                 ;3fd5  b7
    movw de,#i2c_buf        ;3fd6  14 db fb     DE = pointer to buffer to receive EEPROM contents
    call !eeprom_read       ;3fd9  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    pop de                  ;3fdc  b4
    bnc lab_3ff1            ;3fdd  9d 12        Branch if EEPROM read failed
    mov c,#0x00             ;3fdf  a2 00

lab_3fe1:
    movw hl,#i2c_buf        ;3fe1  16 db fb
    mov a,[hl+c]            ;3fe4  aa
    movw hl,#mem_f206       ;3fe5  16 06 f2
    cmp a,[hl+b]            ;3fe8  31 4b
    bnz lab_3ff6            ;3fea  bd 0a
    inc b                   ;3fec  43
    inc c                   ;3fed  42
    dbnz mem_fed4,lab_3fe1  ;3fee  04 d4 f0

lab_3ff1:
    mov a,b                 ;3ff1  63
    mov !mem_fb99,a         ;3ff2  9e 99 fb

lab_3ff5:
    ret                     ;3ff5  af

lab_3ff6:
    push bc                 ;3ff6  b3
    call !sub_4076          ;3ff7  9a 76 40
    pop bc                  ;3ffa  b2
    bz lab_3fff             ;3ffb  ad 02
    br lab_4021             ;3ffd  fa 22

lab_3fff:
    clr1 mem_fe63.6         ;3fff  6b 63
    inc b                   ;4001  43
    mov a,b                 ;4002  63
    mov !mem_fb99,a         ;4003  9e 99 fb
    movw hl,#mem_f205       ;4006  16 05 f2
    push de                 ;4009  b5
    mov a,[hl+b]            ;400a  ab
    pop hl                  ;400b  b6
    push ax                 ;400c  b1
    mov a,c                 ;400d  62
    callf !add_a_to_hl      ;400e  5c 67        HL = HL + A
    movw ax,hl              ;4010  c6
    movw de,ax              ;4011  d4
    pop ax                  ;4012  b0
    mov !i2c_buf+2,a        ;4013  9e dd fb
    mov a,#0x01             ;4016  a1 01        A = 1 byte to write to EERPOM
    movw hl,#i2c_buf+2      ;4018  16 dd fb     HL = pointer to buffer to write to EEPROM
    call !eeprom_write      ;401b  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    br lab_3ff5             ;401e  fa d5

lab_4020:
    ret                     ;4020  af

lab_4021:
    set1 mem_fe63.2         ;4021  2a 63

sub_4023:
;Returns carry clear = failure, carry set = success
    call !eeprom_guard      ;4023  9a 17 62     Check if EEPROM is available for use(?)
    bnc sub_4023            ;4026  9d fb        Repeat until available

    callf !sub_0a0d         ;4028  2c 0d        A=0x66, mem_fed6=0x66 (0x66 = #mem_f26c_csum_lo - #mem_f206)

    movw hl,#0x00c8         ;402a  16 c8 00     HL = EEPROM address to read
    movw de,#mem_f206       ;402d  14 06 f2     DE = destination buffer used at lab_4042_nonzero
    callf !sub_0a37         ;4030  2c 37        TODO does something with the EEPROM
    bnc lab_4040_failed     ;4032  9d 0c        Branch if sub_0a37 failed
    bnz lab_4042_nonzero    ;4034  bd 0c

    ;sub_0a37 succeeded and Z flag is set

    mov a,mem_fed6          ;4036  f0 d6
    movw hl,#0x0063         ;4038  16 63 00
    call !sub_40df          ;403b  9a df 40
    bc lab_4049             ;403e  8d 09

lab_4040_failed:
;sub_0a37 failed
    br lab_406c_failed      ;4040  fa 2a

lab_4042_nonzero:
;sub_0a37 returned nonzero
    mov a,mem_fed6          ;4042  f0 d6        A = number of bytes to copy
    movw hl,#mem_00cf       ;4044  16 cf 00     HL = source address
                            ;                   DE already contains destination (mem_f206)
    callf !copy             ;4047  4c 9e        Copy A bytes from [HL] to [DE]

lab_4049:
    call !sub_4053          ;4049  9a 53 40
    mov a,#0x00             ;404c  a1 00
    mov !mem_fb99,a         ;404e  9e 99 fb
    set1 cy                 ;4051  20
    ret                     ;4052  af

sub_4053:
    push hl                   ;4053  b7
    push de                   ;4054  b5
    movw hl,#mem_f206         ;4055  16 06 f2
    movw de,#mem_f26c_csum_lo ;4058  14 6c f2
    callf !sub_0a0d           ;405b  2c 0d        A=0x66, mem_fed6=0x66 (0x66 = #mem_f26c_csum_lo - #mem_f206)
    mov b,a                   ;405d  73
    callf !sub_0c12           ;405e  4c 12
    pop de                    ;4060  b4
    pop hl                    ;4061  b6
    bf mem_fe63.2,lab_406b    ;4062  31 23 63 05
    clr1 mem_fe63.2           ;4066  2b 63
    br !cold_or_warm_start    ;4068  9b cf 0d

lab_406b:
    ret                     ;406b  af

lab_406c_failed:
;Branched from lab_406c_failed when sub_0a37 fails
    push psw                           ;406c  22
    mov a,#0x01                        ;406d  a1 01
    mov !mem_fb96,a                    ;406f  9e 96 fb
    callf !eeram_copy_defaults_2_of_2  ;4072  2c 2c    Copy some EEPROM defaults from ROM into the EEPROM area in RAM (2 of 2)
    pop psw                            ;4074  23
    ret                                ;4075  af

sub_4076:
    push hl                   ;4076  b7
    push de                   ;4077  b5
    movw hl,#mem_f206         ;4078  16 06 f2
    movw de,#mem_f26c_csum_lo ;407b  14 6c f2
    callf !sub_0a0d           ;407e  2c 0d        A=0x66, mem_fed6=0x66 (0x66 = #mem_f26c_csum_lo - #mem_f206)
    mov b,a                   ;4080  73
    callf !sub_0c0d           ;4081  4c 0d
    pop de                    ;4083  b4
    pop hl                    ;4084  b6
    ret                       ;4085  af

sub_4086:
    call !sub_4076          ;4086  9a 76 40
    bz lab_408e             ;4089  ad 03
    call !sub_4023          ;408b  9a 23 40

lab_408e:
    ret                     ;408e  af

eeram_wr_byte_hl_b:
;Write A to EEPROM area in RAM at [HL+B], add to checksum
;If HL+B is not in range of mem_f206 - mem_f26b then do nothing
;Called with:
;  HL = an address in RAM that maps to the EEPROM
;  B = index to add to the address
;  A = value
    push bc                 ;408f  b3
    br lab_4095             ;4090  fa 03

eeram_wr_byte_hl:
;Write A to EEPROM area in RAM at [HL+B], add to checksum
;If HL+B is not in range of mem_f206 - mem_f26b then do nothing
;Called with:
;  HL = an address in RAM that maps to the EEPROM
;  A = value
    push bc                 ;4092  b3
    mov b,#0x00             ;4093  a3 00

lab_4095:
    cmp a,[hl+b]            ;4095  31 4b
    bz lab_40d4_done        ;4097  ad 3b        If [HL+B] = A then branch (nothing to do)

    push ax                 ;4099  b1           Push value to write to [HL+B]

    ;Compute AX = HL+B to test if HL+B is in range
    mov x,#0x00             ;409a  a0 00
    mov a,b                 ;409c  63
    add a,l                 ;409d  61 0e
    xch a,x                 ;409f  30
    addc a,h                ;40a0  61 2f

    ;Check if HL+B would be in range #mem_f206 - #mem_f26b (inclusive)
    cmpw ax,#mem_f206       ;40a2  ea 06 f2
    bc lab_40ac_out_of_range ;40a5  8d 05       If AX < #mem_f206 then branch (out of range)
    cmpw ax,#mem_f26b       ;40a7  ea 6b f2
    bc lab_40b1_in_range    ;40aa  8d 05        If AX < #mem_f26b then branch (out of range)
    ;Fall through to out of range

lab_40ac_out_of_range:
;HL+B is out of range
    callf !sub_0879         ;40ac  0c 79        Just returns
    pop ax                  ;40ae  b0
    br lab_40d4_done        ;40af  fa 23        Branch to pop bc and ret

lab_40b1_in_range:
;HL+B is within range of #mem_f206 - #mem_f26b (inclusive)
    mov a,!mem_f26c_csum_lo ;40b1  8e 6c f2
    sub a,[hl+b]            ;40b4  31 1b
    mov c,a                 ;40b6  72
    mov a,!mem_f26d_csum_hi ;40b7  8e 6d f2
    subc a,#0x00            ;40ba  3d 00
    mov !mem_f26d_csum_hi,a ;40bc  9e 6d f2

    pop ax                  ;40bf  b0           Pop value to write to [HL+B]
    mov [hl+b],a            ;40c0  bb           Store A in [HL+B]

    xch a,c                 ;40c1  32
    add a,c                 ;40c2  61 0a
    mov !mem_f26c_csum_lo,a ;40c4  9e 6c f2
    mov a,!mem_f26d_csum_hi ;40c7  8e 6d f2
    addc a,#0x00            ;40ca  2d 00
    mov !mem_f26d_csum_hi,a ;40cc  9e 6d f2
    mov a,c                 ;40cf  62

    clr1 mem_fe63.6         ;40d0  6b 63
    set1 mem_fe63.5         ;40d2  5a 63

lab_40d4_done:
    pop bc                  ;40d4  b2
    ret                     ;40d5  af


;XXX appears unused
;Clear B bytes in EEPROM at in RAM at [HL], add to checksum
eeram_clear_b_at_hl:
    mov a,#0x00             ;40d6  a1 00
lab_40d8_loop:
    call !eeram_wr_byte_hl  ;40d8  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    incw hl                 ;40db  86
    dbnz b,lab_40d8_loop    ;40dc  8b fa
    ret                     ;40de  af


sub_40df:
    push hl                 ;40df  b7
    push de                 ;40e0  b5
    push bc                 ;40e1  b3
    push ax                 ;40e2  b1
    cmp a,#0x00             ;40e3  4d 00
    bz lab_4104_pop_ret     ;40e5  ad 1d        Branch to pop registers and return

    mov mem_fed5,a          ;40e7  f2 d5

lab_40e9_loop:
    callf !sub_09f8         ;40e9  1c f8
    mov b,a                 ;40eb  73
    call !eeprom_read       ;40ec  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bnc lab_4104_pop_ret    ;40ef  9d 13        Branch if EEPROM read failed
    cmp mem_fed5,#0x00      ;40f1  c8 d5 00
    bz lab_4103             ;40f4  ad 0d
    callf !add_a_to_hl      ;40f6  5c 67        HL = HL + A
    push hl                 ;40f8  b7
    movw ax,de              ;40f9  c4
    movw hl,ax              ;40fa  d6
    mov a,b                 ;40fb  63
    callf !add_a_to_hl      ;40fc  5c 67        HL = HL + A
    movw ax,hl              ;40fe  c6
    movw de,ax              ;40ff  d4
    pop hl                  ;4100  b6
    br lab_40e9_loop        ;4101  fa e6

lab_4103:
    not1 cy                 ;4103  01
    ;Fall through to pop registers and return

lab_4104_pop_ret:
    pop ax                  ;4104  b0
    pop bc                  ;4105  b2
    pop de                  ;4106  b4
    pop hl                  ;4107  b6
    ret                     ;4108  af

sub_4109:
;Called from Title=0x1b  Subtitle=0x30  Block length=0x05
;0 request parameters
;Replies with ACK only
    clr1 mem_fe64.5         ;4109  5b 64
    mov a,!mem_fb98         ;410b  8e 98 fb
    cmp a,#0x05             ;410e  4d 05
    bz lab_4114             ;4110  ad 02
    br lab_4165             ;4112  fa 51

lab_4114:
    xch a,!mem_f204         ;4114  ce 04 f2
    mov a,!mem_f202         ;4117  8e 02 f2
    xch a,!mem_f204         ;411a  ce 04 f2
    xch a,!mem_f205         ;411d  ce 05 f2
    mov a,!mem_f203         ;4120  8e 03 f2
    xch a,!mem_f205         ;4123  ce 05 f2
    movw hl,#0x0010         ;4126  16 10 00
    movw de,#0x0046         ;4129  14 46 00
    callf !sub_09ef         ;412c  1c ef        A = DE - HL
    sub a,#0x02             ;412e  1d 02
    bz lab_4165             ;4130  ad 33
    movw de,#mem_f1b3       ;4132  14 b3 f1
    call !sub_40df          ;4135  9a df 40
    push ax                 ;4138  b1
    movw hl,#0x0044         ;4139  16 44 00
    movw de,#mem_fed7       ;413c  14 d7 fe
    mov a,#0x02             ;413f  a1 02
    call !sub_40df          ;4141  9a df 40
    pop ax                  ;4144  b0
    movw hl,#mem_f1b3       ;4145  16 b3 f1
    push ax                 ;4148  b1
    callf !sub_0c0d         ;4149  4c 0d
    pop ax                  ;414b  b0
    bz lab_4165             ;414c  ad 17
    set1 mem_fe62.0         ;414e  0a 62
    movw hl,#mem_0080       ;4150  16 80 00     HL = source address
    movw de,#mem_f1b3       ;4153  14 b3 f1     DE = destination address
    callf !copy             ;4156  4c 9e        Copy A bytes from [HL] to [DE]
    mov a,!mem_fb97         ;4158  8e 97 fb
    dec a                   ;415b  51
    bz lab_4165             ;415c  ad 07
    mov !mem_fb97,a         ;415e  9e 97 fb
    set1 mem_fe63.4         ;4161  4a 63
    br lab_41bc             ;4163  fa 57

lab_4165:
    movw hl,#0x0046         ;4165  16 46 00
    movw de,#0x0063         ;4168  14 63 00
    callf !sub_09ef         ;416b  1c ef        A = DE - HL
    bt mem_fe64.5,lab_4187  ;416d  dc 64 17
    movw de,#mem_f1e7_region;4170  14 e7 f1
    call !sub_40df          ;4173  9a df 40
    push de                 ;4176  b5
    pop hl                  ;4177  b6
    movw de,#mem_f202       ;4178  14 02 f2
    sub a,#0x02             ;417b  1d 02
    bz lab_41a1             ;417d  ad 22
    push ax                 ;417f  b1
    callf !sub_0c0d         ;4180  4c 0d
    pop ax                  ;4182  b0
    bz lab_41a1             ;4183  ad 1c
    set1 mem_fe62.0         ;4185  0a 62

lab_4187:
    push ax                 ;4187  b1
    movw hl,#mem_00b4       ;4188  16 b4 00     HL = source address
    movw de,#mem_f1e7_region;418b  14 e7 f1     DE = destination address
    callf !copy             ;418e  4c 9e        Copy A bytes from [HL] to [DE]
    pop ax                  ;4190  b0
    bt mem_fe64.5,lab_41ff  ;4191  dc 64 6b
    mov a,!mem_fb98         ;4194  8e 98 fb
    dec a                   ;4197  51
    bz lab_41a1             ;4198  ad 07
    mov !mem_fb98,a         ;419a  9e 98 fb
    set1 mem_fe63.4         ;419d  4a 63
    br lab_41bc             ;419f  fa 1b

lab_41a1:
    clr1 mem_fe63.4         ;41a1  4b 63
    mov a,#0x55             ;41a3  a1 55
    mov !mem_fb9a,a         ;41a5  9e 9a fb
    callf !sub_09e6         ;41a8  1c e6        HL = #mem_f1b3, DE = #mem_f202, A = DE - HL
    callf !sub_0c12         ;41aa  4c 12
    movw hl,#mem_f202       ;41ac  16 02 f2     HL = pointer to first buffer
    movw de,#mem_f204       ;41af  14 04 f2     DE = pointer to second buffer
    mov a,#0x02             ;41b2  a1 02        A = 2 bytes to compare
    clr1 mem_fe63.3         ;41b4  3b 63
    callf !compare          ;41b6  4c ca        Compare A bytes from [HL] to [DE]
    bz lab_41bc             ;41b8  ad 02        Branch if buffers are equal
    set1 mem_fe63.3         ;41ba  3a 63

lab_41bc:
    ret                     ;41bc  af

sub_41bd:
    cmp a,#0x00             ;41bd  4d 00
    bz lab_41ec             ;41bf  ad 2b

lab_41c1:
    call !eeprom_guard      ;41c1  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_41c1            ;41c4  9d fb        Repeat until available

    mov mem_fed5,a          ;41c6  f2 d5

lab_41c8_loop:
    callf !sub_09f8         ;41c8  1c f8
    call !eeprom_write      ;41ca  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    bnc lab_41ec            ;41cd  9d 1d        Branch if write failed

    cmp mem_fed5,#0x00      ;41cf  c8 d5 00
    bz lab_41ec             ;41d2  ad 18

lab_41d4:
    mov wdtm,#wd_run_irq    ;41d4  13 f9 80     (Re-)Start watchdog in interval mode (Maskable INTWDT when watchdog fires)
    call !eeprom_guard      ;41d7  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_41d4            ;41da  9d f8        Repeat until available

    push hl                 ;41dc  b7
    push ax                 ;41dd  b1
    movw ax,de              ;41de  c4
    movw hl,ax              ;41df  d6
    pop ax                  ;41e0  b0
    callf !add_a_to_hl      ;41e1  5c 67        HL = HL + A
    push ax                 ;41e3  b1
    movw ax,hl              ;41e4  c6
    movw de,ax              ;41e5  d4
    pop ax                  ;41e6  b0
    pop hl                  ;41e7  b6
    callf !add_a_to_hl      ;41e8  5c 67        HL = HL + A
    br lab_41c8_loop        ;41ea  fa dc

lab_41ec:
    ret                     ;41ec  af

lab_41ed:
    set1 mem_fe64.0         ;41ed  0a 64
    ;TODO 9 EEPROM addresses 0x0058-0x0060 are protected in lab_2c60
    movw hl,#0x0058         ;41ef  16 58 00
    movw de,#0x0061         ;41f2  14 61 00
    callf !sub_09ef         ;41f5  1c ef        A = DE - HL (0x0061 - 0x0058 = 9)
    movw hl,#mem_00c6       ;41f7  16 c6 00
    movw de,#mem_f1f9       ;41fa  14 f9 f1
    callf !copy             ;41fd  4c 9e        Copy A bytes from [HL] to [DE]

lab_41ff:
    movw hl,#0x0046         ;41ff  16 46 00
    movw de,#0x0061         ;4202  14 61 00
    callf !sub_09ef         ;4205  1c ef        A = DE - HL
    push ax                 ;4207  b1
    movw hl,#mem_f1e7_region;4208  16 e7 f1
    movw de,#mem_f202       ;420b  14 02 f2
    push hl                 ;420e  b7
    callf !sub_0c12         ;420f  4c 12
    pop hl                  ;4211  b6
    movw de,#0x0046         ;4212  14 46 00
    pop ax                  ;4215  b0
    add a,#0x02             ;4216  0d 02
    call !sub_41bd          ;4218  9a bd 41
    btclr mem_fe64.0,lab_4221 ;421b  31 01 64 02
    br lab_41a1             ;421f  fa 80

lab_4221:
    call !eeprom_guard      ;4221  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_4221            ;4224  9d fb        Repeat until available
    ret                     ;4226  af

sub_4227:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;4227  4d 0a
    bc lab_4231_lt_0x0a     ;4229  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;422b  1d 0a      A = A - 0x0A
    add a,#'A               ;422d  0d 41      Convert to ASCII 'A'-'F'
    br lab_4233_ret         ;422f  fa 02
lab_4231_lt_0x0a:
    add a,#'0               ;4231  0d 30      Convert to ASCII '0'-'9'
lab_4233_ret:
    ret                     ;4233  af

sub_4234:
    mov a,#0x01             ;4234  a1 01
    mov mem_fe30,a          ;4236  f2 30
    mov !mem_f190,a         ;4238  9e 90 f1
    set1 mem_fe7d.2         ;423b  2a 7d
    mov a,#0x00             ;423d  a1 00
    mov !mem_f191,a         ;423f  9e 91 f1
    ret                     ;4242  af

lab_4243:
    call !sub_4495          ;4243  9a 95 44
    bnz sub_4234            ;4246  bd ec
    cmp mem_fe30,#0x04      ;4248  c8 30 04
    bnc sub_4234            ;424b  9d e7
    mov a,!mem_f190         ;424d  8e 90 f1
    cmp a,#0x04             ;4250  4d 04
    bnc sub_4234            ;4252  9d e0
    movw de,#mem_b0ff       ;4254  14 ff b0
    bt mem_fe64.1,lab_4266  ;4257  9c 64 0c
    mov a,mem_fe30          ;425a  f0 30
    cmp a,#0x00             ;425c  4d 00
    bnz lab_4266            ;425e  bd 06
    movw de,#mem_b150       ;4260  14 50 b1
    mov a,!mem_f18f         ;4263  8e 8f f1

lab_4266:
    mov b,a                 ;4266  73
    movw hl,#mem_af75_patterns ;4267  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;426a  ab
    call !sub_5c64          ;426b  9a 64 5c
    bz sub_42be             ;426e  ad 4e
    bf mem_fe65.5,lab_427a  ;4270  31 53 65 06
    cmp a,#0x03             ;4274  4d 03
    bz lab_42a1             ;4276  ad 29
    br lab_42a3             ;4278  fa 29

lab_427a:
    bf mem_fe5d.7,lab_42a3  ;427a  31 73 5d 25
    bf mem_fe5e.0,lab_4291  ;427e  31 03 5e 0f
    cmp mem_fe43_key,#0x17  ;4282  c8 43 17     Key = MODE_FM?
    bz lab_42a1             ;4285  ad 1a
    cmp mem_fe43_key,#0x16  ;4287  c8 43 16     Key = MODE_AM?
    bz lab_42a1             ;428a  ad 15
    cmp mem_fe43_key,#0x48  ;428c  c8 43 48
    bz lab_42a1             ;428f  ad 10

lab_4291:
    cmp mem_fe43_key,#0x14  ;4291  c8 43 14     Key = MODE_CD?
    bz lab_42a1             ;4294  ad 0b
    cmp mem_fe43_key,#0x15  ;4296  c8 43 15     Key = MODE_TAPE?
    bz lab_42a1             ;4299  ad 06
    cmp a,#0x03             ;429b  4d 03
    bz lab_42a1             ;429d  ad 02
    br lab_42a3             ;429f  fa 02

lab_42a1:
    mov a,#0xff             ;42a1  a1 ff

lab_42a3:
    cmp a,#0xff             ;42a3  4d ff
    bz sub_42be             ;42a5  ad 17
    movw de,#lab_4466       ;42a7  14 66 44
    bt a.6,lab_42b7         ;42aa  31 6e 0a
    movw hl,#mem_b170+1     ;42ad  16 71 b1
    callf !table_get_word   ;42b0  4c 48        Load DE with word at position B in table [HL]
    bnc lab_42b7            ;42b2  9d 03        Branch if table lookup succeeded
    br !sub_4234            ;42b4  9b 34 42

lab_42b7:
    movw ax,#sub_42be       ;42b7  10 be 42
    push ax                 ;42ba  b1
    movw ax,de              ;42bb  c4
    br ax                   ;42bc  31 98

sub_42be:
    bf mem_fe2d.0,lab_42c5  ;42be  31 03 2d 03
    bt mem_fe2c.5,lab_42d2  ;42c2  dc 2c 0d

lab_42c5:
    cmp mem_fe30,#0x00      ;42c5  c8 30 00
    bz lab_4302             ;42c8  ad 38
    bt mem_fe7d.4,lab_4302  ;42ca  cc 7d 35
    call !sub_432d          ;42cd  9a 2d 43
    br lab_42f8             ;42d0  fa 26

lab_42d2:
    cmp mem_fe30,#0x00      ;42d2  c8 30 00
    bnz lab_42f8            ;42d5  bd 21
    bt mem_fe62.1,lab_42f8  ;42d7  9c 62 1e
    bt mem_fe7d.3,lab_42f8  ;42da  bc 7d 1b
    bt mem_fe64.1,lab_42f8  ;42dd  9c 64 18
    btclr mem_fe64.2,lab_42f8 ;42e0  31 21 64 14
    bt mem_fe65.5,lab_42f8  ;42e4  dc 65 11
    mov a,!mem_f256         ;42e7  8e 56 f2
    cmp a,#0x00             ;42ea  4d 00
    bnz lab_42f0            ;42ec  bd 02
    mov a,#0x01             ;42ee  a1 01

lab_42f0:
    mov !mem_f190,a         ;42f0  9e 90 f1
    set1 mem_fe7d.2         ;42f3  2a 7d
    call !sub_4495          ;42f5  9a 95 44

lab_42f8:
    mov a,!mem_f190         ;42f8  8e 90 f1
    cmp a,!mem_fe30         ;42fb  48 30 fe
    bz lab_4302             ;42fe  ad 02
    set1 mem_fe7d.2         ;4300  2a 7d

lab_4302:
    call !sub_4495          ;4302  9a 95 44
    ret                     ;4305  af

lab_4306:
    ret                     ;4306  af

lab_4307:
    mov a,!mem_fb27         ;4307  8e 27 fb
    cmp a,#0x00             ;430a  4d 00
    bz lab_430f             ;430c  ad 01
    ret                     ;430e  af

lab_430f:
    mov a,!mem_f256         ;430f  8e 56 f2
    cmp a,#0x00             ;4312  4d 00
    bnz lab_4318            ;4314  bd 02
    mov a,#0x01             ;4316  a1 01

lab_4318:
    call !sub_43a1          ;4318  9a a1 43
    bz lab_4320             ;431b  ad 03
    br !sub_4469            ;431d  9b 69 44

lab_4320:
    mov a,b                 ;4320  63
    dec a                   ;4321  51
    call !sub_43b1          ;4322  9a b1 43
    bnc lab_432a            ;4325  9d 03
    br !lab_442a            ;4327  9b 2a 44

lab_432a:
    br !lab_446d            ;432a  9b 6d 44

sub_432d:
    mov a,mem_fe30          ;432d  f0 30
    mov a,#0x00             ;432f  a1 00
    br !sub_4469            ;4331  9b 69 44

lab_4334:
    mov a,#0x01             ;4334  a1 01
    br !sub_4469            ;4336  9b 69 44

lab_4339:
    bt mem_fe2c.5,lab_4346  ;4339  dc 2c 0a
    mov a,!mem_f1e9         ;433c  8e e9 f1
    bt a.0,lab_4359         ;433f  31 0e 17
    bf mem_fe2c.2,lab_4359  ;4342  31 23 2c 13

lab_4346:
    mov a,!mem_fb71         ;4346  8e 71 fb
    cmp a,#0xc3             ;4349  4d c3
    bnz lab_4354            ;434b  bd 07
    mov a,!mem_fb70         ;434d  8e 70 fb
    cmp a,#0x06             ;4350  4d 06
    bnz lab_4359            ;4352  bd 05

lab_4354:
    mov a,#0x01             ;4354  a1 01
    br !lab_442a            ;4356  9b 2a 44

lab_4359:
    ret                     ;4359  af

lab_435a:
    mov a,#0x01             ;435a  a1 01
    call !sub_43b1          ;435c  9a b1 43
    bnc lab_4364            ;435f  9d 03
    br !lab_442a            ;4361  9b 2a 44

lab_4364:
    ret                     ;4364  af

lab_4365:
    mov a,#0x02             ;4365  a1 02
    call !sub_43b1          ;4367  9a b1 43
    bnc lab_436f            ;436a  9d 03
    br !lab_442a            ;436c  9b 2a 44

lab_436f:
    ret                     ;436f  af

lab_4370:
    call !sub_4396          ;4370  9a 96 43
    push psw                ;4373  22
    mov a,!mem_f191         ;4374  8e 91 f1
    pop psw                 ;4377  23
    bnz lab_4382            ;4378  bd 08

lab_437a:
    call !sub_438e          ;437a  9a 8e 43
    cmp a,!mem_f191         ;437d  48 91 f1
    bz lab_4395             ;4380  ad 13

lab_4382:
    cmp a,#0x00             ;4382  4d 00
    bz lab_437a             ;4384  ad f4
    call !sub_43b1          ;4386  9a b1 43
    bnc lab_437a            ;4389  9d ef
    br !lab_442a            ;438b  9b 2a 44

sub_438e:
    inc a                   ;438e  41
    cmp a,#0x03             ;438f  4d 03
    bc lab_4395             ;4391  8d 02
    mov a,#0x00             ;4393  a1 00

lab_4395:
    ret                     ;4395  af

sub_4396:
    mov a,mem_fe30          ;4396  f0 30
    mov b,#0x00             ;4398  a3 00
    movw hl,#mem_b0f4+1     ;439a  16 f5 b0
    cmp a,[hl+b]            ;439d  31 4b
    bz lab_43ac             ;439f  ad 0b

sub_43a1:
    mov b,#0x03             ;43a1  a3 03

lab_43a3:
    movw hl,#mem_b0f4       ;43a3  16 f4 b0
    cmp a,[hl+b]            ;43a6  31 4b
    bz lab_43b0             ;43a8  ad 06
    dbnz b,lab_43a3         ;43aa  8b f7

lab_43ac:
    mov b,#0xff             ;43ac  a3 ff
    clr1 psw.6              ;43ae  6b 1e        Clear the Z flag

lab_43b0:
    ret                     ;43b0  af

sub_43b1:
    push ax                 ;43b1  b1
    mov b,a                 ;43b2  73
    movw hl,#mem_b0f8+1     ;43b3  16 f9 b0
    callf !table_get_word   ;43b6  4c 48        Load DE with word at position B in table [HL]
    pop bc                  ;43b8  b2
    bc lab_4400             ;43b9  8d 45        Branch if table lookup failed
    mov a,[de]              ;43bb  85
    cmp a,#0x00             ;43bc  4d 00
    xch a,b                 ;43be  33
    bnz lab_4402            ;43bf  bd 41
    cmp a,#0x01             ;43c1  4d 01
    bnz lab_43ea            ;43c3  bd 25
    cmp mem_fe43_key,#0x49  ;43c5  c8 43 49
    bz lab_4400             ;43c8  ad 36
    call !sub_7697_snd_cd   ;43ca  9a 97 76     Unknown; snd_msg_idx and CD related
    cmp mem_fe43_key,#0x34  ;43cd  c8 43 34
    bnz lab_43de            ;43d0  bd 0c

    mov a,#35               ;43d2  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;43d4  9e 2e fb

    mov a,#0x0a             ;43d7  a1 0a
    mov !tmp_msg_idx,a      ;43d9  9e a6 f1     a Writes "TAPE ERROR "

    br lab_43fd             ;43dc  fa 1f

lab_43de:
    mov a,#35               ;43de  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;43e0  9e 2e fb

    mov a,#0x0b             ;43e3  a1 0b
    mov !tmp_msg_idx,a      ;43e5  9e a6 f1     b Writes "    NO TAPE"

    br lab_43fd             ;43e8  fa 13

lab_43ea:
    cmp a,#0x02             ;43ea  4d 02
    bnz lab_4400            ;43ec  bd 12
    cmp mem_fe43_key,#0x49  ;43ee  c8 43 49
    bz lab_4400             ;43f1  ad 0d

    mov a,#35               ;43f3  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;43f5  9e 2e fb

    mov a,#0x06             ;43f8  a1 06
    mov !tmp_msg_idx,a      ;43fa  9e a6 f1     6 Writes "NO  CHANGER"

lab_43fd:
    call !sub_4609          ;43fd  9a 09 46

lab_4400:
    clr1 cy                 ;4400  21
    ret                     ;4401  af

lab_4402:
    cmp a,#0x02             ;4402  4d 02
    xch a,b                 ;4404  33
    bnz lab_4427            ;4405  bd 20
    cmp a,#0x02             ;4407  4d 02
    bnz lab_4414            ;4409  bd 09

    mov a,#35               ;440b  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;440d  9e 2e fb

    mov a,#0x05             ;4410  a1 05        5 Writes "NO  MAGAZIN"
    br lab_441f             ;4412  fa 0b

lab_4414:
    cmp a,#0x03             ;4414  4d 03
    bnz lab_4427            ;4416  bd 0f

    mov a,#35               ;4418  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;441a  9e 2e fb

    mov a,#0x04             ;441d  a1 04        4 Writes "    NO DISC"

lab_441f:
    mov !tmp_msg_idx,a      ;441f  9e a6 f1

    call !sub_4609          ;4422  9a 09 46
    br lab_4400             ;4425  fa d9

lab_4427:
    xch a,b                 ;4427  33
    set1 cy                 ;4428  20
    ret                     ;4429  af

lab_442a:
    call !sub_442f          ;442a  9a 2f 44
    br sub_4469             ;442d  fa 3a

sub_442f:
    mov !mem_f191,a         ;442f  9e 91 f1
    mov b,a                 ;4432  73
    movw hl,#mem_b0f4+1     ;4433  16 f5 b0
    mov a,[hl+b]            ;4436  ab
    ret                     ;4437  af

lab_4438:
    mov a,!mem_f190         ;4438  8e 90 f1

    mov mem_fe30,a          ;443b  f2 30
    cmp a,#0x00             ;443d  4d 00
    bz lab_4465             ;443f  ad 24

    mov a,!tmp_msg_idx      ;4441  8e a6 f1
    and a,#0x7f             ;4444  5d 7f
    cmp a,#0x00             ;4446  4d 00
    bz lab_4452             ;4448  ad 08

    call !sub_7697_snd_cd   ;444a  9a 97 76     Unknown; snd_msg_idx and CD related

    mov a,#0                ;444d  a1 00        A = 0 seconds
    mov !msg_countdown,a    ;444f  9e 2e fb

lab_4452:
    mov a,mem_fe30          ;4452  f0 30
    btclr mem_fe64.3,lab_445d ;4454  31 31 64 05
    mov mem_fed4,a          ;4458  f2 d4
    call !sub_4577          ;445a  9a 77 45

lab_445d:
    mov a,mem_fe30          ;445d  f0 30
    movw hl,#mem_f256       ;445f  16 56 f2
    call !eeram_wr_byte_hl  ;4462  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_4465:
    ret                     ;4465  af

lab_4466:
    mov a,c                 ;4466  62
    and a,#0x3f             ;4467  5d 3f

sub_4469:
    cmp a,#0x04             ;4469  4d 04
    bc lab_446f             ;446b  8d 02

lab_446d:
    mov a,#0x01             ;446d  a1 01

lab_446f:
    bf mem_fe2d.0,lab_447c  ;446f  31 03 2d 09
    bf mem_fe2c.5,lab_447c  ;4473  31 53 2c 05
    bt mem_fe62.1,lab_447c  ;4477  9c 62 02
    br lab_4491             ;447a  fa 15

lab_447c:
    cmp a,#0x00             ;447c  4d 00
    bz lab_4491             ;447e  ad 11
    mov x,a                 ;4480  70
    mov a,!mem_fb71         ;4481  8e 71 fb
    cmp a,#0xc3             ;4484  4d c3
    bz lab_448f             ;4486  ad 07
    mov a,x                 ;4488  60
    movw hl,#mem_f256       ;4489  16 56 f2
    call !eeram_wr_byte_hl  ;448c  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_448f:
    mov a,#0x00             ;448f  a1 00

lab_4491:
    mov !mem_f190,a         ;4491  9e 90 f1
    ret                     ;4494  af

sub_4495:
    movw de,#mem_f192       ;4495  14 92 f1
    movw hl,#mem_fe30       ;4498  16 30 fe
    mov b,#0x01             ;449b  a3 01
    callf !sub_0bef         ;449d  3c ef

    movw hl,#mem_f18f       ;449f  16 8f f1
    mov b,#0x03             ;44a2  a3 03
    br !sub_0bf6            ;44a4  9b f6 0b

sub_44a7:
    mov a,!mem_f193         ;44a7  8e 93 f1
    cmp a,#0x00             ;44aa  4d 00
    bnz lab_44b0            ;44ac  bd 02
    mov a,#0x01             ;44ae  a1 01

lab_44b0:
    call !sub_4469          ;44b0  9a 69 44
    br sub_4495             ;44b3  fa e0

lab_44b5:
    cmp mem_fe30,#0x02      ;44b5  c8 30 02
    bz lab_44e3             ;44b8  ad 29
    mov a,!mem_fb71         ;44ba  8e 71 fb
    cmp a,#0xc3             ;44bd  4d c3
    bz lab_44cc             ;44bf  ad 0b
    bt mem_fe2c.5,lab_44db  ;44c1  dc 2c 17
    mov mem_fed4,#0x02      ;44c4  11 d4 02
    call !sub_4592          ;44c7  9a 92 45
    br lab_4501             ;44ca  fa 35

lab_44cc:
    mov a,!mem_f256         ;44cc  8e 56 f2
    cmp a,#0x02             ;44cf  4d 02
    bnz lab_44db            ;44d1  bd 08

    mov a,#0x01             ;44d3  a1 01
    movw hl,#mem_f256       ;44d5  16 56 f2
    call !eeram_wr_byte_hl  ;44d8  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_44db:
    mov mem_fed4,#0x02      ;44db  11 d4 02
    call !sub_4592          ;44de  9a 92 45
    br lab_4501             ;44e1  fa 1e

lab_44e3:
    cmp mem_fe4c,#0x02      ;44e3  c8 4c 02
    bnz lab_4501            ;44e6  bd 19
    call !sub_7697_snd_cd   ;44e8  9a 97 76     Unknown; snd_msg_idx and CD related
    mov mem_fed4,#0x01      ;44eb  11 d4 01
    mov a,!mem_f194         ;44ee  8e 94 f1
    cmp a,#0x00             ;44f1  4d 00
    bz lab_44fb             ;44f3  ad 06
    cmp a,#0x02             ;44f5  4d 02
    bz lab_44fb             ;44f7  ad 02
    mov mem_fed4,a          ;44f9  f2 d4

lab_44fb:
    call !sub_4577          ;44fb  9a 77 45
    call !sub_44a7          ;44fe  9a a7 44

lab_4501:
    ret                     ;4501  af

lab_4502:
    mov mem_fed4,#0x02      ;4502  11 d4 02
    call !sub_4592          ;4505  9a 92 45
    mov a,#0x00             ;4508  a1 00
    mov !mem_f190,a         ;450a  9e 90 f1
    mov a,#0x01             ;450d  a1 01
    cmp a,#0x01             ;450f  4d 01
    bnz lab_4538            ;4511  bd 25
    cmp mem_fe43_key,#0x49  ;4513  c8 43 49
    bz lab_454e             ;4516  ad 36
    call !sub_7697_snd_cd   ;4518  9a 97 76     Unknown; snd_msg_idx and CD related
    cmp mem_fe43_key,#0x34  ;451b  c8 43 34
    bnz lab_452c            ;451e  bd 0c

    mov a,#35               ;4520  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;4522  9e 2e fb

    mov a,#0x0a             ;4525  a1 0a
    mov !tmp_msg_idx,a      ;4527  9e a6 f1     a Writes "TAPE ERROR "

    br lab_454b             ;452a  fa 1f

lab_452c:
    mov a,#35               ;452c  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;452e  9e 2e fb

    mov a,#0x0b             ;4531  a1 0b
    mov !tmp_msg_idx,a      ;4533  9e a6 f1     b Writes "    NO TAPE"

    br lab_454b             ;4536  fa 13

lab_4538:
    cmp a,#0x02             ;4538  4d 02
    bnz lab_454e            ;453a  bd 12
    cmp mem_fe43_key,#0x49  ;453c  c8 43 49
    bz lab_454e             ;453f  ad 0d

    mov a,#35               ;4541  a1 23        A = 3.5 seconds
    mov !msg_countdown,a    ;4543  9e 2e fb

    mov a,#0x06             ;4546  a1 06        6 Writes "NO  CHANGER"
    mov !tmp_msg_idx,a      ;4548  9e a6 f1

lab_454b:
    call !sub_4609          ;454b  9a 09 46

lab_454e:
    ret                     ;454e  af

lab_454f:
    cmp mem_fe30,#0x03      ;454f  c8 30 03
    bnz lab_4562            ;4552  bd 0e
    mov mem_fed4,#0x03      ;4554  11 d4 03
    call !sub_4592          ;4557  9a 92 45
    mov a,#0x00             ;455a  a1 00
    mov !mem_f190,a         ;455c  9e 90 f1
    br !sub_44a7            ;455f  9b a7 44

lab_4562:
    mov mem_fed4,#0x03      ;4562  11 d4 03
    call !sub_4592          ;4565  9a 92 45
    ret                     ;4568  af

sub_4569:
    clr1 mem_fe64.3         ;4569  3b 64
    mov b,#0x04             ;456b  a3 04
    movw hl,#mem_f193       ;456d  16 93 f1
    decw hl                 ;4570  96

lab_4571_loop:
    mov a,#0x01             ;4571  a1 01
    mov [hl+b],a            ;4573  bb
    dbnz b,lab_4571_loop    ;4574  8b fb
    ret                     ;4576  af

sub_4577:
    mov a,mem_fed4          ;4577  f0 d4
    cmp a,!mem_f193         ;4579  48 93 f1
    bz lab_4591             ;457c  ad 13
    mov b,#0x03             ;457e  a3 03
    movw hl,#mem_f193       ;4580  16 93 f1
    decw hl                 ;4583  96

lab_4584:
    mov a,b                 ;4584  63
    inc a                   ;4585  41
    mov c,a                 ;4586  72
    mov a,[hl+b]            ;4587  ab
    mov [hl+c],a            ;4588  ba
    dbnz b,lab_4584         ;4589  8b f9
    movw hl,#mem_f193       ;458b  16 93 f1
    mov a,mem_fed4          ;458e  f0 d4
    mov [hl],a              ;4590  97

lab_4591:
    ret                     ;4591  af

sub_4592:
    clr1 mem_fe64.4         ;4592  4b 64
    mov b,#0x04             ;4594  a3 04
    movw hl,#mem_f193       ;4596  16 93 f1
    decw hl                 ;4599  96

lab_459a:
    mov a,mem_fed4          ;459a  f0 d4
    cmp a,[hl+b]            ;459c  31 4b
    bnz lab_45aa            ;459e  bd 0a
    set1 mem_fe64.4         ;45a0  4a 64
    mov a,#0x00             ;45a2  a1 00
    mov [hl+b],a            ;45a4  bb
    push bc                 ;45a5  b3
    call !sub_45ba          ;45a6  9a ba 45
    pop bc                  ;45a9  b2

lab_45aa:
    dbnz b,lab_459a         ;45aa  8b ee
    bf mem_fe64.4,lab_45b9  ;45ac  31 43 64 09

    mov a,!mem_f193         ;45b0  8e 93 f1
    movw hl,#mem_f256       ;45b3  16 56 f2
    call !eeram_wr_byte_hl  ;45b6  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_45b9:
    ret                     ;45b9  af

sub_45ba:
    mov a,b                 ;45ba  63
    cmp a,#0x04             ;45bb  4d 04
    bz lab_45d2             ;45bd  ad 13
    movw hl,#mem_f193       ;45bf  16 93 f1
    decw hl                 ;45c2  96

lab_45c3:
    mov a,b                 ;45c3  63
    mov c,a                 ;45c4  72
    inc c                   ;45c5  42
    mov a,[hl+c]            ;45c6  aa
    mov [hl+b],a            ;45c7  bb
    inc b                   ;45c8  43
    mov a,b                 ;45c9  63
    cmp a,#0x05             ;45ca  4d 05
    bnz lab_45c3            ;45cc  bd f5
    mov a,#0x00             ;45ce  a1 00
    mov [hl+0x04],a         ;45d0  be 04

lab_45d2:
    ret                     ;45d2  af

lab_45d3:
    mov a,#0x00             ;45d3  a1 00
    mov !mem_fb27,a         ;45d5  9e 27 fb
    clr1 mem_fe64.1         ;45d8  1b 64
    set1 mem_fe64.2         ;45da  2a 64
    br !lab_4334            ;45dc  9b 34 43

lab_45df:
    mov a,#0x00             ;45df  a1 00
    mov !mem_fb27,a         ;45e1  9e 27 fb
    clr1 mem_fe64.1         ;45e4  1b 64
    set1 mem_fe64.2         ;45e6  2a 64
    br !lab_435a            ;45e8  9b 5a 43

lab_45eb:
    mov a,#0x00             ;45eb  a1 00
    mov !mem_fb27,a         ;45ed  9e 27 fb
    clr1 mem_fe64.1         ;45f0  1b 64
    set1 mem_fe64.2         ;45f2  2a 64
    br !lab_4365            ;45f4  9b 65 43

lab_45f7:
    mov a,#0x00             ;45f7  a1 00
    mov !mem_fb27,a         ;45f9  9e 27 fb
    clr1 mem_fe64.1         ;45fc  1b 64
    set1 mem_fe64.2         ;45fe  2a 64
    br !lab_4339            ;4600  9b 39 43

lab_4603:
    mov a,#0x00             ;4603  a1 00
    mov !mem_fb27,a         ;4605  9e 27 fb
    ret                     ;4608  af

sub_4609:
    set1 mem_fe80.0         ;4609  0a 80
    call !sub_a74b          ;460b  9a 4b a7
    mov a,#0x1e             ;460e  a1 1e
    mov !mem_fb27,a         ;4610  9e 27 fb
    mov a,#0x00             ;4613  a1 00
    call !sub_4469          ;4615  9a 69 44
    set1 mem_fe64.1         ;4618  1a 64
    ret                     ;461a  af

sub_461b:
    mov a,#0x00             ;461b  a1 00
    mov !mem_f190,a         ;461d  9e 90 f1
    mov mem_fe30,a          ;4620  f2 30
    br !sub_4495            ;4622  9b 95 44

sub_4625:
    mov a,!mem_fb28             ;4625  8e 28 fb
    cmp a,#0x00                 ;4628  4d 00
    bnz lab_463c                ;462a  bd 10
    clr1 mem_fe64.7             ;462c  7b 64
    call !kwp_logout_disconnect ;462e  9a c3 51     Branch to Clear KWP1281 auth bits and disconnect
    cmp mem_fe31,#0x00          ;4631  c8 31 00
    bz lab_463a                 ;4634  ad 04
    mov a,#0x00                 ;4636  a1 00
    mov mem_fe31,a              ;4638  f2 31

lab_463a:
    br lab_4688             ;463a  fa 4c

lab_463c:
    cmp mem_fe31,#0x00      ;463c  c8 31 00
    bz lab_463a             ;463f  ad f9

    mov a,!mem_fbad         ;4641  8e ad fb
    cmp a,#0xff             ;4644  4d ff
    bz lab_4654             ;4646  ad 0c
    mov x,a                 ;4648  70

    mov a,!mem_fbae         ;4649  8e ae fb     A = analog number number to read
    call !read_analog       ;464c  9a c3 ab     Read analog input number A and do ???

    mov !mem_fbac,a         ;464f  9e ac fb
    clr1 mem_fe78.1         ;4652  1b 78

lab_4654:
    bf mem_fe31.2,lab_4688  ;4654  31 23 31 30
    mov a,!mem_fb04         ;4658  8e 04 fb
    cmp a,#0x00             ;465b  4d 00
    bnz lab_4680            ;465d  bd 21
    mov a,#0x08             ;465f  a1 08
    mov !mem_fb04,a         ;4661  9e 04 fb
    mov wdtm,#wd_run_irq    ;4664  13 f9 80     (Re-)Start watchdog in interval mode (Maskable INTWDT when watchdog fires)
    mov a,#0x0f             ;4667  a1 0f
    mov !mem_fb4e,a         ;4669  9e 4e fb
    call !sub_3329          ;466c  9a 29 33     Decrements mem_f06f
    mov a,!mem_fbb0         ;466f  8e b0 fb
    dec a                   ;4672  51
    mov !mem_fbb0,a         ;4673  9e b0 fb
    bnz lab_4680            ;4676  bd 08
    mov a,#0x04             ;4678  a1 04
    mov !mem_fbb0,a         ;467a  9e b0 fb
    call !kwp_check_idle    ;467d  9a 3f 33     Unknown, but decrements KWP1281 related kwp_idle_ms

lab_4680:
    call !sub_4dd8          ;4680  9a d8 4d     Dispatch KWP1281 routine in mem_b247 table based on value in mem_fbc9
    call !sub_6305          ;4683  9a 05 63
    br sub_4625             ;4686  fa 9d

lab_4688:
    bt mem_fe64.6,lab_4693  ;4688  ec 64 08
    mov a,!mem_fc25         ;468b  8e 25 fc
    clr1 a.7                ;468e  61 fb
    mov !mem_fc25,a         ;4690  9e 25 fc

lab_4693:
    ret                     ;4693  af

auth_login_7c_ocled:
;Authenticate login on address 0x7C using "OCLED" (DELCO backwards)
;called from kwp_7c_2b_login (login related, kwp_7c_handlers)
;set mem_fe64.7 and returns it in the carry:
;  clear = login failed, set = login successful
;
    clr1 mem_fe64.7         ;4694  7b 64        Clear bit to indicate no DELCO login

    movw hl,#kwp_rx_buf+3   ;4696  16 8d f0     HL = pointer to KWP1281 rx buffer byte 3
    movw de,#kwp_login_b1eb ;4699  14 eb b1     DE = pointer to "OCLED" (DELCO backwards)
    mov a,#0x05             ;469c  a1 05        A = 5 bytes to compare
    callf !compare          ;469e  4c ca        Compare A bytes between [HL] to [DE]
    bnz lab_46a9            ;46a0  bd 07        Branch if buffers are not equal

    ;login succeeded
    set1 mem_fe64.7         ;46a2  7a 64        Set bit to indicate successful DELCO login
    mov a,#0x34             ;46a4  a1 34
    mov !mem_fb28,a         ;46a6  9e 28 fb

lab_46a9:
    mov1 cy,mem_fe64.7      ;46a9  71 74 64     Copy bit into carry (clear = login failed,
                            ;                     set = login successful)
    ret                     ;46ac  af

sub_46ad:
;Called from Title=0x1b  Subtitle=0x26  Block length=0x06
;1 request parameter
;Replies with data
    mov a,!kwp_rx_buf+5     ;46ad  8e 8f f0     A = value at KWP1281 rx buffer byte 5
    and a,#0x07             ;46b0  5d 07
    mov mem_fe31,a          ;46b2  f2 31
    mov a,#0x03             ;46b4  a1 03        A = 3 bytes to copy
    call !sub_486f          ;46b6  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    mov a,#0x03             ;46b9  a1 03
    mov !mem_fbaf,a         ;46bb  9e af fb     mem_fbaf = 3
    ret                     ;46be  af

sub_46bf:
;Called from Title=0x1b  Subtitle=0x27  Block length=0x07
;2 request parameters
;Replies with ACK only
    mov a,!kwp_rx_buf+5     ;46bf  8e 8f f0     A = value at KWP1281 rx buffer byte 5
    clr1 mem_fe64.6         ;46c2  6b 64
    bf a.1,lab_46c9         ;46c4  31 1f 02
    set1 mem_fe64.6         ;46c7  6a 64

lab_46c9:
    rorc a,1                ;46c9  25
    mov a,!kwp_rx_buf+6     ;46ca  8e 90 f0     KWP1281 rx buffer byte 6
    bc lab_46e8             ;46cd  8d 19
    mov b,a                 ;46cf  73
    movw hl,#mem_b1c7+1     ;46d0  16 c8 b1
    mov a,!mem_f1e9         ;46d3  8e e9 f1
    bf a.0,lab_46e4         ;46d6  31 0f 0b
    movw hl,#mem_b1d3+1     ;46d9  16 d4 b1
    cmp mem_fe30,#0x01      ;46dc  c8 30 01
    bz lab_46e4             ;46df  ad 03
    movw hl,#mem_b1df+1     ;46e1  16 e0 b1

lab_46e4:
    callf !table_get_byte   ;46e4  4c 7d      Load A with byte at position B in table [HL]
    bc lab_46f0             ;46e6  8d 08      Branch if lookup failed

lab_46e8:
    set1 a.7                ;46e8  61 fa
    mov !mem_fc25,a         ;46ea  9e 25 fc
    mov b,#0x00             ;46ed  a3 00
    callt [0x0040]          ;46ef  c1         Calls sub_0994

lab_46f0:
    ret                     ;46f0  af

sub_46f1:
;Called from Title=0x1b  Subtitle=0x28  Block length=0x05
;0 request parameters
;Replies with ACK only
    set1 mem_fe73.3         ;46f1  3a 73
    set1 mem_fe73.4         ;46f3  4a 73
    set1 mem_fe73.6         ;46f5  6a 73
    set1 mem_fe73.5         ;46f7  5a 73
    br !lab_aa92            ;46f9  9b 92 aa

sub_46fc:
;Called from Title=0x1b  Subtitle=0x2a  Block length=0x07
;2 request parameters
;Replies with ACK only
    call !sub_4835          ;46fc  9a 35 48     Reads rx buffer bytes 5,6 and
                            ;                     does something with mem_fe65.0
    bc lab_4730             ;46ff  8d 2f        Branch if failed

    movw hl,ax              ;4701  d6
    mov !mem_fb9d,a         ;4702  9e 9d fb
    mov a,x                 ;4705  60
    mov !mem_fb9e,a         ;4706  9e 9e fb
    mov a,#0x02             ;4709  a1 02        A = 2 bytes to copy
    call !sub_486f          ;470b  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    bf mem_fe65.0,lab_4724  ;470e  31 03 65 12

lab_4712:
    call !eeprom_guard      ;4712  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_4712            ;4715  9d fb        Repeat until available

    mov a,#0x04             ;4717  a1 04        A = 4 bytes to read from EEPROM
    movw de,#i2c_buf        ;4719  14 db fb     DE = pointer to buffer to receive EEPROM contents
    call !eeprom_read       ;471c  9a 38 62     Read A bytes from EEPROM address HL into [DE]
    bnc lab_4730            ;471f  9d 0f        Branch if EEPROM read failed

    movw hl,#i2c_buf        ;4721  16 db fb     HL = source address
lab_4724:
    movw de,#mem_fb9f       ;4724  14 9f fb     DE = destination address
    mov a,#0x04             ;4727  a1 04        A = 4 bytes to copy
    callf !copy             ;4729  4c 9e        Copy A bytes from [HL] to [DE]
    mov a,#0x08             ;472b  a1 08
    mov !mem_fbaf,a         ;472d  9e af fb     mem_fbaf = 8

lab_4730:
    ret                     ;4730  af

sub_4731:
;Called from Title=0x1b  Subtitle=0x2d  Block length=0x0b
;6 request parameters
;Replies with data
    mov a,!kwp_rx_buf+5     ;4731  8e 8f f0     A = value at KWP1281 rx buffer byte 5
    cmp a,#0x00             ;4734  4d 00
    bz lab_474d             ;4736  ad 15
    bf a.7,lab_474e         ;4738  31 7f 13
    mov a,#0x08             ;473b  a1 08        A = 8 bytes to copy
    mov !mem_fbaf,a         ;473d  9e af fb
    call !sub_486f          ;4740  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    movw de,#mem_fba7       ;4743  14 a7 fb

sub_4746:
    mov a,#0x05             ;4746  a1 05        A = 5 bytes to copy
    movw hl,#kwp_rx_buf+6   ;4748  16 90 f0     HL = source address (KWP rx buffer byte 6)
    callf !copy             ;474b  4c 9e        Copy A bytes from [HL] to [DE]

lab_474d:
    ret                     ;474d  af

lab_474e:
    set1 mem_fe69.1         ;474e  1a 69
    mov mem_fed4,#0xc0      ;4750  11 d4 c0
    and a,#0x07             ;4753  5d 07
    bz sub_4797             ;4755  ad 40
    cmp a,#0x05             ;4757  4d 05
    bc lab_475d             ;4759  8d 02
    mov a,#0x05             ;475b  a1 05

lab_475d:
    mov x,a                 ;475d  70
    push ax                 ;475e  b1
    mov a,!kwp_rx_buf+5     ;475f  8e 8f f0     A = value at KWP1281 rx buffer byte 5
    and a,#0x78             ;4762  5d 78
    cmp a,#0x10             ;4764  4d 10
    bc lab_476e             ;4766  8d 06
    mov mem_fed4,#0x80      ;4768  11 d4 80
    call !sub_4797          ;476b  9a 97 47

lab_476e:
    mov a,#0x03             ;476e  a1 03        A = 3 bytes to copy
    call !sub_486f          ;4770  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    pop ax                  ;4773  b0
    add a,#0x03             ;4774  0d 03
    mov !mem_fbaf,a         ;4776  9e af fb
    mov a,!kwp_rx_buf+6     ;4779  8e 90 f0     KWP1281 rx buffer byte 6
    set1 a.0                ;477c  61 8a
    xch a,x                 ;477e  30
    or a,#0xc0              ;477f  6d c0
    movw hl,#mem_fb9e       ;4781  16 9e fb
    push ax                 ;4784  b1
    mov a,x                 ;4785  60
    and a,#0xfe             ;4786  5d fe
    cmp a,#0xc2             ;4788  4d c2
    pop ax                  ;478a  b0
    bnz lab_4792            ;478b  bd 05
    call !sub_5d99          ;478d  9a 99 5d
    br lab_4795             ;4790  fa 03

lab_4792:
    call !sub_5ee8          ;4792  9a e8 5e     TODO perform I2C read?

lab_4795:
    set1 cy                 ;4795  20
    ret                     ;4796  af

sub_4797:
    mov a,#0x08             ;4797  a1 08        A = 8 bytes to copy
    mov !mem_fbaf,a         ;4799  9e af fb
    call !sub_486f          ;479c  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    movw de,#i2c_buf        ;479f  14 db fb
    call !sub_4746          ;47a2  9a 46 47
    mov a,#0x05             ;47a5  a1 05        A = 5 bytes to copy
    movw hl,#mem_fba7       ;47a7  16 a7 fb     HL = source address
    callf !copy             ;47aa  4c 9e        Copy A bytes from [HL] to [DE]
    mov a,!kwp_rx_buf+5     ;47ac  8e 8f f0     A = value at KWP1281 rx buffer byte 5
    ror a,1                 ;47af  24
    ror a,1                 ;47b0  24
    ror a,1                 ;47b1  24
    and a,#0x0f             ;47b2  5d 0f
    cmp a,#0x0a             ;47b4  4d 0a
    bc lab_47ba             ;47b6  8d 02
    mov a,#0x0a             ;47b8  a1 0a

lab_47ba:
    or a,mem_fed4           ;47ba  6e d4
    movw hl,#i2c_buf        ;47bc  16 db fb
    push ax                 ;47bf  b1
    mov a,[hl]              ;47c0  87
    and a,#0xfe             ;47c1  5d fe
    cmp a,#0xc2             ;47c3  4d c2
    pop ax                  ;47c5  b0
    bnz lab_47cd            ;47c6  bd 05
    call !sub_5e2a          ;47c8  9a 2a 5e
    br lab_47d0             ;47cb  fa 03

lab_47cd:
    call !sub_5f51          ;47cd  9a 51 5f     TODO perform I2C write?

lab_47d0:
    clr1 cy                 ;47d0  21
    ret                     ;47d1  af

sub_47d2:
;Called from Title=0x1b  Subtitle=0x2e  Block length=0x0b
;6 request parameters
;Replies with data
    mov a,#0x08             ;47d2  a1 08        A = 8 bytes to copy
    mov !mem_fbaf,a         ;47d4  9e af fb
    call !sub_486f          ;47d7  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    call !sub_4835          ;47da  9a 35 48     Reads rx buffer bytes 5,6 and
                            ;                     does something with mem_fe65.0
    bc lab_47f5             ;47dd  8d 16        Branch if failed

    movw de,ax              ;47df  d4
    mov !mem_fb9d,a         ;47e0  9e 9d fb
    mov a,x                 ;47e3  60
    mov !mem_fb9e,a         ;47e4  9e 9e fb
    mov a,!kwp_rx_buf+7     ;47e7  8e 91 f0     KWP1281 rx buffer byte 7
    and a,#0x03             ;47ea  5d 03
    mov !mem_fb9f,a         ;47ec  9e 9f fb
    movw hl,#kwp_rx_buf+8   ;47ef  16 92 f0     KWP1281 rx buffer byte 8
    call !sub_4862          ;47f2  9a 62 48     EEPROM write related(?) gated by mem_fe65

lab_47f5:
    ret                     ;47f5  af

sub_47f6:
;Title=0x1b  Subtitle=0x31  Block length=0x05
;0 request parameters
;Replies with ACK only
    set1 mem_fe64.5         ;47f6  5a 64
    br !lab_4165            ;47f8  9b 65 41

sub_47fb:
;Title=0x1b  Subtitle=0x32  Block length=0x05
;Calculate ROM checksum
;
;Returns:
;  AX = checksum in reverse order (A=low, X=high)
;  mem_fb9e: Checksum low byte
;  mem_fb9d: Checksum high byte
;
    mov a,#0x04             ;47fb  a1 04
    mov !mem_fbaf,a         ;47fd  9e af fb

    mov a,#0x02             ;4800  a1 02        A = 2 bytes to copy
    call !sub_486f          ;4802  9a 6f 48     Copy A bytes from kwp_rx_buf+3 to mem_fb9b
                            ;                   XXX these two bytes are never used.

    movw hl,#rst_vect       ;4805  16 00 00     HL = start address (beginning of this ROM)
    movw ax,#0x5555         ;4808  10 55 55     AX = initial value of checksum

lab_480b_loop:
    add a,[hl]              ;480b  0f           Add to checksum low byte
    bnc lab_4812_nc         ;480c  9d 04

    inc x                   ;480e  40           Increment checksum high byte
    mov wdtm,#wd_run_irq    ;480f  13 f9 80     (Re-)Start watchdog in interval mode (Maskable INTWDT when watchdog fires)

lab_4812_nc:
    incw hl                 ;4812  86           Increment current address

    xchw ax,hl              ;4813  e6           Swap so that:
                            ;                     AX = current address
                            ;                     HL = checksum
    cmpw ax,#checksum       ;4814  ea fe ef     Compare current address to checksum location
    xchw ax,hl              ;4817  e6           Swap again so that:
                            ;                     HL = checksum
                            ;                     AX = current address
    bc lab_480b_loop        ;4818  8d f1        Branch if current address < checksum location

    ;Checksum finished
    ;  A = Checksum low byte    \  Note: this is the reverse order of how words are
    ;  X = Checksum high byte   /        stored for the 16-bit operations like MOVW.

    mov !mem_fb9e,a         ;481a  9e 9e fb     mem_fb9e = Checksum low byte
    xch a,x                 ;481d  30
    mov !mem_fb9d,a         ;481e  9e 9d fb     mem_fb9d = Checksum high byte
    ret                     ;4821  af

sub_4822:
;Set mem_fb28 = 0 and return
    mov a,#0x00             ;4822  a1 00
    mov !mem_fb28,a         ;4824  9e 28 fb
    ret                     ;4827  af

sub_4828:
;If mem_fb28 = 0 then just return, else set mem_fb28 = 0x34
    mov a,!mem_fb28         ;4828  8e 28 fb
    cmp a,#0x00             ;482b  4d 00
    bz lab_4834             ;482d  ad 05
    mov a,#0x34             ;482f  a1 34
    mov !mem_fb28,a         ;4831  9e 28 fb

lab_4834:
    ret                     ;4834  af

sub_4835:
;Reads rx buffer bytes 5,6 and does something with mem_fe65.0
;Sets mem_fe65.0 if out of range
;Returns carry set on failure
    clr1 mem_fe65.0         ;4835  0b 65
    mov a,!kwp_rx_buf+5     ;4837  8e 8f f0     A = value at KWP1281 rx buffer byte 5
    mov b,a                 ;483a  73
    movw hl,#mem_b18f+1     ;483b  16 90 b1
    callf !table_get_word   ;483e  4c 48        Load DE with word at position B in table [HL]
    bc lab_4859_ret         ;4840  8d 17        Branch if table lookup failed
    mov x,#0x00             ;4842  a0 00
    mov a,!kwp_rx_buf+6     ;4844  8e 90 f0     KWP1281 rx buffer byte 6
    bf a.7,lab_484c         ;4847  31 7f 02
    mov x,#0xff             ;484a  a0 ff

lab_484c:
    add a,e                 ;484c  61 0c
    xch a,x                 ;484e  30
    addc a,d                ;484f  61 2d
    cmpw ax,#0x0200         ;4851  ea 00 02     0x200 = 512 bytes in EEPROM
    bnc lab_4858            ;4854  9d 02        Branch if address is out of range
    ;carry is set
    set1 mem_fe65.0         ;4856  0a 65

lab_4858:
    clr1 cy                 ;4858  21

lab_4859_ret:
    ret                     ;4859  af

sub_485a:
;DE = #mem_fb9b, A=!mem_fbaf, C=A
    movw de,#mem_fb9b       ;485a  14 9b fb
    mov a,!mem_fbaf         ;485d  8e af fb
    mov c,a                 ;4860  72
    ret                     ;4861  af

sub_4862:
    bf mem_fe65.0,lab_486c  ;4862  31 03 65 06

lab_4866:
    call !eeprom_write      ;4866  9a 8e 62     Write A bytes to EEPROM address DE from [HL]
    bnc lab_4866            ;4869  9d fb        Repeat until success
    ret                     ;486b  af

lab_486c:
    callf !copy             ;486c  4c 9e        Copy A bytes from [HL] to [DE]
    ret                     ;486e  af

sub_486f:
;Copy A bytes from kwp_rx_buf+3 to mem_fb9b
    push de                 ;486f  b5
    push hl                 ;4870  b7
    movw hl,#kwp_rx_buf+3   ;4871  16 8d f0     HL = source address
    movw de,#mem_fb9b       ;4874  14 9b fb     DE = destination address
    callf !copy             ;4877  4c 9e        Copy A bytes from [HL] to [DE]
    pop hl                  ;4879  b6
    pop de                  ;487a  b4
    ret                     ;487b  af

sub_487c:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;487c  4d 0a
    bc lab_4886_lt_0x0a     ;487e  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;4880  1d 0a      A = A - 0x0A
    add a,#'A               ;4882  0d 41      Convert to ASCII 'A'-'F'
    br lab_4888_ret         ;4884  fa 02
lab_4886_lt_0x0a:
    add a,#'0               ;4886  0d 30      Convert to ASCII '0'-'9'
lab_4888_ret:
    ret                     ;4888  af

sub_4889_led_illum:
;Set uPD16432B LED output latches based on illumination voltage (P92/ANI20) and then ???
    mov a,!mem_fca3_ani_t58b;4889  8e a3 fc   A = P92/ANI20 analog: Terminal 58b Illumination (V = value * 0.06)
    bt mem_fe65.1,lab_4895  ;488c  9c 65 06
    cmp a,#0x12             ;488f  4d 12      Compare with 1.08V (V = 0x12 * 0.06)
    bnc lab_48a5            ;4891  9d 12
    br lab_4899_leds_0b1111 ;4893  fa 04

lab_4895:
    cmp a,#0x0a             ;4895  4d 0a      Compare with 0.6V (V = 0x0A * 0.06)
    bnc lab_48a5            ;4897  9d 0c

lab_4899_leds_0b1111:
    clr1 mem_fe65.1         ;4899  1b 65
    set1 upd_leds.3         ;489b  3a 3e        uPD16432B LED output latch bit 3 = on
    set1 upd_leds.2         ;489d  2a 3e        uPD16432B LED output latch bit 2 = on
    set1 upd_leds.1         ;489f  1a 3e        uPD16432B LED output latch bit 1 = on
    set1 upd_leds.0         ;48a1  0a 3e        uPD16432B LED output latch bit 0 = on
    br lab_48d0             ;48a3  fa 2b

lab_48a5:
    mov !mem_fbb1,a         ;48a5  9e b1 fb
    cmp a,#0x32             ;48a8  4d 32
    bnc lab_48b1            ;48aa  9d 05
    mov a,#0x32             ;48ac  a1 32
    mov !mem_fbb1,a         ;48ae  9e b1 fb

lab_48b1:
    set1 mem_fe65.1                     ;48b1  1a 65
    bt mem_fe2c.5,lab_48be_leds_0b0000  ;48b3  dc 2c 08
    bf mem_fe2c.3,lab_48c8_leds_0b0001  ;48b6  31 33 2c 0e
    bf mem_fe6a.0,lab_48c8_leds_0b0001  ;48ba  31 03 6a 0a

lab_48be_leds_0b0000:
    clr1 upd_leds.3         ;48be  3b 3e        uPD16432B LED output latch bit 3 = off
    clr1 upd_leds.2         ;48c0  2b 3e        uPD16432B LED output latch bit 2 = off
    clr1 upd_leds.1         ;48c2  1b 3e        uPD16432B LED output latch bit 1 = off
    clr1 upd_leds.0         ;48c4  0b 3e        uPD16432B LED output latch bit 0 = off
    br lab_48d0             ;48c6  fa 08

lab_48c8_leds_0b0001:
    clr1 upd_leds.3         ;48c8  3b 3e        uPD16432B LED output latch bit 3 = off
    clr1 upd_leds.2         ;48ca  2b 3e        uPD16432B LED output latch bit 2 = off
    clr1 upd_leds.1         ;48cc  1b 3e        uPD16432B LED output latch bit 1 = off
    set1 upd_leds.0         ;48ce  0a 3e        uPD16432B LED output latch bit 0 = on

lab_48d0:
    movw ax,#0x0000         ;48d0  10 00 00
    movw hl,#mem_b1f0+1     ;48d3  16 f1 b1
    movw de,#mem_b1f4       ;48d6  14 f4 b1
    call !sub_48f1          ;48d9  9a f1 48
    bf mem_fe65.1,lab_48e2  ;48dc  31 13 65 02
    br lab_48e9             ;48e0  fa 07

lab_48e2:
    clr1 mem_fe6a.1         ;48e2  1b 6a
    call !sub_3b35          ;48e4  9a 35 3b
    br lab_48f0             ;48e7  fa 07

lab_48e9:
    bf mem_fe6a.1,lab_48f0  ;48e9  31 13 6a 03
    call !sub_3b4d          ;48ed  9a 4d 3b

lab_48f0:
    ret                     ;48f0  af

sub_48f1:
    bf mem_fe65.1,lab_48fa  ;48f1  31 13 65 05
    mov a,!mem_fbb1         ;48f5  8e b1 fb
    br lab_48fc             ;48f8  fa 02

lab_48fa:
    br lab_4901_ret         ;48fa  fa 05

lab_48fc:
    mov mem_fed4,a          ;48fc  f2 d4
    call !sub_0291          ;48fe  9a 91 02

lab_4901_ret:
    ret                     ;4901  af

sub_4902_illum:
;Read illumination voltage (P92/ANI20) and ???
    movw ax,#(0x02<<8)+127  ;4902  10 7f 02     A = analog input 0x02 (P92/ANI20)
                            ;                   X = 127 (12.7 V)
    call !read_analog       ;4905  9a c3 ab     Read analog input number A and do ???
    bc lab_4913_ret         ;4908  8d 09        Branch to return if analog read failed

    mov !mem_fca3_ani_t58b,a;490a  9e a3 fc     Store as P92/ANI20 analog: Terminal 58b Illumination (V = value * 0.06)
    cmp a,#0x12             ;490d  4d 12        Compare with 1.08V (V=0x12*0.06)
    bc lab_4913_ret         ;490f  8d 02        Branch if illumination analog < 0x12

    ;Illumination analog >= 0x12
    set1 mem_fe65.1         ;4911  1a 65

lab_4913_ret:
    ret                     ;4913  af

sub_4914:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;4914  4d 0a
    bc lab_491e_lt_0x0a     ;4916  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;4918  1d 0a      A = A - 0x0A
    add a,#'A               ;491a  0d 41      Convert to ASCII 'A'-'F'
    br lab_4920_ret         ;491c  fa 02
lab_491e_lt_0x0a:
    add a,#'0               ;491e  0d 30      Convert to ASCII '0'-'9'
lab_4920_ret:
    ret                     ;4920  af

charset:
;Custom 5x7 characters loaded into the uPD16432B
;as character codes 0x00 - 0x08

charset_0x00_fm1:
    .byte 0x08              ;4921  08          DATA 0x08
    .byte 0x28              ;4922  28          DATA 0x28 '('
    .byte 0x48              ;4923  48          DATA 0x48 'H'
    .byte 0x68              ;4924  68          DATA 0x68 'h'
    .byte 0x88              ;4925  88          DATA 0x88
    .byte 0xa8              ;4926  a8          DATA 0xa8
    .byte 0xc8              ;4927  c8          DATA 0xc8

charset_0x01_fm2:
    .byte 0x1c              ;4928  1c          DATA 0x1c
    .byte 0x24              ;4929  24          DATA 0x24 '$'
    .byte 0x44              ;492a  44          DATA 0x44 'D'
    .byte 0x7c              ;492b  7c          DATA 0x7c '|'
    .byte 0x90              ;492c  90          DATA 0x90
    .byte 0xb0              ;492d  b0          DATA 0xb0
    .byte 0xdc              ;492e  dc          DATA 0xdc

charset_0x02_preset_1:
    .byte 0x01              ;492f  01          DATA 0x01
    .byte 0x21              ;4930  21          DATA 0x21 '!'
    .byte 0x41              ;4931  41          DATA 0x41 'A'
    .byte 0x61              ;4932  61          DATA 0x61 'a'
    .byte 0x81              ;4933  81          DATA 0x81
    .byte 0xa1              ;4934  a1          DATA 0xa1
    .byte 0xc1              ;4935  c1          DATA 0xc1

charset_0x03_preset_2:
    .byte 0x07              ;4936  07          DATA 0x07
    .byte 0x21              ;4937  21          DATA 0x21 '!'
    .byte 0x41              ;4938  41          DATA 0x41 'A'
    .byte 0x67              ;4939  67          DATA 0x67 'g'
    .byte 0x84              ;493a  84          DATA 0x84
    .byte 0xa4              ;493b  a4          DATA 0xa4
    .byte 0xc7              ;493c  c7          DATA 0xc7

charset_0x04_preset_3:
    .byte 0x07              ;493d  07          DATA 0x07
    .byte 0x21              ;493e  21          DATA 0x21 '!'
    .byte 0x41              ;493f  41          DATA 0x41 'A'
    .byte 0x63              ;4940  63          DATA 0x63 'c'
    .byte 0x81              ;4941  81          DATA 0x81
    .byte 0xa1              ;4942  a1          DATA 0xa1
    .byte 0xc7              ;4943  c7          DATA 0xc7

charset_0x05_preset_4:
    .byte 0x05              ;4944  05          DATA 0x05
    .byte 0x25              ;4945  25          DATA 0x25 '%'
    .byte 0x45              ;4946  45          DATA 0x45 'E'
    .byte 0x67              ;4947  67          DATA 0x67 'g'
    .byte 0x81              ;4948  81          DATA 0x81
    .byte 0xa1              ;4949  a1          DATA 0xa1
    .byte 0xc1              ;494a  c1          DATA 0xc1

charset_0x06_preset_5:
    .byte 0x07              ;494b  07          DATA 0x07
    .byte 0x24              ;494c  24          DATA 0x24 '$'
    .byte 0x44              ;494d  44          DATA 0x44 'D'
    .byte 0x66              ;494e  66          DATA 0x66 'f'
    .byte 0x81              ;494f  81          DATA 0x81
    .byte 0xa1              ;4950  a1          DATA 0xa1
    .byte 0xc6              ;4951  c6          DATA 0xc6

charset_0x07_preset_6:
    .byte 0x07              ;4952  07          DATA 0x07
    .byte 0x24              ;4953  24          DATA 0x24 '$'
    .byte 0x44              ;4954  44          DATA 0x44 'D'
    .byte 0x67              ;4955  67          DATA 0x67 'g'
    .byte 0x85              ;4956  85          DATA 0x85
    .byte 0xa5              ;4957  a5          DATA 0xa5
    .byte 0xc7              ;4958  c7          DATA 0xc7

charset_0x08_solid_block:
    .byte 0x1f              ;4959  1f          DATA 0x1f
    .byte 0x3f              ;495a  3f          DATA 0x3f '?'
    .byte 0x5f              ;495b  5f          DATA 0x5f '_'
    .byte 0x7f              ;495c  7f          DATA 0x7f
    .byte 0x9f              ;495d  9f          DATA 0x9f
    .byte 0xbf              ;495e  bf          DATA 0xbf
    .byte 0xdf              ;495f  df          DATA 0xdf

sub_4960:
    call !upd_display_off   ;4960  9a 1a 4d     Turn uPD16432B display off
    clr1 cy                 ;4963  21
    btclr mem_fe5e.7,lab_496b ;4964  31 71 5e 03
    set1 cy                 ;4968  20
    br lab_498b             ;4969  fa 20

lab_496b:
    clr1 shadow_p4.3        ;496b  3b ce        P43=0
    clr1 pm4.3              ;496d  71 3b 24     PM43=output
    mov a,shadow_p4         ;4970  f0 ce
    mov p4,a                ;4972  f2 04

    mov csim30,#0x82        ;4974  13 b0 82     SIO30 mode = ena, tx & rx, clock = fx/2^4 (262 kHz)
    clr1 pm3.2              ;4977  71 2b 23     PM32=output (uPD16432B CLK)
    clr1 pm3.1              ;497a  71 1b 23     PM31=output (uPD16432B DAT out)
    clr1 pu3.0              ;497d  71 0b 33     PU30 pull-up resistor disabled (uPD16432B DAT in)
    set1 pm3.0              ;4980  71 0a 23     PM30=input (uPD16432B DAT in)
    clr1 shadow_p3.2        ;4983  2b cd        uPD16432B CLK = low
    clr1 shadow_p3.1        ;4985  1b cd        uPD16432B DAT out = low
    mov a,shadow_p3         ;4987  f0 cd
    mov p3,a                ;4989  f2 03

lab_498b:
    bnc lab_4990            ;498b  9d 03
    br !lab_4a3c            ;498d  9b 3c 4a

lab_4990:
    call !upd_display_on    ;4990  9a 2d 4d     Turn uPD16432B display on

    mov mem_fed4,#0x80      ;4993  11 d4 80     A = uPD16432B Command Byte 0x80 (0b10000000)
                            ;                       Address Setting Command
                            ;                           Address = 00

    clr1 shadow_p4.7        ;4996  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4998  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;499b  f0 ce
    mov p4,a                ;499d  f2 04

    mov a,#0x4a             ;499f  a1 4a        A = uPD16432B Command Byte 0x4a (0b01001010)
                            ;                       Data Setting Command
                            ;                           2=Write to chargen ram
                            ;                           Command implies address incr; incr = on
                            ;                           Command implies reset to addr 0; addr = 0
    call !upd_send_byte     ;49a1  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;49a4  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;49a6  f0 ce
    mov p4,a                ;49a8  f2 04

    mov b,#0x09             ;49aa  a3 09        B = 9 custom characters to send
    movw de,#charset        ;49ac  14 21 49     DE = pointer to start of character data

lab_49af:
    clr1 shadow_p4.7        ;49af  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;49b1  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;49b4  f0 ce
    mov p4,a                ;49b6  f2 04

    mov a,mem_fed4          ;49b8  f0 d4        A = uPD16432B Address Setting Command
    call !upd_send_byte     ;49ba  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    ;HL = pointer to data for this character
    movw ax,de              ;49bd  c4           AX = pointer to data for this character
    movw hl,ax              ;49be  d6           Save it in HL

    ;DE = pointer to data for next character
    addw ax,#0x0007         ;49bf  ca 07 00     Advance number of bytes per character (7)
    movw de,ax              ;49c2  d4           DE = pointer to data for next character

    push bc                 ;49c3  b3           Push number of custom characters left to send

    mov a,#0x00             ;49c4  a1 00
    cmp a,#0x01             ;49c6  4d 01        XXX useless comparison
    set1 mem_fe5f.1         ;49c8  1a 5f        SPI mode flag = transmit only
    bnz lab_49db            ;49ca  bd 0f        XXX always branches

    ;XXX this code is unreachable
    clr1 mem_fe5f.1         ;49cc  1b 5f        SPI mode flag = transmit and receive
    movw ax,hl              ;49ce  c6
    movw hl,ax              ;49cf  d6
    mov a,#0x07             ;49d0  a1 07
    mov b,a                 ;49d2  73
    decw hl                 ;49d3  96
    mov a,#0xff             ;49d4  a1 ff
    xor a,#0x00             ;49d6  7d 00        XXX useless XOR.  A is still 0xFF.
lab_49d8:
    mov [hl+b],a            ;49d8  bb
    dbnz b,lab_49d8         ;49d9  8b fd
    ;XXX end of unreachable code

lab_49db:
    set1 shadow_p4.7        ;49db  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;49dd  f0 ce
    mov p4,a                ;49df  f2 04

    clr1 if0h.4             ;49e1  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;49e4  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;49e7  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,hl              ;49ea  c6           AX = pointer to start of this character's data
    push ax                 ;49eb  b1           Push: pointer to buffer to transfer
    mov a,#0x07             ;49ec  a1 07        A = 7 bytes of character data to send
    push ax                 ;49ee  b1           Push: number of bytes to transfer

    sel rb2                 ;49ef  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;49f1  b2           Pop: B  = number of bytes to transfer (7)
    pop hl                  ;49f2  b6           Pop: HL = pointer to buffer to transfer

    clr1 mem_fe5f.0         ;49f3  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;49f5  a2 01        C = number of bytes sent
    mov a,[hl]              ;49f7  87           A = first byte in buffer to transfer
    ei                      ;49f8  7a 1e
    mov sio30,a             ;49fa  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;49fc  61 d0        Select normal register bank
    inc mem_fed4            ;49fe  81 d4        Increment uPD16432B Address Setting Command
                            ;                     to next address

    mov b,#0xff             ;4a00  a3 ff
lab_4a02:
    bt mem_fe5f.0,lab_4a07  ;4a02  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4a02         ;4a05  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero

lab_4a07:
    mov b,#0xff             ;4a07  a3 ff
lab_4a09:
    bt mem_fe5f.0,lab_4a0e  ;4a09  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4a09         ;4a0c  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero again
    ;The 7 bytes of data for this custom character have been sent

lab_4a0e:
    pop bc                  ;4a0e  b2           B = number of custom characters left to send
    dbnz b,lab_49af         ;4a0f  8b 9e        Decrement and loop until all are sent

    ;All custom characters have been sent

    mov a,#0xc1             ;4a11  a1 c1        A = uPD16432B Command Byte 0xc1 (0b11000001)
                            ;                       Status command
                            ;                         Test mode setting: 0=Normal operation
                            ;                         Standby mode setting: 0=Normal operation
                            ;                         Key scan control: 0=Key scanning stopped
                            ;                         LED control: 0=LED forced off
                            ;                         LCD mode: 1=LCD forced off (SEGn,
                            ;                           COMn=unselected waveform)
    call !upd_send_byte     ;4a13  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4a16  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4a18  f0 ce
    mov p4,a                ;4a1a  f2 04

    mov a,#0x04             ;4a1c  a1 04        A = uPD16432B Command Byte (0b00000100)
                            ;                       Display Setting Command
                            ;                       Duty setting: 0=1/8 duty
                            ;                       Master/slave setting: 0=master
                            ;                       Drive voltage supply method: 1=internal
    call !upd_send_byte     ;4a1e  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4a21  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4a23  f0 ce
    mov p4,a                ;4a25  f2 04

    set1 shadow_p3.1        ;4a27  1a cd        uPD16432B DAT = high
    clr1 pm3.1              ;4a29  71 1b 23     PM31=output (uPD16432B DAT out)
    mov a,shadow_p3         ;4a2c  f0 cd
    mov p3,a                ;4a2e  f2 03

    clr1 shadow_p4.7        ;4a30  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4a32  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4a35  f0 ce
    mov p4,a                ;4a37  f2 04

    set1 mem_fe5e.7         ;4a39  7a 5e
    clr1 cy                 ;4a3b  21

lab_4a3c:
    ret                     ;4a3c  af

lab_4a3d:
    clr1 cy                 ;4a3d  21
    btclr mem_fe5e.7,lab_4a45 ;4a3e  31 71 5e 03
    set1 cy                 ;4a42  20
    br lab_4a65             ;4a43  fa 20

lab_4a45:
    clr1 shadow_p4.3        ;4a45  3b ce        P43=0
    clr1 pm4.3              ;4a47  71 3b 24     PM43=output
    mov a,shadow_p4         ;4a4a  f0 ce
    mov p4,a                ;4a4c  f2 04

    mov csim30,#0x82        ;4a4e  13 b0 82
    clr1 pm3.2              ;4a51  71 2b 23     PM32=output (uPD16432B CLK)
    clr1 pm3.1              ;4a54  71 1b 23     PM31=output (uPD16432B DAT out)
    clr1 pu3.0              ;4a57  71 0b 33     PU30 pull-up resistor disabled (uPD16432B DAT in)
    set1 pm3.0              ;4a5a  71 0a 23     PM30=input (uPD16432B DAT in)
    clr1 shadow_p3.2        ;4a5d  2b cd        uPD16432B CLK = low
    clr1 shadow_p3.1        ;4a5f  1b cd        uPD16432B DAT out = low
    mov a,shadow_p3         ;4a61  f0 cd
    mov p3,a                ;4a63  f2 03

lab_4a65:
    call !upd_display_on    ;4a65  9a 2d 4d     Turn uPD16432B display on

    mov mem_fed4,#0x80      ;4993  11 d4 80     A = uPD16432B Command Byte 0x80 (0b10000000)
                            ;                       Address Setting Command
                            ;                           Address = 00

    clr1 shadow_p4.7        ;4a6b  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4a6d  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4a70  f0 ce
    mov p4,a                ;4a72  f2 04

    mov a,#0x4a             ;4a74  a1 4a        A = uPD16432B Command Byte 0x4a (0b01001010)
                            ;                       Data Setting Command
                            ;                           2=Write to chargen ram
                            ;                           Command implies address incr; incr = on
                            ;                           Command implies reset to addr 0; addr = 0
    call !upd_send_byte     ;4a76  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4a79  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4a7b  f0 ce
    mov p4,a                ;4a7d  f2 04

    mov b,#0x09             ;4a7f  a3 09        B = 9 custom characters to send
    movw de,#charset        ;4a81  14 21 49     DE = pointer to start of character data

lab_4a84:
    clr1 shadow_p4.7        ;4a84  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4a86  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4a89  f0 ce
    mov p4,a                ;4a8b  f2 04

    mov a,mem_fed4          ;4a8d  f0 d4        A = uPD16432B Address Setting Command
    call !upd_send_byte     ;4a8f  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    ;HL = pointer to data for this character
    movw ax,de              ;4a92  c4           AX = pointer to data for this character
    movw hl,ax              ;4a93  d6           Save it in HL

    ;DE = pointer to data for next character
    addw ax,#0x0007         ;4a94  ca 07 00     Advance number of bytes per character (7)
    movw de,ax              ;4a97  d4           DE = pointer to data for next character

    push bc                 ;4a98  b3           Push number of custom characters left to send

    mov a,#0x00             ;4a99  a1 00
    cmp a,#0x01             ;4a9b  4d 01        XXX useless comparison
    set1 mem_fe5f.1         ;4a9d  1a 5f        SPI mode flag = transmit only
    bnz lab_4ab0            ;4a9f  bd 0f        XXX always branches

    ;XXX this code is unreachable
    clr1 mem_fe5f.1         ;4aa1  1b 5f        SPI mode flag = transmit and receive
    movw ax,hl              ;4aa3  c6
    movw hl,ax              ;4aa4  d6
    mov a,#0x07             ;4aa5  a1 07
    mov b,a                 ;4aa7  73
    decw hl                 ;4aa8  96
    mov a,#0xff             ;4aa9  a1 ff
    xor a,#0x00             ;4aab  7d 00        XXX useless XOR.  A is still 0xFF.
lab_4aad:
    mov [hl+b],a            ;4aad  bb
    dbnz b,lab_4aad         ;4aae  8b fd
    ;XXX end of unreachable code

lab_4ab0:
    set1 shadow_p4.7        ;4ab0  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;4ab2  f0 ce
    mov p4,a                ;4ab4  f2 04

    clr1 if0h.4             ;4ab6  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;4ab9  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;4abc  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,hl              ;4abf  c6           AX = pointer to start of this character's data
    push ax                 ;4ac0  b1           Push: pointer to buffer to transfer
    mov a,#0x07             ;4ac1  a1 07        A = 7 bytes of character data to send
    push ax                 ;4ac3  b1           Push: number of bytes to transfer

    sel rb2                 ;4ac4  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;4ac6  b2           Pop: B  = number of bytes to transfer (7)
    pop hl                  ;4ac7  b6           Pop: HL = pointer to buffer to transfer

    clr1 mem_fe5f.0         ;4ac8  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;4aca  a2 01        C = number of bytes sent
    mov a,[hl]              ;4acc  87           A = first byte in buffer to transfer
    ei                      ;4acd  7a 1e
    mov sio30,a             ;4acf  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;4ad1  61 d0        Select normal register bank
    inc mem_fed4            ;4ad3  81 d4        Increment uPD16432B Address Setting Command
                            ;                     to next address

    mov b,#0xff             ;4ad5  a3 ff
lab_4ad7:
    bt mem_fe5f.0,lab_4adc  ;4ad7  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4ad7         ;4ada  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero

lab_4adc:
    mov b,#0xff             ;4adc  a3 ff
lab_4ade:
    bt mem_fe5f.0,lab_4ae3  ;4ade  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4ade         ;4ae1  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero again
    ;The 7 bytes of data for this custom character have been sent

lab_4ae3:
    pop bc                  ;4ae3  b2           B = number of custom characters left to send
    dbnz b,lab_4a84         ;4ae4  8b 9e        Decrement and loop until all are sent

    ;All custom characters have been sent

    set1 shadow_p3.1        ;4ae6  1a cd        uPD16432B DAT = high
    clr1 pm3.1              ;4ae8  71 1b 23     PM31=output (uPD16432B DAT out)
    mov a,shadow_p3         ;4aeb  f0 cd
    mov p3,a                ;4aed  f2 03

    clr1 shadow_p4.7        ;4aef  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4af1  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4af4  f0 ce
    mov p4,a                ;4af6  f2 04

    set1 mem_fe5e.7         ;4af8  7a 5e
    ret                     ;4afa  af

lab_4afb:
    ret                     ;4afb  af

sub_4afc:
    clr1 cy                 ;4afc  21
    btclr mem_fe5e.7,lab_4b04 ;4afd  31 71 5e 03
    set1 cy                 ;4b01  20
    br lab_4b24             ;4b02  fa 20

lab_4b04:
    clr1 shadow_p4.3        ;4b04  3b ce        P43=0
    clr1 pm4.3              ;4b06  71 3b 24     PM43=output
    mov a,shadow_p4         ;4b09  f0 ce
    mov p4,a                ;4b0b  f2 04

    mov csim30,#0x82        ;4b0d  13 b0 82     SIO30 mode = ena, tx & rx, clock = fx/2^4 (262 kHz)
    clr1 pm3.2              ;4b10  71 2b 23     PM32=output (uPD16432B CLK)
    clr1 pm3.1              ;4b13  71 1b 23     PM31=output (uPD16432B DAT out)
    clr1 pu3.0              ;4b16  71 0b 33     PU30 pull-up resistor disabled (uPD16432B DAT in)
    set1 pm3.0              ;4b19  71 0a 23     PM30=input (uPD16432B DAT in)
    clr1 shadow_p3.2        ;4b1c  2b cd        uPD16432B CLK = low
    clr1 shadow_p3.1        ;4b1e  1b cd        uPD16432B DAT out = low
    mov a,shadow_p3         ;4b20  f0 cd
    mov p3,a                ;4b22  f2 03

lab_4b24:
    bnc lab_4b29            ;4b24  9d 03
    br !lab_4d19            ;4b26  9b 19 4d

lab_4b29:
    call !upd_display_on    ;4b29  9a 2d 4d     Turn uPD16432B display on

    mov a,!mem_fb29         ;4b2c  8e 29 fb
    cmp a,#0x00             ;4b2f  4d 00
    bz lab_4b3f             ;4b31  ad 0c

    movw de,#upd_pict_old   ;4b33  14 bd fb     DE = pointer to last uPD16432B pictograph buf sent
    movw hl,#upd_pict       ;4b36  16 35 fe     HL = pointer to current uPD16432B pictograph buffer
    mov a,#0x08             ;4b39  a1 08        A = 8 bytes to compare
    callf !compare          ;4b3b  4c ca        Compare A bytes between [HL] to [DE]
    bz lab_4ba9             ;4b3d  ad 6a        Branch if equal (no update needs to be sent)

lab_4b3f:
    movw de,#upd_pict_old   ;4b3f  14 bd fb     DE = pointer to last uPD16432B pictograph buf sent
                            ;                          (destination)
    movw hl,#upd_pict       ;4b42  16 35 fe     HL = pointer to current uPD16432B pictograph buf
                            ;                          (source)
    mov a,#0x08             ;4b45  a1 08        A = 8 bytes to copy
    callf !copy             ;4b47  4c 9e        Copy A bytes from [HL] to [DE]
    mov a,#0x14             ;4b49  a1 14
    mov !mem_fb29,a         ;4b4b  9e 29 fb
    set1 mem_fe60.3         ;4b4e  3a 60
    set1 mem_fe7c.2         ;4b50  2a 7c

    clr1 shadow_p4.7        ;4b52  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4b54  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4b57  f0 ce
    mov p4,a                ;4b59  f2 04

    mov a,#0x41             ;4b5b  a1 41        A = uPD16432B Command Byte 0x41 (0b01000001)
                            ;                       Data Setting Command
                            ;                           1=Write to pictograph RAM
                            ;                           Address increment mode: 0=increment
    call !upd_send_byte     ;4b5d  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4b60  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4b62  f0 ce
    mov p4,a                ;4b64  f2 04

    mov a,#0x80             ;4b66  a1 80        A = uPD16432B Command Byte 0x80 (0b10000000)
                            ;                       Address Setting Command
                            ;                           Address = 00
    call !upd_send_byte     ;4b68  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    mov a,#0x00             ;4b6b  a1 00
    cmp a,#0x01             ;4b6d  4d 01        XXX useless comparsion
    set1 mem_fe5f.1         ;4b6f  1a 5f        SPI mode flag = transmit only
    bnz lab_4b84            ;4b71  bd 11        XXX always branches

    ;XXX this code is unreachable
    clr1 mem_fe5f.1         ;4b73  1b 5f        SPI mode flag = transmit and receive
    movw ax,#upd_pict       ;4b75  10 35 fe
    movw hl,ax              ;4b78  d6
    mov a,#0x08             ;4b79  a1 08
    mov b,a                 ;4b7b  73
    decw hl                 ;4b7c  96
    mov a,#0xff             ;4b7d  a1 ff
    xor a,#0x00             ;4b7f  7d 00        XXX useless XOR.  A is still 0xFF.
lab_4b81:
    mov [hl+b],a            ;4b81  bb
    dbnz b,lab_4b81         ;4b82  8b fd
    ;XXX end of unreachable code

lab_4b84:
    set1 shadow_p4.7        ;4b84  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;4b86  f0 ce
    mov p4,a                ;4b88  f2 04

    clr1 if0h.4             ;4b8a  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;4b8d  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;4b90  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,#upd_pict       ;4b93  10 35 fe     AX = pointer to start of pictograph buffer
    push ax                 ;4b96  b1           Push: pointer to buffer to transfer
    mov a,#0x08             ;4b97  a1 08        A = 8 bytes of pictograph data
    push ax                 ;4b99  b1           Push: number of bytes to transfer

    sel rb2                 ;4b9a  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;4b9c  b2           Pop: B  = number of bytes to transfer (7)
    pop hl                  ;4b9d  b6           Pop: HL = pointer to buffer to transfer (upd_pict)

    clr1 mem_fe5f.0         ;4b9e  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;4ba0  a2 01        C = number of bytes sent
    mov a,[hl]              ;4ba2  87           A = first byte in buffer to transfer
    ei                      ;4ba3  7a 1e
    mov sio30,a             ;4ba5  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;4ba7  61 d0        Select normal register bank

lab_4ba9:
    mov a,!mem_fb2a         ;4ba9  8e 2a fb
    cmp a,#0x00             ;4bac  4d 00
    bnz lab_4bb3            ;4bae  bd 03
    br !lab_4c5e            ;4bb0  9b 5e 4c

lab_4bb3:
    movw de,#upd_disp_old   ;4bb3  14 b2 fb     DE = pointer to last uPD16432B display buffer sent
    movw hl,#upd_disp       ;4bb6  16 9a f1     HL = pointer to current uPD16432B display buffer
    mov a,#0x0b             ;4bb9  a1 0b        A = 11 bytes to compare
    callf !compare          ;4bbb  4c ca        Compare A bytes between [HL] to [DE]
    bz lab_4bc2             ;4bbd  ad 03        Branch if equal (no uPD16432B update needs to be sent)
    br !lab_4c5e            ;4bbf  9b 5e 4c     Branch always (uPD16432B needs an update)

lab_4bc2:
;Display buffers are equal (no uPD16432B update needs to be sent)
    mov a,!mem_fb2b         ;4bc2  8e 2b fb
    cmp a,#0x00             ;4bc5  4d 00
    bz lab_4bcc             ;4bc7  ad 03
    br !lab_4cd5            ;4bc9  9b d5 4c

lab_4bcc:
    mov b,#0xff             ;4bcc  a3 ff
lab_4bce:
    bt mem_fe5f.0,lab_4bd3  ;4bce  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4bce         ;4bd1  8b fb        Keep waiting until B reaches zero

    ;SPI transfer complete or B reached zero

lab_4bd3:
    bt mem_fe5f.0,lab_4bd9  ;4bd3  8c 5f 03     Branch if SPI packet complete flag = complete

    ;SPI transfer did not complete
    br !lab_4d05            ;4bd6  9b 05 4d     Branch to deselect uPD16432B and return

lab_4bd9:
    ;SPI transfer of display buffer (upd_disp) is complete

    mov a,#0x32             ;4bd9  a1 32
    mov !mem_fb2b,a         ;4bdb  9e 2b fb

    mov mem_fed4,#0x80      ;4993  11 d4 80     A = uPD16432B Command Byte 0x80 (0b10000000)
                            ;                       Address Setting Command
                            ;                           Address = 00

    clr1 shadow_p4.7        ;4be1  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4be3  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4be6  f0 ce
    mov p4,a                ;4be8  f2 04

    mov a,#0x4a             ;4bea  a1 4a        A = uPD16432B Command Byte 0x4a (0b01001010)
                            ;                       Data Setting Command
                            ;                           2=Write to chargen ram
                            ;                           Command implies address incr; incr = on
                            ;                           Command implies reset to addr 0; addr = 0
    call !upd_send_byte     ;4bec  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4bef  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4bf1  f0 ce
    mov p4,a                ;4bf3  f2 04

    mov b,#0x09             ;4bf5  a3 09        B = 9 custom characters to send
    movw de,#charset        ;4bf7  14 21 49     DE = pointer to start of character data

lab_4bfa:
    clr1 shadow_p4.7        ;4bfa  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4bfc  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4bff  f0 ce
    mov p4,a                ;4c01  f2 04

    mov a,mem_fed4          ;4c03  f0 d4        A = uPD16432B Address Setting Command
    call !upd_send_byte     ;4c05  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    ;HL = pointer to data for this character
    movw ax,de              ;4c08  c4           AX = pointer to data for this character
    movw hl,ax              ;4c09  d6           Save it in HL

    ;DE = pointer to data for next character
    addw ax,#0x0007         ;4c0a  ca 07 00     Advance number of bytes per character (7)
    movw de,ax              ;4c0d  d4           DE = pointer to data for next character

    push bc                 ;4c0e  b3           Push number of custom characters left to send

    mov a,#0x00             ;4c0f  a1 00
    cmp a,#0x01             ;4c11  4d 01        XXX useless comparison
    set1 mem_fe5f.1         ;4c13  1a 5f        SPI mode flag = transmit only
    bnz lab_4c26            ;4c15  bd 0f        XXX always branches

    ;XXX this code is unreachable
    clr1 mem_fe5f.1         ;4c17  1b 5f        SPI mode flag = transmit and receive
    movw ax,hl              ;4c19  c6
    movw hl,ax              ;4c1a  d6
    mov a,#0x07             ;4c1b  a1 07
    mov b,a                 ;4c1d  73
    decw hl                 ;4c1e  96
    mov a,#0xff             ;4c1f  a1 ff
    xor a,#0x00             ;4c21  7d 00        XXX useless XOR.  A is still 0xFF.
lab_4c23:
    mov [hl+b],a            ;4c23  bb
    dbnz b,lab_4c23         ;4c24  8b fd
    ;XXX end of unreachable code

lab_4c26:
    set1 shadow_p4.7        ;4c26  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;4c28  f0 ce
    mov p4,a                ;4c2a  f2 04

    clr1 if0h.4             ;4c2c  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;4c2f  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;4c32  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,hl              ;4c35  c6           AX = pointer to start of this character's data
    push ax                 ;4c36  b1           Push: pointer to buffer to transfer
    mov a,#0x07             ;4c37  a1 07        A = 7 bytes of character data to send
    push ax                 ;4c39  b1           Push: number of bytes to transfer

    sel rb2                 ;4c3a  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;4c3c  b2           Pop: B  = number of bytes to transfer (7)
    pop hl                  ;4c3d  b6           Pop: HL = pointer to buffer to transfer

    clr1 mem_fe5f.0         ;4c3e  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;4c40  a2 01        C = number of bytes sent
    mov a,[hl]              ;4c42  87           A = first byte in buffer to transfer
    ei                      ;4c43  7a 1e
    mov sio30,a             ;4c45  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;4c47  61 d0        Select normal register bank
    inc mem_fed4            ;4c49  81 d4        Increment uPD16432B Address Setting Command
                            ;                     to next address

    mov b,#0xff             ;4c4b  a3 ff
lab_4c4d:
    bt mem_fe5f.0,lab_4c52  ;4c4d  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4c4d         ;4c50  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero

lab_4c52:
    mov b,#0xff             ;4c52  a3 ff
lab_4c54:
    bt mem_fe5f.0,lab_4c59  ;4c54  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4c54         ;4c57  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero again
    ;The 7 bytes of data for this custom character have been sent

lab_4c59:
    pop bc                  ;4c59  b2           B = number of custom characters left to send
    dbnz b,lab_4bfa         ;4c5a  8b 9e        Decrement and loop until all are sent

    ;All custom characters have been sent

    br lab_4cd5             ;4c5c  fa 77

lab_4c5e:
;Display buffers are not equal (uPD16432B update needs to be sent)
;
    ;Copy upd_disp into upd_disp_old for next time around
    movw de,#upd_disp_old   ;4c5e  14 b2 fb     DE = pointer to last uPD16432B display buffer sent
                            ;                        (destination)
    movw hl,#upd_disp       ;4c61  16 9a f1     HL = pointer to current uPD16432B display buffer
                            ;                        (source)
    mov a,#0x0b             ;4c64  a1 0b        A = 0x0b bytes to copy
    callf !copy             ;4c66  4c 9e        Copy A bytes from [HL] to [DE]

    mov a,#0x14             ;4c68  a1 14
    mov !mem_fb2a,a         ;4c6a  9e 2a fb
    set1 mem_fe60.3         ;4c6d  3a 60
    set1 mem_fe7c.2         ;4c6f  2a 7c

    mov b,#0xff             ;4c71  a3 ff
lab_4c73:
    bt mem_fe5f.0,lab_4c78  ;4c73  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4c73         ;4c76  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero

lab_4c78:
    bt mem_fe5f.0,lab_4c7e  ;4c78  8c 5f 03     Branch if SPI packet complete flag = complete

    ;SPI transfer did not complete
    br !lab_4d05            ;4c7b  9b 05 4d     Branch to deslect uPD16432B and return

lab_4c7e:
    ;SPI transfer of character data is complete
    clr1 shadow_p4.7        ;4c7e  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4c80  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4c83  f0 ce
    mov p4,a                ;4c85  f2 04

    mov a,#0x40             ;4c87  a1 40        A = uPD16432B Command Byte 0x40 (0b01000000)
                            ;                       Data Setting Command
                            ;                           0=Write to display RAM
                            ;                           Address increment mode: 0=increment
    call !upd_send_byte     ;4c89  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4c8c  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4c8e  f0 ce
    mov p4,a                ;4c90  f2 04

    mov a,#0x80             ;4c92  a1 80        A = uPD16432B Command Byte 0x80 (0b10000000)
                            ;                       Address Setting Command
                            ;                           Address = 00
    call !upd_send_byte     ;4c94  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    mov a,#0x00             ;4c97  a1 00
    cmp a,#0x01             ;4c99  4d 01        XXX useless comparsion
    set1 mem_fe5f.1         ;4c9b  1a 5f        SPI mode flag = transmit only
    bnz lab_4cb0            ;4c9d  bd 11        XXX always branches

    ;XXX this code is unreachable
    clr1 mem_fe5f.1         ;4c9f  1b 5f        SPI mode flag = transmit and receive
    movw ax,#upd_disp       ;4ca1  10 9a f1
    movw hl,ax              ;4ca4  d6
    mov a,#0x0b             ;4ca5  a1 0b
    mov b,a                 ;4ca7  73
    decw hl                 ;4ca8  96
    mov a,#0xff             ;4ca9  a1 ff
    xor a,#0x00             ;4cab  7d 00        XXX useless XOR.  A is still 0xFF.
lab_4cad:
    mov [hl+b],a            ;4cad  bb
    dbnz b,lab_4cad         ;4cae  8b fd
    ;XXX end of unreachable code

lab_4cb0:
    set1 shadow_p4.7        ;4cb0  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;4cb2  f0 ce
    mov p4,a                ;4cb4  f2 04

    clr1 if0h.4             ;4cb6  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;4cb9  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;4cbc  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,#upd_disp       ;4cbf  10 9a f1     AX = pointer to display buffer (11 bytes)
    push ax                 ;4cc2  b1           Push: pointer to buffer to transfer
    mov a,#0x0b             ;4cc3  a1 0b        A = 11 bytes of display buffer
    push ax                 ;4cc5  b1           Push: number of bytes to transfer

    sel rb2                 ;4cc6  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;4cc8  b2           Pop: B  = number of bytes to transfer (11)
    pop hl                  ;4cc9  b6           Pop: HL = pointer to buffer to transfer (upd_disp)

    clr1 mem_fe5f.0         ;4cca  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;4ccc  a2 01        C = number of bytes sent
    mov a,[hl]              ;4cce  87           A = first byte in buffer to transfer
    ei                      ;4ccf  7a 1e
    mov sio30,a             ;4cd1  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;4cd3  61 d0        Select normal register bank

lab_4cd5:
    mov a,!snd_msg_idx      ;4cd5  8e a5 f1
    cmp a,#0xff             ;4cd8  4d ff
    bz lab_4ce1             ;4cda  ad 05

    mov a,!msg_countdown    ;4cdc  8e 2e fb
    bz lab_4ce1             ;4cdf  ad 00

lab_4ce1:
    mov b,#0xff             ;4ce1  a3 ff
lab_4ce3:
    bt mem_fe5f.0,lab_4ce8  ;4ce3  8c 5f 02     Branch if SPI packet complete flag = complete
    dbnz b,lab_4ce3         ;4ce6  8b fb        Keep waiting until B reaches zero

    ;SPI transfer complete or B reached zero

lab_4ce8:
    bf mem_fe5f.0,lab_4d05  ;4ce8  31 03 5f 19  If packet complete flag = not complete
                            ;                     branch to deselect uPD16432B and return

    clr1 shadow_p4.7        ;4cec  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4cee  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4cf1  f0 ce
    mov p4,a                ;4cf3  f2 04

    mov a,#0x4b             ;4cf5  a1 4b        A = uPD16432B Command Byte 0x4B
                            ;                       Data Setting Command
                            ;                           3=Write to LED output latch
    call !upd_send_byte     ;4cf7  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    mov a,upd_leds          ;4cfa  f0 3e        A = uPD16432B Data Byte
    call !upd_send_byte     ;4cfc  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4cff  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4d01  f0 ce
    mov p4,a                ;4d03  f2 04

lab_4d05:
    ;Deselect uPD16432B and return

    set1 shadow_p3.1        ;4d05  1a cd        uPD16432B DAT = high
    clr1 pm3.1              ;4d07  71 1b 23     PM31=output (uPD16432B DAT out)
    mov a,shadow_p3         ;4d0a  f0 cd
    mov p3,a                ;4d0c  f2 03

    clr1 shadow_p4.7        ;4d0e  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4d10  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4d13  f0 ce
    mov p4,a                ;4d15  f2 04

    set1 mem_fe5e.7         ;4d17  7a 5e

lab_4d19:
    ret                     ;4d19  af


upd_display_off:
;Turn uPD16432B display off
    clr1 shadow_p4.6        ;4d1a  6b ce        uPD16432B /LCDOFF = 0 (turns LCD off)
    clr1 pm4.6              ;4d1c  71 6b 24     PM46 = output
    mov a,shadow_p4         ;4d1f  f0 ce
    mov p4,a                ;4d21  f2 04

    clr1 shadow_p4.7        ;4d23  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4d25  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4d28  f0 ce
    mov p4,a                ;4d2a  f2 04

    ret                     ;4d2c  af


upd_display_on:
;Turn uPD16432B display on
    clr1 shadow_p4.7        ;4d2d  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;4d2f  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;4d32  f0 ce
    mov p4,a                ;4d34  f2 04

    mov a,#0x04             ;4d36  a1 04        A = uPD16432B Command Byte 0x04 (0b00000100)
                            ;                       Display Setting Command
                            ;                           Duty setting: 0=1/8 duty
                            ;                           Master/slave setting: 0=master
                            ;                           Drive voltage supply method: 1=internal
    call !upd_send_byte     ;4d38  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4d3b  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4d3d  f0 ce
    mov p4,a                ;4d3f  f2 04

    mov a,#0xce             ;4d41  a1 ce        A = uPD16432B Command Byte 0xce (0b11001110)
                            ;                       Status command
                            ;                           Test mode setting: 0=Normal operation
                            ;                           Standby mode setting: 0=Normal operation
                            ;                           Key scan control: 1=Key scan operation
                            ;                           LED control: 1=Normal operation
                            ;                           LCD mode: 2=Normal operation (0b00)
    call !upd_send_byte     ;4d43  9a 4d 4d     Select uPD16432B (STB=high), then send a byte to it

    clr1 shadow_p4.7        ;4d46  7b ce        Deselect uPD16432B (STB=low)
    mov a,shadow_p4         ;4d48  f0 ce
    mov p4,a                ;4d4a  f2 04
    ret                     ;4d4c  af


upd_send_byte:
;Select uPD16432B (STB=high), then send a byte to it
;Sends byte in A, destroys X
    mov x,a                 ;4d4d  70

    set1 shadow_p4.7        ;4d4e  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;4d50  f0 ce
    mov p4,a                ;4d52  f2 04

    mov a,x                 ;4d54  60
    callf !sub_087a         ;4d55  0c 7a        SPI xfer on SIO30 (send byte in A, recv byte in A)
    ret                     ;4d57  af

upd_recv_byte:
;Select uPD16432B (STB=high), then receive a byte from it
;Returns byte in A
    set1 shadow_p4.7        ;4d58  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;4d5a  f0 ce
    mov p4,a                ;4d5c  f2 04

    mov a,#0x00             ;4d5e  a1 00        A = dummy byte to tx while clocking in receive byte
    callf !sub_087a         ;4d60  0c 7a        SPI xfer on SIO30 (send byte in A, recv byte in A)
    ret                     ;4d62  af

sub_4d63:
;Disable timers and their interrupts, set uPD16432B pins to inputs
    call !sub_3b3a          ;4d63  9a 3a 3b     Disable timers and their interrupts
    clr1 pu3.2              ;4d66  71 2b 33     PU32 pull-up resistor disabled (uPD16432B CLK)
    set1 pm3.2              ;4d69  71 2a 23     PM32=input (uPD16432B CLK)

    clr1 pu3.1              ;4d6c  71 1b 33     PU31 pull-up resistor disabled (uPD16432B DAT)
    set1 pm3.1              ;4d6f  71 1a 23     PM31=input (uPD16432B DAT)

    clr1 pu4.7              ;4d72  71 7b 34     PU47 pull-up resistor disabled (uPD16432B STB)
    set1 pm4.7              ;4d75  71 7a 24     PM47=input (P47)

    clr1 pu4.6              ;4d78  71 6b 34     PU46 pull-up resistor disabled (uPD16432B /LCDOFF)
    set1 pm4.6              ;4d7b  71 6a 24     PM47=input (uPD16432B /LCDOFF)
    ret                     ;4d7e  af

lab_4d7f:
    bt rb0_b.7,lab_4d88     ;4d7f  fc fb 06
    bt rb0_b.6,lab_4d88     ;4d82  ec fb 03
    br !lab_4dad            ;4d85  9b ad 4d

lab_4d88:
    mov a,#0x00             ;4d88  a1 00
    mov !mem_fbc8,a         ;4d8a  9e c8 fb
    mov !mem_fbc9,a         ;4d8d  9e c9 fb
    mov !mem_fbca,a         ;4d90  9e ca fb
    mov !kwp_blk_counter,a  ;4d93  9e cb fb     KWP1281 block counter = 0
    clr1 mem_fe66.0         ;4d96  0b 66
    clr1 mem_fe66.1         ;4d98  1b 66        Clear bit to indicate we are not sending faults
    mov a,#0x00             ;4d9a  a1 00
    mov !kwp_con_56_state,a ;4d9c  9e c5 fb     KWP1281 connection state on normal radio address (0x56)
    mov !kwp_con_3f_state,a ;4d9f  9e c6 fb     KWP1281 connection state on cluster address (0x3F; radio-as-tester) (radio-as-tester)
    mov !kwp_con_7f_state,a ;4da2  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)
    clr1 mem_fe65.3         ;4da5  3b 65        Clear bit to indicate not logged in
    clr1 mem_fe65.4         ;4da7  4b 65
    mov a,#0xc0             ;4da9  a1 c0
    callt [0x0042]          ;4dab  c3           Calls sub_09b9
    ret                     ;4dac  af

lab_4dad:
    call !sub_4db6          ;4dad  9a b6 4d     Dispatch KWP1281 routine in mem_b1fa table based on value in mem_fbc8
    call !sub_4dd8          ;4db0  9a d8 4d     Dispatch KWP1281 routine in mem_b247 table based on value in mem_fbc9
    callf !sub_099c         ;4db3  1c 9c
    ret                     ;4db5  af

sub_4db6:
;Dispatch KWP1281 routine in mem_b1fa table based on value in mem_fbc8
;
    mov a,!mem_fbc8         ;4db6  8e c8 fb
    cmp a,#0x26             ;4db9  4d 26
    bnc lab_4dd2            ;4dbb  9d 15        Branch if out of range of mem_b1fa table

    cmp a,#0x00             ;4dbd  4d 00
    bz lab_4dd7_ret         ;4dbf  ad 16

    mov a,#0x00             ;4dc1  a1 00
    xch a,!mem_fbc8         ;4dc3  ce c8 fb
    movw hl,#mem_b1fa+1     ;4dc6  16 fb b1
    clr1 cy                 ;4dc9  21
    rolc a,1                ;4dca  27
    mov b,a                 ;4dcb  73
    mov a,[hl+b]            ;4dcc  ab
    mov x,a                 ;4dcd  70
    inc b                   ;4dce  43
    mov a,[hl+b]            ;4dcf  ab
    br ax                   ;4dd0  31 98

lab_4dd2:
    mov a,#0x00             ;4dd2  a1 00
    mov !mem_fbc8,a         ;4dd4  9e c8 fb

lab_4dd7_ret:
    ret                     ;4dd7  af

sub_4dd8:
;Dispatch KWP1281 routine in mem_b247 table based on value in mem_fbc9
    mov a,#0x09             ;4dd8  a1 09
    cmp a,!mem_fbc9         ;4dda  48 c9 fb
    bc lab_4df4_mem_fbc9_eq_0x00 ;4ddd  8d 15

    mov a,#0x00             ;4ddf  a1 00
    cmp a,!mem_fbc9         ;4de1  48 c9 fb
    bz lab_4df9_ret         ;4de4  ad 13

    movw hl,#mem_b247+1     ;4de6  16 48 b2
    xch a,!mem_fbc9         ;4de9  ce c9 fb
    rol a,1                 ;4dec  26
    mov b,a                 ;4ded  73
    mov a,[hl+b]            ;4dee  ab
    mov x,a                 ;4def  70
    inc b                   ;4df0  43
    mov a,[hl+b]            ;4df1  ab
    br ax                   ;4df2  31 98

lab_4df4_mem_fbc9_eq_0x00:
;mem_fbc9=0x00
;Sets mem_fbc9=0, does nothing
    mov a,#0x00             ;4df4  a1 00        0x00 = Sets mem_fbc9=0, does nothing
    mov !mem_fbc9,a         ;4df6  9e c9 fb

lab_4df9_ret:
    ret                     ;4df9  af

lab_4dfa_mem_fbc9_eq_0x04:
;mem_fbc9=0x04
;Block received and it fit in RX buffer; dispatch it
    movw hl,#kwp_rx_buf     ;4dfa  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x01]         ;4dfd  ae 01        A = block counter received
    mov !kwp_blk_counter,a  ;4dff  9e cb fb     Store block counter received
    mov a,[hl+0x02]         ;4e02  ae 02        A = block title
    movw hl,#kwp_titles+1   ;4e04  16 5d b2     HL = pointer to block titles table
    mov b,#0x22             ;4e07  a3 22        B = 0x22 valid entries in table

lab_4e09_loop:
    cmp a,[hl+b]            ;4e09  31 4b        Compare received block title to entry in table
    bz lab_4e12_title_found ;4e0b  ad 05        Branch if block title matched
    dbnz b,lab_4e09_loop    ;4e0d  8b fa        Keep going until end of table

    ;Block title not found in table
    br !lab_5355_nak_fail   ;4e0f  9b 55 53     Branch to Send NAK response for general failure

lab_4e12_title_found:
;Block title found in table
    movw hl,#kwp_rx_buf     ;4e12  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl]              ;4e15  87           A = block length from rx buffer
    mov x,a                 ;4e16  70           X = block length from rx buffer
    movw hl,#kwp_lengths+1  ;4e17  16 81 b2     HL = pointer to block lengths table
    mov a,[hl+b]            ;4e1a  ab           A = read expected block length from table
    cmp a,#0xff             ;4e1b  4d ff        Does the expected length vary (0xff)?
    bz length_0xff_or_match ;4e1d  ad 07          Yes: skip length comparison for variable length

    ;Expected block length is not variable
    cmp a,x                 ;4e1f  61 48        Compare expected block length (A) with received (X)
    bz length_0xff_or_match ;4e21  ad 03        Branch if they are equal

    ;Block length does not match expected
    br !lab_5344_nak_resend ;4e23  9b 44 53     Send NAK response asking for the last block to be sent again

length_0xff_or_match:
;Block length in table = 0xff or block length matched table entry
    mov a,!kwp_addr_idx     ;4e26  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;4e29  73

    movw hl,#kwp_modes+1    ;4e2a  16 28 b0     HL = pointer to KWP1281 modes table
    mov a,[hl+b]            ;4e2d  ab           A = value from table (0=normal, 1="radio as tester")
    cmp a,#0x00             ;4e2e  4d 00        Is it a normal address (i.e. not address 0x3F for cluster security)?
    bz lab_4e3d             ;4e30  ad 0b          Yes: branch to lab_4e3d

    ;KWP1281 mode is "radio as tester" for cluster security
    mov a,!kwp_addr_idx     ;4e32  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    cmp a,#0x03             ;4e35  4d 03
    bnz lab_4e3c_ret        ;4e37  bd 03
    br !lab_4e8d_eq_3       ;4e39  9b 8d 4e     Branch to handle mem_f0fd = 0x03
                            ;                     (Address 0x3F block title dispatch)
    ;kwp_addr_idx != 0x03
lab_4e3c_ret:
    ret                     ;4e3c  af

lab_4e3d:
;KWP1281 address is a normal one (not cluster security)
    mov a,!kwp_addr_idx     ;4e3d  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    cmp a,#0x01             ;4e40  4d 01
    bnz lab_4e47            ;4e42  bd 03
    br !lab_4e4f_eq_1       ;4e44  9b 4f 4e     Branch to handle mem_f0fd = 0x01
                            ;                     (Address 0x7C block title dispatch)
lab_4e47:
    cmp a,#0x02             ;4e47  4d 02
    bnz lab_4e4e_ret        ;4e49  bd 03
    br !lab_4e6e_eq_2       ;4e4b  9b 6e 4e     Branch to handle mem_f0fd = 0x02
                            ;                     (Address 0x56 block title dispatch)
lab_4e4e_ret:
    ret                     ;4e4e  af

lab_4e4f_eq_1:
;used if kwp_addr_idx = 0x01
;Block title dispatch for address 0x56 (normal address)
    movw hl,#kwp_rx_buf     ;4e4f  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x02]         ;4e52  ae 02        A = block title to find
    movw hl,#kwp_7c_titles+1 ;4e54  16 a5 b2    HL = pointer to table of block titles
    mov b,#0x08             ;4e57  a3 08        B = 8 block titles in table

lab_4e59_loop:
    cmp a,[hl+b]            ;4e59  31 4b        Compare title with current table entry
    bz lab_4e62_title_found ;4e5b  ad 05        Branch if title is equal
    dbnz b,lab_4e59_loop    ;4e5d  8b fa        Keep going until end of table

    ;title not found
    br !lab_5355_nak_fail   ;4e5f  9b 55 53     Branch to Send NAK response for general failure

lab_4e62_title_found:
;title found in kwp_7c_titles
    mov a,b                 ;4e62  63
    movw hl,#kwp_7c_handlers+1 ;4e63  16 af b2
    rol a,1                 ;4e66  26
    mov b,a                 ;4e67  73
    mov a,[hl+b]            ;4e68  ab
    mov x,a                 ;4e69  70
    inc b                   ;4e6a  43
    mov a,[hl+b]            ;4e6b  ab
    br ax                   ;4e6c  31 98        Branch to KWP1281 block title handler

lab_4e6e_eq_2:
;used if kwp_addr_idx = 0x02
;Block title dispatch for address 0x56 (normal address)
;
    movw hl,#kwp_rx_buf      ;4e6e  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x02]          ;4e71  ae 02        A = block title
    movw hl,#kwp_56_titles+1 ;4e73  16 c2 b2     HL = pointer to table of block titles
    mov b,#0x0e              ;4e76  a3 0e        B = 0x0e block titles in table

lab_4e78_loop:
    cmp a,[hl+b]            ;4e78  31 4b
    bz lab_4e81_title_found ;4e7a  ad 05
    dbnz b,lab_4e78_loop    ;4e7c  8b fa

    ;title not found
    br !lab_5355_nak_fail   ;4e7e  9b 55 53     Branch to Send NAK response for general failure

lab_4e81_title_found:
;title found in kwp_56_titles
    mov a,b                 ;4e81  63
    movw hl,#kwp_56_handlers+1 ;4e82  16 d2 b2
    rol a,1                 ;4e85  26
    mov b,a                 ;4e86  73
    mov a,[hl+b]            ;4e87  ab
    mov x,a                 ;4e88  70
    inc b                   ;4e89  43
    mov a,[hl+b]            ;4e8a  ab
    br ax                   ;4e8b  31 98        Branch to KWP1281 block title handler

lab_4e8d_eq_3:
;used if kwp_addr_idx = 0x03
;Block title dispatch for address 0x3F (cluster)
    movw hl,#kwp_rx_buf      ;4e8d  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x02]          ;4e90  ae 02        A = block title
    movw hl,#kwp_3f_titles+1 ;4e92  16 f1 b2     HL = pointer to table of block titles
    mov b,#0x04              ;4e95  a3 04        B = 4 block titles in table

lab_4e97_loop:
    cmp a,[hl+b]            ;4e97  31 4b
    bz lab_4ea0_title_found ;4e99  ad 05
    dbnz b,lab_4e97_loop    ;4e9b  8b fa

    ;title not found
    br !lab_5355_nak_fail   ;4e9d  9b 55 53     Branch to Send NAK response for general failure

lab_4ea0_title_found:
;title found in kwp_3f_titles
    mov a,b                 ;4ea0  63
    movw hl,#kwp_3f_handlers+1 ;4ea1  16 f7 b2
    rol a,1                 ;4ea4  26
    mov b,a                 ;4ea5  73
    mov a,[hl+b]            ;4ea6  ab
    mov x,a                 ;4ea7  70
    inc b                   ;4ea8  43
    mov a,[hl+b]            ;4ea9  ab
    br ax                   ;4eaa  31 98        Branch to KWP1281 block title handler
    ret                     ;4eac  af

kwp_7c_09_ack:
;ack (kwp_7c_handlers)
    call !sub_4828          ;4ead  9a 28 48     If mem_fb28 = 0 then just return, else set mem_fb28 = 0x34
    br !lab_532a_ack        ;4eb0  9b 2a 53     Branch to send ACK response

kwp_7c_06_disconnect:
;disconnect (kwp_7c_handlers)
    mov a,#0x00               ;4eb3  a1 00
    mov !kwp_con_7f_state,a   ;4eb5  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    call !sub_4822            ;4eb8  9a 22 48     Sets mem_fb28 = 0 and returns
    br !kwp_logout_disconnect ;4ebb  9b c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_4ebe:
    br !lab_532a_ack        ;4ebe  9b 2a 53     Branch to send ACK response

kwp_7c_0a_nak:
;nak (kwp_7c_handlers)
    movw hl,#kwp_rx_buf     ;4ec1  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x03]         ;4ec4  ae 03        A = KWP1281 rx buffer byte 3
    cmp a,[hl+0x01]         ;4ec6  49 01        Compare to KWP1281 rx buffer byte 2 (block counter)
    bz lab_4ebe             ;4ec8  ad f4        Branch to send ACK response

    mov a,#0x0f             ;4eca  a1 0f        A = 0x0F
    cmp a,!kwp_tx_len       ;4ecc  48 6b f0     Compare A with KWP1281 tx block length
    bc lab_4ede_br_516f     ;4ecf  8d 0d        Branch if tx block length > 0x0F

    ;KWP1281 tx block length <= 0x0F

    ;Update the block counter in the last block we sent and then send it again.
    mov a,!kwp_blk_counter  ;4ed1  8e cb fb     A = block counter
    add a,#0x01             ;4ed4  0d 01        Increment it
    movw hl,#kwp_tx_buf     ;4ed6  16 7a f0     HL = pointer to KWP1281 tx buffer
    mov [hl+0x01],a         ;4ed9  be 01        Store block counter in tx buffer
    br !send_kwp_tx_buf     ;4edb  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_4ede_br_516f:
;KWP1281 tx block length > 0x0F
    br !lab_516f            ;4ede  9b 6f 51     Branch to resend the longer Read RAM or Read EEPROM responses

kwp_7c_2b_login:
;Login (kwp_7c_handlers)
;
;Unlike login on address 0x56 (kwp_56_2b_login), a successful login
;does not affect the coding or workshop code.  The login block is
;the same length but the coding and workshop bytes are used as a
;longer password of "OCLED" ("DELCO" backwards).
;
;Request block:
;  0x08 Block length          kwp_rx_buf+0
;   xx  Block counter         kwp_rx_buf+1
;  0x2B Block title (Login)   kwp_rx_buf+2
;  0x4F "O"                   kwp_rx_buf+3
;  0x43 "C"                   kwp_rx_buf+4
;  0x4C "L"                   kwp_rx_buf+5
;  0x45 "E"                   kwp_rx_buf+6
;  0x44 "D"                   kwp_rx_buf+7
;  0x03 Block end             kwp_rx_buf+8
;
    call !auth_login_7c_ocled  ;4ee1  9a 94 46     Authenticate login on address 0x7C using "DELCO" backwards
    bc lab_4eee_login_ok       ;4ee4  8d 08        Branch if successful login

    ;login failed
    mov a,#0x01             ;4ee6  a1 01
    mov !kwp_con_7f_state,a ;4ee8  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    br !lab_5355_nak_fail   ;4eeb  9b 55 53     Branch to Send NAK response for general failure

lab_4eee_login_ok:
    ;login succeeded
    mov a,#0x00             ;4eee  a1 00
    mov !kwp_con_7f_state,a ;4ef0  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    br !lab_532a_ack        ;4ef3  9b 2a 53     Branch to send ACK response

kwp_7c_01_read_ram:
;read ram (kwp_7c_handlers)
    mov a,!kwp_con_7f_state ;4ef6  8e c7 fb     A = KWP1281 connection state on DELCO address (0x7c)
    cmp a,#0x01             ;4ef9  4d 01
    bnz lab_4f00            ;4efb  bd 03

    br !lab_5355_nak_fail   ;4efd  9b 55 53     Branch to Send NAK response for general failure

lab_4f00:
    mov a,#0x00             ;4f00  a1 00
    mov !kwp_con_7f_state,a ;4f02  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    clr1 cy                 ;4f05  21
    call !sub_4828          ;4f06  9a 28 48     If mem_fb28 = 0 then just return, else set mem_fb28 = 0x34
    set1 cy                 ;4f09  20
    bc lab_4f0f             ;4f0a  8d 03        Branch always
    br !lab_5355_nak_fail   ;4f0c  9b 55 53     Branch to Send NAK response for general failure

lab_4f0f:
    br !lab_552a_read_ram   ;4f0f  9b 2a 55     Branch to Send 0x1c response to read ram or send nak

kwp_7c_03_read_eeprom:
;read eeprom (kwp_7c_handlers)
    mov a,!kwp_con_7f_state ;4f12  8e c7 fb     KWP1281 connection state on DELCO address (0x7c)
    cmp a,#0x01             ;4f15  4d 01
    bnz lab_4f1c            ;4f17  bd 03

    br !lab_5355_nak_fail   ;4f19  9b 55 53     Branch to Send NAK response for general failure

lab_4f1c:
    mov a,#0x00             ;4f1c  a1 00
    mov !kwp_con_7f_state,a ;4f1e  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    clr1 cy                 ;4f21  21
    call !sub_4828          ;4f22  9a 28 48     If mem_fb28 = 0 then just return, else set mem_fb28 = 0x34
    set1 cy                 ;4f25  20
    bc lab_4f2b             ;4f26  8d 03        Branch always
    br !lab_5355_nak_fail   ;4f28  9b 55 53     Branch to Send NAK response for general failure

lab_4f2b:
    br !lab_5581_read_eeprom ;4f2b  9b 81 55     Branch to send read EEPROM response

kwp_7c_0c_write_eeprom:
;write eeprom (kwp_7c_handlers)
    mov a,!kwp_con_7f_state ;4f2e  8e c7 fb     KWP1281 connection state on DELCO address (0x7c)
    cmp a,#0x01             ;4f31  4d 01
    bnz lab_4f38            ;4f33  bd 03

    br !lab_5355_nak_fail   ;4f35  9b 55 53     Branch to Send NAK response for general failure

lab_4f38:
    mov a,#0x00             ;4f38  a1 00
    mov !kwp_con_7f_state,a ;4f3a  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    clr1 cy                 ;4f3d  21
    call !sub_4828          ;4f3e  9a 28 48     If mem_fb28 = 0 then just return, else set mem_fb28 = 0x34
    set1 cy                 ;4f41  20
    bc lab_4f47             ;4f42  8d 03        Branch always

lab_4f44:
    br !lab_5355_nak_fail   ;4f44  9b 55 53     Branch to Send NAK response for general failure

lab_4f47:
    call !sub_2c33          ;4f47  9a 33 2c     Perform EEPROM write from KWP1281 request.
                            ;                     Sets carry on failure.
    bc lab_4f44             ;4f4a  8d f8        Branch to Send NAK response for general failure
    br !lab_55c5            ;4f4c  9b c5 55     Branch to Send EEPROM write response

kwp_7c_1b_custom:
;kwp ? custom usage (kwp_7c_handlers)
    mov a,!kwp_con_7f_state ;4f4f  8e c7 fb     KWP1281 connection state on DELCO address (0x7c)
    cmp a,#0x01             ;4f52  4d 01
    bnz lab_4f59            ;4f54  bd 03

    br !lab_5355_nak_fail   ;4f56  9b 55 53     Branch to Send NAK response for general failure

lab_4f59:
    mov a,#0x00             ;4f59  a1 00
    mov !kwp_con_7f_state,a ;4f5b  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    movw hl,#kwp_rx_buf     ;4f5e  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x03]         ;4f61  ae 03        A = first payload byte after block title
    cmp a,#0x31             ;4f63  4d 31        Is it a "1" (unknown constant)?
    bz lab_4f6a             ;4f65  ad 03          Yes: lab_4f6a
    br !lab_5355_nak_fail   ;4f67  9b 55 53       No:  lab_5355 Send NAK response for general failure

lab_4f6a:
    mov a,[hl+0x04]         ;4f6a  ae 04        A = KWP1281 rx buffer subtitle
    movw hl,#kwp_7c_1b_subtitles+1 ;4f6c  16 02 b3
    mov b,#0x0a             ;4f6f  a3 0a

lab_4f71:
    cmp a,[hl+b]            ;4f71  31 4b
    bz lab_4f7a             ;4f73  ad 05
    dbnz b,lab_4f71         ;4f75  8b fa
    br !lab_5355_nak_fail   ;4f77  9b 55 53     Branch to Send NAK response for general failure

lab_4f7a:
    ;found a match in kwp_7c_1b_subtitles
    movw hl,#kwp_rx_buf          ;4f7a  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl]                   ;4f7d  87           A = block length
    movw hl,#kwp_7c_1b_lengths+1 ;4f7e  16 0e b3
    cmp a,[hl+b]                 ;4f81  31 4b
    bz lab_4f88                  ;4f83  ad 03
    br !lab_5355_nak_fail        ;4f85  9b 55 53     Branch to Send NAK response for general failure

lab_4f88:
    ;found a match in kwp_7c_1b_lengths
    push bc                 ;4f88  b3
    call !sub_4828          ;4f89  9a 28 48     If mem_fb28 = 0 then just return, else set mem_fb28 = 0x34
    pop bc                  ;4f8c  b2
    mov a,b                 ;4f8d  63
    movw hl,#kwp_7c_1b_handlers+1 ;4f8e  16 1a b3
    rol a,1                 ;4f91  26
    mov b,a                 ;4f92  73
    mov a,[hl+b]            ;4f93  ab
    mov x,a                 ;4f94  70
    inc b                   ;4f95  43
    mov a,[hl+b]            ;4f96  ab
    movw hl,#kwp_rx_buf     ;4f97  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov b,#0x04             ;4f9a  a3 04
    br ax                   ;4f9c  31 98


;Block title 0x1B custom usage commands
;
;Request format:
;   xx  block length              kwp_rx_buf+0
;   xx  block counter             kwp_rx_buf+1
;  0x1b block title        0x1B   kwp_rx_buf+2
;  0x31 unknown constant   0x31   kwp_rx_buf+3
;   xx  "subtitle"                kwp_rx_buf+4
;   ...                           ...
;  0x03 block end          0x03   kwp_rx_buf+x


kwp_7c_1b_26:
;Title=0x1b  Subtitle=0x26  Block length=0x06
;1 request parameter
;Replies with data
    call !sub_46ad          ;4f9e  9a ad 46
    br !lab_54fb            ;4fa1  9b fb 54     Branch to send response with data

kwp_7c_1b_27:
;Title=0x1b  Subtitle=0x27  Block length=0x07
;2 request parameters
;Replies with ACK only
    call !sub_46bf          ;4fa4  9a bf 46
    br !lab_532a_ack        ;4fa7  9b 2a 53     Branch to send ACK response

kwp_7c_1b_28:
;Title=0x1b  Subtitle=0x28  Block length=0x05
;0 request parameters
;Replies with ACK only
    call !sub_46f1          ;4faa  9a f1 46
    br !lab_532a_ack        ;4fad  9b 2a 53     Branch to send ACK response

kwp_7c_1b_2a:
;Title=0x1b  Subtitle=0x2a  Block length=0x07
;2 request parameters
;Replies with ACK only
    call !sub_46fc          ;4fb0  9a fc 46
    br !lab_54fb            ;4fb3  9b fb 54     Branch to send response with data

kwp_7c_1b_2d:
;Title=0x1b  Subtitle=0x2d  Block length=0x0b
;6 request parameters
;Replies with data
    call !sub_4731          ;4fb6  9a 31 47
    br !lab_54fb            ;4fb9  9b fb 54     Branch to send response with data

kwp_7c_1b_2e:
;Title=0x1b  Subtitle=0x2e  Block length=0x0b
;6 request parameters
;Replies with data
    call !sub_47d2          ;4fbc  9a d2 47
    br !lab_54fb            ;4fbf  9b fb 54     Branch to send response with data

kwp_7c_1b_2f:
;Title=0x1b  Subtitle=0x2f  Block length=0x05
;Simulate power off
;0 request parameters
;No response; radio goes offline
    br !badisr_0d75         ;4fc2  9b 75 0d

kwp_7c_1b_30:
;Title=0x1b  Subtitle=0x30  Block length=0x05
;0 request parameters
;Replies with ACK only
    call !sub_4109          ;4fc5  9a 09 41
    br !lab_532a_ack        ;4fc8  9b 2a 53     Branch to send ACK response

kwp_7c_1b_31:
;Title=0x1b  Subtitle=0x31  Block length=0x05
;0 request parameters
;Replies with ACK only
    call !sub_47f6          ;4fcb  9a f6 47
    br !lab_532a_ack        ;4fce  9b 2a 53     Branch to send ACK response

kwp_7c_1b_32:
;Title=0x1b  Subtitle=0x32  Block length=0x05
;Perform ROM checksum
;
;Request block:
;   0x05 Block length                  kwp_rx_buf+0
;    xx  Block counter                 kwp_rx_buf+1
;   0x1B Block title (custom usage)    kwp_rx_buf+2
;   0x31 Unknown constant              kwp_rx_buf+3
;   0x32 Subtitle (ROM checksum)       kwp_rx_buf+4
;   0x03 Block end                     kwp_rx_buf+5
;
;Response block:
;   0x07 Block length                  kwp_tx_buf+0
;    xx  Block counter                 kwp_tx_buf+1
;   0x1B Block title (custom usage)    kwp_tx_buf+2
;   0x31 Unknown constant              kwp_tx_buf+3
;   0x32 Subtitle (ROM checksum)       kwp_tx_buf+4
;    xx  Checksum (high byte)          kwp_tx_buf+5
;    xx  Checksum (low byte)           kwp_tx_buf+6
;   0x03 Block end                     kwp_tx_buf+7
;
    call !sub_47fb          ;4fd1  9a fb 47     Calculate ROM checksum, store in mem_fb9d-mem_fb9e
    br !lab_54fb            ;4fd4  9b fb 54     Branch to send response with data

kwp_56_09_ack:
;ack (kwp_56_handlers)
    mov a,!kwp_con_56_state ;4fd7  8e c5 fb     KWP1281 connection state on normal radio address (0x56)
    cmp a,#0x00             ;4fda  4d 00
    bnz lab_4fe1_ne_0       ;4fdc  bd 03

    ;kwp_con_56_state = 0
    br !lab_532a_ack        ;4fde  9b 2a 53     Branch to send ACK response

lab_4fe1_ne_0:
    ;kwp_con_56_state != 0
    cmp a,#0x04             ;4fe1  4d 04
    bnz lab_4ff3_ne_4       ;4fe3  bd 0e

    ;kwp_con_56_state = 4
    bt mem_fe66.1,lab_4ff0  ;4fe5  9c 66 08     Branch if we are sending faults

    ;We are not sending faults
    mov a,#0x00             ;4fe8  a1 00
    mov !kwp_con_56_state,a ;4fea  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_532a_ack        ;4fed  9b 2a 53     Branch to send ACK response

lab_4ff0:
    ;We are sending faults
    br !lab_537d            ;4ff0  9b 7d 53     Branch to continue sending faults

lab_4ff3_ne_4:
    ;kwp_con_56_state != 4
    cmp a,#0x01             ;4ff3  4d 01
    bnz lab_4fff_ne_1       ;4ff5  bd 08

    ;kwp_con_56_state = 1
    mov a,#0x02             ;4ff7  a1 02
    mov !kwp_con_56_state,a ;4ff9  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_52e0_id_radio   ;4ffc  9b e0 52     Branch to Send id block 2/4 with "Radio DE2" (Block length=0x0F)

lab_4fff_ne_1:
    ;kwp_con_56_state != 1
    cmp a,#0x02             ;4fff  4d 02
    bnz lab_500b_ne_2       ;5001  bd 08

    ;kwp_con_56_state = 2
    mov a,#0x03             ;5003  a1 03
    mov !kwp_con_56_state,a ;5005  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_52d5_id_0001    ;5008  9b d5 52     Branch to Send id block 3/4 with "0001" (Block length=0x0E)

lab_500b_ne_2:
    ;kwp_con_56_state != 2
    cmp a,#0x03             ;500b  4d 03
    bnz lab_501b_coding     ;500d  bd 0c        Branch to Send id block 4/4 with coding (Block length=0x08)

    ;kwp_con_56_state = 3
    mov a,#0x00             ;500f  a1 00
    mov !kwp_con_56_state,a ;5011  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    btclr mem_fe66.0,lab_501b_coding ;5014  31 01 66 03  Branch to Send id block 4/4 with coding (Block length=0x08)

    br !lab_532a_ack        ;5018  9b 2a 53     Branch to send ACK response

lab_501b_coding:
    br !lab_52b1_id_coding  ;501b  9b b1 52     Branch to Send id block 4/4 with coding (Block length=0x08)

kwp_56_06_disconnect:
;Disconnect (kwp_56_handlers)
;
;Request block:
;  0x03 Block length              kwp_rx_buf+0
;   xx  Block counter             kwp_rx_buf+1
;  0x06 Block title (Disconnect)  kwp_rx_buf+2
;  0x03 Block end                 kwp_rx_buf+3
;
;Upon receiving this command, the radio disconnects immediately.
;No response block is sent.
;
    mov a,#0x00               ;501e  a1 00
    mov !kwp_con_56_state,a   ;5020  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !kwp_logout_disconnect ;5023  9b c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_5026:
    mov a,#0x00             ;5026  a1 00
    mov !kwp_con_56_state,a ;5028  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_532a_ack        ;502b  9b 2a 53     Branch to send ACK response

kwp_56_0a_nak:
;No Acknowledge (kwp_56_handlers)
;
;Request block:
;  0x04 Block length                  kwp_rx_buf+0
;   xx  Block counter                 kwp_rx_buf+1
;  0x0A Block title (No Acknowledge)  kwp_rx_buf+2
;   xx  Block counter to resend       kwp_rx_buf+3
;  0x03 Block end                     kwp_rx_buf+4
;
;If the Block counter to resend is the same as the request's own block
;counter, an ACK response is returned.  Otherwise, the last block
;sent will be sent again (with an updated block counter).
;
    movw hl,#kwp_rx_buf     ;502e  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x03]         ;5031  ae 03        A = Block counter to resend
    cmp a,[hl+0x01]         ;5033  49 01        Compare with block counter of request block
    bz lab_5026             ;5035  ad ef        Branch to send ACK if equal

    mov a,#0x0f             ;5037  a1 0f        A = 0x0F
    cmp a,!kwp_tx_len       ;5039  48 6b f0     Compare A with KWP1281 tx block length
    bc lab_504b_br_516f     ;503c  8d 0d        Branch if tx block length > 0x0F

    ;KWP1281 tx block length <= 0x0F

    ;Update the block counter in the last block we sent and then send it again.
    mov a,!kwp_blk_counter  ;503e  8e cb fb     A = block counter
    add a,#0x01             ;5041  0d 01        Increment it
    movw hl,#kwp_tx_buf     ;5043  16 7a f0     HL = pointer to KWP1281 tx buffer
    mov [hl+0x01],a         ;5046  be 01        Store block counter in tx buffer
    br !send_kwp_tx_buf     ;5048  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_504b_br_516f:
;KWP1281 tx block length > 0x0F
    br !lab_516f            ;504b  9b 6f 51     Branch to resend the longer Read RAM or Read EEPROM responses

kwp_56_00_read_id:
;read identification (kwp_56_handlers)
    mov a,#0x01               ;504e  a1 01
    mov !kwp_con_56_state,a   ;5050  9e c5 fb   KWP1281 connection state on normal radio address (0x56)

    set1 mem_fe66.0           ;5053  0a 66
    br !lab_52ea_id_part_num  ;5055  9b ea 52   Branch to Send id block 1/4 with "1J0035180B" (Block length=0x0F)

kwp_56_07_read_faults:
;read faults (kwp_56_handlers)
    mov a,#0x04             ;5058  a1 04
    mov !kwp_con_56_state,a ;505a  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_537b            ;505d  9b 7b 53

kwp_56_05_clear_faults:
;clear faults (kwp_56_handlers)
    call !clear_faults       ;5060  9a 90 27
    br kwp_56_07_read_faults ;5063  fa f3

kwp_56_04_output_tests:
;output tests (kwp_56_handlers)
    mov a,#0x00             ;5065  a1 00
    mov !kwp_con_56_state,a ;5067  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_53cf            ;506a  9b cf 53

kwp_56_28_basic_setting:
;basic setting (kwp_56_handlers)
    mov a,#0x00             ;506d  a1 00
    mov !kwp_con_56_state,a ;506f  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_5355_nak_fail   ;5072  9b 55 53     Branch to Send NAK response for general failure

kwp_56_29_group_reading:
;group reading (kwp_56_handlers)
    mov a,#0x00             ;5075  a1 00
    mov !kwp_con_56_state,a ;5077  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    br !lab_5422            ;507a  9b 22 54

kwp_56_10_recoding:
;Recoding (kwp_56_handlers)
;
;The scan tool presents the soft coding to the user as a 15-bit number
;in decimal (00000-32767).  The scan tool multiplies this number by 2
;and then sends it in bytes 3 (high) and 4 (low).  The scan tool sends
;the workshop code directly in bytes 5 (high) and 6 (low).
;
;Example:
;  Soft Coding 01404 (decimal):
;    hex(1404 * 2) => 0x0AF8 => request byte 3 = 0x0A (high)
;                            => request byte 4 = 0xF8 (low)
;
;  Workshop Code 12345 (decimal):
;    hex(12345)    => 0x3039 => request byte 5 = 0x30 (high)
;                            => request byte 6 = 0x39 (low)
;
;Request block:
;  0x07 Block length                      kwp_rx_buf+0
;   xx  Block counter                     kwp_rx_buf+1
;  0x10 Block title                       kwp_rx_buf+2
;   xx  Soft Coding high byte (binary)    kwp_rx_buf+3
;   xx  Soft Coding low byte (binary)     kwp_rx_buf+4
;   xx  Workshop Code high byte (binary)  kwp_rx_buf+5
;   xx  Workshop Code low byte (binary)   kwp_rx_buf+6
;  0x03 Block end                         kwp_rx_buf+7
;
;After recoding, regardless of success or failure, the response for
;KWP1281 request block title 0x00 ID code request/ECU info is returned.
;This is a multi-block response of 4 id blocks where the id block 4/4
;contains the coding and workshop code (see lab_52b1_id_coding).
;
    mov a,#0x01               ;507d  a1 01
    mov !kwp_con_56_state,a   ;507f  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    set1 mem_fe66.0           ;5082  0a 66

    call !recode              ;5084  9a b4 29     Change the coding to a user-provided value
                              ;                     Coding may not be accepted if found to be invalid
                              ;                     but there is no return value to indicate this.

    br !lab_52ea_id_part_num  ;5087  9b ea 52     Branch to Send id block 1/4 with "1J0035180B" (Block length=0x0F)
                              ;                     Recoding sends the same multi-block response as
                              ;                     identification.  The coding will be sent in
                              ;                     id block 4/4 (see lab_52b1_id_coding.

kwp_56_2b_login:
;Login (kwp_56_handlers)
;
;On successful login, the workshop code will be changed along with
;one bit of the coding (see login_56_success).
;
;Request block:
;  0x08 Block length                            kwp_rx_buf+0
;   xx  Block counter                           kwp_rx_buf+1
;  0x2B Block title (Login)                     kwp_rx_buf+2
;   xx  SAFE code high byte (binary)            kwp_rx_buf+3
;   xx  SAFE code low byte (binary)             kwp_rx_buf+4
;   xx  Unknown byte; bit 0 influences coding   kwp_rx_buf+5    See login_56_success
;   xx  Workshop Code high byte (binary)        kwp_rx_buf+6
;   xx  Workshop Code low byte (binary)         kwp_rx_buf+7
;  0x03 Block end                               kwp_rx_buf+8
;
    mov a,#0x00               ;508a  a1 00
    mov !kwp_con_56_state,a   ;508c  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    call !auth_login_56_safe  ;508f  9a ac 25     Authenticate login on address 0x56 using SAFE code
    bt mem_fe65.3,lab_5098    ;5092  bc 65 03     Branch if login succeeded

    ;login failed
    br !kwp_logout_disconnect ;5095  9b c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_5098:
;login succeeded
    call !login_56_success  ;5098  9a ba 2a
    br !lab_532a_ack        ;509b  9b 2a 53     Branch to send ACK response

kwp_56_01_read_ram:
;Read RAM (kwp_56_handlers)
;
;Request block:
;  0x06 Block length              kwp_rx_buf+0
;   xx  Block counter             kwp_rx_buf+1
;  0x01 Block title               kwp_rx_buf+2
;   xx  Number of bytes to read   kwp_rx_buf+3
;   xx  Address high              kwp_rx_buf+4
;   xx  Address low               kwp_rx_buf+5
;  0x03 Block end                 kwp_rx_buf+6
;
    mov a,#0x00             ;509e  a1 00
    mov !kwp_con_56_state,a ;50a0  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    bt mem_fe65.3,lab_50a9  ;50a3  bc 65 03     Branch if logged in
    br !lab_5355_nak_fail   ;50a6  9b 55 53     Branch to Send NAK response for general failure

lab_50a9:
    bt mem_fe65.4,lab_50af  ;50a9  cc 65 03     Branch if group read 0x19 was performed
    br !lab_5355_nak_fail   ;50ac  9b 55 53     Branch to Send NAK response for general failure

lab_50af:
    clr1 cy                 ;50af  21           XXX redundant
    set1 cy                 ;50b0  20
    bc lab_50b6             ;50b1  8d 03
    br !lab_5355_nak_fail   ;50b3  9b 55 53     Branch to Send NAK response for general failure

lab_50b6:
    br !lab_552a_read_ram   ;50b6  9b 2a 55     Branch to Send 0x1c response to read ram or send nak

kwp_56_03_read_eeprom:
;Read EEPROM (kwp_56_handlers)
;
;EEPROM addresses 0x0014-0x0015 containing the SAFE code word are
;sanitized (always returned as 0) because on address 0x56,
;mem_fe65.5=1 (see read_ee_sanitized).  All other addresses in
;the EEPROM are readable.  Reading the EEPROM on address 0x7C
;does not have any sanitization.
;
;Request block format:
;  0x06 Block length                    kwp_rx_buf+0
;   xx  Block counter                   kwp_rx_buf+1
;  0x03 Block title (0x03)              kwp_rx_buf+2
;   xx  Number of bytes to read         kwp_rx_buf+3
;   xx  Address high                    kwp_rx_buf+4
;   xx  Address low                     kwp_rx_buf+5
;  0x03 Block end                       kwp_rx_buf+6
;
    mov a,#0x00             ;50b9  a1 00
    mov !kwp_con_56_state,a ;50bb  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    bt mem_fe65.3,lab_50c4  ;50be  bc 65 03     Branch if logged in

    br !lab_5355_nak_fail   ;50c1  9b 55 53     Branch to Send NAK response for general failure

lab_50c4:
    bt mem_fe65.4,lab_50ca  ;50c4  cc 65 03     Branch if group read 0x19 was performed
    br !lab_5355_nak_fail   ;50c7  9b 55 53     Branch to Send NAK response for general failure

lab_50ca:
    clr1 cy                 ;50ca  21           XXX redundant
    set1 cy                 ;50cb  20
    bc lab_50d1             ;50cc  8d 03        Branch always
    br !lab_5355_nak_fail   ;50ce  9b 55 53     Branch to Send NAK response for general failure

lab_50d1:
;Login and Group 0x19 verified
;Proceed to read the EEPROM
    br !lab_5581_read_eeprom ;50d1  9b 81 55     Branch to Read EEPROM and send response

kwp_56_0c_write_eeprom:
;write eeprom (kwp_56_handlers)
    mov a,#0x00             ;50d4  a1 00
    mov !kwp_con_56_state,a ;50d6  9e c5 fb     KWP1281 connection state on normal radio address (0x56)

    bt mem_fe65.3,lab_50df  ;50d9  bc 65 03     Branch if logged in

    br !lab_5355_nak_fail   ;50dc  9b 55 53     Branch to Send NAK response for general failure

lab_50df:
    bt mem_fe65.4,lab_50e5  ;50df  cc 65 03     Branch if group read 0x19 was performed
    br !lab_5355_nak_fail   ;50e2  9b 55 53     Branch to Send NAK response for general failure

lab_50e5:
    clr1 cy                 ;50e5  21           XXX redundant
    set1 cy                 ;50e6  20
    bc lab_50ec             ;50e7  8d 03        Branch always

lab_50e9:
    br !lab_5355_nak_fail   ;50e9  9b 55 53     Branch to Send NAK response for general failure

lab_50ec:
;write eeprom related
    call !sub_2c33          ;50ec  9a 33 2c     Perform EEPROM write from KWP1281 request.
                            ;                     Sets carry on failure.
    bc lab_50e9             ;50ef  8d f8        Branch to Send NAK response
    br !lab_55c5            ;50f1  9b c5 55     Branch to Send EEPROM write response

;
;kwp_con_3f_state is the state of the connection to the cluster (address 0x3F):
;  kwp_3f_09_ack expects 0x01, then sets it to 0x02, then sends security access request (title 0xd7)
;  kwp_3f_06_disconnect unconditionally sets it to 0x00, then ends session
;  kwp_3f_0a_nak expects 0x01, then sets it to 0x00
;  kwp_3f_3d_secure_access expects 0x02, then sets it to 0x00, then ends session
;
;This flow is just like the Premium 4 firmware at mem_e3bd.
;
;Successful connection flow:
;  Radio sends 5 baud init to instrument cluster on address 0x3F.
;    The cluster must use 10400 baud because the radio hardcodes the baud rate.
;  Cluster sends a 0x09 ACK block after the send keyword byte exchange.
;  Radio sends a 0xD7 Security Access Request block (lab_55de_secure_req).
;  Cluster sends a 0x3D Security Access Response block (sub_2537_secure_resp).
;  Radio sends a 0x06 Disconnect block (no response from cluster; end of communication).
;

kwp_3f_09_ack:
;Acknowledge block received from cluster (kwp_3f_handlers)
;
    mov a,!kwp_con_3f_state ;50f4  8e c6 fb     A = KWP1281 connection state on cluster address (0x3F; radio-as-tester)
    cmp a,#0x01             ;50f7  4d 01
    bz lab_50fe             ;50f9  ad 03        Branch if we are expecting this block

    br !lab_5355_nak_fail   ;50fb  9b 55 53     Branch to Send NAK response for general failure

lab_50fe:
;we received a 0x09 ack block and we were expecting it
    mov a,#0x02               ;50fe  a1 02
    mov !kwp_con_3f_state,a   ;5100  9e c6 fb     Store new KWP1281 connection state on cluster address (0x3F; radio-as-tester)

    br !lab_55de_secure_req   ;5103  9b de 55     Branch to Send Security Access Request (title 0xD7)

kwp_3f_06_disconnect:
;Disconnect block received from cluster (kwp_3f_handlers)
;
    call !sub_259b_safe_lock  ;5106  9a 9b 25     Turn SAFE mode = locked
    mov a,#0x00               ;5109  a1 00
    mov !kwp_con_3f_state,a   ;510b  9e c6 fb     Store new KWP1281 connection state on cluster address (0x3F; radio-as-tester)

    br !kwp_logout_disconnect ;510e  9b c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_5111:
    call !sub_259b_safe_lock;5111  9a 9b 25     Turn SAFE mode = locked
    mov a,#0x00             ;5114  a1 00
    mov !kwp_con_3f_state,a ;5116  9e c6 fb     Store new KWP1281 connection state on cluster address (0x3F; radio-as-tester)

    br !lab_5337_disconnect ;5119  9b 37 53     Branch to Send Disconnect request to instrument cluster

kwp_3f_0a_nak:
;No Acknowledge block received from cluster (kwp_3f_handlers)
;
    movw hl,#kwp_rx_buf     ;511c  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x03]         ;511f  ae 03        A = Block counter to resend
    cmp a,[hl+0x01]         ;5121  49 01        Compare with request's block counter
    bz lab_5111             ;5123  ad ec        If equal, branch to lock SAFE mode and disconnect

    mov a,!kwp_con_3f_state ;5125  8e c6 fb     A = KWP1281 connection state on cluster address (0x3F; radio-as-tester)
    cmp a,#0x01             ;5128  4d 01
    bz lab_512f             ;512a  ad 03

    br !send_kwp_tx_buf     ;512c  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_512f:
    call !sub_259b_safe_lock;512f  9a 9b 25     Turn SAFE mode = locked
    mov a,#0x00             ;5132  a1 00
    mov !kwp_con_3f_state,a ;5134  9e c6 fb     Store new KWP1281 connection state on cluster address (0x3F; radio-as-tester)
    br !lab_5337_disconnect ;5137  9b 37 53     Branch to Send Disconnect request to instrument cluster

kwp_3f_3d_secure_access:
;Security Access Response (title 0x3D) block received from cluster (kwp_3f_handlers)
;
    mov a,!kwp_con_3f_state ;513a  8e c6 fb     A = KWP1281 connection state on cluster address (0x3F; radio-as-tester)
    cmp a,#0x02             ;513d  4d 02
    bz lab_5144             ;513f  ad 03        Branch if we are expecting this 0x3d block
    br !lab_5355_nak_fail   ;5141  9b 55 53     Branch to Send NAK response for general failure

lab_5144:
;we received a 0x3d security access response block and we were expecting it
    call !sub_2537_secure_resp  ;5144  9a 37 25     Process title 0x3d security access response block.
                                ;                   Perform a computation on the 4 bytes.  Compare the
                                ;                   computation result to an expected result and
                                ;                   either lock or unlock SAFE mode.
    mov a,#0x00                 ;5147  a1 00
    mov !kwp_con_3f_state,a     ;5149  9e c6 fb     Store new KWP1281 connection state on cluster address (0x3F; radio-as-tester)
    br !lab_5337_disconnect     ;514c  9b 37 53     Branch to Send Disconnect request to instrument cluster

    ret                     ;514f  af

lab_5150_mem_fbc9_eq_0x06:
;mem_fbc9=0x06
;Unknown; seems to be Read RAM / EEPROM related
    mov a,!mem_fbca         ;5150  8e ca fb
    cmp a,#0x01             ;5153  4d 01
    bnz lab_515a            ;5155  bd 03
    br !lab_555c            ;5157  9b 5c 55

lab_515a:
    cmp a,#0x02             ;515a  4d 02
    bnz lab_5161            ;515c  bd 03
    br !lab_55b6            ;515e  9b b6 55

lab_5161:
    mov a,#0x00             ;5161  a1 00
    mov !mem_fbca,a         ;5163  9e ca fb
    ret                     ;5166  af

lab_5167_mem_fbc9_eq_0x09:
;mem_fbc9=0x09
;Send Read RAM / EEPROM response
    mov a,!kwp_blk_counter  ;5167  8e cb fb     A = block counter
    sub a,#0x01             ;516a  1d 01        Decrement it
    mov !kwp_blk_counter,a  ;516c  9e cb fb     Store decremented block counter

lab_516f:
    mov a,!mem_fbca         ;516f  8e ca fb
    cmp a,#0x01             ;5172  4d 01
    bnz lab_5179            ;5174  bd 03

    ;mem_fbca = 0x01
    br !lab_5527            ;5176  9b 27 55     send read ram response with faked address
                            ;                   from mem_f000 and faked byte count from kwp_rw_total

lab_5179:
    cmp a,#0x02             ;5179  4d 02
    bnz lab_5180            ;517b  bd 03

    ;mem_fbca = 0x02
    br !lab_557e            ;517d  9b 7e 55     send read eeprom response with faked address
                            ;                   from mem_f000 and faked byte count from kwp_rw_total

lab_5180:
    mov a,#0x00             ;5180  a1 00
    mov !mem_fbca,a         ;5182  9e ca fb
    ret                     ;5185  af

lab_5186_mem_fbc9_eq_0x07:
;mem_fbc9=0x07
;Block received but it exceeded RX buffer length
;
;XXX This state is never reached.  See the comments at lab_3223 and above it.
;
    mov a,!kwp_blk_counter  ;5186  8e cb fb     A = block counter
    add a,#0x01             ;5189  0d 01        Increment it
    mov !kwp_blk_counter,a  ;518b  9e cb fb     Store incremented block counter

    movw hl,#kwp_rx_buf     ;518e  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl+0x02]         ;5191  ae 02        A = block title received
    movw hl,#kwp_titles+1   ;5193  16 5d b2     HL = pointer to block titles table
    mov b,#0x22             ;5196  a3 22
lab_5198_loop:
    cmp a,[hl+b]            ;5198  31 4b        Compare to title in table
    bz lab_51a1_title_found ;519a  ad 05        Branch if block title is equal
    dbnz b,lab_5198_loop    ;519c  8b fa        Loop until end of table

    ;Block title not found in table
    br !lab_5355_nak_fail   ;519e  9b 55 53     Branch to Send NAK response for general failure

lab_51a1_title_found:
    movw hl,#kwp_rx_buf     ;51a1  16 8a f0     HL = pointer to KWP1281 rx buffer
    mov a,[hl]              ;51a4  87           A = block length from rx buffer
    mov x,a                 ;51a5  70           X = block length from rx buffer
    movw hl,#kwp_lengths+1  ;51a6  16 81 b2     HL = pointer to block lengths table
    mov a,[hl+b]            ;51a9  ab           A = read expected block length from table
    cmp a,#0xff             ;51aa  4d ff        Does the expected length vary (0xff)?
    bz lab_51b5             ;51ac  ad 07          Yes: skip length comparison for variable length
    ;Expected block length is not variable
    cmp a,x                 ;51ae  61 48        Compare expected block length (A) with received (X)
    bz lab_51b5             ;51b0  ad 03        Branch if they are equal
    ;Block length does not match expected
    br !lab_5344_nak_resend ;51b2  9b 44 53     Send NAK response asking for the last block to be sent again

lab_51b5:
    ;Block length expected is variable or length matches expected.
    ;
    ;The block's title and length passed the checks above but the
    ;block exceeded the length of the RX buffer.  We can't process it.
    br !lab_5355_nak_fail   ;51b5  9b 55 53     Send NAK response for general failure

lab_51b8_mem_fbc9_eq_0x08:
;mem_fbc9=0x08
;Bad block end byte received
    mov a,!kwp_blk_counter  ;51b8  8e cb fb   A = block counter
    add a,#0x01             ;51bb  0d 01      Increment it
    mov !kwp_blk_counter,a  ;51bd  9e cb fb   Store incremented block counter
    br !lab_5344_nak_resend ;51c0  9b 44 53   Send NAK response asking for the last block to be sent again

kwp_logout_disconnect:
;Clear KWP1281 auth bits and disconnect
    clr1 mem_fe65.3         ;51c3  3b 65       Clear bit to indicate not logged in
    clr1 mem_fe65.4         ;51c5  4b 65       Clear bit to indicate group read 0x19 not performed
    br !kwp_disconnect      ;51c7  9b 68 34    Disconnect and clear all KWP1281 state

lab_51ca_mem_fbc9_eq_0x01:
;mem_fbc9=0x01
;Sets UART baud and mode
    movw hl,#kwp_brgc0_b02c+1 ;51ca  16 2d b0
    mov a,!kwp_addr_idx     ;51cd  8e 6d f0     A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;51d0  73
    mov a,[hl+b]            ;51d1  ab
    mov brgc0,a             ;51d2  f6 a2        Load baud rate generator 0 with A

    mov a,#0xca             ;51d4  a1 ca        0xCA = UART TX & RX enabled, N81
    mov asim0,a             ;51d6  f6 a0        Load UART0 mode register

    mov a,#0x2e             ;51d8  a1 2e
    mov !mem_f06e,a         ;51da  9e 6e f0     mem_f06e = 46 (maybe 460ms?)

    set1 mem_fe79.1         ;51dd  1a 79
    set1 mem_fe79.3         ;51df  3a 79
    ret                     ;51e1  af

lab_51e2_mem_fbc9_eq_0x02:
;mem_fbc9=0x02
;Sets UART baud and mode
    movw hl,#kwp_brgc0_b02c+1 ;51e2  16 2d b0
    mov a,!kwp_addr_idx     ;51e5  8e 6d f0     KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;51e8  73
    mov a,[hl+b]            ;51e9  ab
    mov brgc0,a             ;51ea  f6 a2        Load baud rate generate 0 with A

    mov a,#0xca             ;51ec  a1 ca        0xCA = UART TX & RX enabled, N81
    mov asim0,a             ;51ee  f6 a0        Load UART0 mode register

    mov a,#0x79             ;51f0  a1 79
    mov !mem_f06e,a         ;51f2  9e 6e f0     mem_f06e = 121 (maybe 1210ms?)

    set1 mem_fe79.1         ;51f5  1a 79
    set1 mem_fe79.3         ;51f7  3a 79
    ret                     ;51f9  af

lab_51fa_mem_fbc9_eq_0x03:
;mem_fbc9=0x03
;Radio-as-tester only: start connection if address sent is cluster
    mov a,!kwp_tx_address     ;51fa  8e 73 f0     A = KWP1281 address to send
    movw hl,#kwp_addresses+1  ;51fd  16 23 b0     HL = pointer to table of KWP1281 addresses
    mov b,#0x03               ;5200  a3 03        B = number of valid addresses in table

lab_5202_loop:
    cmp a,[hl+b]              ;5202  31 4b        Compare address to current entry in table
    bz lab_520b_address_found ;5204  ad 05        Branch if equal
    dbnz b,lab_5202_loop      ;5206  8b fa        Keep going until end of table

    ;address not found
    br !kwp_logout_disconnect ;5208  9b c3 51     Branch to Clear KWP1281 auth bits and disconnect

lab_520b_address_found:
;kwp1281 address found in table
    mov a,b                 ;520b  63             A = index of address in kwp_addresses table
    mov !kwp_addr_idx,a     ;520c  9e 6d f0       Store it as KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster

    movw hl,#kwp_brgc0_b02c+1 ;520f  16 2d b0
    mov a,!kwp_addr_idx     ;5212  8e 6d f0       A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;5215  73
    mov a,[hl+b]            ;5216  ab
    mov brgc0,a             ;5217  f6 a2          Load baud rate generator 0 with A

    mov a,#0xca             ;5219  a1 ca          0xCA = UART TX & RX enabled, N81
    mov asim0,a             ;521b  f6 a0          Load UART0 mode register

    mov a,#0x1c             ;521d  a1 1c
    mov !mem_f06f,a         ;521f  9e 6f f0       mem_f06f = 0x1c (maybe 280ms?)

    set1 mem_fe79.3         ;5222  3a 79
    set1 mem_fe79.2         ;5224  2a 79

    mov a,!kwp_addr_idx     ;5226  8e 6d f0       A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    cmp a,#0x03             ;5229  4d 03          Is it the cluster?
    bnz lab_5230_ret        ;522b  bd 03            No: branch to return

    ;kwp_addr_idx = 3 (address 0x3F = cluster)
    br !lab_528c_addr_0x3f  ;522d  9b 8c 52

lab_5230_ret:
    ret                     ;5230  af

lab_5231_mem_fbc9_eq_0x05:
;mem_fbc9=0x05
    btclr mem_fe79.3,lab_523e ;5231  31 31 79 09
    btclr mem_fe79.4,lab_5248 ;5235  31 41 79 0f
    btclr mem_fe79.5,lab_5252 ;5239  31 51 79 15  Set baud rate and start connection on 0x56 or 0x7C
    ret                       ;523d  af

lab_523e:
    set1 mem_fe79.4         ;523e  4a 79

    mov a,#0x04             ;5240  a1 04
    mov !mem_f06e,a         ;5242  9e 6e f0     mem_f06e = 4 (maybe 4ms?)

    set1 mem_fe79.1         ;5245  1a 79
    ret                     ;5247  af

lab_5248:
    set1 mem_fe79.5         ;5248  5a 79

    mov a,#0x02             ;524a  a1 02
    mov !mem_f06e,a         ;524c  9e 6e f0     mem_f06e = 2 (maybe 2ms?)

    set1 mem_fe79.1         ;524f  1a 79
    ret                     ;5251  af

lab_5252:
;Set baud rate and start connection on 0x56 or 0x7C
    movw hl,#kwp_brgc0_b02c+1 ;5252  16 2d b0
    mov a,!kwp_addr_idx     ;5255  8e 6d f0       A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    mov b,a                 ;5258  73
    mov a,[hl+b]            ;5259  ab
    mov brgc0,a             ;525a  f6 a2          Load baud rate generator 0 with A

    movw hl,#kwp_asim0_b031+1 ;525c  16 32 b0
    mov a,[hl+b]            ;525f  ab
    mov asim0,a             ;5260  f6 a0          Load UART0 mode register

    mov a,!kwp_addr_idx     ;5262  8e 6d f0       A = KWP1281 kwp_addresses index: 1 = 0x7C DELCO, 2 = 0x56 Normal, 3 = 0x3F Radio to Cluster
    cmp a,#0x01             ;5265  4d 01
    bnz lab_526c            ;5267  bd 03
    br !lab_527e_addr_0x7c  ;5269  9b 74 52

lab_526c:
    cmp a,#0x02             ;526c  4d 02
    bnz lab_5273_ret        ;526e  bd 03
    br !lab_527e_addr_0x56  ;5270  9b 7e 52

lab_5273_ret:
    ret                     ;5273  af

lab_527e_addr_0x7c:
;KWP1281 connection has just been established on address 0x7C (DELCO address).
;kwp_addr_idx = 0x01 (address 0x7c)
    set1 mem_fe65.7         ;5274  7a 65

    mov a,#0x01             ;5276  a1 01
    mov !kwp_con_7f_state,a ;5278  9e c7 fb     KWP1281 connection state on DELCO address (0x7c)

    br !lab_532a_ack        ;527b  9b 2a 53     Branch to send an ACK block

lab_527e_addr_0x56:
;KWP1281 connection has just been established on address 0x56 (Normal radio address).
;kwp_addr_idx = 0x02 (address 0x56)
    set1 mem_fe65.5           ;527e  5a 65      Set bit to enable some protection checks (e.g. read_ee_sanitized)
    set1 mem_fe7d.4           ;5280  4a 7d

    mov a,#0x01               ;5282  a1 01
    mov !kwp_con_56_state,a   ;5284  9e c5 fb   KWP1281 connection state on normal radio address (0x56)

    set1 mem_fe66.0           ;5287  0a 66
    br !lab_52ea_id_part_num  ;5289  9b ea 52   Branch to Send id block 1/4 with "1J0035180B" (Block length=0x0F)

lab_528c_addr_0x3f:
;KWP1281 connection has just been establised on address 0x3F (radio-as-tester; 0x3F=cluster address)
;kwp_addr_idx = 0x03 (address 0x3F)
    mov a,#0x01             ;528c  a1 01
    mov !kwp_con_3f_state,a ;528e  9e c6 fb     Store new KWP1281 connection state on cluster address (0x3F; radio-as-tester)
    ret                     ;5291  af


init_kwp_tx_buf:
;Set block title, counter, length in KWP1281 tx buffer
;Stores block length in kwp_tx_len, increments block counter in kwp_blk_counter
;
;Call with:
;  B = index to kwp_lengths and kwp_titles tables
;
;Returns:
;  HL = pointer to KWP1281 tx buffer byte 0 (block length)
;  A = block length from kwp_lengths table
;  X = block length from kwp_lengths table (again)
;  B = 3 (offset to first byte after block title)
;
    movw hl,#kwp_lengths+1  ;5292  16 81 b2
    mov a,[hl+b]            ;5295  ab           A = block length from table
    mov x,a                 ;5296  70           Remember it in X
    mov !kwp_tx_len,a       ;5297  9e 6b f0     Store tx block length

    movw hl,#kwp_titles+1   ;529a  16 5d b2
    mov a,[hl+b]            ;529d  ab           A = block title from table
    movw hl,#kwp_tx_buf     ;529e  16 7a f0     HL = pointer to KWP1281 tx buffer
    mov [hl+0x02],a         ;52a1  be 02        Store block title in tx buffer byte 2

    mov a,!kwp_blk_counter  ;52a3  8e cb fb     A = block counter
    inc a                   ;52a6  41           Increment it
    mov !kwp_blk_counter,a  ;52a7  9e cb fb     Store incremented block counter
    mov [hl+0x01],a         ;52aa  be 01        Store block counter in tx buffer byte 1

    mov a,x                 ;52ac  60           A = recall block length from table
    mov [hl],a              ;52ad  97           Store block length in tx buffer byte 0
    mov b,#0x03             ;52ae  a3 03        B = 3 (offset to first byte after block title)
    ret                     ;52b0  af


lab_52b1_id_coding:
;Send id block 4/4 with coding (Block length=0x08)
;
;Response block:
;  0x08 Block length                  kwp_tx_buf+0
;   xx  Block counter                 kwp_tx_buf+1
;  0xF6 Block title (ascii/data)      kwp_tx_buf+2
;  0x00 Unknown, always 0             kwp_tx_buf+3
;   xx  Soft Coding (high byte)       kwp_tx_buf+4
;   xx  Soft Coding (low byte)        kwp_tx_buf+5
;   xx  Workshop Code (high byte)     kwp_tx_buf+6
;   xx  Workshop Code (low byte)      kwp_tx_buf+7
;  0x03 Block end                     kwp_tx_buf+8
;
;The format of the coding and workshop code is the same as the
;recoding request block.  See kwp_56_10_recoding for examples.
;
    mov a,#0x10             ;52b1  a1 10        State 0x10 = Sending id block 4/4 with coding (Block length=0x08)
    mov !mem_fbca,a         ;52b3  9e ca fb

    mov b,#0x05             ;52b6  a3 05        B = index 0x05 response with ascii/data (id block 4/4 with coding)
    call !init_kwp_tx_buf   ;52b8  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    ;KWP1281 tx buffer byte 3 = 0
    mov a,#0x00             ;52bb  a1 00        A = 0
    mov [hl+b],a            ;52bd  bb           Store 0 in KWP1281 tx buffer byte 3

    ;KWP1281 tx buffer byte 4 = Soft Coding in binary, high byte (mem_f1f9)
    inc b                   ;52be  43           Increment to offset 4
    call !get_coding        ;52bf  9a 46 2b     Get the Soft Coding (in binary) into AX
                            ;                     A = Soft Coding in binary, high byte (mem_f1f9)
                            ;                     X = Soft Coding in binary, low byte (mem_f1fa)
    mov [hl+b],a            ;52c2  bb           Store value at mem_f1f9 in KWP1281 tx buffer byte 4

    ;KWP1281 tx buffer byte 5 = Soft Coding in binary, low byte (mem_f1fa)
    inc b                   ;52c3  43           Increment to offset 5
    mov a,x                 ;52c4  60           A = value at mem_f1fa
    mov [hl+b],a            ;52c5  bb           Store value at mem_f1fa in KWP1281 tx buffer byte 5

    ;KWP1281 tx buffer byte 6 = Workshop Code, high byte (mem_f1fb)
    inc b                   ;52c6  43           Increment to offset 6
    call !get_workshop      ;52c7  9a 4b 2b     Get the Workshop Code into AX
                            ;                     A = Workshop Code high byte (mem_f1fb)
                            ;                     X = Workshop Code low byte (mem_f1fc)
    mov [hl+b],a            ;52ca  bb           Store value at mem_f1fb in KWP1281 tx buffer byte 6

    ;KWP1281 tx buffer byte 7 = Workshop Code, low byte (mem_f1fc)
    inc b                   ;52cb  43           Increment to offset 7
    mov a,x                 ;52cc  60           A = value at mem_f1fc
    mov [hl+b],a            ;52cd  bb           Store value at mem_f1fc in KWP1281 tx buffer byte 7

    ;KWP1281 tx buffer byte 8 = 0x03 block end
    inc b                   ;52ce  43           Increment to offset 8
    mov a,#0x03             ;52cf  a1 03        A = 0x03 block end
    mov [hl+b],a            ;52d1  bb           Store in KWP1281 tx buffer byte 8
    br !send_kwp_tx_buf     ;52d2  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_52d5_id_0001:
;Send id block 3/4 with "       0001" (Block length=0x0E)
;
;Response block:
;  0x0E Block length                  kwp_tx_buf+0
;   xx  Block counter                 kwp_tx_buf+1
;  0xF6 Block title (ascii/data)      kwp_tx_buf+2
;  0x20 " "                           kwp_tx_buf+3
;  0x20 " "                           kwp_tx_buf+4
;  0x20 " "                           kwp_tx_buf+5
;  0x20 " "                           kwp_tx_buf+6
;  0x20 " "                           kwp_tx_buf+7
;  0x20 " "                           kwp_tx_buf+8
;  0x20 " "                           kwp_tx_buf+9
;  0x44 "0"                           kwp_tx_buf+10
;  0x45 "0"                           kwp_tx_buf+11
;  0x32 "0"                           kwp_tx_buf+12
;  0x20 "1"                           kwp_tx_buf+13
;  0x03 Block end                     kwp_tx_buf+14
;
    mov a,#0x11             ;52d5  a1 11        State 0x11 = Send id block 3/4 with "       0001" (Block length=0x0E)
    mov !mem_fbca,a         ;52d7  9e ca fb
    call !kwp_id_0001       ;52da  9a 06 27     DE = pointer to "       0001",0x00,0x03
                            ;                     where the "0001" is an unknown code built from memory
                            ;
                            ;                   XXX This is confusing because the null byte and the
                            ;                       block end are not used.  Later, lab_5314 will write
                            ;                       its own block end byte immediately after the "0001".
                            ;                       The response is like that shown above (no null byte).

    br !lab_52f2_send       ;52dd  9b f2 52     Branch to finish building ascii/data response

lab_52e0_id_radio:
;Send id block 2/4 with " Radio DE2  " (Block length=0x0F)
;
;Response block:
;  0x0F Block length                  kwp_tx_buf+0
;   xx  Block counter                 kwp_tx_buf+1
;  0xF6 Block title (ascii/data)      kwp_tx_buf+2
;  0x20 " "                           kwp_tx_buf+3
;  0x52 "R"                           kwp_tx_buf+4
;  0x61 "a"                           kwp_tx_buf+5
;  0x64 "d"                           kwp_tx_buf+6
;  0x69 "i"                           kwp_tx_buf+7
;  0x6f "o"                           kwp_tx_buf+8
;  0x20 " "                           kwp_tx_buf+9
;  0x44 "D"                           kwp_tx_buf+10
;  0x45 "E"                           kwp_tx_buf+11
;  0x32 "2"                           kwp_tx_buf+12
;  0x20 " "                           kwp_tx_buf+13
;  0x20 " "                           kwp_tx_buf+14
;  0x03 Block end                     kwp_tx_buf+15
;
    mov a,#0x12             ;52e0  a1 12        State 0x12 = Send id block 2/4 with " Radio DE2  " (Block length=0x0F)
    mov !mem_fbca,a         ;52e2  9e ca fb
    call !kwp_id_radio      ;52e5  9a f9 26     Returns DE = pointer to " Radio DE2  ",0x03
                            ;                     or DE = pointer to " Radio DELCO",0x03 if in "DELCO mode"
    br lab_52f2_send        ;52e8  fa 08        Branch to finish building ascii/data response

lab_52ea_id_part_num:
;Send id block 1/4 with "1J0035180B  " (Block length=0x0F)
;
;Response block:
;  0x0F Block length                  kwp_tx_buf+0
;   xx  Block counter                 kwp_tx_buf+1
;  0xF6 Block title (ascii/data)      kwp_tx_buf+2
;  0x31 "1"                           kwp_tx_buf+3
;  0x4a "J"                           kwp_tx_buf+4
;  0x30 "0"                           kwp_tx_buf+5
;  0x30 "0"                           kwp_tx_buf+6
;  0x33 "3"                           kwp_tx_buf+7
;  0x35 "5"                           kwp_tx_buf+8
;  0x31 "1"                           kwp_tx_buf+9
;  0x38 "8"                           kwp_tx_buf+10
;  0x30 "0"                           kwp_tx_buf+11
;  0x42 "B"                           kwp_tx_buf+12
;  0x20 " "                           kwp_tx_buf+13
;  0x20 " "                           kwp_tx_buf+14
;  0x03 Block end                     kwp_tx_buf+15
;
    mov a,#0x13             ;52ea  a1 13        State 0x13 = Send id block 1/4 with "1J0035180B  " (Block length=0x0F)
    mov !mem_fbca,a         ;52ec  9e ca fb
    call !kwp_id_part_num   ;52ef  9a e4 26     DE = pointer to "1J0035180B  ",0x03 (13 bytes)
                            ;                     with the part number built from the EEPROM
                            ;                   Fall through to finish building ascii/data response
    ;Fall through to lab_52f2_send

lab_52f2_send:
;Send ascii/data response with buffer [DE]
;
;Used by id blocks 1,2,3:
;  lab_52ea_id_part_num   Send id block 1/4 with "1J0035180B  " (Block length=0x0F)
;  lab_52e0_id_radio      Send id block 2/4 with " Radio DE2  " (Block length=0x0F)
;  lab_52d5_id_0001       Send id block 3/4 with "       0001" (Block length=0x0E)
;
;Not used by id block 4:
;  lab_52b1_id_coding     Send id block 4/4 with coding (Block length=0x08)
;
    mov b,#0x07             ;52f2  a3 07        B = index 0x07 response with ascii/data (id block 1/4 "1J0035180B", 2/4 with "Radio DE2")
    call !init_kwp_tx_buf   ;52f4  9a 92 52     Set block title, counter, length in KWP1281 tx buf
                            ;                     HL = pointer to KWP1281 tx buffer byte 0 (block length)
                            ;                     A = block length from kwp_lengths table
                            ;                     X = block length from kwp_lengths table (again)
                            ;                     B = 3 (offset to first byte after block title)

lab_52f7_loop:
    mov a,[de]              ;52f7  85           A = byte from buffer at DE with ascii/data
    mov [hl+b],a            ;52f8  bb           Copy it into the KWP1281 tx buffer
    incw de                 ;52f9  84
    inc b                   ;52fa  43
    mov a,b                 ;52fb  63
    and a,#0x0f             ;52fc  5d 0f
    bnz lab_52f7_loop       ;52fe  bd f7        Loop until all bytes are copied

    mov a,#0x11             ;5300  a1 11
    cmp a,!mem_fbca         ;5302  48 ca fb
    bnz lab_530a            ;5305  bd 03

    ;mem_fbca = 0x11
    bt mem_fe66.0,lab_5314  ;5307  8c 66 0a

lab_530a:
    mov a,#0x13             ;530a  a1 13
    cmp a,!mem_fbca         ;530c  48 ca fb
    bz lab_5322             ;530f  ad 11
    br !send_kwp_tx_buf     ;5311  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5314:
    mov a,#0x0e             ;5314  a1 0e        A = 14
    mov [hl],a              ;5316  97
    mov !kwp_tx_len,a       ;5317  9e 6b f0     Store tx block length

    mov b,#0x0e             ;531a  a3 0e        B = offset 14
    mov a,#0x03             ;531c  a1 03        A = 0x03 block end
    mov [hl+b],a            ;531e  bb           Store block end in KWP1281 tx buffer byte 14

    br !send_kwp_tx_buf     ;531f  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5322:
    mov a,#0x0e             ;5322  a1 0e
    mov !mem_f06e,a         ;5324  9e 6e f0     mem_f06e = 14 (maybe 14ms?)

    br !lab_34fc            ;5327  9b fc 34

lab_532a_ack:
;Send ACK response
    clr1 mem_fe63.0         ;532a  0b 63        Clear bit = it's OK to initiate a KWP1281 connection to the cluster
    mov b,#0x01             ;532c  a3 01        B = index 0x01 ack
    call !init_kwp_tx_buf   ;532e  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;5331  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5333  bb           Store in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;5334  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5337_disconnect:
;Send Disconnect request to instrument cluster (index 0x02)
    mov b,#0x02             ;5337  a3 02        B = index 0x02 disconnect
    call !init_kwp_tx_buf   ;5339  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    set1 mem_fe7b.2         ;533c  2a 7b
    mov a,#0x03             ;533e  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5340  bb           Store in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;5341  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5344_nak_resend:
;Send NAK response asking for the last block to be sent again
;
;To ask the sender to resend the last block, the "Block counter to resend"
;will be set to the block counter of the last block received.
;
;This type of NAK is returned under only two conditions:
;
;  1. A bad block end byte was received (probably due to line noise).  The block
;     end byte is special because it is the only one where we do not send back
;     a complement.  Instead, we ask the block to be sent again if it is bad.
;
;  2. The block title is a known one, but the block length is not one that is
;     expected for that title.  It's not clear why we ask the block to be sent again
;     for this case because it should not help.  When the tester sent the block
;     length, we sent back the complement, so the sender should have detected if
;     the length was corrupted on the line and dealt with it at that moment.
;
;Response block:
;  0x04 Block length              kwp_tx_buf+0
;   xx  Block counter             kwp_tx_buf+1
;  0x0A Block title (NAK)         kwp_tx_buf+2
;   xx  Block counter to resend   kwp_tx_buf+3  (Counter of the request block)
;  0x03 Block end                 kwp_tx_buf+4
;
    mov b,#0x03             ;5344  a3 03        B = index 0x03 nak
    call !init_kwp_tx_buf   ;5346  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    ;Block counter to resend = Block counter of the request block
    mov a,!kwp_blk_counter  ;5349  8e cb fb     A = block counter
    dec a                   ;534c  51           Subtract 1 to get counter of last block received
    mov [hl+b],a            ;534d  bb           Store in KWP1281 tx buffer byte 3 (Block counter to resend)

    inc b                   ;534e  43
    mov a,#0x03             ;534f  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5351  bb           Store in KWP1281 tx buffer byte 4

    br !send_kwp_tx_buf     ;5352  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5355_nak_fail:
;Send NAK response for general failure
;
;To indicate a general failure, the "Block counter to resend" will be
;set to the response's own block counter.  This is the type of NAK
;that will be send in the vast majority of cases.
;
;Response block:
;  0x04 Block length              kwp_tx_buf+0
;   xx  Block counter             kwp_tx_buf+1
;  0x0A Block title (NAK)         kwp_tx_buf+2
;   xx  Block counter to resend   kwp_tx_buf+3  (Counter of this response block)
;  0x03 Block end                 kwp_tx_buf+4
;
    mov b,#0x04             ;5355  a3 04        B = index 0x04 nak
    call !init_kwp_tx_buf   ;5357  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    ;Block counter to resend = Block counter of this response block
    mov a,!kwp_blk_counter  ;535a  8e cb fb     A = block counter
    mov [hl+b],a            ;535d  bb           Store in KWP1281 tx buffer byte 3 (Block counter to resend)

    inc b                   ;535e  43
    mov a,#0x03             ;535f  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5361  bb           Store in KWP1281 tx buffer byte 4

    br !send_kwp_tx_buf     ;5362  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5365:
    mov b,#0x08             ;5365  a3 08        B = index 0x08 read identification
    call !init_kwp_tx_buf   ;5367  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;536a  a1 03        A = 0x03 block end
    mov [hl+b],a            ;536c  bb           Store in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;536d  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5370:
    mov b,#0x09             ;5370  a3 09        B = index 0x09 read faults
    call !init_kwp_tx_buf   ;5372  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;5375  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5377  bb           Store in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;5378  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_537b:
;Send response to read or clear faults (index 0x0a)
;If there are no faults, a special fault that means "no fault" (code=0xFFFF, elaboration=0x88)
;is returned and mem_fe66.1 is cleared.  Otherwise, up to 4 faults are returned.  If there are
;no more faults left to send, mem_fe66.1 is cleared and we are done sending faults.  Otherwise,
;we leave fe66.1 set and then lab_537d gets called to send another block of up to 4 faults.
    set1 mem_fe66.1         ;537b  1a 66        Set bit to indicate we are sending faults

lab_537d:
;Continue sending response to read or clear faults (index 0x0a)
;We can only send 4 faults in a faults response.  If there are more than 4 faults to
;send, we leave mem_fe66.1 set and we get called again.
    mov b,#0x0a             ;537d  a3 0a        B = index 0x0a response to read/clear faults
    call !init_kwp_tx_buf   ;537f  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov c,#0x04             ;5382  a2 04        C = send up to 4 faults in this block

lab_5384_loop:
    push hl                 ;5384  b7           Push KWP1281 tx buffer pointer
    push bc                 ;5385  b3           Push index into tx buffer pointer, fault countdown

    call !read_next_fault   ;5386  9a 4e 27     Read the next fault code
                            ;                     Returns carry clear = fault, carry set = no fault
                            ;                     Returns KWP1281 fault code in AX and fault elaboration in E

    pop bc                  ;5389  b2           Pop index into B=tx buffer pointer, C=fault countdown
    pop hl                  ;538a  b6           Pop HL = KWP1281 tx buffer pointer

    bc lab_539d             ;538b  8d 10        Branch if read_next_fault did not return a fault

    ;read_next_fault returned a fault
    ;AX=fault code, E=fault elaboration code

    mov [hl+b],a            ;538d  bb           Write fault code high byte into KWP1281 tx buffer

    inc b                   ;538e  43
    mov a,x                 ;538f  60
    mov [hl+b],a            ;5390  bb           Write fault code low byte into KWP1281 tx buffer

    inc b                   ;5391  43
    mov a,e                 ;5392  64
    mov [hl+b],a            ;5393  bb           Write fault elaboration code byte into KWP1281 tx buffer

    inc b                   ;5394  43
    cmp a,#0x88             ;5395  4d 88        0x88 = fault elaboration for "no fault"
    bz lab_539d             ;5397  ad 04
    dbnz c,lab_5384_loop    ;5399  8a e9        Decrement C, loop until we've written up to 4 faults in this block

    ;We have written 4 faults into the KWP1281 tx buffer but there are more
    ;faults left to send.  Branch to send the response but leave mem_fe66.1
    ;set so we come back to send more.
    br lab_539f             ;539b  fa 02

lab_539d:
;No more faults left to send
    clr1 mem_fe66.1         ;539d  1b 66        Clear bit to indicate we're not sending faults anymore

lab_539f:
    mov a,b                 ;539f  63           B = index to KWP1281 tx buffer
    cmp a,#0x03             ;53a0  4d 03        Is it pointing to the first byte after the block title?
    bz lab_53ae             ;53a2  ad 0a          Yes: we did not write any faults into the buffer, so
                            ;                          branch to send an ACK response instead of a faults response

    ;At least one fault was written to the KWP1281 tx buffer
    ;Finish sending a faults response

    mov !kwp_tx_len,a       ;53a4  9e 6b f0     Store tx block length
    mov [hl],a              ;53a7  97           Write block length to KWP1281 tx buffer

    mov a,#0x03             ;53a8  a1 03        0x03 = block end
    mov [hl+b],a            ;53aa  bb           Write block end to KWP1281 tx buffer

    br !send_kwp_tx_buf     ;53ab  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_53ae:
;No faults; send an ACK response instead of a faults response
    mov a,!kwp_blk_counter  ;53ae  8e cb fb     A = block counter
    sub a,#0x01             ;53b1  1d 01        Decrement it
    mov !kwp_blk_counter,a  ;53b3  9e cb fb     Store block counter
    br !lab_532a_ack        ;53b6  9b 2a 53     Branch to send ACK response

lab_53b9:
    mov b,#0x0b             ;53b9  a3 0b        B = index 0x0b clear faults
    call !init_kwp_tx_buf   ;53bb  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;53be  a1 03        A = 0x03 block end
    mov [hl+b],a            ;53c0  bb           Store in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;53c1  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_53c4:
    mov b,#0x0c             ;53c4  a3 0c        B = index 0x0c output tests
    call !init_kwp_tx_buf   ;53c6  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;53c9  a1 03        A = 0x03 block end
    mov [hl+b],a            ;53cb  bb           Store in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;53cc  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_53cf:
;Jumped to from output tests (kwp_56_04_output_tests)
    mov b,#0x0d             ;53cf  a3 0d        B = index 0x0d response to output tests
    call !init_kwp_tx_buf   ;53d1  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    call !perform_next_test ;53d4  9a cf 27     Perform the next output test
                            ;                     AX = one of the words from the output_tests table
                            ;                     Carry set = output tests finished, carry clear = output tests continuing
    bnc lab_53e4            ;53d7  9d 0b        Branch if output tests are continuing

    ;Output tests have finished; send an ACK response
    mov a,!kwp_blk_counter  ;53d9  8e cb fb     A = block counter
    sub a,#0x01             ;53dc  1d 01        Decrement it
    mov !kwp_blk_counter,a  ;53de  9e cb fb     Store block counter
    br !lab_532a_ack        ;53e1  9b 2a 53     Branch to send ACK response

lab_53e4:
;Output tests are continuing; send an output test response
;AX contains a word from the output_tests table
    mov [hl+b],a            ;53e4  bb           Store A in KWP1281 tx buffer byte 3 (output test code high byte)
    inc b                   ;53e5  43
    mov a,x                 ;53e6  60
    mov [hl+b],a            ;53e7  bb           Store X in KWP1281 tx buffer byte 4 (output test code low byte)
    inc b                   ;53e8  43
    mov a,#0x03             ;53e9  a1 03        A = 0x03 block end
    mov [hl+b],a            ;53eb  bb           Store block end in KWP1281 tx buffer byte 5
    br !send_kwp_tx_buf     ;53ec  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_53ef:
    mov b,#0x0e             ;53ef  a3 0e        B = index 0x0e ? TODO
    call !init_kwp_tx_buf   ;53f1  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;53f4  a1 03        A = 0x03 block end
    mov [hl+b],a            ;53f6  bb           Store block end in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;53f7  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_53fa:
    mov b,#0x0f             ;53fa  a3 0f        B = index 0x0f ? TODO
    call !init_kwp_tx_buf   ;53fc  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov a,#0x03             ;53ff  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5401  bb           Store block end in KWP1281 tx buffer byte 3
    br !send_kwp_tx_buf     ;5402  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5405:
    br !lab_5355_nak_fail   ;5405  9b 55 53     Branch to Send NAK response for general failure

lab_5408:
    mov b,#0x10             ;5408  a3 10        B = index 0x10 basic setting
    call !init_kwp_tx_buf   ;540a  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;540d  bb           Store block length in KWP1281 tx buffer at byte 3 (weird)
    inc b                   ;540e  43           Increment B to offset 4
    mov a,#0x03             ;540f  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5411  bb           Store block end in KWP1281 tx buffer byte 4
    br !send_kwp_tx_buf     ;5412  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5415:
    mov b,#0x11             ;5415  a3 11        B = index 0x11 group reading
    call !init_kwp_tx_buf   ;5417  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;541a  bb           Store block length in KWP1281 tx buffer at byte 3 (weird)
    inc b                   ;541b  43           Increment B to offset 4
    mov a,#0x03             ;541c  a1 03        A = 0x03 block end
    mov [hl+b],a            ;541e  bb           Store block end in KWP1281 tx buffer byte 4
    br !send_kwp_tx_buf     ;541f  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5422:
;branched from group reading kwp_56_29_group_reading
    mov b,#0x12             ;5422  a3 12        B = index 0x12 response to group reading
    call !init_kwp_tx_buf   ;5424  9a 92 52     Set block title, counter, length in KWP1281 tx buf
                            ;                     HL = pointer to KWP1281 tx buffer byte 0 (block length)
                            ;                     A = block length from kwp_lengths table
                            ;                     X = block length from kwp_lengths table (again)
                            ;                     B = 3 (offset to first byte after block title)

    ;A group may contain up to 4 measurements (some groups may have less than 4)
    mov c,#0x04             ;5427  a2 04        C = 4 measurements max to read in group

lab_5429_loop:
    push hl                 ;5429  b7           Push HL (address of KWP1281 tx buffer)
    push bc                 ;542a  b3           Push BC (B = tx buffer offset, C = measurements countdown)

    call !read_next_meas    ;542b  9a 30 28     Read the next measurement from the group
                            ;                     A = formula byte
                            ;                     X = measurement high byte
                            ;                     E = measurement low byte
                            ;                     D = 0 if success, 0x0F if error
                            ;                     Carry clear = measurement data in A/X/E, carry clear = no measurement

    pop bc                  ;542e  b2           Pop BC (B = tx buffer offset, C = measurements countdown)
    pop hl                  ;542f  b6           Pop HL (address of KWP1281 tx buffer)

    bc lab_543c             ;5430  8d 0a        Branch if read_next_meas did not return a measurement
                            ;                     (a group may contain less than 4 measurements so this
                            ;                      early exit may be normal for some groups)

    ;Write the measurment into the KWP1281 tx buffer
    mov [hl+b],a            ;5432  bb           Write formula byte (A)
    inc b                   ;5433  43
    mov a,x                 ;5434  60
    mov [hl+b],a            ;5435  bb           Write measurement high byte (X)
    inc b                   ;5436  43
    mov a,e                 ;5437  64
    mov [hl+b],a            ;5438  bb           Write measurement low byte (E)
    inc b                   ;5439  43

    dbnz c,lab_5429_loop    ;543a  8a ed        Loop until all 4 measurements in this group
                            ;                     have been written to the tx buffer

lab_543c:
;either read_next_meas did not return a measurement
;or all 4 measurements have been read
    mov a,d                 ;543c  65           A=D (error code returned in D by read_next_meas)
    cmp a,#0x0f             ;543d  4d 0f        Is it the 0x0F error code?
    bnz lab_544c            ;543f  bd 0b          No: branch to lab_544c to continue working on group response
                            ;                     Yes: fall through to send a NAK response

    ;error from read_next_meas
    mov a,!kwp_blk_counter  ;5441  8e cb fb     A = block counter
    sub a,#0x01             ;5444  1d 01        Decrement it
    mov !kwp_blk_counter,a  ;5446  9e cb fb     Store block counter
    br !lab_5355_nak_fail   ;5449  9b 55 53     Branch to Send NAK response for general failure

lab_544c:
;no error from read_next_meas
    mov a,b                 ;544c  63           A = B (tx buffer offset, also block length)

    ;XXX this check may be a bug.  It branches back to the C countdown loop again
    ;without writing C.  C might be 0 when this code is reached, so entering the
    ;loop again would decrement it past 0.  Maybe it was supposed to branch to 0x5427 instead?
    cmp a,#0x03             ;544d  4d 03        Is the offset = 3 (first byte after block title)?
    bz lab_5429_loop        ;544f  ad d8          Yes: no data measurement data was written to the
                            ;                          tx buffer, branch to try again.

    mov [hl],a              ;5451  97           Store block length in KWP1281 tx buffer
    mov !kwp_tx_len,a       ;5452  9e 6b f0     Store tx block length

    mov a,#0x03             ;5455  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5457  bb           Store block end in KWP1281 tx buffer

    br !send_kwp_tx_buf     ;5458  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_545b:
;TODO investigate this unknown kwp1281 code
    mov b,#0x13             ;545b  a3 13        B = index 013 recoding
    call !init_kwp_tx_buf   ;545d  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    call !get_coding        ;5460  9a 46 2b     Get the Soft Coding (in binary) into AX
                            ;                     A = Soft Coding in binary, high byte (mem_f1f9)
                            ;                     X = Soft Coding in binary, low byte (mem_f1fa)
    mov [hl+b],a            ;5463  bb
    inc b                   ;5464  43
    mov a,x                 ;5465  60
    mov [hl+b],a            ;5466  bb
    inc b                   ;5467  43

    call !get_workshop      ;5468  9a 4b 2b     Get the Workshop Code into AX
                            ;                     A = Workshop Code high byte (mem_f1fb)
                            ;                     X = Workshop Code low byte (mem_f1fc)
    mov [hl+b],a            ;546b  bb
    inc b                   ;546c  43
    mov a,x                 ;546d  60
    mov [hl+b],a            ;546e  bb
    inc b                   ;546f  43

    mov a,#0x03             ;5470  a1 03
    mov [hl+b],a            ;5472  bb
    br !send_kwp_tx_buf     ;5473  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5476:
;TODO investigate this unknown kwp1281 code
    mov b,#0x14             ;5476  a3 14        B = index 0x14 adaptation
    call !init_kwp_tx_buf   ;5478  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;547b  bb           Store block length in KWP1281 tx buffer at byte 3 (weird)

    inc b                   ;547c  43           B = increment to offset 4
    mov a,#0x03             ;547d  a1 03        A = 0x03 block end
    mov [hl+b],a            ;547f  bb           Store block end in KWP1281 tx buffer byte 4

    br !send_kwp_tx_buf     ;5480  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5483:
;TODO investigate this unknown kwp1281 code
    mov b,#0x15             ;5483  a3 15        B = index 0x15 ? TODO
    call !init_kwp_tx_buf   ;5485  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;5488  bb           Store block length in KWP1281 tx buffer at byte 3 (weird)

    inc b                   ;5489  43           Increment to offset 4
    mov [hl+b],a            ;548a  bb           Store block length in KWP1281 tx buffer at byte 4 (weird)

    inc b                   ;548b  43           Increment to offset 5
    mov a,x                 ;548c  60           A = block length (weird)
    mov [hl+b],a            ;548d  bb           Store block length in KWP1281 tx buffer at byte 5 (weird)

    inc b                   ;548e  43           Increment to offset 6
    mov a,#0x03             ;548f  a1 03        A = 0x03 block end
    mov [hl+b],a            ;5491  bb           Store block end in KWP1281 tx buffer byte 6

    br !send_kwp_tx_buf     ;5492  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5495:
;TODO investigate this unknown kwp1281 code
    mov b,#0x16             ;5495  a3 16        B = index 0x16 ? TODO
    call !init_kwp_tx_buf   ;5497  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;549a  bb           Store block length in KWP1281 tx buffer at byte 3 (weird)

    inc b                   ;549b  43           Increment to offset 4
    mov [hl+b],a            ;549c  bb           Store block length in KWP1281 tx buffer at byte 4 (weird)

    inc b                   ;549d  43           Increment to offset 5
    mov a,x                 ;549e  60           A = block length (weird)
    mov [hl+b],a            ;549f  bb           Store block length in KWP1281 tx buffer at byte 5 (weird)

    inc b                   ;54a0  43           Increment to offset 6
    call !get_coding        ;54a1  9a 46 2b     Get the Soft Coding (in binary) into AX
                            ;                     A = Soft Coding in binary, high byte (mem_f1f9)
                            ;                     X = Soft Coding in binary, low byte (mem_f1fa)
    mov a,x                 ;54a4  60
    and a,#0x01             ;54a5  5d 01
    mov [hl+b],a            ;54a7  bb

    inc b                   ;54a8  43           Increment to offset 7

    call !get_workshop      ;54a9  9a 4b 2b     Get the Workshop Code into AX
                            ;                     A = Workshop Code high byte (mem_f1fb)
                            ;                     X = Workshop Code low byte (mem_f1fc)

    mov [hl+b],a            ;54ac  bb
    inc b                   ;54ad  43
    mov a,x                 ;54ae  60
    mov [hl+b],a            ;54af  bb

    inc b                   ;54b0  43           Increment to offset 8
    mov a,#0x03             ;54b1  a1 03        A = 0x03 block end
    mov [hl+b],a            ;54b3  bb           Store block end in KWP1281 tx buffer byte 8
    br !send_kwp_tx_buf     ;54b4  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_54b7:
    br !lab_5355_nak_fail   ;54b7  9b 55 53     Branch to Send NAK response for general failure

lab_54ba:
;TODO investigate this unknown kwp1281 code
    mov b,#0x17             ;54ba  a3 17        B = index 0x17 single reading
    call !init_kwp_tx_buf   ;54bc  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;54bf  bb           Store block length in KWP1281 tx buffer at byte 3 (weird)

    inc b                   ;54c0  43           Increment to offset 4
    mov a,#0x03             ;54c1  a1 03        A = 0x03 block end
    mov [hl+b],a            ;54c3  bb           Store block end in KWP1281 tx buffer byte 4

    br !send_kwp_tx_buf     ;54c4  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_54c7:
    br !lab_5355_nak_fail   ;54c7  9b 55 53     Branch to Send NAK response for general failure

lab_54ca:
;TODO investigate this unknown kwp1281 code
    mov b,#0x18             ;54ca  a3 18        B = index 0x18 login
    call !init_kwp_tx_buf   ;54cc  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    mov [hl+b],a            ;54cf  bb
    inc b                   ;54d0  43
    mov a,x                 ;54d1  60
    mov [hl+b],a            ;54d2  bb

    inc b                   ;54d3  43
    call !get_coding        ;54d4  9a 46 2b     Get the Soft Coding (in binary) into AX
                            ;                     A = Soft Coding in binary, high byte (mem_f1f9)
                            ;                     X = Soft Coding in binary, low byte (mem_f1fa)

    mov a,x                 ;54d7  60
    and a,#0x01             ;54d8  5d 01
    mov [hl+b],a            ;54da  bb
    inc b                   ;54db  43

    call !get_workshop      ;54dc  9a 4b 2b     Get the Workshop Code into AX
                            ;                     A = Workshop Code high byte (mem_f1fb)
                            ;                     X = Workshop Code low byte (mem_f1fc)

    mov [hl+b],a            ;54df  bb
    inc b                   ;54e0  43
    mov a,x                 ;54e1  60
    mov [hl+b],a            ;54e2  bb
    inc b                   ;54e3  43
    mov a,#0x03             ;54e4  a1 03
    mov [hl+b],a            ;54e6  bb
    br !send_kwp_tx_buf     ;54e7  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_54ea:
;TODO investigate this unknown kwp1281 code
    mov b,#0x19             ;54ea  a3 19        B = index 0x19 read eeprom
    call !init_kwp_tx_buf   ;54ec  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    inc b                   ;54ef  43
    mov a,b                 ;54f0  63
    mov [hl],a              ;54f1  97
    mov !kwp_tx_len,a       ;54f2  9e 6b f0     Store tx block length
    mov a,#0x03             ;54f5  a1 03
    mov [hl+b],a            ;54f7  bb
    br !send_kwp_tx_buf     ;54f8  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_54fb:
;Send response to custom usage with data
    mov b,#0x1a             ;54fb  a3 1a        B = index 0x1a response to custom usage
    call !init_kwp_tx_buf   ;54fd  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    call !sub_485a          ;5500  9a 5a 48     DE = #mem_fb9b, A=!mem_fbaf, C=A

lab_5503:
    mov a,[de]              ;5503  85
    mov [hl+b],a            ;5504  bb
    inc b                   ;5505  43
    incw de                 ;5506  84
    dbnz c,lab_5503         ;5507  8a fa
    mov a,b                 ;5509  63
    mov [hl],a              ;550a  97
    mov !kwp_tx_len,a       ;550b  9e 6b f0     Store tx block length
    mov a,#0x03             ;550e  a1 03        3 = block end?
    mov [hl+b],a            ;5510  bb
    br !send_kwp_tx_buf     ;5511  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5514:
;TODO comment this unknown kwp1281 code
    mov b,#0x1b             ;5514  a3 1b        B = index 0x1b read ram
    call !init_kwp_tx_buf   ;5516  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;5519  bb
    inc b                   ;551a  43
    mov a,d                 ;551b  65
    mov [hl+b],a            ;551c  bb
    inc b                   ;551d  43
    mov a,e                 ;551e  64
    mov [hl+b],a            ;551f  bb
    inc b                   ;5520  43
    mov a,#0x03             ;5521  a1 03
    mov [hl+b],a            ;5523  bb
    br !send_kwp_tx_buf     ;5524  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_5527:
;send read ram response with faked address from mem_f000 and faked byte count from kwp_rw_total
;branched to when mem_fbca = 0x01
    call !fake_rx_addr_len  ;5527  9a d6 2d     Fake KWP1281 address, byte count in KWP1281 rx buf
                            ;                   Reads addr from mem_f000, byte count from kwp_rw_total

lab_552a_read_ram:
;Send 0x1c response to read ram or send nak
;branched to from both read ram handlers
    mov a,#0x01             ;552a  a1 01
    mov !mem_fbca,a         ;552c  9e ca fb

    mov b,#0x1c             ;552f  a3 1c        B = index 0x1c response to read ram
    call !init_kwp_tx_buf   ;5531  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    call !sub_2bb9          ;5534  9a b9 2b
    bnc lab_5544_success    ;5537  9d 0b        Branch if success

    ;Failed
    mov a,!kwp_blk_counter  ;5539  8e cb fb     A = block counter
    sub a,#0x01             ;553c  1d 01        Decrement it
    mov !kwp_blk_counter,a  ;553e  9e cb fb     Store block counter
    br !lab_5355_nak_fail   ;5541  9b 55 53     Branch to Send NAK response for general failure

lab_5544_success:
    add a,#0x03             ;5544  0d 03        A = 0x03 Block end
    mov [hl],a              ;5546  97           Write block end into KWP1281 tx buffer
    mov !kwp_tx_len,a       ;5547  9e 6b f0     Store tx block length
    call !send_kwp_tx_buf   ;554a  9a f7 34     Set flags to start sending the KWP1281 tx buffer

lab_554d:
    mov a,[de]              ;554d  85
    mov [hl+b],a            ;554e  bb
    inc b                   ;554f  43
    incw de                 ;5550  84
    dbnz c,lab_554d         ;5551  8a fa
    mov a,b                 ;5553  63
    cmp a,#0x10             ;5554  4d 10
    bnc lab_555b            ;5556  9d 03

lab_5558:
    mov a,#0x03             ;5558  a1 03
    mov [hl+b],a            ;555a  bb

lab_555b:
    ret                     ;555b  af

lab_555c:
    movw hl,#kwp_tx_buf     ;555c  16 7a f0
    mov b,#0x00             ;555f  a3 00
    call !sub_2c07          ;5561  9a 07 2c
    mov a,c                 ;5564  62
    cmp a,#0x00             ;5565  4d 00
    bz lab_5558             ;5567  ad ef
    br lab_554d             ;5569  fa e2

lab_556b:
;TODO comment this unknown KWP1281 code
    mov b,#0x1d             ;556b  a3 1d        B = index 0x1d read rom or eeprom
    call !init_kwp_tx_buf   ;556d  9a 92 52     Set block title, counter, length in KWP1281 tx buf
    mov [hl+b],a            ;5570  bb
    inc b                   ;5571  43
    mov a,d                 ;5572  65
    mov [hl+b],a            ;5573  bb
    inc b                   ;5574  43
    mov a,e                 ;5575  64
    mov [hl+b],a            ;5576  bb
    inc b                   ;5577  43
    mov a,#0x03             ;5578  a1 03
    mov [hl+b],a            ;557a  bb
    br !send_kwp_tx_buf     ;557b  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_557e:
;possible nak handling related
;send read eeprom response with faked address from mem_f000 and faked byte count from kwp_rw_total
;branched to when mem_fbca = 0x02
    call !fake_rx_addr_len  ;557e  9a d6 2d     Fake KWP1281 address, byte count in KWP1281 rx buf
                            ;                   Read addr from mem_f000, byte count from kwp_rw_total
    ;Fall through

lab_5581_read_eeprom:
;KWP1281 Read EEPROM (block title 0x03)
;Login and Group 0x19 have already been verified
;Called to handle both address 0x56 and address 0x7C
;
    mov a,#0x02             ;5581  a1 02
    mov !mem_fbca,a         ;5583  9e ca fb
    mov b,#0x1e             ;5586  a3 1e        B = index 0x1e response to read eeprom
    call !init_kwp_tx_buf   ;5588  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    call !sub_2b53          ;558b  9a 53 2b
    bnc lab_559b_success    ;558e  9d 0b        Branch if success

    ;Failed
    mov a,!kwp_blk_counter  ;5590  8e cb fb     A = block counter
    sub a,#0x01             ;5593  1d 01        Decrement it
    mov !kwp_blk_counter,a  ;5595  9e cb fb     Store block counter
    br !lab_5355_nak_fail   ;5598  9b 55 53     Branch to Send NAK response for general failure

lab_559b_success:
    add a,#0x03             ;559b  0d 03        TODO comment this length calculation
    mov [hl],a              ;559d  97
    mov !kwp_tx_len,a       ;559e  9e 6b f0     Store tx block length
    call !send_kwp_tx_buf   ;55a1  9a f7 34     Set flags to start sending the KWP1281 tx buffer

lab_55a4:
    call !read_ee_sanitized ;55a4  9a 6e 2b     Read EEPROM into temporary buffer with SAFE code sanitization
                            ;                     DE = pointer to buffer with data (kwp_tmp_buf)
                            ;                     Returns carry set = failed, carry clear = success

lab_55a7_loop:
    mov a,[de]              ;55a7  85           A = byte read from EEPROM
    mov [hl+b],a            ;55a8  bb           Store it in KWP1281 tx buffer
    inc b                   ;55a9  43           Increment tx buffer position
    incw de                 ;55aa  84           Increment pointer to EEPROM data
    dbnz c,lab_55a7_loop    ;55ab  8a fa        Loop until all bytes were copied to KWP1281 tx buffer

    mov a,b                 ;55ad  63
    cmp a,#0x10             ;55ae  4d 10
    bnc lab_55b5            ;55b0  9d 03

lab_55b2:
    mov a,#0x03             ;55b2  a1 03        A = 0x03 block end
    mov [hl+b],a            ;55b4  bb           Write block end into KWP1281 tx buffer

lab_55b5:
    ret                     ;55b5  af

lab_55b6:
    movw hl,#kwp_tx_buf     ;55b6  16 7a f0
    mov b,#0x00             ;55b9  a3 00
    call !sub_2bf4          ;55bb  9a f4 2b
    mov a,c                 ;55be  62
    cmp a,#0x00             ;55bf  4d 00
    bz lab_55b2             ;55c1  ad ef
    br lab_55a4             ;55c3  fa df

lab_55c5:
    mov b,#0x20             ;55c5  a3 20        B = index 0x20 response to write eeprom
    call !init_kwp_tx_buf   ;55c7  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    call !sub_2c7f          ;55ca  9a 7f 2c     Returns DE = word at mem_f004
                            ;                   Returns X = KWP1281 rx buffer byte 6
                            ;                   Returns A = byte at kwp_rw_total

    mov [hl+b],a            ;55cd  bb           Store A in KWP1281 tx buffer byte 3

    inc b                   ;55ce  43
    mov a,d                 ;55cf  65
    mov [hl+b],a            ;55d0  bb           Store D in KWP1281 tx buffer byte 4

    inc b                   ;55d1  43
    mov a,e                 ;55d2  64
    mov [hl+b],a            ;55d3  bb           Store E in KWP1281 tx buffer byte 5

    inc b                   ;55d4  43
    mov a,x                 ;55d5  60
    mov [hl+b],a            ;55d6  bb           Store X in KWP1281 tx buffer byte 6

    inc b                   ;55d7  43
    mov a,#0x03             ;55d8  a1 03        A = 0x03 block end
    mov [hl+b],a            ;55da  bb           Store in KWP1281 tx buffer byte 7
    br !send_kwp_tx_buf     ;55db  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_55de_secure_req:
;Send Security Access Request to cluster (title 0xD7)
    mov b,#0x21             ;55de  a3 21        B = index 0x21 title 0xd7 security access request
    call !init_kwp_tx_buf   ;55e0  9a 92 52     Set block title, counter, length in KWP1281 tx buf

    call !sub_259e_gen_rand ;55e3  9a 9e 25     Generate the 4-byte pseudorandom number to send
                            ;                     in the 0xD7 security access request block
                            ;                   Returns the 4 bytes in A, X, D, E

    ;KWP1281 tx buffer byte 3 = value in A
    mov [hl+b],a            ;55e6  bb           Store A in KWP1281 tx buffer byte 3

    ;KWP1281 tx buffer byte 4 = value in X
    inc b                   ;55e7  43           Increment to offset 4
    mov a,x                 ;55e8  60
    mov [hl+b],a            ;55e9  bb           Store X in KWP1281 tx buffer byte 4

    ;KWP1281 tx buffer byte 5 = value in D
    inc b                   ;55ea  43           Increment to offset 5
    mov a,d                 ;55eb  65
    mov [hl+b],a            ;55ec  bb           Store D in KWP1281 tx buffer byte 5

    ;KWP1281 tx buffer byte 6 = value in E
    inc b                   ;55ed  43           Increment to offset 6
    mov a,e                 ;55ee  64
    mov [hl+b],a            ;55ef  bb           Store E in KWP1281 tx buffer byte 6

    ;KWP1281 tx buffer byte 7 = 0x03 byte end
    inc b                   ;55f0  43           Increment to offset 7
    mov a,#0x03             ;55f1  a1 03        A = 0x03 block end
    mov [hl+b],a            ;55f3  bb           Store in KWP1281 tx buffer byte 7

    br !send_kwp_tx_buf     ;55f4  9b f7 34     Set flags to start sending the KWP1281 tx buffer

lab_55f7:
    br !lab_5355_nak_fail   ;55f7  9b 55 53     Branch to Send NAK response for general failure

sub_55fa:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;55fa  4d 0a
    bc lab_5604_lt_0x0a     ;55fc  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;55fe  1d 0a      A = A - 0x0A
    add a,#'A               ;5600  0d 41      Convert to ASCII 'A'-'F'
    br lab_5606_ret         ;5602  fa 02
lab_5604_lt_0x0a:
    add a,#'0               ;5604  0d 30      Convert to ASCII '0'-'9'
lab_5606_ret:
    ret                     ;5606  af

sub_5607:
    call !sub_5677          ;5607  9a 77 56
    mov a,!mem_fbcd         ;560a  8e cd fb
    call !sub_568f          ;560d  9a 8f 56
    mov !mem_fbcd,a         ;5610  9e cd fb

    mov a,!snd_msg_idx      ;5613  8e a5 f1
    cmp a,#0xff             ;5616  4d ff
    movw hl,#mem_fbcc       ;5618  16 cc fb
    clr1 mem_fe66.2         ;561b  2b 66
    bnz lab_562f            ;561d  bd 10

    movw hl,#mem_fbce       ;561f  16 ce fb
    set1 mem_fe66.2         ;5622  2a 66
    mov a,!mem_fbd0         ;5624  8e d0 fb
    cmp a,#0xff             ;5627  4d ff
    bz lab_562f             ;5629  ad 04
    inc a                   ;562b  41
    mov !mem_fbd0,a         ;562c  9e d0 fb

lab_562f:
    mov a,b                 ;562f  63
    bf a.0,lab_5676         ;5630  31 0f 43
    bf mem_fe66.2,lab_5658  ;5633  31 23 66 21
    mov a,!mem_fbd0         ;5637  8e d0 fb
    cmp a,#0x05             ;563a  4d 05
    mov a,b                 ;563c  63
    bc lab_5649             ;563d  8d 0a
    clr1 mem_fe66.4         ;563f  4b 66
    cmp a,#0x19             ;5641  4d 19
    bnc lab_5658            ;5643  9d 13
    set1 mem_fe66.4         ;5645  4a 66
    br lab_5658             ;5647  fa 0f

lab_5649:
    set1 mem_fe66.3         ;5649  3a 66
    mov1 cy,a.1             ;564b  61 9c
    mov a,[hl]              ;564d  87
    bnc lab_5654            ;564e  9d 04
    sub a,#0x04             ;5650  1d 04
    br lab_5660             ;5652  fa 0c

lab_5654:
    add a,#0x02             ;5654  0d 02
    br lab_5660             ;5656  fa 08

lab_5658:
    mov1 cy,a.1             ;5658  61 9c
    mov a,[hl]              ;565a  87
    inc a                   ;565b  41
    bnc lab_5660            ;565c  9d 02
    sub a,#0x02             ;565e  1d 02

lab_5660:
    mov [hl],a              ;5660  97
    bf mem_fe5d.7,lab_5668  ;5661  31 73 5d 03
    mov !mem_fbcf,a         ;5665  9e cf fb

lab_5668:
    bt mem_fe66.2,lab_566f  ;5668  ac 66 04
    set1 mem_fe80.3         ;566b  3a 80
    br lab_5671             ;566d  fa 02

lab_566f:
    set1 mem_fe80.2         ;566f  2a 80

lab_5671:
    mov a,#0x00             ;5671  a1 00
    mov !mem_fbd0,a         ;5673  9e d0 fb

lab_5676:
    ret                     ;5676  af

sub_5677:
    clr1 pu4.1              ;5677  71 1b 34
    set1 pm4.1              ;567a  71 1a 24
    clr1 pu4.0              ;567d  71 0b 34
    set1 pm4.0              ;5680  71 0a 24
    mov a,#0x00             ;5683  a1 00
    mov1 cy,p4.1            ;5685  71 14 04
    rorc a,1                ;5688  25
    mov1 cy,p4.0            ;5689  71 04 04
    rorc a,1                ;568c  25
    mov x,a                 ;568d  70
    ret                     ;568e  af

sub_568f:
    mov b,#0x00             ;568f  a3 00
    xch a,x                 ;5691  30
    xor a,x                 ;5692  61 78
    and a,#0xc0             ;5694  5d c0
    mov mem_fe32,a          ;5696  f2 32
    mov a,x                 ;5698  60
    bf mem_fe32.7,lab_56c3  ;5699  31 73 32 26
    bf a.5,lab_56b4         ;569d  31 5f 14
    bf mem_fe32.6,lab_56ad  ;56a0  31 63 32 09
    xor a,#0xff             ;56a4  7d ff
    and a,#0x0f             ;56a6  5d 0f
    mov a,x                 ;56a8  60
    bnz lab_56b4            ;56a9  bd 09
    br lab_56cb             ;56ab  fa 1e

lab_56ad:
    dec a                   ;56ad  51
    mov x,a                 ;56ae  70
    and a,#0x0f             ;56af  5d 0f
    mov a,x                 ;56b1  60
    bnz lab_56cb            ;56b2  bd 17

lab_56b4:
    xor a,#0x80             ;56b4  7d 80
    bf a.5,lab_56c3         ;56b6  31 5f 0a
    mov b,#0x01             ;56b9  a3 01
    mov1 cy,a.7             ;56bb  61 fc
    xor1 cy,a.6             ;56bd  61 ef
    bc lab_56c3             ;56bf  8d 02
    mov b,#0x03             ;56c1  a3 03

lab_56c3:
    or a,#0x2f              ;56c3  6d 2f
    bf mem_fe32.6,lab_56cb  ;56c5  31 63 32 02
    xor a,#0x40             ;56c9  7d 40

lab_56cb:
    ret                     ;56cb  af

sub_56cc_upd_keys:
;Read uPD16432B key data if ??? conditions are met
    bf mem_fe62.1,lab_56d1  ;56cc  31 13 62 01
    ret                     ;56d0  af

lab_56d1:
    bf mem_fe65.5,lab_56d6  ;56d1  31 53 65 01
    ret                     ;56d5  af

lab_56d6:
    bf mem_fe65.2,lab_56db  ;56d6  31 23 65 01
    ret                     ;56da  af

lab_56db:
    bf mem_fe67.0,lab_56eb  ;56db  31 03 67 0c
    mov a,!mem_fbd5         ;56df  8e d5 fb
    cmp a,#0x03             ;56e2  4d 03
    bnc lab_56eb            ;56e4  9d 05
    inc a                   ;56e6  41
    mov !mem_fbd5,a         ;56e7  9e d5 fb
    ret                     ;56ea  af

lab_56eb:
    clr1 cy                 ;56eb  21
    btclr mem_fe5e.7,lab_56f3 ;56ec  31 71 5e 03
    set1 cy                 ;56f0  20
    br lab_5713             ;56f1  fa 20

lab_56f3:
    clr1 shadow_p4.3        ;56f3  3b ce        P43=0
    clr1 pm4.3              ;56f5  71 3b 24     PM43=output
    mov a,shadow_p4         ;56f8  f0 ce
    mov p4,a                ;56fa  f2 04

    mov csim30,#0x82        ;56fc  13 b0 82
    clr1 pm3.2              ;56ff  71 2b 23     PM32=output (uPD16432B CLK)
    clr1 pm3.1              ;5702  71 1b 23     PM31=output (uPD16432B DAT out)
    clr1 pu3.0              ;5705  71 0b 33     PU30 pull-up resistor disabled (uPD16432B DAT in)
    set1 pm3.0              ;5708  71 0a 23     PM30=input (uPD16432B DAT in)
    clr1 shadow_p3.2        ;570b  2b cd        uPD16432B CLK = low
    clr1 shadow_p3.1        ;570d  1b cd        uPD16432B DAT out = low
    mov a,shadow_p3         ;570f  f0 cd
    mov p3,a                ;5711  f2 03

lab_5713:
    bnc lab_5718            ;5713  9d 03
    br !lab_58d5            ;5715  9b d5 58     Branch to clr1 mem_fe66.5 and return

lab_5718:
    clr1 shadow_p4.7        ;5718  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;571a  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;571d  f0 ce
    mov p4,a                ;571f  f2 04

    mov a,#0x4c             ;5721  a1 4c        XXX useless A = uPD16432B Command byte 0x4c;
                            ;                     A will be overwritten before being sent

    set1 shadow_p4.7        ;5723  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;5725  f0 ce
    mov p4,a                ;5727  f2 04

    mov a,#0x4c             ;5729  a1 4c        A = uPD16432B Command byte 0x4c (0b01001100)
                            ;                       Data Setting Command
                            ;                         4=Read key data
                            ;                         Command implies address incr; incr = on
                            ;                         Command implies reset to addr 0; addr = 0
    callf !sub_087a         ;572b  0c 7a        SPI xfer on SIO30 (send byte in A, recv byte in A)

    bt mem_fe5f.0,lab_5733  ;572d  8c 5f 03     Branch if SPI transfer is complete

    ;SPI transfer did not complete
    br !lab_58d5            ;5730  9b d5 58     Branch to clr1 mem_fe66.5 and return

lab_5733:
    ;SPI transfer of "Read key data" command is complete
    mov a,#0x01             ;5733  a1 01
    cmp a,#0x01             ;5735  4d 01        XXX useless comparison
    set1 mem_fe5f.1         ;5737  1a 5f        SPI mode flag = transmit only
    bnz lab_574c            ;5739  bd 11        XXX never branches

    clr1 mem_fe5f.1         ;573b  1b 5f        SPI mode flag = transmit and receive

    ;Fill key data buffer (4 bytes at upd_keys) with 0xFF
    movw ax,#upd_keys       ;573d  10 d6 fb     AX = pointer to upd_keys key data buffer (4 bytes)
    movw hl,ax              ;5740  d6
    mov a,#0x04             ;5741  a1 04        A = 4 bytes to fill
    mov b,a                 ;5743  73
    decw hl                 ;5744  96           Decrement HL so HL+B = last byte of key data buffer
    mov a,#0xff             ;5745  a1 ff        A = byte to fill (0xFF)
    xor a,#0x00             ;5747  7d 00        XXX useless XOR.  A is still 0xFF.
lab_5749:
    mov [hl+b],a            ;5749  bb           Write 0xFF to the key data buffer
    dbnz b,lab_5749         ;574a  8b fd        Continue until all 4 bytes have been filled

    ;Key data buffer (4 bytes at upd_keys) is now filled with 0xFF
    ;This will be transmitted to the uPD16432B during key data read

lab_574c:
    set1 shadow_p4.7        ;574c  7a ce        Select uPD16432B (STB=high)
    mov a,shadow_p4         ;574e  f0 ce
    mov p4,a                ;5750  f2 04

    clr1 if0h.4             ;5752  71 4b e1     Clear CSIIF30 (INTCSI0 interrupt flag)
    clr1 mk0h.4             ;5755  71 4b e5     Clear CSIMK30 (enables INTCSI30)
    clr1 pr0h.4             ;5758  71 4b e9     Clear CSIPR30 (makes INTCSI30 high priority)

    movw ax,#upd_keys       ;575b  10 d6 fb
    push ax                 ;575e  b1           Push: pointer to buffer to transfer (key data)
    mov a,#0x04             ;575f  a1 04
    push ax                 ;5761  b1           Push: number of bytes to transfer (4)

    sel rb2                 ;5762  61 f0        Select register bank used by intcsi30_08a9
    pop bc                  ;5764  b2           Pop: B  = number of bytes to transfer (4)
    pop hl                  ;5765  b6           Pop: HL = pointer to buffer to transfer (upd_keys)

    clr1 mem_fe5f.0         ;5766  0b 5f        SPI packet complete flag = not complete
    mov c,#0x01             ;5768  a2 01        C = number of bytes sent
    mov a,[hl]              ;576a  87           A = first byte in buffer to transfer
    ei                      ;576b  7a 1e
    mov sio30,a             ;576d  f2 1a        Send first byte in buffer (INTCSI30 sends the rest)

    sel rb0                 ;576f  61 d0        Select normal register bank

    mov b,#0xff             ;5771  a3 ff
lab_5773:
    bt mem_fe5f.0,lab_5778  ;5773  8c 5f 02     Branch if SPI transfer is complete
    dbnz b,lab_5773         ;5776  8b fb        Keep waiting until B reaches zero

    ;SPI transfer is complete or B reached zero

lab_5778:
    set1 shadow_p3.1        ;5778  1a cd        uPD16432B DAT = high
    clr1 pm3.1              ;577a  71 1b 23     PM31=output (uPD16432B DAT out)
    mov a,shadow_p3         ;577d  f0 cd
    mov p3,a                ;577f  f2 03

    clr1 shadow_p4.7        ;5781  7b ce        Deselect uPD16432B (STB=low)
    clr1 pm4.7              ;5783  71 7b 24     PM47=output (P47)
    mov a,shadow_p4         ;5786  f0 ce
    mov p4,a                ;5788  f2 04

    set1 mem_fe5e.7         ;578a  7a 5e
    bt mem_fe5f.0,lab_5792  ;578c  8c 5f 03     Branch if SPI transfer is complete

    ;SPI transfer is not complete
    br !lab_58d5            ;578f  9b d5 58     Branch to clr1 mem_fe66.5 and return

lab_5792:
    ;SPI transfer of key data is complete
    ;Key data buffer (4 bytes at upd_keys) now contains key data from uPD16432B

    ;Mask 4 bytes key data from uPD16432B (upd_keys) to remove bits not used by the faceplate
    mov b,#0x04             ;5792  a3 04        B = 4 bytes to mask
lab_5794:
    movw hl,#key_mask-1     ;5794  16 a7 b3     HL+B will point into key mask bytes
    mov a,[hl+b]            ;5797  ab           A = key mask
    movw hl,#upd_keys-1     ;5798  16 d5 fb     HL+B will point into key data buffer
    and a,[hl+b]            ;579b  31 5b        A = mask byte AND key data byte
    mov [hl+b],a            ;579d  bb           Replace key data value with masked value
    dbnz b,lab_5794         ;579e  8b f4        Keep going until all 4 bytes are masked

    ;Copy 4 bytes key data from uPD16432B (upd_keys) to mem_fed5
    movw hl,#upd_keys       ;57a0  16 d6 fb     HL = source address
    movw de,#mem_fed5       ;57a3  14 d5 fe     HL = destination address
    mov a,#0x04             ;57a6  a1 04        A = 4 bytes to copy
    callf !copy             ;57a8  4c 9e        Copy A bytes from [HL] to [DE]

    ;Compare 4 byte key data buffer mem_fed5 with upd_keys_1
    movw hl,#mem_fed5       ;57aa  16 d5 fe     HL = source address
    movw de,#upd_keys_1     ;57ad  14 d1 fb     DE = destination address
    mov a,#0x04             ;57b0  a1 04        A = 4 bytes to compare
    callf !compare          ;57b2  4c ca        Compare A bytes between [HL] to [DE]
    bz lab_57c3             ;57b4  ad 0d        Branch if buffers are equal

    ;Key data buffers mem_fed5 and upd_keys_1 are not equal

    ;Copy buffer mem_fed5 into upd_keys_1
    movw hl,#mem_fed5       ;57b6  16 d5 fe     HL = source address
    movw de,#upd_keys_1     ;57b9  14 d1 fb     DE = destination address
    mov a,#0x04             ;57bc  a1 04        A = 4 bytes to copy
    callf !copy             ;57be  4c 9e        Copy A bytes from [HL] to [DE]
    br !lab_58d5            ;57c0  9b d5 58     Branch to clr1 mem_fe66.5 and return

lab_57c3:
;Key data buffers mem_fed5 and upd_keys_1 are equal

    ;Check if any bit is set in the upd_keys_1 key data buffer
    mov c,#0x04             ;57c3  a2 04        C = 4 bytes to compare
    mov a,#0x00             ;57c5  a1 00        A = compare with zero
    movw hl,#upd_keys_1-1   ;57c7  16 d0 fb     HL+C will point to a key data byte in upd_keys_1
lab_57ca:
    cmp a,[hl+c]            ;57ca  31 4a        Compare key data byte at HL+B with zero
    bnz lab_57d2            ;57cc  bd 04        Branch if nonzero (a key scan bit is set)
    dbnz c,lab_57ca         ;57ce  8a fa        Not set, continue to next byte
    br lab_57f2             ;57d0  fa 20        No key scan byte is nonzero (no key pressed)

lab_57d2:
;A uPD16432B key scan bit is set (a key was pressed)
;Look up the key code in the key matrix table

    mov c,#0x18                ;57d2  a2 18     C = 24 entries in scan codes table

    movw de,#key_matrix_0x18+1 ;57d4  14 a4 b3  DE = pointer to the first byte scan code data
                               ;                     in the last key_matrix table entry
lab_57d7:
    movw hl,#upd_keys_1     ;57d7  16 d1 fb     HL = pointer to upd_keys_1 key data buffer
    mov a,#0x04             ;57da  a1 04        A = 4 bytes to compare
    push de                 ;57dc  b5           Save pointer to key_matrix table
    callf !compare          ;57dd  4c ca        Compare A bytes between [HL] to [DE]
    pop ax                  ;57df  b0           AX = Recall pointer to key_matrix table
    bz lab_581a             ;57e0  ad 38        Branch if key_matrix table bytes matched

    subw ax,#0x0005         ;57e2  da 05 00     Move key_matrix table pointer back so it points
                            ;                   to the first byte of scan code in the previous
                            ;                   key_matrix table entry
    movw de,ax              ;57e5  d4           DE = pointer to key_matrix for next comparison
    dbnz c,lab_57d7         ;57e6  8a ef        Loop until entire key_matrix table is compared

    ;No match was found in the key_matrix table

    mov a,!mem_fc27         ;57e8  8e 27 fc
    cmp a,#0x00             ;57eb  4d 00
    bnz lab_586a            ;57ed  bd 7b
    br !lab_58d5            ;57ef  9b d5 58     Branch to clr1 mem_fe66.5 and return

lab_57f2:
;No uPD16432B key scan bit is set (no key pressed)
;
    mov a,!mem_f219         ;57f2  8e 19 f2
    cmp a,#0x01             ;57f5  4d 01
    bnz lab_580a            ;57f7  bd 11
    mov a,!mem_f218         ;57f9  8e 18 f2
    cmp a,#0x00             ;57fc  4d 00
    bnz lab_580a            ;57fe  bd 0a
    bt mem_fe67.2,lab_580a  ;5800  ac 67 07
    mov a,#0x01             ;5803  a1 01
    mov x,#0x80             ;5805  a0 80
    call !sub_2cb0          ;5807  9a b0 2c     Write X to mem_f218 and A to mem_f219 via eeram_wr_byte_hl

lab_580a:
    mov a,!mem_fc27         ;580a  8e 27 fc
    bt mem_fe67.0,lab_5818  ;580d  8c 67 08
    bt a.7,lab_5816         ;5810  31 7e 03
    br !lab_58d5            ;5813  9b d5 58     Branch to clr1 mem_fe66.5 and return

lab_5816:
    and a,#0x7f             ;5816  5d 7f

lab_5818:
    br lab_5894             ;5818  fa 7a

lab_581a:
;A match in the key_matrix table was found for the key data bytes in upd_keys_1

    mov a,c                 ;581a  62           A = index in key_matrix table where
                            ;                       the match was found
    dec a                   ;581b  51           Decrement to prepare for multiply
    mov x,#0x05             ;581c  a0 05        X = 5 (key matrix table spacing)
    mulu x                  ;581e  31 88        AX = A * X
    addw ax,#key_matrix     ;5820  ca 30 b3     AX = AX + key_matrix
    movw hl,ax              ;5823  d6           HL = address of key code byte in key_matrix table
    mov a,[hl]              ;5824  87           A = key code from table
    or a,#0x80              ;5825  6d 80        Turn on bit 7
    mov b,a                 ;5827  73           B = (key code | 0x80)

    mov a,!mem_fc27         ;5828  8e 27 fc
    cmp a,#0x00             ;582b  4d 00
    bz lab_5862             ;582d  ad 33

    mov rb0_x,a             ;582f  f2 f8
    mov a,!mem_f1e9         ;5831  8e e9 f1
    and a,#0x01             ;5834  5d 01
    cmp a,#0x00             ;5836  4d 00
    mov a,rb0_x             ;5838  f0 f8
    bz lab_5862             ;583a  ad 26

    clr1 a.7                ;583c  61 fb

    cmp a,#0x1c             ;583e  4d 1c
    bnz lab_5847            ;5840  bd 05
    cmp rb0_b,#0x8a         ;5842  c8 fb 8a
    bz lab_585d             ;5845  ad 16

lab_5847:
    cmp a,#0x1d             ;5847  4d 1d
    bnz lab_5850            ;5849  bd 05
    cmp rb0_b,#0x8b         ;584b  c8 fb 8b
    bz lab_585d             ;584e  ad 0d

lab_5850:
    cmp a,#0x1b             ;5850  4d 1b
    bnz lab_5859            ;5852  bd 05
    cmp rb0_b,#0x90         ;5854  c8 fb 90
    bz lab_585d             ;5857  ad 04

lab_5859:
    mov a,rb0_x             ;5859  f0 f8
    br lab_5862             ;585b  fa 05

lab_585d:
    mov a,rb0_x             ;585d  f0 f8
    set1 a.7                ;585f  61 fa
    mov b,a                 ;5861  73

lab_5862:
    cmp a,#0x00             ;5862  4d 00
    bz lab_588e             ;5864  ad 28
    cmp a,b                 ;5866  61 4b
    bnz lab_5816            ;5868  bd ac

lab_586a:
    mov a,!mem_fb4f         ;586a  8e 4f fb
    cmp a,#0x00             ;586d  4d 00
    bnz lab_588c            ;586f  bd 1b
    mov a,!mem_f218         ;5871  8e 18 f2
    cmp a,#0x88             ;5874  4d 88
    bz lab_5887             ;5876  ad 0f
    cmp a,#0x80             ;5878  4d 80
    bnz lab_5880            ;587a  bd 04
    set1 mem_fe67.2         ;587c  2a 67
    br lab_5887             ;587e  fa 07

lab_5880:
    mov a,!mem_f219         ;5880  8e 19 f2
    cmp a,#0x01             ;5883  4d 01
    bz lab_588c             ;5885  ad 05

lab_5887:
    mov a,#0x01             ;5887  a1 01
    call !sub_2cae          ;5889  9a ae 2c   Write 0 to mem_f218 and A to mem_f219 via eeram_wr_byte_hl

lab_588c:
    br lab_58d5             ;588c  fa 47      Branch to clr1 mem_fe66.5 and return

lab_588e:
    mov a,#0x78             ;588e  a1 78
    mov !mem_fb4f,a         ;5890  9e 4f fb
    mov a,b                 ;5893  63

lab_5894:
    mov rb0_x,a             ;5894  f2 f8
    mov a,!mem_f1e9         ;5896  8e e9 f1
    and a,#0x01             ;5899  5d 01
    cmp a,#0x00             ;589b  4d 00
    mov a,rb0_x             ;589d  f0 f8
    bz lab_58bb             ;589f  ad 1a
    and a,#0x7f             ;58a1  5d 7f
    cmp a,#0x0a             ;58a3  4d 0a
    bnz lab_58a9            ;58a5  bd 02
    mov a,#0x1c             ;58a7  a1 1c

lab_58a9:
    cmp a,#0x0b             ;58a9  4d 0b
    bnz lab_58af            ;58ab  bd 02
    mov a,#0x1d             ;58ad  a1 1d

lab_58af:
    cmp a,#0x10             ;58af  4d 10
    bnz lab_58b5            ;58b1  bd 02
    mov a,#0x1b             ;58b3  a1 1b

lab_58b5:
    bf rb0_x.7,lab_58bb     ;58b5  31 73 f8 02
    set1 a.7                ;58b9  61 fa

lab_58bb:
    bf mem_fe67.0,lab_58cf  ;58bb  31 03 67 10
    clr1 mem_fe67.0         ;58bf  0b 67
    set1 mem_fe7d.6         ;58c1  6a 7d
    set1 mem_fe66.7         ;58c3  7a 66
    cmp a,#0x87             ;58c5  4d 87
    bnz lab_58cf            ;58c7  bd 06
    clr1 mem_fe7d.6         ;58c9  6b 7d
    set1 mem_fe7d.5         ;58cb  5a 7d
    set1 mem_fe66.6         ;58cd  6a 66

lab_58cf:
    mov !mem_fc27,a         ;58cf  9e 27 fc
    mov b,#0x00             ;58d2  a3 00
    callt [0x0040]          ;58d4  c1             Calls sub_0994

lab_58d5:
    clr1 mem_fe66.5         ;58d5  5b 66
    ret                     ;58d7  af

sub_58d8_chk_power:
;Check POWER key and ???
    mov a,!mem_f1e9             ;58d8  8e e9 f1
    bf a.0,lab_5903_ret         ;58db  31 0f 25
    bt p0.4,lab_58fa            ;58de  cc 00 19       Branch if the POWER key is not being pressed

    ;POWER key is being pressed
    bt mem_fe66.7,lab_5903_ret  ;58e1  fc 66 1f
    bf mem_fe2c.3,lab_58eb      ;58e4  31 33 2c 03
    set1 mem_fe66.7             ;58e8  7a 66
    ret                         ;58ea  af

lab_58eb:
    bt mem_fe67.0,lab_5903_ret  ;58eb  8c 67 15
    bf mem_fe2d.0,sub_5915      ;58ee  31 03 2d 23
    set1 mem_fe7d.6             ;58f2  6a 7d
    set1 mem_fe66.7             ;58f4  7a 66
    clr1 mem_fe67.2             ;58f6  2b 67
    br lab_5924                 ;58f8  fa 2a

lab_58fa:
    bf mem_fe66.7,lab_5903_ret  ;58fa  31 73 66 05
    clr1 mem_fe66.7             ;58fe  7b 66
    bt mem_fe2c.3,sub_5915      ;5900  bc 2c 12

lab_5903_ret:
    ret                         ;5903  af

;INTP4 external interrupt
;Fires on the rising or falling edge of the POWER key
;POWER key is P04 (0=pressed, 1=not pressed)
intp4_power_key:
    clr1 mem_fe67.2         ;5904  2b 67
    push ax                 ;5906  b1
    mov a,!mem_f1e9         ;5907  8e e9 f1
    bt a.0,lab_5913         ;590a  31 0e 06
    bt p0.4,lab_5913        ;590d  cc 00 03       Branch if the POWER key is not being pressed
                            ;                       (rising edge)
    ;POWER key is being pressed (falling edge)
    call !sub_5915          ;5910  9a 15 59

lab_5913:
    ;POWER key is not being pressed (rising edge)
    pop ax                  ;5913  b0
    reti                    ;5914  8f

sub_5915:
    ;POWER key is being pressed (falling edge)
    bt mem_fe2d.0,lab_5924  ;5915  8c 2d 0c
    set1 mem_fe67.0         ;5918  0a 67
    mov a,#0x00             ;591a  a1 00
    mov !mem_fbd5,a         ;591c  9e d5 fb
    mov !mem_fc27,a         ;591f  9e 27 fc
    br lab_593a             ;5922  fa 16

lab_5924:
    ;mem_fe67.0 = 1
    set1 mem_fe7d.6         ;5924  6a 7d
    clr1 mem_fe66.6         ;5926  6b 66
    mov a,!mem_fc27         ;5928  8e 27 fc
    cmp a,#0x87             ;592b  4d 87
    bnz lab_593a            ;592d  bd 0b
    mov a,#0x00             ;592f  a1 00
    mov !mem_fb3a,a         ;5931  9e 3a fb
    set1 mem_fe66.6         ;5934  6a 66
    clr1 mem_fe7d.6         ;5936  6b 7d
    set1 mem_fe7d.5         ;5938  5a 7d

lab_593a:
    ret                     ;593a  af

;INTP6 external interrupt
;Fires on the falling edge of the STOP/EJECT key
;STOP/EJECT key is P06 (0=pressed, 1=not pressed)
intp6_stop_key:
    bt mem_fe62.1,lab_5940_reti ;593b  9c 62 02
    set1 mem_fe7d.7             ;593e  7a 7d

lab_5940_reti:
    reti                    ;5940  8f

lab_5941_to_mfsw_err:
    br !lab_59fd_mfsw_err   ;5941  9b fd 59

;MFSW receive bit
lab_5944_mfsw_rx_bit:
    cmpw ax,#0x3126         ;5944  ea 26 31
    bnc lab_5941_to_mfsw_err;5947  9d f8
    cmpw ax,#0x0831         ;5949  ea 31 08
    bc lab_5941_to_mfsw_err ;594c  8d f3
    cmpw ax,#0x1d7d         ;594e  ea 7d 1d
    not1 cy                 ;5951  01
    movw ax,!mfsw_rx_buf    ;5952  02 0c f0
    xch a,x                 ;5955  30
    rorc a,1                ;5956  25
    xch a,x                 ;5957  30
    rorc a,1                ;5958  25
    movw !mfsw_rx_buf,ax    ;5959  03 0c f0
    cmp mem_fe34,#0x12      ;595c  c8 34 12
    bnz lab_5969            ;595f  bd 08
    cmpw ax,#0x8217         ;5961  ea 17 82     0x82 0x17 are first two bytes of MFSW packet
    bz lab_596e_got_header  ;5964  ad 08
    br !lab_59fd_mfsw_err   ;5966  9b fd 59

lab_5969:
    cmp mem_fe34,#0x22      ;5969  c8 34 22
    bz lab_5978_got_2_more  ;596c  ad 0a

;Header bytes 0x82 and 0x17 received.
;A=0x82, X=0x17
lab_596e_got_header:
    inc mem_fe34            ;596e  81 34
    mov a,#0x05             ;5970  a1 05
    mov !mem_fb05,a         ;5972  9e 05 fb
    br !lab_5a0e_pop_reti   ;5975  9b 0e 5a   Branch to pop registers and reti

;Got the second two bytes after the header.  The full packet is four bytes:
;  0x82     0x17      0x0b      0xF4
;  header1  header2   keycode   checksum
;The checksum is 0xFF - keycode.
;
;A=keycode, X=checksum
lab_5978_got_2_more:
    ;Verify checksum
    xch a,x                 ;5978  30         Swap so that: A=checksum, X=keycode
    xor a,#0xff             ;5979  7d ff      A = checksum ^ 0xFF (should equal keycode received)
    cmp a,x                 ;597b  61 48      Compare keycode from checksum (A) with keycode (X)
    bnz lab_59fd_mfsw_err   ;597d  bd 7e      Branch if not equal (checksum bad)

    ;MFSW checksum is good
    xch a,x                 ;597f  30         XXX This swap is useless, since we know at this
                            ;                     point that both A and X contain the same value.
    mov !mfsw_key,a         ;5980  9e 97 f1   Save as MFSW key code received
    set1 mem_fe67.4         ;5983  4a 67
    set1 mem_fe67.5         ;5985  5a 67
    clr1 mem_fe67.7         ;5987  7b 67
    mov mem_fe34,#0x00      ;5989  11 34 00
    mov a,#0x9f             ;598c  a1 9f
    mov !mem_fb05,a         ;598e  9e 05 fb
    br lab_5a0e_pop_reti    ;5991  fa 7b      Branch to pop registers and reti

;MFSW (Multi-Function Steering Wheel)
;
;Note:
;  Signal is inverted by HEF40106BT
;  P0.0 idles low
;  Grounding MFSW pin makes P0.0 high
;
;Connections:
;   MFSW pin at back of radio ->
;   HEF40106BT inverter pin 12 in ->
;   HEF40106BT inverter pin 13 out ->
;   P0.0
;
intp0_mfsw:
    push ax                 ;5993  b1
    movw ax,tm01            ;5994  89 14        Read TM01 as early as possible
    push bc                 ;5996  b3
    push de                 ;5997  b5
    push hl                 ;5998  b7
    movw de,ax              ;5999  d4           Save TM01 in DE
    cmp mem_fe34,#0x23      ;599a  c8 34 23
    bnc lab_59fd_mfsw_err   ;599d  9d 5e
    cmp mem_fe34,#0x01      ;599f  c8 34 01
    bz lab_59a9             ;59a2  ad 05
    bt p0.0,lab_59c9        ;59a4  8c 00 22
    br lab_59ad             ;59a7  fa 04

lab_59a9:
    bf p0.0,lab_59c9        ;59a9  31 03 00 1c

lab_59ad:
;P0.0 = low
    mov a,#0x00             ;59ad  a1 00

    cmp a,!mem_fb0e         ;59af  48 0e fb
    bnz lab_59b7            ;59b2  bd 03

    mov !mem_f198,a         ;59b4  9e 98 f1

lab_59b7:
    mov a,!mem_f198         ;59b7  8e 98 f1
    inc a                   ;59ba  41
    mov !mem_f198,a         ;59bb  9e 98 f1

    cmp a,#0x03             ;59be  4d 03
    bnc lab_59fd_mfsw_err   ;59c0  9d 3b

    mov a,#0x64             ;59c2  a1 64
    mov !mem_fb0e,a         ;59c4  9e 0e fb

    br lab_5a0e_pop_reti    ;59c7  fa 45        Branch to pop registers and reti

lab_59c9:
;P0.0 = high
    mov a,#0x00             ;59c9  a1 00
    mov !mem_f198,a         ;59cb  9e 98 f1

    mov a,!mem_fb05         ;59ce  8e 05 fb
    cmp a,#0x00             ;59d1  4d 00
    bz lab_5a23             ;59d3  ad 4e

    cmp mem_fe34,#0x00      ;59d5  c8 34 00
    bz lab_5a13             ;59d8  ad 39

    movw ax,de              ;59da  c4           AX = Word saved from TM01
    xch a,x                 ;59db  30
    sub a,!mfsw_timer       ;59dc  18 0e f0
    xch a,x                 ;59df  30
    subc a,!mfsw_timer+1    ;59e0  38 0f f0
    bnc lab_59e9_nc         ;59e3  9d 04
    addw ax,#0xffff         ;59e5  ca ff ff
    incw ax                 ;59e8  80

lab_59e9_nc:
    xchw ax,de              ;59e9  e4
    movw !mfsw_timer,ax     ;59ea  03 0e f0
    xchw ax,de              ;59ed  e4
    cmp mem_fe34,#0x02      ;59ee  c8 34 02
    bc lab_5a3d             ;59f1  8d 4a
    bz lab_5a58             ;59f3  ad 63
    cmp mem_fe34,#0x23      ;59f5  c8 34 23
    bnc lab_59fd_mfsw_err   ;59f8  9d 03
    br !lab_5944_mfsw_rx_bit ;59fa  9b 44 59

lab_59fd_mfsw_err:
    mov a,#0x00             ;59fd  a1 00
    mov mem_fe34,a          ;59ff  f2 34
    mov !mem_fb05,a         ;5a01  9e 05 fb
    clr1 mem_fe67.4         ;5a04  4b 67
    clr1 mem_fe67.5         ;5a06  5b 67
    set1 egp.0              ;5a08  71 0a 48     Set EGP0 (enables INTP0 on rising edge; MFSW)
    clr1 egn.0              ;5a0b  71 0b 49     Clear EGN0 (disables INTP0 on falling edge; MFSW)

lab_5a0e_pop_reti:
;Pop registers and reti
    pop hl                  ;5a0e  b6
    pop de                  ;5a0f  b4
    pop bc                  ;5a10  b2
    pop ax                  ;5a11  b0
    reti                    ;5a12  8f


;mem_fe34 != 0
lab_5a13:
    cmp a,#0x7a             ;5a13  4d 7a
    bnc lab_59fd_mfsw_err   ;5a15  9d e6
    set1 mem_fe67.3         ;5a17  3a 67
    set1 mem_fe67.6         ;5a19  6a 67
    cmp a,#0x63             ;5a1b  4d 63
    bnc lab_5a27            ;5a1d  9d 08
    cmp a,#0x06             ;5a1f  4d 06
    bc lab_5a27             ;5a21  8d 04

lab_5a23:
    clr1 mem_fe67.3         ;5a23  3b 67
    clr1 mem_fe67.6         ;5a25  6b 67

lab_5a27:
    mov mem_fe34,#0x01      ;5a27  11 34 01
    set1 egn.0              ;5a2a  71 0a 49     Set EGN0 (enables INTP0 on falling edge; MFSW)
    clr1 egp.0              ;5a2d  71 0b 48     Clear EGP0 (disables INTP0 on rising edge; MFSW)
    movw ax,de              ;5a30  c4
    movw !mfsw_timer,ax     ;5a31  03 0e f0
    mov a,#0x0e             ;5a34  a1 0e
    mov !mem_fb05,a         ;5a36  9e 05 fb
    br lab_5a0e_pop_reti    ;5a39  fa d3        Branch to pop registers and reti

lab_5a3b:
    br lab_59fd_mfsw_err    ;5a3b  fa c0

lab_5a3d:
    cmpw ax,#0x629b         ;5a3d  ea 9b 62
    bc lab_59fd_mfsw_err    ;5a40  8d bb
    cmpw ax,#0xc49c         ;5a42  ea 9c c4
    bnc lab_59fd_mfsw_err   ;5a45  9d b6
    mov mem_fe34,#0x02      ;5a47  11 34 02
    set1 egp.0              ;5a4a  71 0a 48     Set EGP0 (enables INTP0 on rising edge; MFSW)
    clr1 egn.0              ;5a4d  71 0b 49     Clear EGN0 (disables INTP0 on falling edge; MFSW)
    mov a,#0x07             ;5a50  a1 07
    mov !mem_fb05,a         ;5a52  9e 05 fb
    br !lab_5a0e_pop_reti   ;5a55  9b 0e 5a     Branch to pop registers and reti

lab_5a58:
    cmpw ax,#0x1d7d         ;5a58  ea 7d 1d
    bc lab_59fd_mfsw_err    ;5a5b  8d a0
    cmpw ax,#0x629b         ;5a5d  ea 9b 62
    bnc lab_59fd_mfsw_err   ;5a60  9d 9b
    cmpw ax,#0x3126         ;5a62  ea 26 31
    bc lab_5a74             ;5a65  8d 0d
    mov mem_fe34,#0x03      ;5a67  11 34 03
    set1 mem_fe68.0         ;5a6a  0a 68
    mov a,#0x05             ;5a6c  a1 05
    mov !mem_fb05,a         ;5a6e  9e 05 fb
    br !lab_5a0e_pop_reti   ;5a71  9b 0e 5a     Branch to pop registers and reti

lab_5a74:
    mov mem_fe34,#0x00      ;5a74  11 34 00
    set1 mem_fe67.4         ;5a77  4a 67
    set1 mem_fe67.5         ;5a79  5a 67
    clr1 mem_fe67.7         ;5a7b  7b 67
    mov a,#0xd7             ;5a7d  a1 d7
    mov !mem_fb05,a         ;5a7f  9e 05 fb
    br !lab_5a0e_pop_reti   ;5a82  9b 0e 5a     Branch to pop registers and reti

;CDC TX related
sub_5a85_cdc_tx:
    xch a,x                 ;5a85  30
    mov1 cy,a.7             ;5a86  61 fc
    mov1 mem_fe68.1,cy      ;5a88  71 11 68
    and a,#0x7f             ;5a8b  5d 7f
    dec a                   ;5a8d  51
    cmp a,#0x03             ;5a8e  4d 03
    bnc lab_5acf_nc         ;5a90  9d 3d        Branch to clear carry and return

    mov !mem_f199,a         ;5a92  9e 99 f1
    xchw ax,bc              ;5a95  e2
    movw !mem_f016,ax       ;5a96  03 16 f0
    mov a,c                 ;5a99  62
    mov x,a                 ;5a9a  70
    xor a,#0xff             ;5a9b  7d ff        TODO is this the CDC TX checksum?
    xch a,x                 ;5a9d  30
    movw !mem_f012,ax       ;5a9e  03 12 f0

    movw ax,#0xca34         ;5aa1  10 34 ca
    movw !mem_f014,ax       ;5aa4  03 14 f0

    movw ax,#0x0102         ;5aa7  10 02 01
    movw !mem_f010,ax       ;5aaa  03 10 f0

    clr1 pm5.7              ;5aad  71 7b 25     PM57 = output (CDC TX)
    set1 shadow_p5.7        ;5ab0  7a cf        CDC TX = 1
    mov a,shadow_p5         ;5ab2  f0 cf
    mov p5,a                ;5ab4  f2 05

    movw ax,tm01            ;5ab6  89 14        AX = TM01
    addw ax,#0x0937         ;5ab8  ca 37 09
    movw cr011,ax           ;5abb  99 12        Store as compare value for CDC TX timer interrupt
    movw !cdc_tx_timer,ax   ;5abd  03 18 f0

    clr1 mem_fe68.2         ;5ac0  2b 68        CDC TX bit = 0
    clr1 pr1l.4             ;5ac2  71 4b ea     Clear TMPR011 (makes INTTM011 high priority; CDC TX)
    clr1 if1l.4             ;5ac5  71 4b e2     Clear TMIF001 (INTWTNI0 interrupt flag)
    clr1 mk1l.4             ;5ac8  71 4b e6     Clear TMMK011 (enables INTTM011; CDC TX)
    set1 mem_fe68.3         ;5acb  3a 68
    set1 cy                 ;5acd  20
    ret                     ;5ace  af

lab_5acf_nc:
    clr1 cy                 ;5acf  21           XXX useless; carry is clear when we branch here
    ret                     ;5ad0  af

lab_5ad1:
    xch a,x                 ;5ad1  30
    cmp a,#0x00             ;5ad2  4d 00
    bz lab_5ae8             ;5ad4  ad 12
    xch a,x                 ;5ad6  30
    movw !mem_f010,ax       ;5ad7  03 10 f0

    movw ax,de              ;5ada  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x9374         ;5adb  ca 74 93
    movw cr011,ax           ;5ade  99 12        Store as compare value for CDC TX timer interrupt
    movw !cdc_tx_timer,ax   ;5ae0  03 18 f0

    set1 mem_fe68.2         ;5ae3  2a 68        CDC TX bit = 1
    br !lab_5ba0_pop_reti   ;5ae5  9b a0 5b     Branch to pop registers and reti

lab_5ae8:
    movw ax,#0x0608         ;5ae8  10 08 06
    movw !mem_f010,ax       ;5aeb  03 10 f0

    movw ax,de              ;5aee  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x49ba         ;5aef  ca ba 49
    movw cr011,ax           ;5af2  99 12        Store as compare value for CDC TX timer interrupt
    movw !cdc_tx_timer,ax   ;5af4  03 18 f0

    clr1 mem_fe68.2         ;5af7  2b 68        CDC TX bit = 0
    br !lab_5ba0_pop_reti   ;5af9  9b a0 5b     Branch to pop registers and reti

lab_5afc:
    xch a,x                 ;5afc  30
    cmp a,#0x08             ;5afd  4d 08
    bnz lab_5b04            ;5aff  bd 03
    br !lab_5c04            ;5b01  9b 04 5c

lab_5b04:
    cmp a,#0x00             ;5b04  4d 00
    bz lab_5b0f             ;5b06  ad 07
    xch a,x                 ;5b08  30
    movw !mem_f010,ax       ;5b09  03 10 f0
    br !lab_5ba0_pop_reti   ;5b0c  9b a0 5b     Branch to pop registers and reti

lab_5b0f:
    movw ax,#0x0000         ;5b0f  10 00 00
    bf mem_fe68.1,lab_5b1b  ;5b12  31 13 68 05
    movw ax,#0x0608         ;5b16  10 08 06
    clr1 mem_fe68.2         ;5b19  2b 68        CDC TX bit = 0

lab_5b1b:
    movw !mem_f010,ax       ;5b1b  03 10 f0

    movw ax,de              ;5b1e  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x312c         ;5b1f  ca 2c 31
    movw cr011,ax           ;5b22  99 12        Store as compare value for CDC TX timer interrupt
    movw !cdc_tx_timer,ax   ;5b24  03 18 f0

    br !lab_5ba0_pop_reti   ;5b27  9b a0 5b     Branch to pop registers and reti

lab_5b2a:
    mov a,!mem_f199         ;5b2a  8e 99 f1
    cmp a,#0x00             ;5b2d  4d 00
    bz lab_5b90             ;5b2f  ad 5f
    dec a                   ;5b31  51
    mov !mem_f199,a         ;5b32  9e 99 f1
    mov b,a                 ;5b35  73
    movw hl,#mem_f016       ;5b36  16 16 f0
    mov a,[hl+b]            ;5b39  ab
    xor a,#0xff             ;5b3a  7d ff        TODO is this the CDC TX checksum?
    xch a,x                 ;5b3c  30
    movw !mem_f012,ax       ;5b3d  03 12 f0

    movw ax,#0xca34         ;5b40  10 34 ca
    movw !mem_f014,ax       ;5b43  03 14 f0

    movw ax,#0x0102         ;5b46  10 02 01
    movw !mem_f010,ax       ;5b49  03 10 f0

    movw ax,tm01            ;5b4c  89 14
    addw ax,#0x0937         ;5b4e  ca 37 09
    movw cr011,ax           ;5b51  99 12        Store as compare value for CDC TX timer interrupt
    movw !cdc_tx_timer,ax   ;5b53  03 18 f0

    clr1 mem_fe68.2         ;5b56  2b 68        CDC TX bit = 0
    br lab_5ba0_pop_reti    ;5b58  fa 46        Branch to pop registers and reti

lab_5b5a_br_5c31:
    br !lab_5c31            ;5b5a  9b 31 5c

lab_5b5d_br_5ad1:
    br !lab_5ad1            ;5b5d  9b d1 5a

inttm011_5b60:
;CDC TX timer interrupt
;Fires when TM01 count value matches CR011 compare value
;
    push ax                 ;5b60  b1
    push de                 ;5b61  b5
    push hl                 ;5b62  b7

    mov1 cy,mem_fe68.2      ;5b63  71 24 68     Carry = CDC TX bit
    mov1 shadow_p5.7,cy     ;5b66  71 71 cf     CDC TX = Carry
    mov a,shadow_p5         ;5b69  f0 cf
    mov p5,a                ;5b6b  f2 05

    movw ax,tm01            ;5b6d  89 14
    movw de,ax              ;5b6f  d4           Save TM01 in DE

    movw ax,!mem_f010       ;5b70  02 10 f0
    dec x                   ;5b73  50
    cmp a,#0x01             ;5b74  4d 01
    bc lab_5b2a             ;5b76  8d b2
    bz lab_5ba4             ;5b78  ad 2a
    cmp a,#0x03             ;5b7a  4d 03
    bc lab_5bcf             ;5b7c  8d 51
    bnz lab_5b83            ;5b7e  bd 03
    br !lab_5c16            ;5b80  9b 16 5c

lab_5b83:
    cmp a,#0x05             ;5b83  4d 05
    bc lab_5b5a_br_5c31     ;5b85  8d d3
    bz lab_5b5d_br_5ad1     ;5b87  ad d4
    cmp a,#0x06             ;5b89  4d 06
    bnz lab_5b90            ;5b8b  bd 03
    br !lab_5afc            ;5b8d  9b fc 5a

lab_5b90:
    clr1 mem_fe68.1         ;5b90  1b 68
    clr1 mem_fe68.3         ;5b92  3b 68

    clr1 pm5.7              ;5b94  71 7b 25     PM57 = output (CDC TX)
    set1 shadow_p5.7        ;5b97  7a cf        CDC TX = 1
    mov a,shadow_p5         ;5b99  f0 cf
    mov p5,a                ;5b9b  f2 05

    set1 mk1l.4             ;5b9d  71 4a e6     Set TMMK011 (disables INTTM011; CDC TX)
    ;Fall through to pop registers and reti

lab_5ba0_pop_reti:
;Pop registers and reti
    pop hl                  ;5ba0  b6
    pop de                  ;5ba1  b4
    pop ax                  ;5ba2  b0
    reti                    ;5ba3  8f

lab_5ba4:
    xch a,x                 ;5ba4  30
    cmp a,#0x00             ;5ba5  4d 00
    bz lab_5bbb             ;5ba7  ad 12
    xch a,x                 ;5ba9  30
    movw !mem_f010,ax       ;5baa  03 10 f0

    movw ax,de              ;5bad  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x9374         ;5bae  ca 74 93
    movw cr011,ax           ;5bb1  99 12
    movw !cdc_tx_timer,ax   ;5bb3  03 18 f0

    set1 mem_fe68.2         ;5bb6  2a 68        CDC TX bit = 1
    br !lab_5ba0_pop_reti   ;5bb8  9b a0 5b     Branch to pop registers and reti

lab_5bbb:
    movw ax,#0x0220         ;5bbb  10 20 02
    movw !mem_f010,ax       ;5bbe  03 10 f0

    movw ax,de              ;5bc1  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x49ba         ;5bc2  ca ba 49
    movw cr011,ax           ;5bc5  99 12
    movw !cdc_tx_timer,ax   ;5bc7  03 18 f0

    clr1 mem_fe68.2         ;5bca  2b 68        CDC TX bit = 0
    br !lab_5ba0_pop_reti   ;5bcc  9b a0 5b     Branch to pop registers and reti

lab_5bcf:
    xch a,x                 ;5bcf  30
    bt a.0,lab_5c04         ;5bd0  31 0e 31
    cmp a,#0x00             ;5bd3  4d 00
    xch a,x                 ;5bd5  30
    bnz lab_5bdb            ;5bd6  bd 03
    movw ax,#0x0320         ;5bd8  10 20 03

lab_5bdb:
    movw !mem_f010,ax       ;5bdb  03 10 f0

    movw ax,!mem_f014       ;5bde  02 14 f0
    xch a,x                 ;5be1  30
    rorc a,1                ;5be2  25
    xch a,x                 ;5be3  30
    rorc a,1                ;5be4  25
    movw !mem_f014,ax       ;5be5  03 14 f0

lab_5be8:
    clr1 mem_fe68.2         ;5be8  2b 68        CDC TX bit = 0
    bc lab_5bf8             ;5bea  8d 0c

    movw ax,de              ;5bec  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x0937         ;5bed  ca 37 09
    movw cr011,ax           ;5bf0  99 12
    movw !cdc_tx_timer,ax   ;5bf2  03 18 f0

    br !lab_5ba0_pop_reti   ;5bf5  9b a0 5b     Branch to pop registers and reti

lab_5bf8:
    movw ax,de              ;5bf8  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x1ba5         ;5bf9  ca a5 1b
    movw cr011,ax           ;5bfc  99 12
    movw !cdc_tx_timer,ax   ;5bfe  03 18 f0

    br !lab_5ba0_pop_reti   ;5c01  9b a0 5b     Branch to pop registers and reti

lab_5c04:
    xch a,x                 ;5c04  30
    movw !mem_f010,ax       ;5c05  03 10 f0

    movw ax,de              ;5c08  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0x0937         ;5c09  ca 37 09
    movw cr011,ax           ;5c0c  99 12
    movw !cdc_tx_timer,ax   ;5c0e  03 18 f0

    set1 mem_fe68.2         ;5c11  2a 68        CDC TX bit = 1
    br !lab_5ba0_pop_reti   ;5c13  9b a0 5b     Branch to pop registers and reti

lab_5c16:
    xch a,x                 ;5c16  30
    bt a.0,lab_5c04         ;5c17  31 0e ea
    cmp a,#0x00             ;5c1a  4d 00
    xch a,x                 ;5c1c  30
    bnz lab_5c22            ;5c1d  bd 03
    movw ax,#0x0404         ;5c1f  10 04 04

lab_5c22:
    movw !mem_f010,ax       ;5c22  03 10 f0
    movw ax,!mem_f012       ;5c25  02 12 f0
    xch a,x                 ;5c28  30
    rorc a,1                ;5c29  25
    xch a,x                 ;5c2a  30
    rorc a,1                ;5c2b  25
    movw !mem_f012,ax       ;5c2c  03 12 f0
    br lab_5be8             ;5c2f  fa b7

lab_5c31:
    xch a,x                 ;5c31  30
    cmp a,#0x03             ;5c32  4d 03
    bz lab_5c04             ;5c34  ad ce
    cmp a,#0x00             ;5c36  4d 00
    bz lab_5c41             ;5c38  ad 07
    xch a,x                 ;5c3a  30
    movw !mem_f010,ax       ;5c3b  03 10 f0
    br !lab_5ba0_pop_reti   ;5c3e  9b a0 5b     Branch to pop registers and reti

lab_5c41:
    bf mem_fe68.1,lab_5c4d  ;5c41  31 13 68 08
    movw ax,#0x0502         ;5c45  10 02 05     XXX lab_5c58 immediately overwrites AX
    clr1 mem_fe68.2         ;5c48  2b 68        CDC TX bit = 0
    br !lab_5c58            ;5c4a  9b 58 5c

lab_5c4d:
    movw ax,#0x0000         ;5c4d  10 00 00
    movw !mem_f010,ax       ;5c50  03 10 f0
    set1 mem_fe68.2         ;5c53  2a 68        CDC TX bit = 1
    br !lab_5ba0_pop_reti   ;5c55  9b a0 5b     Branch to pop registers and reti

lab_5c58:
    movw ax,de              ;5c58  c4           AX = value of TM01 saved in DE at top of intp0_mfsw
    addw ax,#0xa9fd         ;5c59  ca fd a9
    movw cr011,ax           ;5c5c  99 12
    movw !cdc_tx_timer,ax   ;5c5e  03 18 f0

    br !lab_5ba0_pop_reti   ;5c61  9b a0 5b     Branch to pop registers and reti

sub_5c64:
    mov mem_fed4,a          ;5c64  f2 d4
    call !sub_7f3e          ;5c66  9a 3e 7f
    mov a,mem_fe43_key      ;5c69  f0 43
    mov mem_fed5,a          ;5c6b  f2 d5
    mov a,#0x00             ;5c6d  a1 00
    bf mem_fe6d.0,lab_5c75  ;5c6f  31 03 6d 02
    set1 a.7                ;5c73  61 fa

lab_5c75:
    call !sub_5c94          ;5c75  9a 94 5c
    push bc                 ;5c78  b3
    call !sub_7f4c          ;5c79  9a 4c 7f
    pop bc                  ;5c7c  b2
    mov a,c                 ;5c7d  62
    bf a.7,lab_5c90         ;5c7e  31 7f 0f
    cmp a,#0xff             ;5c81  4d ff
    bz lab_5c90             ;5c83  ad 0b
    bf a.6,lab_5c8c         ;5c85  31 6f 04
    set1 mem_fe80.1         ;5c88  1a 80
    br lab_5c8e             ;5c8a  fa 02

lab_5c8c:
    set1 mem_fe80.0         ;5c8c  0a 80

lab_5c8e:
    and a,#0x3f             ;5c8e  5d 3f

lab_5c90:
    mov b,a                 ;5c90  73
    cmp a,#0x00             ;5c91  4d 00
    ret                     ;5c93  af

sub_5c94:
    mov c,#0x00             ;5c94  a2 00
    bt mem_fed5.7,lab_5cca  ;5c96  fc d5 31
    bf a.7,lab_5cca         ;5c99  31 7f 2e
    movw ax,de              ;5c9c  c4
    movw hl,ax              ;5c9d  d6
    mov a,[hl]              ;5c9e  87
    cmp a,#0x00             ;5c9f  4d 00
    bz lab_5cbe             ;5ca1  ad 1b
    mov b,a                 ;5ca3  73

lab_5ca4:
    incw hl                 ;5ca4  86
    incw hl                 ;5ca5  86
    incw hl                 ;5ca6  86
    mov a,[hl]              ;5ca7  87
    cmp a,mem_fed5          ;5ca8  4e d5
    bnz lab_5cb2            ;5caa  bd 06
    mov a,[hl+0x01]         ;5cac  ae 01
    and a,mem_fed4          ;5cae  5e d4
    bnz lab_5cb8            ;5cb0  bd 06

lab_5cb2:
    dbnz b,lab_5ca4         ;5cb2  8b f0
    mov c,#0xff             ;5cb4  a2 ff
    br lab_5cbe             ;5cb6  fa 06

lab_5cb8:
    mov a,[hl+0x02]         ;5cb8  ae 02
    bt a.7,lab_5cc1         ;5cba  31 7e 04
    mov c,a                 ;5cbd  72

lab_5cbe:
    br !lab_5d3c            ;5cbe  9b 3c 5d

lab_5cc1:
    clr1 a.7                ;5cc1  61 fb
    mov mem_fed6,a          ;5cc3  f2 d6
    mov a,#0x00             ;5cc5  a1 00
    mov !mem_fbda,a         ;5cc7  9e da fb

lab_5cca:
    mov a,mem_fed6          ;5cca  f0 d6
    mov b,a                 ;5ccc  73
    cmp a,#0x00             ;5ccd  4d 00
    bz lab_5d39             ;5ccf  ad 68
    movw ax,de              ;5cd1  c4
    movw hl,ax              ;5cd2  d6
    mov a,[hl+0x01]         ;5cd3  ae 01
    mov x,a                 ;5cd5  70
    mov a,[hl+0x02]         ;5cd6  ae 02
    cmpw ax,#0x0000         ;5cd8  ea 00 00
    bz lab_5d39             ;5cdb  ad 5c
    movw hl,ax              ;5cdd  d6
    cmp mem_fed5,#0x00      ;5cde  c8 d5 00
    bnz lab_5ce5            ;5ce1  bd 02
    set1 mem_fed5.7         ;5ce3  7a d5

lab_5ce5:
    mov a,[hl]              ;5ce5  87
    cmp a,b                 ;5ce6  61 4b
    bc lab_5d39             ;5ce8  8d 4f
    incw hl                 ;5cea  86
    mov a,b                 ;5ceb  63
    dec a                   ;5cec  51
    rol a,1                 ;5ced  26
    callf !add_a_to_hl      ;5cee  5c 67        HL = HL + A

lab_5cf0:
    mov a,[hl]              ;5cf0  87
    mov mem_fed4,a          ;5cf1  f2 d4
    mov b,a                 ;5cf3  73
    bt a.7,lab_5d3d         ;5cf4  31 7e 46
    cmp mem_fed4,#0x7f      ;5cf7  c8 d4 7f
    bnz lab_5d02            ;5cfa  bd 06
    mov a,[hl+0x01]         ;5cfc  ae 01
    mov mem_fed6,a          ;5cfe  f2 d6
    br lab_5cca             ;5d00  fa c8

lab_5d02:
    bt mem_fed5.7,lab_5d28  ;5d02  fc d5 23
    mov a,b                 ;5d05  63
    and a,#0x1f             ;5d06  5d 1f
    mov b,a                 ;5d08  73
    push hl                 ;5d09  b7
    movw hl,#mem_b3b6+1     ;5d0a  16 b7 b3
    callf !table_get_byte   ;5d0d  4c 7d        Load A with byte at position B in table [HL]
    pop hl                  ;5d0f  b6
    bc lab_5d39             ;5d10  8d 27        Branch if lookup failed
    cmp a,!mem_fb3a         ;5d12  48 3a fb
    bc lab_5d3c             ;5d15  8d 25
    bt mem_fed4.5,lab_5d31  ;5d17  dc d4 17
    cmp a,#0x00             ;5d1a  4d 00
    bz lab_5d3c             ;5d1c  ad 1e
    bf mem_fed4.6,lab_5d39  ;5d1e  31 63 d4 17
    inc mem_fed6            ;5d22  81 d6
    incw hl                 ;5d24  86
    incw hl                 ;5d25  86
    br lab_5cf0             ;5d26  fa c8

lab_5d28:
    bt mem_fed4.5,lab_5d39  ;5d28  dc d4 0e
    mov a,[hl+0x01]         ;5d2b  ae 01
    mov c,a                 ;5d2d  72
    br !lab_5d39            ;5d2e  9b 39 5d

lab_5d31:
    mov a,[hl+0x01]         ;5d31  ae 01
    mov c,a                 ;5d33  72

lab_5d34:
    inc mem_fed6            ;5d34  81 d6
    bt mem_fed4.6,lab_5d3c  ;5d36  ec d4 03

lab_5d39:
    mov mem_fed6,#0x00      ;5d39  11 d6 00

lab_5d3c:
    ret                     ;5d3c  af

lab_5d3d:
    mov a,!mem_fbda         ;5d3d  8e da fb
    cmp a,#0x00             ;5d40  4d 00
    bnz lab_5d5b            ;5d42  bd 17
    mov a,b                 ;5d44  63
    and a,#0x38             ;5d45  5d 38
    ror a,1                 ;5d47  24
    ror a,1                 ;5d48  24
    ror a,1                 ;5d49  24
    mov b,a                 ;5d4a  73
    push hl                 ;5d4b  b7
    movw hl,#mem_b3cc+1     ;5d4c  16 cd b3
    callf !table_get_byte   ;5d4f  4c 7d        Load A with byte at position B in table [HL]
    pop hl                  ;5d51  b6
    bc lab_5d39             ;5d52  8d e5        Branch if lookup failed
    mov !mem_fbda,a         ;5d54  9e da fb
    bf mem_fed5.7,lab_5d88  ;5d57  31 73 d5 2d

lab_5d5b:
    bf mem_fed5.7,lab_5d6f  ;5d5b  31 73 d5 10
    bf mem_fed4.6,lab_5d6d  ;5d5f  31 63 d4 0a
    mov a,!mem_fbda         ;5d63  8e da fb
    cmp a,#0xff             ;5d66  4d ff
    bnz lab_5d6d            ;5d68  bd 03
    mov a,[hl+0x03]         ;5d6a  ae 03
    mov c,a                 ;5d6c  72

lab_5d6d:
    br lab_5d39             ;5d6d  fa ca

lab_5d6f:
    mov a,!mem_fb10         ;5d6f  8e 10 fb
    cmp a,#0x00             ;5d72  4d 00
    bnz lab_5d3c            ;5d74  bd c6
    mov a,[hl+0x01]         ;5d76  ae 01
    mov c,a                 ;5d78  72
    mov a,!mem_fbda         ;5d79  8e da fb
    cmp a,#0xff             ;5d7c  4d ff
    bz lab_5d88             ;5d7e  ad 08
    dec a                   ;5d80  51
    mov !mem_fbda,a         ;5d81  9e da fb
    cmp a,#0x00             ;5d84  4d 00
    bz lab_5d34             ;5d86  ad ac

lab_5d88:
    mov a,mem_fed4          ;5d88  f0 d4
    and a,#0x07             ;5d8a  5d 07
    mov b,a                 ;5d8c  73
    movw hl,#mem_b3c3+1     ;5d8d  16 c4 b3
    callf !table_get_byte   ;5d90  4c 7d        Load A with byte at position B in table [HL]
    bc lab_5d39             ;5d92  8d a5        Branch if lookup failed
    mov !mem_fb10,a         ;5d94  9e 10 fb
    br lab_5d3c             ;5d97  fa a3

sub_5d99:
    push ax                 ;5d99  b1
    and a,#0x3f             ;5d9a  5d 3f
    cmp a,#0x22             ;5d9c  4d 22
    pop ax                  ;5d9e  b0
    bc lab_5da3             ;5d9f  8d 02
    set1 cy                 ;5da1  20
    ret                     ;5da2  af

lab_5da3:
    push bc                 ;5da3  b3
    mov c,a                 ;5da4  72
    and a,#0x80             ;5da5  5d 80
    bz lab_5db4             ;5da7  ad 0b
    inc a                   ;5da9  41
    push hl                 ;5daa  b7
    movw hl,#rb0_x          ;5dab  16 f8 fe
    call !sub_5e2a          ;5dae  9a 2a 5e
    pop hl                  ;5db1  b6
    bc lab_5e25             ;5db2  8d 71

lab_5db4:
    clr1 mem_fe68.4         ;5db4  4b 68
    bf rb0_c.6,lab_5dbc     ;5db6  31 63 fa 02
    set1 mem_fe68.4         ;5dba  4a 68

lab_5dbc:
    and rb0_c,#0x3f         ;5dbc  d8 fa 3f

lab_5dbf:
    mov rb0_b,#0x08         ;5dbf  11 fb 08
    clr1 pu7.4              ;5dc2  71 4b 37
    set1 pm7.4              ;5dc5  71 4a 27

lab_5dc8:
    clr1 pm7.3              ;5dc8  71 3b 27
    cmp rb0_b,#0x00         ;5dcb  c8 fb 00
    cmp rb0_b,#0x00         ;5dce  c8 fb 00
    nop                     ;5dd1  00
    clr1 pu7.3              ;5dd2  71 3b 37
    set1 pm7.3              ;5dd5  71 3a 27
    cmp rb0_b,#0x00         ;5dd8  c8 fb 00
    nop                     ;5ddb  00
    nop                     ;5ddc  00
    mov1 cy,p7.4            ;5ddd  71 44 07
    rolc a,1                ;5de0  27
    dbnz b,lab_5dc8         ;5de1  8b e5
    clr1 pm7.3              ;5de3  71 3b 27
    mov [hl],a              ;5de6  97
    incw hl                 ;5de7  86
    dbnz c,lab_5e08         ;5de8  8a 1e
    bf mem_fe68.4,lab_5e08  ;5dea  31 43 68 1a
    clr1 pu7.3              ;5dee  71 3b 37
    set1 pm7.3              ;5df1  71 3a 27
    cmp rb0_b,#0x00         ;5df4  c8 fb 00
    cmp rb0_b,#0x00         ;5df7  c8 fb 00
    nop                     ;5dfa  00
    clr1 pm7.3              ;5dfb  71 3b 27
    cmp rb0_b,#0x00         ;5dfe  c8 fb 00
    nop                     ;5e01  00
    nop                     ;5e02  00
    call !sub_5eb3          ;5e03  9a b3 5e
    br lab_5e25             ;5e06  fa 1d

lab_5e08:
    clr1 pm7.4              ;5e08  71 4b 27
    clr1 pu7.3              ;5e0b  71 3b 37
    set1 pm7.3              ;5e0e  71 3a 27
    cmp rb0_b,#0x00         ;5e11  c8 fb 00
    cmp rb0_b,#0x00         ;5e14  c8 fb 00
    nop                     ;5e17  00
    clr1 pm7.3              ;5e18  71 3b 27
    cmp rb0_b,#0x00         ;5e1b  c8 fb 00
    nop                     ;5e1e  00
    nop                     ;5e1f  00
    cmp rb0_c,#0x00         ;5e20  c8 fa 00
    bnz lab_5dbf            ;5e23  bd 9a

lab_5e25:
    pop bc                  ;5e25  b2
    ret                     ;5e26  af

sub_5e27:
    movw hl,#mem_fed4       ;5e27  16 d4 fe

sub_5e2a:
    push ax                 ;5e2a  b1
    and a,#0x3f             ;5e2b  5d 3f
    cmp a,#0x22             ;5e2d  4d 22
    pop ax                  ;5e2f  b0
    bc lab_5e34             ;5e30  8d 02
    set1 cy                 ;5e32  20
    ret                     ;5e33  af

lab_5e34:
    push bc                 ;5e34  b3
    clr1 mem_fe68.4         ;5e35  4b 68
    bf a.6,lab_5e3c         ;5e37  31 6f 02
    set1 mem_fe68.4         ;5e3a  4a 68

lab_5e3c:
    bf a.7,lab_5e66         ;5e3c  31 7f 27
    clr1 pu7.4              ;5e3f  71 4b 37
    set1 pm7.4              ;5e42  71 4a 27
    clr1 shadow_p7.4        ;5e45  4b d1
    push ax                 ;5e47  b1
    mov a,shadow_p7         ;5e48  f0 d1
    mov p7,a                ;5e4a  f2 07
    clr1 pu7.3              ;5e4c  71 3b 37
    set1 pm7.3              ;5e4f  71 3a 27
    clr1 shadow_p7.3        ;5e52  3b d1
    mov a,shadow_p7         ;5e54  f0 d1
    mov p7,a                ;5e56  f2 07
    pop ax                  ;5e58  b0
    clr1 pm7.4              ;5e59  71 4b 27
    cmp rb0_b,#0x00         ;5e5c  c8 fb 00
    nop                     ;5e5f  00
    nop                     ;5e60  00
    nop                     ;5e61  00
    nop                     ;5e62  00
    clr1 pm7.3              ;5e63  71 3b 27

lab_5e66:
    and a,#0x3f             ;5e66  5d 3f
    bz lab_5ec9             ;5e68  ad 5f
    mov b,a                 ;5e6a  73

lab_5e6b:
    mov a,[hl]              ;5e6b  87
    mov c,#0x08             ;5e6c  a2 08

lab_5e6e:
    rolc a,1                ;5e6e  27
    bc lab_5e76             ;5e6f  8d 05
    clr1 pm7.4              ;5e71  71 4b 27
    br lab_5e7c             ;5e74  fa 06

lab_5e76:
    clr1 pu7.4              ;5e76  71 4b 37
    set1 pm7.4              ;5e79  71 4a 27

lab_5e7c:
    nop                     ;5e7c  00
    clr1 pu7.3              ;5e7d  71 3b 37
    set1 pm7.3              ;5e80  71 3a 27
    cmp rb0_b,#0x00         ;5e83  c8 fb 00
    cmp rb0_b,#0x00         ;5e86  c8 fb 00
    nop                     ;5e89  00
    clr1 pm7.3              ;5e8a  71 3b 27
    dbnz c,lab_5e6e         ;5e8d  8a df
    clr1 pu7.4              ;5e8f  71 4b 37
    set1 pm7.4              ;5e92  71 4a 27
    clr1 pu7.3              ;5e95  71 3b 37
    set1 pm7.3              ;5e98  71 3a 27
    cmp rb0_b,#0x00         ;5e9b  c8 fb 00
    cmp rb0_b,#0x00         ;5e9e  c8 fb 00
    nop                     ;5ea1  00
    nop                     ;5ea2  00
    nop                     ;5ea3  00
    bt p7.4,lab_5ec9        ;5ea4  cc 07 22
    clr1 pm7.3              ;5ea7  71 3b 27
    incw hl                 ;5eaa  86
    dbnz b,lab_5e6b         ;5eab  8b be
    pop bc                  ;5ead  b2
    bt mem_fe68.4,sub_5eb3  ;5eae  cc 68 02
    clr1 cy                 ;5eb1  21
    ret                     ;5eb2  af

sub_5eb3:
    clr1 pm7.4              ;5eb3  71 4b 27
    clr1 pu7.3              ;5eb6  71 3b 37
    set1 pm7.3              ;5eb9  71 3a 27
    cmp rb0_b,#0x00         ;5ebc  c8 fb 00
    nop                     ;5ebf  00
    nop                     ;5ec0  00
    clr1 pu7.4              ;5ec1  71 4b 37
    set1 pm7.4              ;5ec4  71 4a 27
    clr1 cy                 ;5ec7  21
    ret                     ;5ec8  af

lab_5ec9:
    clr1 pm7.3              ;5ec9  71 3b 27
    cmp rb0_b,#0x00         ;5ecc  c8 fb 00
    nop                     ;5ecf  00
    nop                     ;5ed0  00
    clr1 pm7.4              ;5ed1  71 4b 27
    clr1 pu7.3              ;5ed4  71 3b 37
    set1 pm7.3              ;5ed7  71 3a 27
    cmp rb0_b,#0x00         ;5eda  c8 fb 00
    nop                     ;5edd  00
    nop                     ;5ede  00
    clr1 pu7.4              ;5edf  71 4b 37
    set1 pm7.4              ;5ee2  71 4a 27
    set1 cy                 ;5ee5  20
    pop bc                  ;5ee6  b2
    ret                     ;5ee7  af

sub_5ee8:
;TODO perform I2C read?
;Returns carry clear on success, carry set on failure
    push ax                 ;5ee8  b1
    and a,#0b00111111       ;5ee9  5d 3f
    cmp a,#0x22             ;5eeb  4d 22
    pop ax                  ;5eed  b0
    bc lab_5ef2             ;5eee  8d 02      Branch if less
    set1 cy                 ;5ef0  20         Set carry to indicate failure
    ret                     ;5ef1  af

lab_5ef2:
    push bc                 ;5ef2  b3
    mov c,a                 ;5ef3  72
    and a,#0x80             ;5ef4  5d 80
    bz lab_5f05             ;5ef6  ad 0d
    inc a                   ;5ef8  41
    push hl                 ;5ef9  b7
    movw hl,#rb0_x          ;5efa  16 f8 fe
    call !sub_5f51          ;5efd  9a 51 5f     TODO perform I2C write?
    pop hl                  ;5f00  b6
    bnc lab_5f05            ;5f01  9d 02        Branch if success
    br lab_5f45             ;5f03  fa 40

lab_5f05:
    clr1 mem_fe68.5         ;5f05  5b 68
    bf rb0_c.6,lab_5f0d     ;5f07  31 63 fa 02
    set1 mem_fe68.5         ;5f0b  5a 68

lab_5f0d:
    and rb0_c,#0x3f         ;5f0d  d8 fa 3f
    mov a,c                 ;5f10  62
    mov b,a                 ;5f11  73
    set1 iicc0.2            ;5f12  71 2a a8
    decw hl                 ;5f15  96

lab_5f16:
    bt mem_fe61.7,lab_5f4b  ;5f16  fc 61 32     Branch if INTP2 occurred
    dec b                   ;5f19  53
    bnz lab_5f26            ;5f1a  bd 0a
    bf mem_fe68.5,lab_5f26  ;5f1c  31 53 68 06
    bt mem_fe69.3,lab_5f26  ;5f20  bc 69 03
    clr1 iicc0.2            ;5f23  71 2b a8

lab_5f26:
    set1 iicc0.5            ;5f26  71 5a a8
    inc b                   ;5f29  43
    incw hl                 ;5f2a  86
    mov c,#0x50             ;5f2b  a2 50

lab_5f2d:
    bt if0h.6,lab_5f35      ;5f2d  31 66 e1 04  Branch if IICIF0 (INTIIC0 interrupt flag) is set
    dbnz c,lab_5f2d         ;5f31  8a fa
    callf !sub_0879         ;5f33  0c 79        Just returns

lab_5f35:
    clr1 if0h.6             ;5f35  71 6b e1     Clear IICIF0 (INTIIC0 interrupt flag)
    mov a,iic0              ;5f38  f0 1f
    mov [hl],a              ;5f3a  97
    dbnz b,lab_5f16         ;5f3b  8b d9
    bf mem_fe68.5,lab_5f44_success  ;5f3d  31 53 68 03
    set1 iicc0.0            ;5f41  71 0a a8

lab_5f44_success:
    clr1 cy                 ;5f44  21

lab_5f45:
    pop bc                  ;5f45  b2
    clr1 mem_fe69.1         ;5f46  1b 69
    set1 mem_fe68.6         ;5f48  6a 68
    ret                     ;5f4a  af

lab_5f4b:
    br !lab_5feb            ;5f4b  9b eb 5f

lab_5f4e:
    movw hl,#mem_fed4       ;5f4e  16 d4 fe

sub_5f51:
;TODO perform I2C write?
;
;Always called with something in A
;and a pointer to a buffer in HL
;
;Returns carry clear on success, carry set on failure
    bt mem_fe69.0,lab_5f64  ;5f51  8c 69 10
    bf mem_fe2d.0,lab_5f5f  ;5f54  31 03 2d 07
    call !sub_5ff5          ;5f58  9a f5 5f
    set1 mem_fe69.0         ;5f5b  0a 69
    br lab_5f64             ;5f5d  fa 05

lab_5f5f:
    set1 mem_fe68.7         ;5f5f  7a 68
    br !lab_5fef            ;5f61  9b ef 5f

lab_5f64:
    mov1 cy,mem_fe69.1      ;5f64  71 14 69
    not1 cy                 ;5f67  01
    mov1 iiccl0.3,cy        ;5f68  71 39 aa
    push ax                 ;5f6b  b1
    and a,#0x3f             ;5f6c  5d 3f
    cmp a,#0x22             ;5f6e  4d 22
    pop ax                  ;5f70  b0
    bc lab_5f75             ;5f71  8d 02
    set1 cy                 ;5f73  20
    ret                     ;5f74  af

lab_5f75:
    clr1 mem_fe68.7         ;5f75  7b 68
    push bc                 ;5f77  b3
    clr1 mem_fe68.5         ;5f78  5b 68
    bf a.6,lab_5f7f         ;5f7a  31 6f 02
    set1 mem_fe68.5         ;5f7d  5a 68

lab_5f7f:
    set1 iicc0.3            ;5f7f  71 3a a8
    bf a.7,lab_5fa9         ;5f82  31 7f 24
    bf mem_fe68.6,lab_5fa0  ;5f85  31 63 68 17
    bt iiccl0.4,lab_5f8f    ;5f89  31 46 aa 02
    br lab_5f93             ;5f8d  fa 04

lab_5f8f:
    bt iiccl0.5,lab_5fa0    ;5f8f  31 56 aa 0d

lab_5f93:
    call !sub_5ff5          ;5f93  9a f5 5f
    bt iiccl0.4,lab_5fa0    ;5f96  31 46 aa 06
    call !sub_602d          ;5f9a  9a 2d 60
    call !sub_5ff5          ;5f9d  9a f5 5f

lab_5fa0:
    set1 iicc0.1            ;5fa0  71 1a a8
    push bc                 ;5fa3  b3
    mov b,#0x01             ;5fa4  a3 01

lab_5fa6:
    dbnz b,lab_5fa6         ;5fa6  8b fe
    pop bc                  ;5fa8  b2

lab_5fa9:
    and a,#0x3f             ;5fa9  5d 3f
    bz lab_5feb             ;5fab  ad 3e
    mov b,a                 ;5fad  73

lab_5fae:
    bt mem_fe61.7,lab_5feb  ;5fae  fc 61 3a     Branch if INTP2 occurred
    mov a,[hl]              ;5fb1  87
    mov iic0,a              ;5fb2  f2 1f
    incw hl                 ;5fb4  86
    bf mem_fe69.2,lab_5fbc  ;5fb5  31 23 69 03
    clr1 mem_fe69.2         ;5fb9  2b 69
    set1 cy                 ;5fbb  20

lab_5fbc:
    bc lab_5fc0             ;5fbc  8d 02
    set1 mem_fe68.7         ;5fbe  7a 68

lab_5fc0:
    mov c,#0x50             ;5fc0  a2 50

lab_5fc2:
    bt if0h.6,lab_5fca      ;5fc2  31 66 e1 04  Branch if IICIF0 (INTIIC0 interrupt flag) is set
    dbnz c,lab_5fc2         ;5fc6  8a fa
    callf !sub_0879         ;5fc8  0c 79        Just returns

lab_5fca:
    clr1 if0h.6             ;5fca  71 6b e1     Clear IICIF0 (INTIIC0 interrupt flag)
    cmp a,iic0              ;5fcd  4e 1f
    bnz lab_5feb            ;5fcf  bd 1a
    mov1 cy,iics0.2         ;5fd1  71 2c a9
    dbnz b,lab_5fae         ;5fd4  8b d8
    bf mem_fe68.5,lab_5fdd  ;5fd6  31 53 68 03
    set1 iicc0.0            ;5fda  71 0a a8

lab_5fdd:
    mov1 cy,mem_fe68.5      ;5fdd  71 54 68
    mov1 mem_fe68.6,cy      ;5fe0  71 61 68
    pop bc                  ;5fe3  b2
    clr1 mem_fe69.1         ;5fe4  1b 69
    bt mem_fe68.7,lab_5ff3  ;5fe6  fc 68 0a
    clr1 cy                 ;5fe9  21
    ret                     ;5fea  af

lab_5feb:
    set1 iicc0.0            ;5feb  71 0a a8
    pop bc                  ;5fee  b2

lab_5fef:
    clr1 mem_fe69.1         ;5fef  1b 69
    set1 mem_fe68.6         ;5ff1  6a 68

lab_5ff3:
    set1 cy                 ;5ff3  20
    ret                     ;5ff4  af

sub_5ff5:
    mov iiccl0,#0b00001100  ;5ff5  13 aa 0c
    bf mem_fe69.1,lab_5fff  ;5ff8  31 13 69 03
    clr1 iiccl0.3           ;5ffc  71 3b aa

lab_5fff:
    mov iicc0,#0x0c         ;5fff  13 a8 0c
    push ax                 ;6002  b1
    clr1 iicc0.7            ;6003  71 7b a8
    clr1 shadow_p7.2        ;6006  2b d1        P72=0 (I2C SCL)
    mov a,shadow_p7         ;6008  f0 d1
    mov p7,a                ;600a  f2 07
    clr1 shadow_p7.1        ;600c  1b d1        P71=0 (I2C SDA)
    mov a,shadow_p7         ;600e  f0 d1
    mov p7,a                ;6010  f2 07
    set1 iicc0.7            ;6012  71 7a a8
    clr1 pm7.2              ;6015  71 2b 27     PM72=output (I2C SCL)
    clr1 pm7.1              ;6018  71 1b 27     PM71=output (I2C SDA)
    set1 iicc0.0            ;601b  71 0a a8
    mov c,#0x50             ;601e  a2 50

lab_6020:
    bt if0h.6,lab_6028      ;6020  31 66 e1 04  Branch if IICIF0 (INTIIC0 interrupt flag) is set
    dbnz c,lab_6020         ;6024  8a fa
    callf !sub_0879         ;6026  0c 79        Just returns

lab_6028:
    clr1 if0h.6             ;6028  71 6b e1     Clear IICIF0 (INTIIC0 interrupt flag)
    pop ax                  ;602b  b0
    ret                     ;602c  af

sub_602d:
    push ax                 ;602d  b1
    push bc                 ;602e  b3
    clr1 iicc0.7            ;602f  71 7b a8
    mov c,#0x09             ;6032  a2 09
    set1 shadow_p7.1        ;6034  1a d1        P71=1 (I2C SDA)
    set1 pm7.1              ;6036  71 1a 27     PM71=input (I2C SDA)
    clr1 shadow_p7.2        ;6039  2b d1        P72=0 (I2C SCL)
    mov a,shadow_p7         ;603b  f0 d1
    mov p7,a                ;603d  f2 07
    clr1 pm7.2              ;603f  71 2b 27     PM72=output (I2C SCL)

lab_6042:
    cmp rb0_b,#0x00         ;6042  c8 fb 00
    cmp rb0_b,#0x00         ;6045  c8 fb 00
    nop                     ;6048  00
    nop                     ;6049  00
    nop                     ;604a  00
    set1 shadow_p7.2        ;604b  2a d1        P72=1 (I2C SCL)
    set1 pm7.2              ;604d  71 2a 27     PM72=input (I2C SCL)
    push bc                 ;6050  b3
    mov b,#0x01             ;6051  a3 01

lab_6053:
    dbnz b,lab_6053         ;6053  8b fe
    pop bc                  ;6055  b2
    clr1 pm7.2              ;6056  71 2b 27     PM72=output (I2C SCL)
    dbnz c,lab_6042         ;6059  8a e7
    clr1 shadow_p7.1        ;605b  1b d1        P71=0 (I2C SDA)
    mov a,shadow_p7         ;605d  f0 d1
    mov p7,a                ;605f  f2 07
    clr1 pm7.1              ;6061  71 1b 27     PM71=output (I2C SDA)
    set1 shadow_p7.2        ;6064  2a d1        P72=1 (I2C SCL)
    set1 pm7.2              ;6066  71 2a 27     PM72=input (I2C SCL)
    push bc                 ;6069  b3
    mov b,#0x01             ;606a  a3 01

lab_606c:
    dbnz b,lab_606c         ;606c  8b fe
    pop bc                  ;606e  b2
    set1 shadow_p7.1        ;606f  1a d1        P71=1 (I2C SDA)
    set1 pm7.1              ;6071  71 1a 27     PM71=input (I2C SDA)
    clr1 cy                 ;6074  21
    pop bc                  ;6075  b2
    pop ax                  ;6076  b0
    ret                     ;6077  af

sub_6078:
;Disable I2C, set SCL and SDA pins to inputs
    clr1 mem_fe69.0         ;6078  0b 69
    clr1 iicc0.7            ;607a  71 7b a8
    set1 shadow_p7.2        ;607d  2a d1        P72=1 (I2C SCL)
    set1 pm7.2              ;607f  71 2a 27     PM72=input (I2C SCL)
    set1 shadow_p7.1        ;6082  1a d1        P71=1 (I2C SDA)
    set1 pm7.1              ;6084  71 1a 27     PM71=input (I2C SDA)
    ret                     ;6087  af

lab_6088:
    set1 mem_fe69.4         ;6088  4a 69
    br !sub_60ac            ;608a  9b ac 60

sub_608d:
    set1 mem_fe69.4         ;608d  4a 69
    bf mem_fe69.5,lab_609d  ;608f  31 53 69 0a
    bf mem_fe2d.2,lab_609d  ;6093  31 23 2d 06
    call !sub_60ac          ;6097  9a ac 60
    call !sub_6162          ;609a  9a 62 61

lab_609d:
    ret                     ;609d  af

sub_609e:
    clr1 mem_fe5d.2         ;609e  2b 5d

sub_60a0:
    clr1 mem_fe69.4         ;60a0  4b 69
    clr1 mem_fe5c.4         ;60a2  4b 5c
    mov a,#0x14             ;60a4  a1 14
    mov !mem_fb09,a         ;60a6  9e 09 fb
    call !sub_6165          ;60a9  9a 65 61

sub_60ac:
    call !sub_61e7          ;60ac  9a e7 61
    call !sub_0800_mode     ;60af  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;60b2  4d 01
    bnz lab_60d4            ;60b4  bd 1e
    ;mem_f253 = 0x01 (FM1/FM2)
    call !sub_1c32          ;60b6  9a 32 1c
    mov a,[hl+0x05]         ;60b9  ae 05
    mov x,a                 ;60bb  70
    mov a,[hl+0x01]         ;60bc  ae 01
    cmp a,#0x02             ;60be  4d 02
    mov a,!freq_idx         ;60c0  8e 56 fb
    bnz lab_60c7            ;60c3  bd 02
    clr1 cy                 ;60c5  21
    rorc a,1                ;60c6  25

lab_60c7:
    add a,x                 ;60c7  61 08
    movw hl,#mem_b3d2+1     ;60c9  16 d3 b3
    movw de,#mem_f1b9       ;60cc  14 b9 f1
    mov mem_fed4,a          ;60cf  f2 d4
    call !sub_026e          ;60d1  9a 6e 02

lab_60d4:
    btclr mem_fe5d.2,lab_60dd ;60d4  31 21 5d 05
    bt mem_fe69.4,lab_60dd  ;60d8  cc 69 02
    or a,#0x80              ;60db  6d 80

lab_60dd:
    mov mem_fed7,a          ;60dd  f2 d7
    call !sub_1c32          ;60df  9a 32 1c
    mov a,[hl+0x01]         ;60e2  ae 01
    mov b,a                 ;60e4  73
    bf mem_fe69.7,lab_60f8  ;60e5  31 73 69 0f
    mov a,[hl+0x06]         ;60e9  ae 06
    mov x,a                 ;60eb  70
    mov a,[hl+0x07]         ;60ec  ae 07

lab_60ee:
    sub a,!freq_idx         ;60ee  18 56 fb
    bnc lab_60f4            ;60f1  9d 01
    dec x                   ;60f3  50

lab_60f4:
    dbnz b,lab_60ee         ;60f4  8b f8
    br lab_6106             ;60f6  fa 0e

lab_60f8:
    mov a,[hl+0x02]         ;60f8  ae 02
    mov x,a                 ;60fa  70
    mov a,[hl+0x03]         ;60fb  ae 03

lab_60fd:
    add a,!freq_idx         ;60fd  08 56 fb
    xch a,x                 ;6100  30
    addc a,#0x00            ;6101  2d 00
    xch a,x                 ;6103  30
    dbnz b,lab_60fd         ;6104  8b f7

lab_6106:
    bf mem_fe5d.4,lab_611f  ;6106  31 43 5d 15  Branch if mem_f1e7_region & 0x07 != 0 (see sub_1c9d_region)

    ;mem_f1e7_region & 0x07 = 0
    push ax                 ;610a  b1
    call !sub_0800_mode     ;610b  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;610e  4d 01
    pop ax                  ;6110  b0
    bnz lab_611f            ;6111  bd 0c

    ;mem_f253 = 0x01 (FM1/FM2)
    push ax                 ;6113  b1
    mov a,#0x01             ;6114  a1 01
    cmp a,!freq_idx         ;6116  48 56 fb
    pop ax                  ;6119  b0
    bnz lab_611f            ;611a  bd 03
    xch a,x                 ;611c  30
    incw ax                 ;611d  80
    xch a,x                 ;611e  30

lab_611f:
    mov mem_fed6,a          ;611f  f2 d6
    mov a,x                 ;6121  60
    mov mem_fed5,a          ;6122  f2 d5
    set1 mem_fe69.1         ;6124  1a 69
    mov mem_fed4,#0xc2      ;6126  11 d4 c2
    call !sub_0800_mode     ;6129  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58

lab_612c:
    mov b,a                 ;612c  73           B = mem_f253 mode
    movw hl,#mem_f1be       ;612d  16 be f1
    mov a,[hl+b]            ;6130  ab
    mov mem_fed8,a          ;6131  f2 d8
    movw hl,#mem_f1c0       ;6133  16 c0 f1
    mov a,[hl+b]            ;6136  ab
    mov mem_fed9,a          ;6137  f2 d9
    movw hl,#mem_f1c2       ;6139  16 c2 f1
    mov a,[hl+b]            ;613c  ab
    mov mem_feda,a          ;613d  f2 da
    mov a,#0xc7             ;613f  a1 c7
    push bc                 ;6141  b3
    call !sub_5e27          ;6142  9a 27 5e
    pop bc                  ;6145  b2
    mov mem_fe22,#0x00      ;6146  11 22 00
    ret                     ;6149  af

sub_614a:
    call !sub_61a6          ;614a  9a a6 61
    bf mem_fed4.7,lab_6158  ;614d  31 73 d4 07
    mov a,#0x1e             ;6151  a1 1e
    mov !mem_fb09,a         ;6153  9e 09 fb
    set1 mem_fe5c.4         ;6156  4a 5c

lab_6158:
    mov a,!mem_fb09         ;6158  8e 09 fb
    cmp a,#0x00             ;615b  4d 00
    bnz lab_6161            ;615d  bd 02
    clr1 mem_fe5c.4         ;615f  4b 5c

lab_6161:
    ret                     ;6161  af

sub_6162:
    clr1 mem_fe69.5         ;6162  5b 69
    ret                     ;6164  af

sub_6165:
    set1 mem_fe69.5         ;6165  5a 69
    ret                     ;6167  af

sub_6168:
    mov b,#0x04             ;6168  a3 04
    mov mem_fed6,#0x00      ;616a  11 d6 00
    call !sub_61a6          ;616d  9a a6 61
    mov a,!mem_fbfc         ;6170  8e fc fb
    cmp a,!mem_fb62         ;6173  48 62 fb
    ret                     ;6176  af

sub_6177:
    bt mem_fe69.5,lab_617d  ;6177  dc 69 03
    call !sub_6165          ;617a  9a 65 61

lab_617d:
    clr1 mem_fe5b.7         ;617d  7b 5b
    movw hl,#mem_fed4       ;617f  16 d4 fe
    mov a,#0xc1             ;6182  a1 c1
    set1 mem_fe69.1         ;6184  1a 69
    mov x,#0xc3             ;6186  a0 c3
    call !sub_5d99          ;6188  9a 99 5d
    call !sub_0800_mode     ;618b  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    mov b,a                 ;618e  73           B = mem_f253 mode
    movw hl,#mem_b40e       ;618f  16 0e b4
    mov a,[hl+b]            ;6192  ab
    cmp a,mem_fed4          ;6193  4e d4
    bnc lab_61a1            ;6195  9d 0a
    movw hl,#mem_b40b       ;6197  16 0b b4
    mov a,[hl+b]            ;619a  ab
    cmp a,mem_fed4          ;619b  4e d4
    bc lab_61a1             ;619d  8d 02
    set1 mem_fe5b.7         ;619f  7a 5b

lab_61a1:
    ret                     ;61a1  af

lab_61a2:
    clr1 mem_fe69.6         ;61a2  6b 69
    br lab_61a8             ;61a4  fa 02

sub_61a6:
    set1 mem_fe69.6         ;61a6  6a 69

lab_61a8:
    movw ax,#0x0002         ;61a8  10 02 00
    call !sub_a04d          ;61ab  9a 4d a0
    cmp mem_fed4,#0x02      ;61ae  c8 d4 02
    bc lab_61b7             ;61b1  8d 04
    mov a,#0x00             ;61b3  a1 00
    br lab_61bd             ;61b5  fa 06

lab_61b7:
    call !sub_61dc          ;61b7  9a dc 61
    call !sub_61dc          ;61ba  9a dc 61

lab_61bd:
    mov !mem_fbfc,a         ;61bd  9e fc fb
    movw ax,#0x0007         ;61c0  10 07 00
    call !sub_a04d          ;61c3  9a 4d a0
    call !sub_61dc          ;61c6  9a dc 61
    mov !mem_fbfe,a         ;61c9  9e fe fb
    movw ax,#0x001c         ;61cc  10 1c 00
    call !sub_a04d          ;61cf  9a 4d a0
    call !sub_61dc          ;61d2  9a dc 61
    mov !mem_fbfd,a         ;61d5  9e fd fb
    call !sub_1d9b          ;61d8  9a 9b 1d
    ret                     ;61db  af

sub_61dc:
    mov a,mem_fed4          ;61dc  f0 d4
    rorc a,1                ;61de  25
    mov mem_fed4,a          ;61df  f2 d4
    mov a,mem_fed5          ;61e1  f0 d5
    rorc a,1                ;61e3  25
    mov mem_fed5,a          ;61e4  f2 d5
    ret                     ;61e6  af

sub_61e7:
    clr1 mem_fe69.7         ;61e7  7b 69
    call !sub_0800_mode     ;61e9  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x02             ;61ec  4d 02
    bnz lab_6209            ;61ee  bd 19
    ;mem_f253 = 0x02 (AM)
    mov a,!mem_f1e7_region  ;61f0  8e e7 f1
    and a,#0x07             ;61f3  5d 07
    mov b,a                 ;61f5  73
    movw hl,#mem_b3d9+1     ;61f6  16 da b3
    callf !table_get_word   ;61f9  4c 48        Load DE with word at position B in table [HL]
    bc lab_6209             ;61fb  8d 0c        Branch if table lookup failed
    movw ax,de              ;61fd  c4
    movw hl,ax              ;61fe  d6
    mov a,!freq_idx         ;61ff  8e 56 fb
    call !table_find_byte   ;6202  9a 0d 0b     Find A in table [HL] and load its position in B
    bnc lab_6209            ;6205  9d 02        Branch if find failed

    set1 mem_fe69.7         ;6207  7a 69

lab_6209:
    ret                     ;6209  af

lab_620a:
    movw mem_fed4,#0x07c2   ;620a  ee d4 c2 07
    movw mem_fed6,#0xb540   ;620e  ee d6 40 b5
    mov a,#0x01             ;6212  a1 01
    br !lab_612c            ;6214  9b 2c 61

eeprom_guard:
;Check if EEPROM is available for use(?)
;Returns carry set = success (available), carry clear = failed (not available)
;
;It's not clear what exactly this routine does but many routines
;call it repeatedly until it returns carry set before accessing
;the EEPROM.
;
    push ax                 ;6217  b1
    push bc                 ;6218  b3
    push de                 ;6219  b5
    push hl                 ;621a  b7
    bf mem_fe2d.0,lab_622c  ;621b  31 03 2d 0d
    call !sub_6305          ;621f  9a 05 63
    xch a,!mem_fbff         ;6222  ce ff fb     TODO mem_fbff is I2C attempt counter
    cmp a,#0x00             ;6225  4d 00
    xch a,!mem_fbff         ;6227  ce ff fb
    bz lab_6230             ;622a  ad 04

lab_622c:
    mov a,#0x02             ;622c  a1 02
    callt [0x0048]          ;622e  c9           Calls sub_09a7
    set1 cy                 ;622f  20

lab_6230:
    not1 cy                 ;6230  01
    pop hl                  ;6231  b6
    pop de                  ;6232  b4
    pop bc                  ;6233  b2
    pop ax                  ;6234  b0
    ret                     ;6235  af

lab_6236:
    clr1 cy                 ;6236  21
    ret                     ;6237  af

eeprom_read:
;Read A bytes from EEPROM address HL into [DE]
;
;HL = EEPROM address to read
;DE = buffer to receive EEPROM contents
;A = number of bytes to read
;
;Returns carry set on success, carry clear on failure
;
    call !eeprom_guard      ;6238  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_6236            ;623b  9d f9        Branch if not available

eeprom_unguarded_read:
;Read A bytes from EEPROM address HL into [DE] without eeprom_guard check
;
;HL = EEPROM address to read
;DE = buffer to receive EEPROM contents
;A = number of bytes to read
;
;Returns carry set on success, carry clear on failure
;
    push hl                 ;623d  b7
    push bc                 ;623e  b3
    push ax                 ;623f  b1
    push de                 ;6240  b5
    call !eeprom_check_range;6241  9a 64 63     Check EEPROM address HL and number of bytes A are valid
    bnc lab_628b_failed     ;6244  9d 45        Branch to clear carry, pop regs, and return if invalid

    mov a,#0x05             ;6246  a1 05        A = 5 attempts remaining
    mov !mem_fc12,a         ;6248  9e 12 fc     Store as attempt count

    movw ax,hl              ;624b  c6           HL = EEPROM start address
    movw !i2c_eeprom_addr,ax;624c  03 1a f0     Remember EEPROM start address in i2c_eeprom_addr

lab_624f_attempt:
    ;I2C Buffer Offset 1 = Address Byte
    mov a,l                 ;624f  66           A = low byte of EEPROM start address
    mov !i2c_buf+1,a        ;6250  9e dc fb     Store 24C04 Address byte

    ;24C04 Device Select Byte
    ;Bits 7-0: Device Type Identifier
    ;Bit 3: E2 (must always be 0 since M24C04's E2 pin is grounded)
    ;Bit 2: E1 (must always be 0 since M24C04's E1 pin is grounded)
    ;Bit 1: A8
    ;Bit 0: R=1, W=0

    ;I2C Buffer Offset 0 = Device Select Byte
    mov a,h                 ;6253  67           A = EEPROM address high byte
    and a,#0b00000111       ;6254  5d 07
    rol a,1                 ;6256  26           After rotation:
                            ;                   Bits 7-4: 0
                            ;                   Bit 3: E2=0 (EEPROM high byte bit 2 is always 0)
                            ;                   Bit 2: E1=0 (EEPROM high byte bit 1 is always 0)
                            ;                   Bit 1: A8 (EEPROM high byte bit 0)
                            ;                   Bit 0 = R/W=0 (write)
    or a,#0x50<<1           ;6257  6d a0        0x50 = EEPROM I2C address (bits 7-4)
    mov !i2c_buf,a          ;6259  9e db fb     Store 24C04 Device Select byte

    push ax                 ;625c  b1
    mov a,#0x82             ;625d  a1 82
    movw hl,#i2c_buf        ;625f  16 db fb
    call !sub_5f51          ;6262  9a 51 5f     TODO perform I2C write?
    pop ax                  ;6265  b0

    set1 a.0                ;6266  61 8a
    mov x,a                 ;6268  70
    mov a,!mem_fc10         ;6269  8e 10 fc
    or a,#0xc0              ;626c  6d c0
    pop hl                  ;626e  b6
    push hl                 ;626f  b7
    call !sub_5ee8          ;6270  9a e8 5e     TODO perform I2C read?
    bc lab_627b             ;6273  8d 06        Branch if failed

lab_6275_success:
;Attempt succeeded
;Set carry, pop registers, and return
    set1 cy                 ;6275  20
    ;Fall through to pop registers and return

lab_6276_pop_ret:
;Pop registers and return
    pop de                  ;6276  b4
    pop ax                  ;6277  b0
    pop bc                  ;6278  b2
    pop hl                  ;6279  b6
    ret                     ;627a  af

lab_627b:
;Attempt failed
    mov a,!mem_fc12         ;627b  8e 12 fc     A = attempt count
    sub a,#0x01             ;627e  1d 01        Decrement it
    bc lab_628b_failed      ;6280  8d 09        If no more attempts remaining:
                            ;                     Branch to clear carry, pop registers, and return
    ;More attempts remaining
    mov !mem_fc12,a         ;6282  9e 12 fc     Store updated attempt count
    movw ax,!i2c_eeprom_addr;6285  02 1a f0     AX = EEPROM start address
    movw hl,ax              ;6288  d6           HL = EEPROM start address
    br lab_624f_attempt     ;6289  fa c4        Branch to attempt again

lab_628b_failed:
;Clear carry, pop registers, and return
    clr1 cy                 ;628b  21
    br lab_6276_pop_ret     ;628c  fa e8        Branch to pop registers and return

eeprom_write:
;Write A bytes to EEPROM address DE from [HL]
;
;HL = pointer to buffer to write to EEPROM
;DE = EEPROM address to write
;A = number of bytes to write
;
;Returns carry set on success, carry clear on failure
;
    call !eeprom_guard      ;628e  9a 17 62     Check if EEPROM is available for use(?)
    bnc lab_6236            ;6291  9d a3        Branch if not available

eeprom_unguarded_write:
;Write A bytes to EEPROM address DE from [HL] without eeprom_guard check
;
;HL = pointer to buffer to write to EEPROM
;DE = EEPROM address to write
;A = number of bytes to write
;
;Returns carry set on success, carry clear on failure
;
    push hl                 ;6293  b7
    push bc                 ;6294  b3
    push ax                 ;6295  b1
    push de                 ;6296  b5

    ;Exchange DE and HL
    xchw ax,hl              ;6297  e6
    xchw ax,de              ;6298  e4
    xchw ax,hl              ;6299  e6

    ;Registers now contain:
    ;  HL = EEPROM address to write
    ;  DE = pointer to buffer to write to EEPROM
    ;  A = number of bytes to write

    call !eeprom_check_range;629a  9a 64 63     Check EEPROM address HL and number of bytes A are valid
    bnc lab_628b_failed     ;629d  9d ec        Branch to clear carry, pop regs, and return if invalid

    movw ax,hl              ;629f  c6           AX = EEPROM start address
    movw !i2c_eeprom_addr,ax;62a0  03 1a f0     Store EEPROM start address

    call !sub_637e          ;62a3  9a 7e 63     Unknown; EEPROM related - called only from write EEPROM

    ;Copy from [DE] buffer to i2c_tmp_buf
    movw ax,de              ;62a6  c4
    movw hl,ax              ;62a7  d6           HL = source address (pointer to buffer to write to EEPROM)
    movw de,#i2c_tmp_buf    ;62a8  14 00 fc     DE = destination address
    mov a,!mem_fc10         ;62ab  8e 10 fc     A = number of bytes to copy
    callf !copy             ;62ae  4c 9e        Copy A bytes from [HL] to [DE]

    mov a,!mem_fc11         ;62b0  8e 11 fc
    mov b,a                 ;62b3  73
    movw ax,de              ;62b4  c4
    xch a,x                 ;62b5  30
    sub a,b                 ;62b6  61 1b
    xch a,x                 ;62b8  30
    subc a,#0x00            ;62b9  3d 00
    movw !mem_f01e,ax       ;62bb  03 1e f0
    mov a,!mem_fc10         ;62be  8e 10 fc
    sub a,b                 ;62c1  61 1b
    mov !mem_fc10,a         ;62c3  9e 10 fc

lab_62c6_attempt:
    ;Copy from i2c_tmp_buf to i2c_buf+2
    movw hl,#i2c_tmp_buf    ;62c6  16 00 fc     HL = source address
    movw de,#i2c_buf+2      ;62c9  14 dd fb     DE = destination address
    mov a,!mem_fc10         ;62cc  8e 10 fc     A = number of bytes to copy
    callf !copy             ;62cf  4c 9e        Copy A bytes from [HL] to [DE]

    ;24C04 Device Select Byte
    ;Bits 7-0: Device Type Identifier
    ;Bit 3: E2 (must always be 0 since M24C04's E2 pin is grounded)
    ;Bit 2: E1 (must always be 0 since M24C04's E1 pin is grounded)
    ;Bit 1: A8
    ;Bit 0: R=1, W=0

    ;I2C Buffer Offset 0 = Device Select Byte
    movw ax,!i2c_eeprom_addr;62d1  02 1a f0     A = EEPROM address high
                            ;                   X = EEPROM address low
    and a,#0b00000111       ;62d4  5d 07
    rol a,1                 ;62d6  26           After rotation:
                            ;                     Bits 7-4: 0
                            ;                     Bit 3: E2=0 (EEPROM high byte bit 2 is always 0)
                            ;                     Bit 2: E1=0 (EEPROM high byte bit 1 is always 0)
                            ;                     Bit 1: A8 (EEPROM high byte bit 0)
                            ;                     Bit 0 = R/W=0 (write)
    or a,#0x50<<1           ;62d7  6d a0        0x50 = EEPROM I2C address
    mov !i2c_buf,a          ;62d9  9e db fb     Store 24C04 Device Select byte

    ;I2C Buffer Offset 1 = Address Byte
    mov a,x                 ;62dc  60           A = EEPROM address low
    mov !i2c_buf+1,a        ;62dd  9e dc fb     Store 24C04 Device Select byte

    movw hl,#i2c_buf        ;62e0  16 db fb
    mov a,!mem_fc10         ;62e3  8e 10 fc
    add a,#0xc2             ;62e6  0d c2
    call !sub_5f51          ;62e8  9a 51 5f     TODO perform I2C write?
    bc lab_628b_failed      ;62eb  8d 9e        Failed; branch to clear carry, pop registers, and return

    ;TODO I2C write? succeeded

    mov a,#0x0b             ;62ed  a1 0b
    mov !mem_fb06,a         ;62ef  9e 06 fb
    mov a,#0x02             ;62f2  a1 02
    callf !sub_09d7         ;62f4  1c d7

    mov a,!mem_fbff         ;62f6  8e ff fb     A = I2C attempts remaining
    cmp a,#0x00             ;62f9  4d 00        Is it zero?
    bnz lab_6302_success    ;62fb  bd 05          No: branch to success

    ;I2C attempt count is zero

    mov a,#0x03             ;62fd  a1 03        A = 3 attempts remaining
    mov !mem_fbff,a         ;62ff  9e ff fb     Store as attempt count

lab_6302_success:
    br !lab_6275_success    ;6302  9b 75 62     Branch to set carry, pop registers, and return

sub_6305:
    bt mem_fe2d.0,lab_630d  ;6305  8c 2d 05
    mov a,#0x02             ;6308  a1 02
    callf !sub_09d7         ;630a  1c d7
    ret                     ;630c  af

lab_630d:
    mov a,!mem_fbff         ;630d  8e ff fb     A = attempt count
    cmp a,#0x00             ;6310  4d 00        Is it zero?
    bz lab_634a             ;6312  ad 36          Yes: branch to no more attempts

    mov a,!mem_fb06         ;6314  8e 06 fb
    cmp a,#0x00             ;6317  4d 00
    bnz lab_6363            ;6319  bd 48
    movw ax,!i2c_eeprom_addr;631b  02 1a f0     AX = EEPROM address
    movw hl,ax              ;631e  d6           HL = EEPROM address
    movw de,#i2c_buf        ;631f  14 db fb
    mov a,!mem_fc10         ;6322  8e 10 fc

    call !eeprom_unguarded_read ;6325  9a 3d 62     Read A bytes from EEPROM address HL into [DE]
                                ;                     without eeprom_guard check
    bnc lab_6334                ;6328  9d 0a        Branch if EEPROM read failed

    ;EEPROM read succeeded

    movw hl,#i2c_tmp_buf    ;632a  16 00 fc     HL = pointer to first buffer
    mov a,!mem_fc10         ;632d  8e 10 fc
    callf !compare          ;6330  4c ca        Compare A bytes between [HL] to [DE]
    bz lab_6345             ;6332  ad 11        Branch if buffers are equal

lab_6334:
;Attempt failed
    mov a,!mem_fbff         ;6334  8e ff fb     A = attempt count
    dec a                   ;6337  51           Decrement it
    mov !mem_fbff,a         ;6338  9e ff fb     Store decremented attempt count
    bz lab_6343             ;633b  ad 06        Branch if no more attempts remaining

    ;More attempts are remaining

    push hl                 ;633d  b7
    push bc                 ;633e  b3
    push ax                 ;633f  b1
    push de                 ;6340  b5
    br lab_62c6_attempt     ;6341  fa 83        Branch to attempt again

lab_6343:
    br lab_6345             ;6343  fa 00        XXX redundant branch; lab_6345 is the next line

lab_6345:
    mov a,#0x00             ;6345  a1 00        A = 0 attempts
    mov !mem_fbff,a         ;6347  9e ff fb     Store as attempts remaining

lab_634a:
    mov a,#0x02             ;634a  a1 02
    callf !sub_09d3         ;634c  1c d3
    mov a,!mem_fc11         ;634e  8e 11 fc
    cmp a,#0x00             ;6351  4d 00
    bz lab_6363             ;6353  ad 0e
    movw ax,!mem_f01c       ;6355  02 1c f0
    movw de,ax              ;6358  d4
    movw ax,!mem_f01e       ;6359  02 1e f0
    movw hl,ax              ;635c  d6
    mov a,!mem_fc11         ;635d  8e 11 fc
    call !eeprom_unguarded_write ;6360  9a 93 62     Write A bytes to EEPROM address DE from [HL]
                                 ;                     without eeprom_guard check

lab_6363:
    ret                     ;6363  af

eeprom_check_range:
;Check EEPROM address HL and number of bytes A are valid
;
;Checks:
; - Number of bytes A is between 1-16.
; - Addresses are all between 0x0000-0x01FF (512 byte 24C04)
;
;Call with:
; HL = start address in EEPROM
;  A = number of bytes
;
;Returns:
; AX = EEPROM "stop" address (last address in range + 1)
; Carry set on success, carry clear on failure
;
;Preserves HL, DE, BC.
;
;See also sub_2cdf for another EEPROM range check.
;
    cmp a,#0                ;6364  4d 00
    bz lab_637d             ;6366  ad 15      Branch if = 0 (failure)
    cmp a,#16+1             ;6368  4d 11
    bnc lab_637d            ;636a  9d 11      Branch if >= 16 (failure)
    mov !mem_fc10,a         ;636c  9e 10 fc

    ;Subtract 0 from EEPROM address in HL
    xchw ax,hl              ;636f  e6         Swap so that:
                            ;                   AX=EEPROM address
                            ;                    H=undefined, L=number of bytes
    subw ax,#0              ;6370  da 00 00   EEPROM address = EEPROM address - 0
    xchw ax,hl              ;6373  e6         Swap again so that:
                            ;                    A=number of bytes, X=undefined
                            ;                   HL=EEPROM address

    ;AX = HL + A
    add a,l                 ;6374  61 0e      A = A + L
    mov x,a                 ;6376  70         X = A
    mov a,h                 ;6377  67         A = H
    addc a,#0x00            ;6378  2d 00      A = A + CY

    cmpw ax,#512+1          ;637a  ea 01 02   512 = number of bytes in EEPROM

lab_637d:
    ret                     ;637d  af

sub_637e:
;Unknown; EEPROM related
;Called only from Write EEPROM
    push ax                 ;637e  b1
    mov a,!mem_fc10         ;637f  8e 10 fc
    mov b,a                 ;6382  73
    pop ax                  ;6383  b0
    movw !mem_f01c,ax       ;6384  03 1c f0
    mov a,x                 ;6387  60
    and a,#0x0f             ;6388  5d 0f
    add a,b                 ;638a  61 0b
    bf a.4,lab_63a6         ;638c  31 4f 17
    and a,#0x0f             ;638f  5d 0f
    sub b,a                 ;6391  61 13
    push ax                 ;6393  b1
    movw ax,!mem_f01c       ;6394  02 1c f0
    xch a,x                 ;6397  30
    add a,b                 ;6398  61 0b
    xch a,x                 ;639a  30
    addc a,#0x00            ;639b  2d 00
    addw ax,#0x0000         ;639d  ca 00 00
    movw !mem_f01c,ax       ;63a0  03 1c f0
    pop ax                  ;63a3  b0
    br lab_63a8             ;63a4  fa 02

lab_63a6:
    mov a,#0x00             ;63a6  a1 00

lab_63a8:
    mov !mem_fc11,a         ;63a8  9e 11 fc
    ret                     ;63ab  af

m:
    .byte 0x01              ;63ac  01          DATA 0x01        1 byte follows:
    .ascii "M"

u1:
    .byte 0x02              ;63ae  02          DATA 0x02        2 bytes follow:
    .ascii "U1"

u2:
    .byte 0x02              ;63b1  02          DATA 0x02        2 bytes follow:
    .ascii "U2"

on:
    .byte 0x02              ;63b4  02          DATA 0x02        2 bytes follow:
    .ascii "ON"

off:
    .byte 0x03              ;63b7  03          DATA 0x03        3 bytes follow:
    .ascii "OFF"

no:
    .byte 0x02              ;63bb  02          DATA 0x02        2 bytes follow:
    .ascii "NO"

e__:
    .byte 0x0b              ;63be  0b          DATA 0x0b        11 bytes follow:
    .ascii "E           "

psc:
    .byte 0x03              ;63cb  03          DATA 0x03        3 bytes follow:
    .ascii "PSC"

pscan:
    .byte 0x05              ;63cf  05          DATA 0x05        5 bytes follow:
    .ascii "PSCAN"

preset_scan:
    .byte 0x0b              ;63d5  0b          DATA 0x0b        11 bytes follow:
    .ascii "PRESET SCAN"

pset:
    .byte 0x04              ;63e1  04          DATA 0x04        4 bytes follow:
    .ascii "PSET"

scan:
    .byte 0x04              ;63e6  04          DATA 0x04        4 bytes follow:
    .ascii "SCAN"

seek_plus:
    .byte 0x06              ;63eb  06          DATA 0x06        6 bytes follow:
    .ascii "SEEK +"

seek_minus:
    .byte 0x06              ;63f2  06          DATA 0x06        6 bytes follow:
    .ascii "SEEK -"

vol:
    .byte 0x0d              ;63f9  0d          DATA 0x0d        13 bytes follow:
    .ascii "VOL          "

fade:
    .byte 0x04              ;6407  04          DATA 0x04        4 bytes follow:
    .ascii "FADE"

fadefront:
    .byte 0x0b              ;640c  0b          DATA 0x0b        11 bytes follow:
    .ascii "FADEFRONT  "

fadecenter:
    .byte 0x0b              ;6418  0b          DATA 0x0b        11 bytes follow:
    .ascii "FADECENTER "

faderear:
    .byte 0x0b              ;6424  0b          DATA 0x0b        11 bytes follow:
    .ascii "FADEREAR   "

bal:
    .byte 0x04              ;6430  04          DATA 0x04        4 bytes follow:
    .ascii "BAL "

bal_left:
    .byte 0x0b              ;6435  0b          DATA 0x0b        11 bytes follow:
    .ascii "BAL LEFT   "

bal_center:
    .byte 0x0b              ;6441  0b          DATA 0x0b        11 bytes follow:
    .ascii "BAL CENTER "

bal_right:
    .byte 0x0b              ;644d  0b          DATA 0x0b        11 bytes follow:
    .ascii "BAL RIGHT  "

bass:
    .byte 0x0b              ;6459  0b          DATA 0x0b        11 bytes follow:
    .ascii "BASS       "

mid:
    .byte 0x0b              ;6465  0b          DATA 0x0b        11 bytes follow:
    .ascii "MID        "

treb:
    .byte 0x0b              ;6471  0b          DATA 0x0b        11 bytes follow:
    .ascii "TREB       "

treb_out16:
    .byte 0x0b              ;647d  0b          DATA 0x0b        11 bytes follow:
    .ascii "TREB OUT16 "

max:
    .byte 0x07              ;6489  07          DATA 0x07        7 bytes follow:
    .ascii "  MAX  "

min:
    .byte 0x07              ;6491  07          DATA 0x07        7 bytes follow:
    .ascii "  MIN  "

set_onvol:
    .byte 0x0b              ;6499  0b          DATA 0x0b        11 bytes follow:
    .ascii "SET ONVOL  "

set_cd_mix:
    .byte 0x0b              ;64a5  0b          DATA 0x0b        11 bytes follow:
    .ascii "SET CD MIX "

tape_skip:
    .byte 0x0b              ;64b1  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE SKIP  "

rad_de2:
    .byte 0x0b              ;64bd  0b          DATA 0x0b        11 bytes follow:
    .ascii "RAD   DE2  "

monsoon:
    .byte 0x0b              ;64c9  0b          DATA 0x0b        11 bytes follow:
    .ascii "    MONSOON"

vers_a99cznn:
    .byte 0x0b              ;64d5  0b          DATA 0x0b        11 bytes follow:
    .ascii "VersA99CZnn"

fern_on:
    .byte 0x0b              ;64e1  0b          DATA 0x0b        11 bytes follow:
    .ascii "FERN   ON  "

fern_off:
    .byte 0x0b              ;64ed  0b          DATA 0x0b        11 bytes follow:
    .ascii "FERN   OFF "

safe:
    .byte 0x0b              ;64f9  0b          DATA 0x0b        11 bytes follow:
    .ascii "     SAFE  "

onethousand:
    .byte 0x0b              ;6505  0b          DATA 0x0b        11 bytes follow:
    .ascii "     1000  "

blank:
    .byte 0x0b              ;6511  0b          DATA 0x0b        11 bytes follow:
    .ascii "           "

flat:
    .byte 0x09              ;651d  09          DATA 0x09        9 bytes follow:
    .ascii "FLAT     "

select_eq:
    .byte 0x0d              ;6527  0d          DATA 0x0d        13 bytes follow:
    .ascii "SELECT EQ #  "

;Unknown table used with sub_67c4
;XXX appears unused since sub_67c4 appears unused
mem_6535:
    .byte 0x00, 0xdf
    .byte 0x00, 0xe1
    .byte 0x00, 0xe3
    .byte 0x00, 0xe5

    .byte 0x01, 0xdf
    .byte 0x01, 0xe1
    .byte 0x01, 0xe3
    .byte 0x01, 0xe5

    .byte 0x02, 0xdf
    .byte 0x02, 0xe1
    .byte 0x02, 0xe3
    .byte 0x02, 0xe5

    .byte 0x03, 0xd9
    .byte 0x03, 0xd9
    .byte 0x03, 0xda
    .byte 0x03, 0xdb
    .byte 0x03, 0xdc
    .byte 0x03, 0xdd
    .byte 0x03, 0xdd

    .byte 0x04, 0xdf
    .byte 0x04, 0xe1
    .byte 0x04, 0xe3
    .byte 0x04, 0xe5

    .byte 0x05, 0xdf
    .byte 0x05, 0xe1
    .byte 0x05, 0xe3
    .byte 0x05, 0xe5

    .byte 0x06, 0xdf
    .byte 0x06, 0xe1
    .byte 0x06, 0xe3
    .byte 0x06, 0xe5

    .byte 0x00, 0x01
    .byte 0x01, 0x02
    .byte 0x02, 0x03
    .byte 0x03, 0x03
    .byte 0x04, 0x04
    .byte 0x05, 0x05
    .byte 0x06, 0xd7
    .byte 0xd6, 0xd5
    .byte 0xd4, 0xd3
    .byte 0xd2, 0xd1

normal:
    .byte 0x06              ;6587  06          DATA 0x06        6 bytes follow:
    .ascii "NORMAL"

loud:
    .byte 0x04              ;658e  04          DATA 0x04        4 bytes follow:
    .ascii "LOUD"

diag:
    .byte 0x07              ;6593  07          DATA 0x07        7 bytes follow:
    .ascii " DIAG  "

none_found:
    .byte 0x0a              ;659b  0a          DATA 0x0a        10 bytes follow:
    .ascii "NONE FOUND"

tape:
    .byte 0x04              ;65a6  04          DATA 0x04        4 bytes follow:
    .ascii "TAPE"

tape_play:
    .byte 0x0b              ;65ab  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE PLAY  "

tape_ff:
    .byte 0x0b              ;65b7  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE  FF   "

tape_rew:
    .byte 0x0b              ;65c3  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE  REW  "

tapemss_ff:
    .byte 0x0b              ;65cf  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPEMSS FF "

tapemss_rew:
    .byte 0x0b              ;65db  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPEMSS REW"

skip_blank:
    .byte 0x0b              ;65e7  0b          DATA 0x0b        11 bytes follow:
    .ascii "SKIP BLANK "

tape_scan:
    .byte 0x0b              ;65f3  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE SCAN  "

tape_metal:
    .byte 0x0b              ;65ff  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE METAL "

tape_load:
    .byte 0x0b              ;660b  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE LOAD  "

no_tape:
    .byte 0x0b              ;6617  0b          DATA 0x0b        11 bytes follow:
    .ascii "    NO TAPE"

tape_error:
    .byte 0x0b              ;6623  0b          DATA 0x0b        11 bytes follow:
    .ascii "TAPE ERROR "

ff:
    .byte 0x07              ;662f  07          DATA 0x07        7 bytes follow:
    .ascii "  FF   "

right_arrow:
    .byte 0x01              ;6637  01          DATA 0x01        1 byte follows:
    .ascii ">"

rew:
    .byte 0x07              ;6639  07          DATA 0x07        7 bytes follow:
    .ascii "  REW  "

left_arrow:
    .byte 0x01              ;6641  01          DATA 0x01        1 byte follows:
    .ascii "<"

cut_tape:
    .byte 0x08              ;6643  08          DATA 0x08        8 bytes follow:
    .ascii "CUT TAPE"

disabled:
    .byte 0x08              ;664c  08          DATA 0x08        8 bytes follow:
    .ascii "DISABLED"

comm_error:
    .byte 0x0a              ;6655  0a          DATA 0x0a        10 bytes follow:
    .ascii "Comm Error"

broken_tape:
    .byte 0x0b              ;6660  0b          DATA 0x0b        11 bytes follow:
    .ascii "Broken Tape"

tight_tape:
    .byte 0x0a              ;666c  0a          DATA 0x0a        10 bytes follow:
    .ascii "Tight Tape"

wrapped_tape:
    .byte 0x0c              ;6677  0c          DATA 0x0c        12 bytes follow:
    .ascii "Wrapped Tape"

cd__:
    .byte 0x0b              ;6684  0b          DATA 0x0b        11 bytes follow:
    .ascii "CD         "

cd_no_cd:
    .byte 0x0b              ;6690  0b          DATA 0x0b        11 bytes follow:
    .ascii "CD   NO CD "

cd_tr:
    .byte 0x0b              ;669c  0b          DATA 0x0b        11 bytes follow:
    .ascii "CD   TR    "

playcd_tr:
    .byte 0x0b              ;66a8  0b          DATA 0x0b        11 bytes follow:
    .ascii "PLAYCD TR  "

cue:
    .byte 0x0b              ;66b4  0b          DATA 0x0b        11 bytes follow:
    .ascii "CUE        "

rev:
    .byte 0x0b              ;66c0  0b          DATA 0x0b        11 bytes follow:
    .ascii "REV        "

scan_tr:
    .byte 0x0b              ;66cc  0b          DATA 0x0b        11 bytes follow:
    .ascii "SCANCD TR  "

track:
    .byte 0x06              ;66d8  06          DATA 0x06        6 bytes follow:
    .ascii "TRACK "

rdm:
    .byte 0x03              ;66df  03          DATA 0x03        3 bytes follow:
    .ascii "RDM"

random_one:
    .byte 0x0a              ;66e3  0a          DATA 0x0a        10 bytes follow:
    .ascii "RANDOM ONE"

random_all:
    .byte 0x0a              ;66ee  0a          DATA 0x0a        10 bytes follow:
    .ascii "RANDOM ALL"

rev2:
    .byte 0x03              ;66f9  03          DATA 0x03        3 bytes follow:
    .ascii "REV"

fwd:
    .byte 0x03              ;66fd  03          DATA 0x03        3 bytes follow:
    .ascii "FWD"

et:
    .byte 0x02              ;6701  02          DATA 0x02        2 bytes follow:
    .ascii "ET"

eltm:
    .byte 0x04              ;6704  04          DATA 0x04        4 bytes follow:
    .ascii "ELTM"

track_scan:
    .byte 0x0d              ;6709  0d          DATA 0x0d        13 bytes follow:
    .ascii "TRACK SCAN   "

disc_scan:
    .byte 0x0d              ;6717  0d          DATA 0x0d        13 bytes follow:
    .ascii "DISC SCAN    "

check_cd:
    .byte 0x08              ;6725  08          DATA 0x08        8 bytes follow:
    .ascii "Check CD"

player_error:
    .byte 0x0c              ;672e  0c          DATA 0x0c        12 bytes follow:
    .ascii "Player Error"

focus:
    .byte 0x05              ;673b  05          DATA 0x05        5 bytes follow:
    .ascii "FOCUS"

cd_door_open:
    .byte 0x0c              ;6741  0c          DATA 0x0c        12 bytes follow:
    .ascii "CD Door Open"

changer_error:
    .byte 0x0c              ;674e  0c          DATA 0x0c        12 bytes follow:
    .ascii "Changer Error"

magazine:
    .byte 0x08              ;675c  08          DATA 0x08        8 bytes follow:
    .ascii "MAGAZINE"

no_magazin:
    .byte 0x0b              ;6765  0b          DATA 0x0b        11 bytes follow:
    .ascii "NO  MAGAZIN"

no_changer:
    .byte 0x0b              ;6771  0b          DATA 0x0b        11 bytes follow:
    .ascii "NO  CHANGER"

no_disc:
    .byte 0x0b              ;677d  0b          DATA 0x0b        11 bytes follow:
    .ascii "    NO DISC"

cd_cd_rom:
    .byte 0x0b              ;6789  0b          DATA 0x0b        11 bytes follow:
    .ascii "CD  CD ROM "

cd_cd_err:
    .byte 0x0b              ;6795  0b          DATA 0x0b        11 bytes follow:
    .ascii "CD  CD ERR "

cd_error:
    .byte 0x0b              ;67a1  0b          DATA 0x0b        11 bytes follow:
    .ascii " CD  ERROR "

chk_magazin:
    .byte 0x0b              ;67ad  0b          DATA 0x0b        11 bytes follow:
    .ascii "CHK MAGAZIN"

lock:
    .byte 0x04              ;67b9  04          DATA 0x04        4 bytes follow:
    .ascii "LOCK"

sub_67be:
;Sets tmp_msg_idx = 0xff (may result in "DIAG" being printed)
    mov a,#0xff             ;67be  a1 ff
    mov !tmp_msg_idx,a      ;67c0  9e a6 f1
    ret                     ;67c3  af           f Writes " DIAG  "

;XXX appears unused
sub_67c4:
    rolc a,1                ;67c4  27
    mov b,a                 ;67c5  73
    movw hl,#mem_6535       ;67c6  16 35 65
    mov a,[hl+b]            ;67c9  ab
    push ax                 ;67ca  b1
    incw hl                 ;67cb  86
    mov a,[hl+b]            ;67cc  ab
    mov b,a                 ;67cd  73
    pop ax                  ;67ce  b0
    xch a,b                 ;67cf  33
    movw hl,#upd_disp+9     ;67d0  16 a3 f1
    mov [hl+b],a            ;67d3  bb
    mov a,#0xff             ;67d4  a1 ff
    mov b,#0xff             ;67d6  a3 ff
    ret                     ;67d8  af

sub_67d9:
    movw hl,#mem_f259_bass  ;67d9  16 59 f2     HL = address of BASS
    mov a,mem_fe30          ;67dc  f0 30
    inc a                   ;67de  41
    cmp mem_fe30,#0x01      ;67df  c8 30 01
    bnz lab_67f4            ;67e2  bd 10
    push ax                 ;67e4  b1
    push bc                 ;67e5  b3
    call !sub_0800_mode     ;67e6  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;67e9  4d 01
    bnz lab_67f2            ;67eb  bd 05
    ;mem_f253 = 0x01 (FM1/FM2)
    pop bc                  ;67ed  b2
    pop ax                  ;67ee  b0
    dec a                   ;67ef  51
    br lab_67f4             ;67f0  fa 02

lab_67f2:
    pop bc                  ;67f2  b2
    pop ax                  ;67f3  b0

lab_67f4:
    mov x,#0x03             ;67f4  a0 03
    mulu x                  ;67f6  31 88        AX = A * X
    mov a,x                 ;67f8  60
    add a,b                 ;67f9  61 0b
    mov b,a                 ;67fb  73
    mov a,[hl+b]            ;67fc  ab
    ret                     ;67fd  af

sub_67fe:
;XXX appears unused
;XXX writes past end of upd_disp buffer
    mov b,#0x0d             ;67fe  a3 0d        B = 13 bytes to fill
    movw hl,#upd_disp+4     ;6800  16 9e f1     HL = pointer to display buffer + 4
    mov a,#0x20             ;6803  a1 20        A = fill value (space)
    call !fill_with_a       ;6805  9a dc 0c     Fill B bytes in buffer [HL] with A
    ret                     ;6808  af

sub_6809:
;Convert lower nibble of A to hexadecimal digit in ASCII
;
;XXX redundant:
;  1. This routine is used but there are many identical copies of it
;     throughout the firmware that appear unused (search for "sub_6809").
;  2. A more efficient version of this routine is found at sub_0b90.
;
    cmp a,#0x0a             ;6809  4d 0a
lab_680b:
    bc lab_6813_lt_0x0a     ;680b  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;680d  1d 0a      A = A - 0x0A
    add a,#'A               ;680f  0d 41      Convert to ASCII 'A'-'F'
    br lab_6815_ret         ;6811  fa 02
lab_6813_lt_0x0a:
    add a,#'0               ;6813  0d 30      Convert to ASCII '0'-'9'
lab_6815_ret:
    ret                     ;6815  af

;XXX writes before start of upd_disp buffer; may not be used
sub_6816:
    movw hl,#upd_disp       ;6816  16 9a f1
    mov a,#'R               ;6819  a1 52
    mov [hl+b],a            ;681b  bb         Write "R" at upd_disp
    dec b                   ;681c  53
    mov a,#'T               ;681d  a1 54
    mov [hl+b],a            ;681f  bb         Write "R" at upd_disp-1  XXX
    ret                     ;6820  af

;XXX appears unused
sub_6821:
    cmp a,#10               ;6821  4d 0a
    bnc lab_6826_ret        ;6823  9d 01      Branch if >= 10
    dec b                   ;6825  53
lab_6826_ret:
    ret                     ;6826  af

;XXX fills past end of upd_disp buffer; may not be used
sub_6827:
    movw hl,#upd_disp+4     ;6827  16 9e f1     HL = address to fill
    mov b,#0x0b             ;682a  a3 0b        B = 11 bytes to fill
    mov a,#0x20             ;682c  a1 20        A = space character
    call !fill_with_a       ;682e  9a dc 0c     Fill B bytes in buffer [HL] with A
    ret                     ;6831  af

lab_6832:
    movw de,#mem_b56b       ;6832  14 6b b5
    mov a,mem_fe30          ;6835  f0 30
    mov b,a                 ;6837  73
    movw hl,#mem_af75_patterns ;6838  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;683b  ab
    call !sub_5c64          ;683c  9a 64 5c
    bz sub_6853             ;683f  ad 12
    cmp a,#0xff             ;6841  4d ff
    bz sub_6853             ;6843  ad 0e
    movw hl,#mem_b5c0+1     ;6845  16 c1 b5
    callf !table_get_word   ;6848  4c 48        Load DE with word at position B in table [HL]
    bc sub_6853             ;684a  8d 07        Branch if table lookup failed
    movw ax,#sub_6853       ;684c  10 53 68
    push ax                 ;684f  b1
    movw ax,de              ;6850  c4
    br ax                   ;6851  31 98

sub_6853:
    call !upd_clear_all     ;6853  9a c9 6f     Clear upd_disp and upd_pict buffers

lab_6856:
    call !sub_6f78          ;6856  9a 78 6f
    push de                 ;6859  b5
    clr1 mem_fe6a.3         ;685a  3b 6a
    mov mem_fed4,a          ;685c  f2 d4
    bf a.7,lab_6863         ;685e  31 7f 02
    set1 mem_fe6a.3         ;6861  3a 6a

lab_6863:
    xch a,b                 ;6863  33
    mov mem_fed5,a          ;6864  f2 d5
    xch a,b                 ;6866  33
    and a,#0xc0             ;6867  5d c0
    bz lab_68e0             ;6869  ad 75
    xor a,#0x80             ;686b  7d 80
    bz lab_68da             ;686d  ad 6b
    push ax                 ;686f  b1
    movw ax,#lab_6877       ;6870  10 77 68
    push ax                 ;6873  b1
    movw ax,hl              ;6874  c6
    br ax                   ;6875  31 98

lab_6877:
    pop ax                  ;6877  b0
    xor a,#0x40             ;6878  7d 40
    bz lab_68c1             ;687a  ad 45
    xor a,#0x80             ;687c  7d 80
    bz lab_6882             ;687e  ad 02
    br lab_68e0             ;6880  fa 5e

lab_6882:
    mov a,!mem_fc30         ;6882  8e 30 fc     Counts how long key is held down?
    cmp a,#0x00             ;6885  4d 00
    bnz lab_6890            ;6887  bd 07
    mov a,!mem_fb2d         ;6889  8e 2d fb
    cmp a,#0x00             ;688c  4d 00
    bz lab_6896             ;688e  ad 06

lab_6890:
    call !sub_6fb9          ;6890  9a b9 6f
    mov b,a                 ;6893  73
    br lab_68e4             ;6894  fa 4e

lab_6896:
    add mem_fed4,#0x10      ;6896  88 d4 10
    call !sub_6fa9          ;6899  9a a9 6f

lab_689c:
    call !sub_6fb9          ;689c  9a b9 6f
    call !sub_6934          ;689f  9a 34 69
    bz lab_68cf             ;68a2  ad 2b
    mov a,mem_fed4          ;68a4  f0 d4
    and a,#0x30             ;68a6  5d 30
    cmp a,#0x30             ;68a8  4d 30
    bnz lab_68e4            ;68aa  bd 38
    xch a,b                 ;68ac  33
    mov mem_fed4,a          ;68ad  f2 d4
    xch a,b                 ;68af  33

lab_68b0:
    call !sub_6fa9          ;68b0  9a a9 6f
    pop hl                  ;68b3  b6
    call !sub_6f78          ;68b4  9a 78 6f
    push de                 ;68b7  b5
    movw ax,#lab_68bf       ;68b8  10 bf 68
    push ax                 ;68bb  b1
    movw ax,hl              ;68bc  c6
    br ax                   ;68bd  31 98

lab_68bf:
    br lab_689c             ;68bf  fa db

lab_68c1:
    and mem_fed4,#0x7f      ;68c1  d8 d4 7f
    call !sub_6fa9          ;68c4  9a a9 6f
    call !sub_6fb9          ;68c7  9a b9 6f
    call !sub_6934          ;68ca  9a 34 69
    bnz lab_68e4            ;68cd  bd 15

lab_68cf:
    xch a,b                 ;68cf  33
    and a,#0x0f             ;68d0  5d 0f
    mov mem_fed4,a          ;68d2  f2 d4
    xch a,b                 ;68d4  33
    call !sub_6fa9          ;68d5  9a a9 6f
    br lab_68e4             ;68d8  fa 0a

lab_68da:
    and mem_fed4,#0x7f      ;68da  d8 d4 7f
    call !sub_6fa9          ;68dd  9a a9 6f

lab_68e0:
    xch a,b                 ;68e0  33
    mov a,mem_fed4          ;68e1  f0 d4
    xch a,b                 ;68e3  33

lab_68e4:
    xch a,b                 ;68e4  33
    and a,#0x0f             ;68e5  5d 0f
    xch a,b                 ;68e7  33
    pop hl                  ;68e8  b6
    callf !table_get_word   ;68e9  4c 48        Load DE with word at position B in table [HL]
    bc lab_6933             ;68eb  8d 46        Branch if table lookup failed
    movw ax,#lab_68f4       ;68ed  10 f4 68
    push ax                 ;68f0  b1
    movw ax,de              ;68f1  c4
    br ax                   ;68f2  31 98

lab_68f4:
    call !sub_7030          ;68f4  9a 30 70
    bf mem_fe2d.0,lab_6933  ;68f7  31 03 2d 38
    bt mem_fe65.5,lab_6915  ;68fb  dc 65 17
    bt mem_fe2c.3,lab_6912  ;68fe  bc 2c 11
    set1 mem_fe6a.2         ;6901  2a 6a
    bf shadow_p4.6,lab_6923 ;6903  31 63 ce 1c  Branch if uPD16432B /LCDOFF = 0 (LCD is off)

    clr1 shadow_p4.6        ;6907  6b ce        uPD16432B /LCDOFF = 0 (turns LCD off)
    clr1 pm4.6              ;6909  71 6b 24     PM46 = output
    mov a,shadow_p4         ;690c  f0 ce
    mov p4,a                ;690e  f2 04

    br lab_6923             ;6910  fa 11

lab_6912:
    bt mem_fe62.1,lab_6933  ;6912  9c 62 1e

lab_6915:
    clr1 mem_fe6a.2         ;6915  2b 6a
    bt shadow_p4.6,lab_6923 ;6917  ec ce 09     Branch if uPD16432B /LCDOFF = 1 (LCD is on)

    set1 shadow_p4.6        ;691a  6a ce        uPD16432B /LCDOFF = 1 (turns LCD on)
    clr1 pm4.6              ;691c  71 6b 24     PM46 = output
    mov a,shadow_p4         ;691f  f0 ce
    mov p4,a                ;6921  f2 04

lab_6923:
    bf mem_fe65.2,lab_692e  ;6923  31 23 65 07
    call !sub_4960          ;6927  9a 60 49
    bc lab_6933             ;692a  8d 07
    clr1 mem_fe65.2         ;692c  2b 65

lab_692e:
    call !sub_4afc          ;692e  9a fc 4a
    set1 mem_fe6a.1         ;6931  1a 6a

lab_6933:
    ret                     ;6933  af

sub_6934:
    push ax                 ;6934  b1
    and a,#0xf0             ;6935  5d f0
    ror a,1                 ;6937  24
    ror a,1                 ;6938  24
    ror a,1                 ;6939  24
    ror a,1                 ;693a  24
    mov x,#0x0a             ;693b  a0 0a
    mulu x                  ;693d  31 88        AX = A * X
    mov a,x                 ;693f  60
    mov b,a                 ;6940  73
    pop ax                  ;6941  b0
    xch a,b                 ;6942  33
    mov !mem_fb2d,a         ;6943  9e 2d fb
    ret                     ;6946  af

sub_6947:
;Store 0x80 in mem_f1aa and return
    mov a,#0x80             ;6947  a1 80
    mov !mem_f1aa,a         ;6949  9e aa f1
    ret                     ;694c  af

;Blank

lab_694d_b_hl_de_blank:
    mov b,#0x00                     ;694d  a3 00
    movw de,#mem_b471_blank_msgs+1  ;694f  14 78 b4
    movw hl,#lab_6956_hl_blank      ;6952  16 56 69
    ret                             ;6955  af

lab_6956_hl_blank:
    movw de,#mem_b47e_blank         ;6956  14 7e b4
    movw hl,#mem_b47c_blank         ;6959  16 7c b4
    br lab_6991                     ;695c  fa 33

;AM/FM

lab_695e_b_hl_de_amfm:
    mov b,#0x01                     ;695e  a3 01
    movw hl,#lab_6967_hl_amfm       ;6960  16 67 69
    movw de,#mem_b480_amfm_msgs+1   ;6963  14 81 b4
    ret                             ;6966  af

lab_6967_hl_amfm:
    movw de,#mem_b4a0_amfm+1        ;6967  14 a1 b4
    movw hl,#mem_b495_amfm+1        ;696a  16 96 b4
    br lab_6991                     ;696d  fa 22

;Tape

lab_696f_b_hl_de_tape:
    mov b,#0x02                     ;696f  a3 02
    movw de,#mem_b4b0_tape_msgs+1   ;6971  14 b1 b4
    movw hl,#lab_6978_hl_tape       ;6974  16 78 69
    ret                             ;6977  af

lab_6978_hl_tape:
    movw de,#mem_b4d0_tape+1        ;6978  14 d1 b4
    movw hl,#mem_b4c5_hl_tape+1     ;697b  16 c6 b4
    br lab_6991                     ;697e  fa 11

;CD

lab_6980_b_hl_de_cd:
    mov b,#0x03                     ;6980  a3 03
    movw hl,#lab_6989_hl_cd         ;6982  16 89 69
    movw de,#mem_b4de_cd_msgs+1     ;6985  14 df b4
    ret                             ;6988  af

lab_6989_hl_cd:
    movw de,#mem_b50b_cd+1  ;6989  14 0c b5
    movw hl,#mem_b4fd_cd+1  ;698c  16 fe b4
    br lab_6991             ;698f  fa 00        XXX useless branch; could just fall through


lab_6991:
    mov a,mem_fed4          ;6991  f0 d4
    and a,#0x0f             ;6993  5d 0f
    mov b,a                 ;6995  73
    callf !table_get_byte   ;6996  4c 7d        Load A with byte at position B in table [HL]
    bc lab_69a8             ;6998  8d 0e        Branch if lookup failed
    cmp a,#0xff             ;699a  4d ff
    bz lab_69ab             ;699c  ad 0d
    mov b,a                 ;699e  73
    movw ax,de              ;699f  c4
    movw hl,ax              ;69a0  d6
    callf !table_get_word   ;69a1  4c 48        Load DE with word at position B in table [HL]
    bc lab_69a8             ;69a3  8d 03        Branch if table lookup failed
    movw ax,de              ;69a5  c4
    movw hl,ax              ;69a6  d6
    ret                     ;69a7  af

lab_69a8:
    br !lab_7690            ;69a8  9b 90 76

lab_69ab:
    pop hl                  ;69ab  b6
    pop ax                  ;69ac  b0
    and a,#0x3f             ;69ad  5d 3f
    push ax                 ;69af  b1
    push hl                 ;69b0  b7
    and mem_fed4,#0x3f      ;69b1  d8 d4 3f
    br !sub_6fa9            ;69b4  9b a9 6f

lab_69b7:
    bt mem_fe6a.3,lab_69c7  ;69b7  bc 6a 0d
    call !sub_6f78          ;69ba  9a 78 6f
    bf a.6,lab_69c2         ;69bd  31 6f 02
    br lab_6a0a             ;69c0  fa 48

lab_69c2:
    or a,#0xc0              ;69c2  6d c0
    mov !mem_f1ab,a         ;69c4  9e ab f1

lab_69c7:
    ret                     ;69c7  af

lab_69c8:
    mov a,!mem_f1ab         ;69c8  8e ab f1
    and a,#0x0f             ;69cb  5d 0f
    mov !mem_f1af,a         ;69cd  9e af f1
    mov a,#0x87             ;69d0  a1 87
    mov !mem_f1ab,a         ;69d2  9e ab f1
    ret                     ;69d5  af

lab_69d6:
    mov a,!mem_f1af         ;69d6  8e af f1
    or a,#0x80              ;69d9  6d 80
    mov !mem_f1ab,a         ;69db  9e ab f1
    ret                     ;69de  af

lab_69df:
    bf upd_tick.1,lab_69f5_ret  ;69df  31 13 3d 12
    mov a,!mem_f1af         ;69e3  8e af f1
    and a,#0x0f             ;69e6  5d 0f
    mov b,a                 ;69e8  73
    movw hl,#mem_b480_amfm_msgs+1     ;69e9  16 81 b4
    callf !table_get_word   ;69ec  4c 48        Load DE with word at position B in table [HL]
    movw ax,#lab_69f5_ret   ;69ee  10 f5 69
    push ax                 ;69f1  b1
    movw ax,de              ;69f2  c4
    br ax                   ;69f3  31 98

lab_69f5_ret:
    ret                     ;69f5  af

lab_69f6:
    mov a,!mem_f1af         ;69f6  8e af f1
    and a,#0x0f             ;69f9  5d 0f
    mov b,a                 ;69fb  73
    mov !mem_f1ab,a         ;69fc  9e ab f1
    movw hl,#mem_b480_amfm_msgs+1     ;69ff  16 81 b4
    callf !table_get_word   ;6a02  4c 48        Load DE with word at position B in table [HL]
    bc lab_6a09             ;6a04  8d 03        Branch if table lookup failed
    movw ax,de              ;6a06  c4
    br ax                   ;6a07  31 98

lab_6a09:
    ret                     ;6a09  af

lab_6a0a:
    mov a,#0x00             ;6a0a  a1 00
    mov !mem_fb2d,a         ;6a0c  9e 2d fb
    ret                     ;6a0f  af

lab_6a10_monsoon:
    mov a,!mem_f1fe         ;6a10  8e fe f1     TODO coding, monsoon related
    cmp a,#0x03             ;6a13  4d 03
    bz lab_6a1b             ;6a15  ad 04        Branch if coded for Monsoon
    cmp a,#0x04             ;6a17  4d 04
    bnz lab_6a1f            ;6a19  bd 04        Branch if not Monsson

lab_6a1b:
    mov a,#0x0a             ;6a1b  a1 0a
    br lab_6a26             ;6a1d  fa 07

lab_6a1f:
    mov a,#0                ;6a1f  a1 00        A = 0 seconds
    mov !msg_countdown,a    ;6a21  9e 2e fb

    mov a,#0xff             ;6a24  a1 ff

lab_6a26:
    mov b,#0xff             ;6a26  a3 ff
    movw hl,#monsoon        ;6a28  16 c9 64     HL = pointer to 11,"    MONSOON"
    call !sub_6e70_copy_upd ;6a2b  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    ret                     ;6a2e  af

lab_6a2f:
    mov a,#0x0a             ;6a2f  a1 0a
    mov b,#0xff             ;6a31  a3 ff
    movw hl,#blank          ;6a33  16 11 65     HL = pointer to 11,"           "
    mov1 cy,mem_fe62.2      ;6a36  71 24 62
    bc lab_6a40_lcd_on      ;6a39  8d 05
    bt mem_fe62.1,lab_6a40_lcd_off  ;6a3b  9c 62 0d
    br lab_6a56             ;6a3e  fa 16      Branch to copy message to display buf and return

lab_6a40_lcd_on:
    set1 shadow_p4.6        ;6a40  6a ce      uPD16432B /LCDOFF = 1 (turns LCD on)
    clr1 pm4.6              ;6a42  71 6b 24   PM46 = output
    mov a,shadow_p4         ;6a45  f0 ce
    mov p4,a                ;6a47  f2 04
    br lab_6a5b             ;6a49  fa 10      Branch to return

lab_6a40_lcd_off:
    clr1 shadow_p4.6        ;6a4b  6b ce      uPD16432B /LCDOFF = 0 (turns LCD off)
    clr1 pm4.6              ;6a4d  71 6b 24   PM46 = output
    mov a,shadow_p4         ;6a50  f0 ce
    mov p4,a                ;6a52  f2 04
    br lab_6a5b             ;6a54  fa 05      Branch to return

lab_6a56:
    call !sub_6e70_copy_upd ;6a56  9a 70 6e   Copy message from [HL] to display buf; uses A, B
    br lab_6a5b             ;6a59  fa 00      Branch to return

lab_6a5b:
    ret                     ;6a5b  af

lab_6a5c:
    mov a,#0x87             ;6a5c  a1 87
    mov b,#0xff             ;6a5e  a3 ff
    mov b,#0xff             ;6a60  a3 ff
    br lab_6a75             ;6a62  fa 11

lab_6a64:
    mov a,!msg_countdown    ;6a64  8e 2e fb
    cmp a,#0                ;6a67  4d 00
    bnz lab_6a71            ;6a69  bd 06

    call !sub_67be          ;6a6b  9a be 67     Sets tmp_msg_idx = 0xff (may result in "DIAG" being printed)
    mov !snd_msg_idx,a      ;6a6e  9e a5 f1

lab_6a71:
    mov a,#0x88             ;6a71  a1 88
    mov b,#0x83             ;6a73  a3 83

lab_6a75:
    call !sub_6d61_hl_band  ;6a75  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br lab_6ad1             ;6a78  fa 57

lab_6a7a:
    mov a,#0x87             ;6a7a  a1 87
    mov b,#0xff             ;6a7c  a3 ff
    call !sub_6e70_copy_upd ;6a7e  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov b,#0x03             ;6a81  a3 03
    mov a,#0xff             ;6a83  a1 ff
    movw hl,#scan           ;6a85  16 e6 63     HL = pointer to 4,"SCAN"
    call !sub_6d61_hl_band  ;6a88  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br lab_6ad1             ;6a8b  fa 44

lab_6a8d:
    mov a,#0x88             ;6a8d  a1 88
    mov b,#0x03             ;6a8f  a3 03
    movw hl,#scan           ;6a91  16 e6 63     HL = pointer to 4,"SCAN"
    call !sub_6d61_hl_band  ;6a94  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    call !sub_6d61_hl_band  ;6a97  9a 61 6d     XXX redundant
    br lab_6ad1             ;6a9a  fa 35

lab_6a9c:
    mov a,#0x88             ;6a9c  a1 88
    mov b,#0xff             ;6a9e  a3 ff
    call !sub_6e70_copy_upd ;6aa0  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_fb5a         ;6aa3  8e 5a fb
    add a,#0x01             ;6aa6  0d 01        Convert to char code for preset (preset 1 = code 2)
    mov !upd_disp+3,a       ;6aa8  9e 9d f1     '...1.......' (preset)

    movw hl,#pscan          ;6aab  16 cf 63     HL = pointer to 5,"PSCAN"
    mov b,#0x0f             ;6aae  a3 0f
    mov a,#0xff             ;6ab0  a1 ff
    call !sub_6d61_hl_band  ;6ab2  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br lab_6ad1             ;6ab5  fa 1a

lab_6ab7:
    mov a,#0xff             ;6ab7  a1 ff
    mov b,#0x83             ;6ab9  a3 83
    call !sub_6e70_copy_upd ;6abb  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,#0xff             ;6abe  a1 ff
    movw hl,#preset_scan    ;6ac0  16 d5 63     HL = pointer to 11,"PRESET SCAN"
    mov b,#0x10             ;6ac3  a3 10
    call !sub_6d61_hl_band  ;6ac5  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz

    br lab_6ad1             ;6ac8  fa 07

lab_6aca:
    mov a,#0x87             ;6aca  a1 87
    mov b,#0xff             ;6acc  a3 ff
    call !sub_6d61_hl_band  ;6ace  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz

lab_6ad1:
    bf mem_fe5c.2,lab_6af1  ;6ad1  31 23 5c 1c
    mov a,!mem_f1ab         ;6ad5  8e ab f1
    cmp a,#0x09             ;6ad8  4d 09
    bz lab_6ae2             ;6ada  ad 06
    and a,#0x0f             ;6adc  5d 0f
    cmp a,#0x00             ;6ade  4d 00
    bnz lab_6af1            ;6ae0  bd 0f

lab_6ae2:
    mov a,!mem_fb5a         ;6ae2  8e 5a fb
    cmp a,#0x00             ;6ae5  4d 00
    bz lab_6af1             ;6ae7  ad 08
    cmp a,#0x07             ;6ae9  4d 07
    bnc lab_6af1            ;6aeb  9d 04
    inc a                   ;6aed  41           Convert to char code for preset (preset 1 = code 2)
    mov !upd_disp+3,a       ;6aee  9e 9d f1     '...1.......' (preset)

lab_6af1:
    call !sub_6e6e_ret      ;6af1  9a 6e 6e     Just returns
    ret                     ;6af4  af

lab_6af5_tape_load:
    mov b,#0xff             ;6af5  a3 ff
    mov a,#0x0a             ;6af7  a1 0a
    movw hl,#tape_load      ;6af9  16 0b 66     HL = pointer to 11,"TAPE LOAD  "
    call !sub_6e70_copy_upd ;6afc  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;6aff  af

lab_6b00_tape_metal:
    bf mem_fe71.4,lab_6b0e  ;6b00  31 43 71 0a  Branch if METAL sense is off (normal tape)

    ;METAL tape
    mov b,#0xff             ;6b04  a3 ff
    mov a,#0x0a             ;6b06  a1 0a
    movw hl,#tape_metal     ;6b08  16 ff 65     HL = pointer to 11,"TAPE METAL"
    call !sub_6e70_copy_upd ;6b0b  9a 70 6e     Copy message from [HL] to display buf; uses A, B

lab_6b0e:
    ret                     ;6b0e  af

lab_6b0f_tape_play:
    mov b,#0xff             ;6b0f  a3 ff
    mov a,#0x0a             ;6b11  a1 0a
    movw hl,#tape_play      ;6b13  16 ab 65
    br lab_6b52             ;6b16  fa 3a        Branch to finish tape message

lab_6b18_tape_ff:
    mov a,#0xff             ;6b18  a1 ff
    mov b,#0x0a             ;6b1a  a3 0a
    movw hl,#tape_ff        ;6b1c  16 b7 65
    br lab_6b52             ;6b1f  fa 31        Branch to finish tape message

lab_6b21_tape_rew:
    mov a,#0xff             ;6b21  a1 ff
    mov b,#0x0a             ;6b23  a3 0a
    movw hl,#tape_rew       ;6b25  16 c3 65
    br lab_6b52             ;6b28  fa 28        Branch to finish tape message

lab_6b2a_tape_scan:
    mov b,#0xff             ;6b2a  a3 ff
    movw hl,#tape_scan      ;6b2c  16 f3 65
    mov a,#0x0a             ;6b2f  a1 0a
    br lab_6b52             ;6b31  fa 1f        Branch to finish tape message

lab_6b33_skip_blank:
    mov b,#0xff             ;6b33  a3 ff
    mov a,#0x0a             ;6b35  a1 0a
    movw hl,#skip_blank     ;6b37  16 e7 65     HL = pointer to 11,"SKIP BLANK "
    call !sub_6e70_copy_upd ;6b3a  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;6b3d  af

lab_6b3e_tape_mss_ff:
    mov b,#0xff             ;6b3e  a3 ff
    movw hl,#tapemss_ff     ;6b40  16 cf 65     HL = pointer to 11,"TAPEMSS FF "
    mov a,#0x0a             ;6b43  a1 0a
    br lab_6b52             ;6b45  fa 0b        Branch to finish tape message

    ret                     ;6b47  af

lab_6b48_tapemss_rew:
    mov b,#0xff             ;6b48  a3 ff
    movw hl,#tapemss_rew    ;6b4a  16 db 65     HL = pointer to 11,"TAPE MSS REW"
    mov a,#0x0a             ;6b4d  a1 0a
    br lab_6b52             ;6b4f  fa 01        Branch to finish tape message

    ret                     ;6b51  af

lab_6b52:
;Finish tape message
    call !sub_6e70_copy_upd ;6b52  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !sub_6e40_wr_tap_ab;6b55  9a 40 6e     Write tape side "A" or "B" and set tape pictographs
    call !sub_6e6f_ret      ;6b58  9a 6f 6e     Just returns
    ret                     ;6b5b  af

;XXX appears unused
lab_6b5c:
    call !sub_6e70_copy_upd ;6b5c  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !sub_6e6e_ret      ;6b5f  9a 6e 6e     Just returns
    call !sub_6e6f_ret      ;6b62  9a 6f 6e     Just returns
    ret                     ;6b65  af

lab_6b66_chk_magazin:
    mov a,#0x0a             ;6b66  a1 0a
    movw hl,#chk_magazin    ;6b68  16 ad 67     HL = pointer to 11,"CHK MAGAZIN"
    mov b,#0xff             ;6b6b  a3 ff
    call !sub_6e70_copy_upd ;6b6d  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    br !lab_6ca5_ret        ;6b70  9b a5 6c     Branch to return

lab_6b73_cd_cd_err:
    mov a,!mem_fc79         ;6b73  8e 79 fc
    cmp a,#0x03             ;6b76  4d 03
    bz lab_6b90_cd_err_no_cd;6b78  ad 16

    mov a,#0x0a             ;6b7a  a1 0a
    mov b,#0xff             ;6b7c  a3 ff
    movw hl,#cd_cd_err      ;6b7e  16 95 67     HL = pointer to 11,"CD  CD ERR "
    call !sub_6e70_copy_upd ;6b81  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp       ;6b84  16 9a f1
    mov a,!mem_fc7d_upd_cd3  ;6b87  8e 7d fc     A = CD number
    add a,#'0               ;6b8a  0d 30        Convert to ASCII
    mov [hl+0x03],a         ;6b8c  be 03        '...1.......'
    br lab_6b9a             ;6b8e  fa 0a

lab_6b90_cd_err_no_cd:
    mov a,#0x0a             ;6b90  a1 0a
    mov b,#0xff             ;6b92  a3 ff
    movw hl,#cd_error       ;6b94  16 a1 67     HL = pointer to 11," CD  ERROR "
    call !sub_6e70_copy_upd ;6b97  9a 70 6e     Copy message from [HL] to display buf; uses A, B

lab_6b9a:
    br !lab_6ca5_ret        ;6b9a  9b a5 6c     Branch to return

lab_6b9d_cd_no_cd:
    mov a,#0x0a             ;6b9d  a1 0a
    mov b,#0xff             ;6b9f  a3 ff
    movw hl,#cd_no_cd       ;6ba1  16 90 66     HL = pointer to 11,"CD   NO CD "
    call !sub_6e70_copy_upd ;6ba4  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp       ;6ba7  16 9a f1
    mov a,!mem_fc7d_upd_cd3  ;6baa  8e 7d fc     A = CD number
    add a,#'0               ;6bad  0d 30        Convert to ASCII
    mov [hl+0x03],a         ;6baf  be 03        '...1.......'
    br !lab_6ca5_ret        ;6bb1  9b a5 6c     Branch to return

lab_6bb4:
    mov a,!mem_f1ad         ;6bb4  8e ad f1
    and a,#0x0f             ;6bb7  5d 0f
    mov !mem_f1b1,a         ;6bb9  9e b1 f1
    mov a,#0x84             ;6bbc  a1 84
    mov !mem_f1ad,a         ;6bbe  9e ad f1
    ret                     ;6bc1  af

lab_6bc2:
    mov a,!mem_f1b1         ;6bc2  8e b1 f1
    or a,#0x80              ;6bc5  6d 80
    mov !mem_f1ad,a         ;6bc7  9e ad f1
    ret                     ;6bca  af

lab_6bcb:
    bf upd_tick.1,lab_6bdd_ret  ;6bcb  31 13 3d 0e
    mov a,!mem_f1b1             ;6bcf  8e b1 f1
    mov b,a                     ;6bd2  73
    movw hl,#mem_b4de_cd_msgs+1 ;6bd3  16 df b4
    callf !table_get_word       ;6bd6  4c 48        Load DE with word at position B in table [HL]
    bc lab_6bdd_ret             ;6bd8  8d 03        Branch if table lookup failed
    movw ax,de                  ;6bda  c4
    br ax                       ;6bdb  31 98

lab_6bdd_ret:
    ret                     ;6bdd  af

lab_6bde:
    mov a,!mem_f1b1             ;6bde  8e b1 f1
    mov b,a                     ;6be1  73
    mov !mem_f1ad,a             ;6be2  9e ad f1
    movw hl,#mem_b4de_cd_msgs+1 ;6be5  16 df b4
    callf !table_get_word       ;6be8  4c 48        Load DE with word at position B in table [HL]
    bc lab_6bef                 ;6bea  8d 03        Branch if table lookup failed
    movw ax,de                  ;6bec  c4
    br ax                       ;6bed  31 98

lab_6bef:
    ret                     ;6bef  af

lab_6bf0_scan_tr:
    mov a,#0xff             ;6bf0  a1 ff
    mov b,#0x0a             ;6bf2  a3 0a
    movw hl,#scan_tr        ;6bf4  16 cc 66     HL = pointer to 11,"SCANCD TR  "
    br lab_6c5f_cd_and_track;6bf7  fa 66

lab_6bf9_cue:
    mov a,#0x0a             ;6bf9  a1 0a
    movw hl,#cue            ;6bfb  16 b4 66     HL = pointer to 11,"CUE        "
    mov b,#0xff             ;6bfe  a3 ff
    set1 upd_pict+5.1       ;6c00  1a 3a        Turn on "MIX" pictograph
    bt mem_fe6e.1,lab_6c07  ;6c02  9c 6e 02     Branch if MIX is on
    clr1 upd_pict+5.1       ;6c05  1b 3a        Turn off "MIX" pictograph

lab_6c07:
    call !sub_6e70_copy_upd ;6c07  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !sub_6cac_wr_time  ;6c0a  9a ac 6c     Write minutes and seconds to display buf
    br !lab_6ca5_ret        ;6c0d  9b a5 6c     Branch to return

lab_6c10_cd_mins_secs:
    mov a,#0x0a             ;6c10  a1 0a
    movw hl,#cd__           ;6c12  16 84 66     HL = pointer to 11,"CD         "
    mov b,#0xff             ;6c15  a3 ff
    set1 upd_pict+5.1       ;6c17  1a 3a        Turn on "MIX" pictograph
    bt mem_fe6e.1,lab_6c1e  ;6c19  9c 6e 02     Branch if MIX is on
    clr1 upd_pict+5.1       ;6c1c  1b 3a        Turn off "MIX" pictograph

lab_6c1e:
    call !sub_6e70_copy_upd ;6c1e  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !write_cd_num      ;6c21  9a 2f 6d     Write the CD number to the buffer
    call !sub_6cac_wr_time  ;6c24  9a ac 6c     Write minutes and seconds to display buf
    br lab_6ca5_ret         ;6c27  fa 7c        Branch to return

lab_6c29_rev:
    mov a,#0x0a             ;6c29  a1 0a
    movw hl,#rev            ;6c2b  16 c0 66     HL = pointer to 11,"REV        "
    mov b,#0xff             ;6c2e  a3 ff
    set1 upd_pict+5.1       ;6c30  1a 3a        Turn on "MIX" pictograph
    bt mem_fe6e.1,lab_6c37  ;6c32  9c 6e 02     Branch if MIX is on
    clr1 upd_pict+5.1       ;6c35  1b 3a        Turn off "MIX" pictograph

lab_6c37:
    call !sub_6e70_copy_upd ;6c37  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !sub_6cac_wr_time  ;6c3a  9a ac 6c     Write minutes and seconds to display buf
    br lab_6ca5_ret         ;6c3d  fa 66        Branch to return

;XXX this is used but it's an exact duplicate of the code in lab_6c10_cd_mins_secs
lab_6c3f_cd_mins_secs:
    mov a,#0x0a             ;6c3f  a1 0a
    movw hl,#cd__           ;6c41  16 84 66     HL = pointer to 11,"CD         "
    mov b,#0xff             ;6c44  a3 ff
    set1 upd_pict+5.1       ;6c46  1a 3a        Turn on "MIX" pictograph
    bt mem_fe6e.1,lab_6c4d  ;6c48  9c 6e 02     Branch if MIX is on
    clr1 upd_pict+5.1       ;6c4b  1b 3a        Turn off "MIX" pictograph

lab_6c4d:
    call !sub_6e70_copy_upd ;6c4d  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !write_cd_num     ;6c50  9a 2f 6d      Write the CD number to the buffer
    call !sub_6cac_wr_time  ;6c53  9a ac 6c     Write minutes and seconds to display buf
    br lab_6ca5_ret         ;6c56  fa 4d        Branch to return

lab_6c58_cd_and_track:
    mov a,#0x0a             ;6c58  a1 0a
    movw hl,#cd_tr          ;6c5a  16 9c 66     HL = pointer to 11,"CD   TR    "
    mov b,#0xff             ;6c5d  a3 ff

lab_6c5f_cd_and_track:
    call !sub_6e70_copy_upd ;6c5f  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !write_cd_num      ;6c62  9a 2f 6d     Write the CD number to the buffer
    call !write_track       ;6c65  9a 01 6d     Write CD track as two digits to the buffer
    br lab_6ca5_ret         ;6c68  fa 3b        Branch to return

lab_6c6a_track_scan:
    mov b,#0x83             ;6c6a  a3 83
    mov a,#0x10             ;6c6c  a1 10
    movw hl,#track_scan     ;6c6e  16 09 67     HL = pointer to 13,"TRACK SCAN   "
    call !sub_6e70_copy_upd ;6c71  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    br lab_6ca5_ret         ;6c74  fa 2f        Branch to return

lab_6c76_disc_scan:
    mov b,#0x83             ;6c76  a3 83
    mov a,#0x10             ;6c78  a1 10
    movw hl,#disc_scan      ;6c7a  16 17 67     HL = pointer to 13,"DISC SCAN    "
    call !sub_6e70_copy_upd ;6c7d  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    br lab_6ca5_ret         ;6c80  fa 23        Branch to return

lab_6c82_hl_msg_time:
    mov a,#0xff             ;6c82  a1 ff
    mov b,#0x83             ;6c84  a3 83
    call !sub_6e70_copy_upd ;6c86  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !sub_6cac_wr_time  ;6c89  9a ac 6c     Write minutes and seconds to display buf
    br lab_6ca5_ret         ;6c8c  fa 17        Branch to return

lab_6c8e_hl_msg_cdnum:
    mov a,#0xff             ;6c8e  a1 ff
    mov b,#0x83             ;6c90  a3 83
    call !sub_6e70_copy_upd ;6c92  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !write_cd_num      ;6c95  9a 2f 6d     Write the CD number to the buffer
    br lab_6ca5_ret         ;6c98  fa 0b        Branch to return

lab_6c9a_hl:
    call !sub_6e70_copy_upd ;6c9a  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    call !sub_6e6f_ret      ;6c9d  9a 6f 6e     Just returns
    br lab_6ca8_ret         ;6ca0  fa 06        Branch to return

;XXX appears unused
lab_6ca2:
    call !sub_6e70_copy_upd ;6ca2  9a 70 6e     Copy message from [HL] to display buf; uses A, B

lab_6ca5_ret:
    call !sub_6e6f_ret      ;6ca5  9a 6f 6e     Just returns

lab_6ca8_ret:
    call !sub_6e6e_ret      ;6ca8  9a 6e 6e     Just returns
    ret                     ;6cab  af

;Write minutes and seconds to display buf
sub_6cac_wr_time:
    mov a,!mem_fc77_cd_mins ;6cac  8e 77 fc
    mov b,a                 ;6caf  73
    mov a,!mem_fc78_cd_secs ;6cb0  8e 78 fc
    mov x,a                 ;6cb3  70
    mov a,b                 ;6cb4  63
    and a,#0xf0             ;6cb5  5d f0
    cmp a,#0xa0             ;6cb7  4d a0
    bz lab_6cbf             ;6cb9  ad 04
    cmp a,#0x9a             ;6cbb  4d 9a
    bnc lab_6cc4            ;6cbd  9d 05

lab_6cbf:
    mov a,x                 ;6cbf  60
    cmp a,#0x5a             ;6cc0  4d 5a
    bc lab_6cc6             ;6cc2  8d 02

lab_6cc4:
    mov a,#0x59             ;6cc4  a1 59

lab_6cc6:
    mov x,a                 ;6cc6  70
    xch a,b                 ;6cc7  33
    mov c,a                 ;6cc8  72
    xch a,b                 ;6cc9  33
    mov b,#0x08             ;6cca  a3 08
    call !write_digit       ;6ccc  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    mov a,x                 ;6ccf  60
    callf !ror_a_4          ;6cd0  2c 9e        A = A >> 4
    call !write_digit       ;6cd2  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    mov a,c                 ;6cd5  62
    and a,#0xf0             ;6cd6  5d f0
    cmp a,#0xa0             ;6cd8  4d a0
    mov a,c                 ;6cda  62
    bnz lab_6cdf            ;6cdb  bd 02
    br lab_6ce5             ;6cdd  fa 06

lab_6cdf:
    cmp a,#0x9a             ;6cdf  4d 9a
    bc lab_6ce5             ;6ce1  8d 02
    mov c,#0x99             ;6ce3  a2 99

lab_6ce5:
    set1 upd_pict+4.5       ;6ce5  5a 39        Turn on "MIX" pictograph
    mov b,#0x06             ;6ce7  a3 06
    mov a,c                 ;6ce9  62
    push ax                 ;6cea  b1
    call !write_digit       ;6ceb  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    pop ax                  ;6cee  b0
    callf !ror_a_4          ;6cef  2c 9e        A = A >> 4
    and a,#0x0f             ;6cf1  5d 0f
    cmp a,#0x0a             ;6cf3  4d 0a
    bnz lab_6cfe            ;6cf5  bd 07
    movw hl,#upd_disp       ;6cf7  16 9a f1
    mov a,#'-               ;6cfa  a1 2d
    mov [hl+b],a            ;6cfc  bb           '......-.....'
    ret                     ;6cfd  af

lab_6cfe:
    br !write_nonzero_dig   ;6cfe  9b 68 6f     Write low nib of A in ASCII to buf at B if nonzero, either way decr B


;Write CD track as two digits to the buffer
write_track:
    mov a,!mem_fc76_cd_trk  ;6d01  8e 76 fc
    cmp a,#0x00             ;6d04  4d 00
    bz lab_6d2d_br_to_ret   ;6d06  ad 25

    push ax                 ;6d08  b1           Push value from mem_fc76_cd_trk
    clr1 upd_pict+5.1       ;6d09  1b 3a        Turn off "MIX" pictograph

    mov a,!mem_f1ad         ;6d0b  8e ad f1
    and a,#0x0f             ;6d0e  5d 0f
    cmp a,#0x0a             ;6d10  4d 0a
    bz lab_6d1b             ;6d12  ad 07

    set1 upd_pict+5.1       ;6d14  1a 3a        Turn on "MIX" pictograph
    bt mem_fe6e.1,lab_6d1b  ;6d16  9c 6e 02     Branch if MIX is on
    clr1 upd_pict+5.1       ;6d19  1b 3a        Turn off "MIX" pictograph

lab_6d1b:
    mov b,#0x09             ;6d1b  a3 09
    mov a,!mem_f1ad         ;6d1d  8e ad f1
    and a,#0x0f             ;6d20  5d 0f
    cmp a,#0x0a             ;6d22  4d 0a
    bnz lab_6d2a            ;6d24  bd 04

    mov b,#0x0a             ;6d26  a3 0a

    set1 upd_pict+4.5       ;6d28  5a 39        Turn on period pictograph

lab_6d2a:
    pop ax                  ;6d2a  b0           Pop so A = mem_fc76_cd_trk
    br sub_6d56_write_digits;6d2b  fa 29        Write two digits to buf and return

lab_6d2d_br_to_ret:
    br lab_6d60_ret         ;6d2d  fa 31        Branch to return


;Write the CD number to the buffer
write_cd_num:
    mov a,!mem_fc75_cd_num1 ;6d2f  8e 75 fc     A = CD number 1-6, or 0 if no CD
    cmp a,#0x00             ;6d32  4d 00
    bz lab_6d60_ret         ;6d34  ad 2a
    cmp a,#0x07             ;6d36  4d 07
    bc lab_6d3c             ;6d38  8d 02
    mov a,#0x06             ;6d3a  a1 06

lab_6d3c:
    mov b,#0x03             ;6d3c  a3 03
    push ax                 ;6d3e  b1

    mov a,!mem_f1ad         ;6d3f  8e ad f1
    and a,#0x0f             ;6d42  5d 0f
    cmp a,#0x0a             ;6d44  4d 0a
    bnz lab_6d4a            ;6d46  bd 02

    mov b,#0x06             ;6d48  a3 06

lab_6d4a:
    pop ax                  ;6d4a  b0
    push ax                 ;6d4b  b1
    call !write_digit       ;6d4c  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    pop ax                  ;6d4f  b0
    callf !ror_a_4          ;6d50  2c 9e        A = A >> 4
    call !write_nonzero_dig ;6d52  9a 68 6f     Write low nib of A in ASCII to buf at B if nonzero, either way decr B
    ret                     ;6d55  af


sub_6d56_write_digits:
    push ax                 ;6d56  b1
    call !write_digit       ;6d57  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    pop ax                  ;6d5a  b0
    callf !ror_a_4          ;6d5b  2c 9e        A = A >> 4
    call !write_digit       ;6d5d  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B

lab_6d60_ret:
    ret                     ;6d60  af


;Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
sub_6d61_hl_band:
    call !sub_6e70_copy_upd ;6d61  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ;Fall through

sub_6d64_wr_band:
;Write AM/kHz or FM/MHz without freq to display buf
    call !sub_0800_mode     ;6d64  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58

    cmp a,#0x01             ;6d67  4d 01        FM mode?
    bz lab_6db1             ;6d69  ad 46        Branch to write FM / MHz

    ;mem_f253 != 0x01 (must be 0x02 AM)

    mov a,!mem_f1ab         ;6d6b  8e ab f1
    and a,#0x0f             ;6d6e  5d 0f
    cmp a,#0x00             ;6d70  4d 00
    bz lab_6d87             ;6d72  ad 13        Write 'AM' to display buffer
    cmp mem_fe20,#0x03      ;6d74  c8 20 03
    bnz lab_6d87            ;6d77  bd 0e        Write 'AM' to display buffer
    cmp mem_fe21,#0x0b      ;6d79  c8 21 0b
    bnz lab_6d9d            ;6d7c  bd 1f        Write 'kHz' to display buffer
    mov a,!mem_f1ab         ;6d7e  8e ab f1
    and a,#0xef             ;6d81  5d ef
    cmp a,#0x09             ;6d83  4d 09
    bnz lab_6d9d            ;6d85  bd 16        Write 'kHz' to display buffer

lab_6d87:
;AM
    mov a,#0x00             ;6d87  a1 00        A = character code for "1" in AM1
    mov a,#0x20             ;6d89  a1 20        A = space character
    mov !upd_disp+2,a       ;6d8b  9e 9c f1     '.. ........'
    mov a,#0x20             ;6d8e  a1 20        A = space character
    mov !upd_disp+3,a       ;6d90  9e 9d f1     '... .......' (preset)
    mov a,#'A               ;6d93  a1 41
    mov !upd_disp,a         ;6d95  9e 9a f1     'A..........'
    mov a,#'M               ;6d98  a1 4d
    mov !upd_disp+1,a       ;6d9a  9e 9b f1     '.M.........'

lab_6d9d:
;kHz
    mov a,#'k               ;6d9d  a1 6b
    mov !upd_disp+8,a       ;6d9f  9e a2 f1     '........k..'
    mov a,#'H               ;6da2  a1 48
    mov !upd_disp+9,a       ;6da4  9e a3 f1     '.........H.'
    mov a,#'z               ;6da7  a1 7a
    mov !upd_disp+10,a      ;6da9  9e a4 f1     '..........z'
    mov b,#0xff             ;6dac  a3 ff
    br !lab_6e3c            ;6dae  9b 3c 6e

lab_6db1:
    call !sub_080b_fm1fm2   ;6db1  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    cmp a,#0x01             ;6db4  4d 01
    bz lab_6dfb             ;6db6  ad 43
    mov a,!mem_f1ab         ;6db8  8e ab f1
    and a,#0x0f             ;6dbb  5d 0f
    cmp a,#0x00             ;6dbd  4d 00
    bz lab_6dd4_fm1         ;6dbf  ad 13        Write 'FM1'...'MHz' to display buffer
    cmp mem_fe20,#0x03      ;6dc1  c8 20 03
    bnz lab_6dd4_fm1        ;6dc4  bd 0e        Write 'FM1'...'MHz' to display buffer
    cmp mem_fe21,#0x0b      ;6dc6  c8 21 0b
    bnz lab_6de8_mhz        ;6dc9  bd 1d        Write 'MHz' to display buffer
    mov a,!mem_f1ab         ;6dcb  8e ab f1
    and a,#0xef             ;6dce  5d ef
    cmp a,#0x09             ;6dd0  4d 09
    bnz lab_6de8_mhz        ;6dd2  bd 14        Write 'MHz' to display buffer

lab_6dd4_fm1:
;FM1
    mov a,#0x00             ;6dd4  a1 00        A = character code for "1" in "FM1"
    mov !upd_disp+2,a       ;6dd6  9e 9c f1     '..1........'
    mov a,#0x20             ;6dd9  a1 20        A = space character
    mov !upd_disp+3,a       ;6ddb  9e 9d f1     '... .......' (preset)
    mov a,#'F               ;6dde  a1 46
    mov !upd_disp,a         ;6de0  9e 9a f1     'F..........'
    mov a,#'M               ;6de3  a1 4d
    mov !upd_disp+1,a       ;6de5  9e 9b f1     '.M.........'

lab_6de8_mhz:
;MHz
    mov a,#'M               ;6de8  a1 4d
    mov !upd_disp+8,a       ;6dea  9e a2 f1     '........M..'
    mov a,#'H               ;6ded  a1 48
    mov !upd_disp+9,a       ;6def  9e a3 f1     '.........H.'
    mov a,#'z               ;6df2  a1 7a
    mov !upd_disp+10,a      ;6df4  9e a4 f1     '..........z'
    mov b,#0xff             ;6df7  a3 ff
    br lab_6e3c             ;6df9  fa 41

lab_6dfb:
    mov a,!mem_f1ab         ;6dfb  8e ab f1
    and a,#0x0f             ;6dfe  5d 0f
    cmp a,#0x00             ;6e00  4d 00
    bz lab_6e17_fm2         ;6e02  ad 13        Write 'FM2'...'MHz' to display buffer
    cmp mem_fe20,#0x03      ;6e04  c8 20 03
    bnz lab_6e17_fm2        ;6e07  bd 0e        Write 'FM2'...'MHz' to display buffer
    cmp mem_fe21,#0x0b      ;6e09  c8 21 0b
    bnz lab_6e2b_mhz        ;6e0c  bd 1d        Write 'MHz' to display buffer
    mov a,!mem_f1ab         ;6e0e  8e ab f1
    and a,#0xef             ;6e11  5d ef
    cmp a,#0x09             ;6e13  4d 09
    bnz lab_6e2b_mhz        ;6e15  bd 14        Write 'MHz' to display buffer

lab_6e17_fm2:
;FM2
    mov a,#0x01             ;6e17  a1 01        A = character code for "2" in "FM2"
    mov !upd_disp+2,a       ;6e19  9e 9c f1     '..2........'
    mov a,#0x20             ;6e1c  a1 20        A = space character
    mov !upd_disp+3,a       ;6e1e  9e 9d f1     '... .......' (preset)
    mov a,#'F               ;6e21  a1 46
    mov !upd_disp,a         ;6e23  9e 9a f1     'F..........'
    mov a,#'M               ;6e26  a1 4d
    mov !upd_disp+1,a       ;6e28  9e 9b f1     '.M........'

lab_6e2b_mhz:
;MHz
    mov a,#'M               ;6e2b  a1 4d
    mov !upd_disp+8,a       ;6e2d  9e a2 f1     '........M..'
    mov a,#'H               ;6e30  a1 48
    mov !upd_disp+9,a       ;6e32  9e a3 f1     '.........H.'
    mov a,#'z               ;6e35  a1 7a
    mov !upd_disp+10,a      ;6e37  9e a4 f1     '..........z'
    mov b,#0xff             ;6e3a  a3 ff

lab_6e3c:
    call !sub_6feb          ;6e3c  9a eb 6f     Copy from [HL] to upd_disp
    ret                     ;6e3f  af


sub_6e40_wr_tap_ab:
;Write tape side "A" or "B" and set tape pictographs
    mov a,!mem_f1ac         ;6e40  8e ac f1
    cmp a,#0x03             ;6e43  4d 03
    bz lab_6e5e             ;6e45  ad 17
    cmp a,#0x02             ;6e47  4d 02
    bz lab_6e5e             ;6e49  ad 13
    cmp a,#0x05             ;6e4b  4d 05
    bz lab_6e5e             ;6e4d  ad 0f
    cmp a,#0x06             ;6e4f  4d 06
    bz lab_6e5e             ;6e51  ad 0b
    mov a,#'A               ;6e53  a1 41            'A' for tape side A
    bf mem_fe4d.6,lab_6e5b  ;6e55  31 63 4d 02
    mov a,#'B               ;6e59  a1 42            'B' for tape side B

lab_6e5b:
    mov !upd_disp+10,a      ;6e5b  9e a4 f1         '..........A' or '..........B'

lab_6e5e:
    clr1 upd_pict+1.2       ;6e5e  2b 36            Turn off "DOLBY" pictograph
    bf mem_fe6f.4,lab_6e66  ;6e60  31 43 6f 02      Branch if Dolby is off
    set1 upd_pict+1.2       ;6e64  2a 36            Turn on "DOLBY" pictograph

lab_6e66:
    clr1 upd_pict+2.7          ;6e66  7b 37            Turn off "METAL" pictograph
    bf mem_fe71.4,sub_6e6e_ret ;6e68  31 43 71 02      Branch if METAL sense is off (normal tape)

    ;METAL tape
    set1 upd_pict+2.7       ;6e6c  7a 37            Turn on "METAL pictograph

sub_6e6e_ret:
    ret                     ;6e6e  af

sub_6e6f_ret:
    ret                     ;6e6f  af


sub_6e70_copy_upd:
;HL = pointer to message
;A = ?
;B = ?
    bt a.7,lab_6e87         ;6e70  31 7e 14

    ;bit 7 of A is clear
    ;it seems like bit 7 is clear for all the messages that
    ;i have seen on the radio

    push ax                 ;6e73  b1
    mov a,b                 ;6e74  63
    and a,#0x80             ;6e75  5d 80
    cmp a,#0x00             ;6e77  4d 00
    pop ax                  ;6e79  b0
    bnz lab_6e97            ;6e7a  bd 1b
    push ax                 ;6e7c  b1
    call !sub_6feb          ;6e7d  9a eb 6f     Copy from [HL] to upd_disp
    movw ax,de              ;6e80  c4
    movw hl,ax              ;6e81  d6
    pop ax                  ;6e82  b0
    mov b,a                 ;6e83  73
    br !sub_6feb            ;6e84  9b eb 6f     Copy from [HL] to upd_disp

lab_6e87:
    ;bit 7 of A is set
    ;it seems like bit 7 is set only for messages that
    ;i have never seen on the radio

    push ax                 ;6e87  b1
    mov a,b                 ;6e88  63
    and a,#0x80             ;6e89  5d 80
    cmp a,#0x00             ;6e8b  4d 00
    pop ax                  ;6e8d  b0
    bnz lab_6ea0            ;6e8e  bd 10
    push ax                 ;6e90  b1
    call !sub_6feb          ;6e91  9a eb 6f     Copy from [HL] to upd_disp
    pop ax                  ;6e94  b0
    br lab_6ea8             ;6e95  fa 11

lab_6e97:
    push ax                 ;6e97  b1
    call !sub_6ea7_ret      ;6e98  9a a7 6e     Just returns
    pop ax                  ;6e9b  b0
    mov b,a                 ;6e9c  73
    br !sub_6feb            ;6e9d  9b eb 6f     Copy from [HL] to upd_disp

lab_6ea0:
    push ax                 ;6ea0  b1
    call !sub_6ea7_ret      ;6ea1  9a a7 6e     Just returns
    pop ax                  ;6ea4  b0
    br lab_6ea8             ;6ea5  fa 01

sub_6ea7_ret:
    ret                     ;6ea7  af

lab_6ea8:
    cmp a,#0xff                 ;6ea8  4d ff
    bz lab_6eb1                 ;6eaa  ad 05
    and a,#0b01111111           ;6eac  5d 7f        Mask off bit 7
    call !freq_idx_to_upd_disp  ;6eae  9a b2 6e     Write the frequency in upd_disp

lab_6eb1:
    ret                     ;6eb1  af


freq_idx_to_upd_disp:
    push ax                 ;6eb2  b1
    call !freq_idx_to_bcd   ;6eb3  9a bb 6e
    pop ax                  ;6eb6  b0
    mov b,a                 ;6eb7  73
    br !freq_bcd_to_upd_disp;6eb8  9b 40 6f     Write BCD word at mem_fed4 to upd_disp

freq_idx_to_bcd:
    call !sub_0800_mode      ;6ebb  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    mov mem_fed6,a           ;6ebe  f2 d6        mem_fed6 = mem_f253 mode

    mov a,!mem_f1e7_region   ;6ec0  8e e7 f1
    mov x,a                  ;6ec3  70

    mov a,!freq_idx          ;6ec4  8e 56 fb
    dec a                    ;6ec7  51

    cmp mem_fed6,#0x02       ;6ec8  c8 d6 02
    bz lab_6f06_am           ;6ecb  ad 39

    ;FM1/FM2

    xch a,x                         ;6ecd  30
    cmp a,#0x01                     ;6ece  4d 01
    xch a,x                         ;6ed0  30
    bz lab_6efe_fm_region_1         ;6ed1  ad 2b  Region 1: FM 76.0 - 90.0

    xch a,x                         ;6ed3  30
    cmp a,#0x02                     ;6ed4  4d 02
    xch a,x                         ;6ed6  30
    bz lab_6ef6_fm_region_2_3       ;6ed7  ad 1d  Region 2: FM 87.5 - 108.0

    xch a,x                         ;6ed9  30
    cmp a,#0x03                     ;6eda  4d 03
    xch a,x                         ;6edc  30
    bz lab_6ef6_fm_region_2_3       ;6edd  ad 17  Region 3: FM 87.5 - 108.0

    xch a,x                         ;6edf  30
    cmp a,#0x07                     ;6ee0  4d 07
    xch a,x                         ;6ee2  30
    bnz lab_6eea_fm_region_0_4_5_6  ;6ee3  bd 05  Region 0: FM 87.7 - 107.9
                                    ;             Region 4: FM 87.7 - 107.9
                                    ;             Region 5: FM 87.7 - 107.9
                                    ;             Region 6: FM 87.7 - 107.9

    ;Region 7: FM 75.9 - 108.1
    movw bc,#0x02f7                 ;6ee5  12 f7 02     BC = 759
    br lab_6eed_fm_region_eq_7      ;6ee8  fa 03

lab_6eea_fm_region_0_4_5_6:
    movw bc,#0x036d                 ;6eea  12 6d 03     BC = 877

lab_6eed_fm_region_eq_7:
    clr1 cy                         ;6eed  21
    rolc a,1                        ;6eee  27
    mov x,a                         ;6eef  70
    mov a,#0x00                     ;6ef0  a1 00
    addc a,#0x00                    ;6ef2  2d 00
    br lab_6f37                     ;6ef4  fa 41

lab_6ef6_fm_region_2_3:
    movw bc,#0x036b                 ;6ef6  12 6b 03     BC = 875
    mov x,a                         ;6ef9  70
    mov a,#0x00                     ;6efa  a1 00
    br lab_6f37                     ;6efc  fa 39

lab_6efe_fm_region_1:
    movw bc,#0x02f8                 ;6efe  12 f8 02     BC = 760
    mov x,a                         ;6f01  70
    mov a,#0x00                     ;6f02  a1 00
    br lab_6f37                     ;6f04  fa 31

;AM
lab_6f06_am:
    movw bc,#0x020a                 ;6f06  12 0a 02     BC = 522
    xch a,x                         ;6f09  30           A = mem_f1e7_region
    cmp a,#0x01                     ;6f0a  4d 01
    xch a,x                         ;6f0c  30
    bz lab_6f33_am_region_1_2_3     ;6f0d  ad 24        Region 1: AM 530 - 1710

    movw bc,#0x0213                 ;6f0f  12 13 02     BC = 531
    xch a,x                         ;6f12  30
    cmp a,#0x02                     ;6f13  4d 02
    xch a,x                         ;6f15  30
    bz lab_6f33_am_region_1_2_3     ;6f16  ad 1b        Region 2: AM 531 - 1629

    movw bc,#0x0213                 ;6f18  12 13 02     BC = 531
    xch a,x                         ;6f1b  30
    cmp a,#0x03                     ;6f1c  4d 03
    xch a,x                         ;6f1e  30
    bz lab_6f33_am_region_1_2_3     ;6f1f  ad 12        Region 3: AM 531 - 1620

    movw bc,#0x0208                 ;6f21  12 08 02     BC = 520
    xch a,x                         ;6f24  30
    cmp a,#0x07                     ;6f25  4d 07
    xch a,x                         ;6f27  30
    bz lab_6f2d                     ;6f28  ad 03        Region 7: AM 520 - 1710

    ;Region 0: AM 530 - 1710
    ;Region 4: AM 530 - 1710
    ;Region 5: AM 530 - 1710
    ;Region 6: AM 530 - 1710

    movw bc,#0x0212                 ;6f2a  12 12 02     BC = 530

lab_6f2d:
    mov x,#0x0a                     ;6f2d  a0 0a        X = 10
    mulu x                          ;6f2f  31 88        AX = A * 10
    br lab_6f37                     ;6f31  fa 04

lab_6f33_am_region_1_2_3:
    mov x,#0x09                     ;6f33  a0 09        X = 9
    mulu x                          ;6f35  31 88        AX = A * 9

lab_6f37:
    xch a,x                         ;6f37  30
    add a,c                         ;6f38  61 0a
    xch a,x                         ;6f3a  30
    addc a,b                        ;6f3b  61 2b
    callf !bin_to_bcd               ;6f3d  2c 7f        Convert AX to BCD, store word in mem_fed4
                                    ;                       mem_fed4: BCD low byte
                                    ;                       mem_fed5: BCD high byte
    ret                             ;6f3f  af

freq_bcd_to_upd_disp:
    push hl                 ;6f40  b7
    mov a,mem_fed4          ;6f41  f0 d4        A = BCD low byte
    call !write_digit       ;6f43  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    call !sub_0800_mode     ;6f46  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x02             ;6f49  4d 02        AM mode?
    bz lab_6f4f             ;6f4b  ad 02        Branch if AM
    ;mem_f253 != 0x02 (must be FM mode)
    set1 upd_pict+4.5       ;6f4d  5a 39        Turn on period pictograph

lab_6f4f:
    mov a,mem_fed4          ;6f4f  f0 d4        A = BCD low byte
    callf !ror_a_4          ;6f51  2c 9e        A = A >> 4
    call !write_digit       ;6f53  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B

    mov a,mem_fed5          ;6f56  f0 d5        A = BCD high byte
    call !write_digit       ;6f58  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B

    mov a,mem_fed5          ;6f5b  f0 d5        A = BCD high byte
    callf !ror_a_4          ;6f5d  2c 9e        A = A >> 4
    and a,#0x0f             ;6f5f  5d 0f        Mask to leave only low nibble
    bz lab_6f66_pop_ret     ;6f61  ad 03
    call !write_digit       ;6f63  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B

lab_6f66_pop_ret:
    pop hl                  ;6f66  b6
    ret                     ;6f67  af


write_nonzero_dig:
;Write low nib of A in ASCII to buf at B if nonzero, either way decr B
    and a,#0x0f             ;6f68  5d 0f
    bz lab_6f76_dec_b_ret   ;6f6a  ad 0a

write_digit:
;Write low nib of A in ASCII to buf at offset B, decr B
    and a,#0x0f             ;6f6c  5d 0f        Mask to leave only low nibble
    add a,#'0               ;6f6e  0d 30        Convert it to ASCII
    push hl                 ;6f70  b7
    movw hl,#upd_disp       ;6f71  16 9a f1
    mov [hl+b],a            ;6f74  bb           Write it to display at offset B
    pop hl                  ;6f75  b6

lab_6f76_dec_b_ret:
    dec b                   ;6f76  53
    ret                     ;6f77  af


sub_6f78:
    mov a,mem_fe30          ;6f78  f0 30
    mov b,a                 ;6f7a  73
    cmp a,#0x04             ;6f7b  4d 04
    bc lab_6f81             ;6f7d  8d 02
    mov b,#0x00             ;6f7f  a3 00

lab_6f81:
    movw hl,#mem_b46e_blank_amfm_tape_cd+1 ;6f81  16 6f b4
    callf !table_get_word   ;6f84  4c 48        Load DE with word at position B in table [HL]
    bnc lab_6f8b            ;6f86  9d 03        Branch if table lookup succeeded
    br !lab_7690            ;6f88  9b 90 76

lab_6f8b:
    movw ax,#lab_6f92       ;6f8b  10 92 6f
    push ax                 ;6f8e  b1
    movw ax,de              ;6f8f  c4
    br ax                   ;6f90  31 98

lab_6f92:
    push hl                 ;6f92  b7
    movw hl,#mem_b530+1     ;6f93  16 31 b5
    mov a,[hl+b]            ;6f96  ab
    mov mem_fede,a          ;6f97  f2 de
    movw hl,#mem_f1aa       ;6f99  16 aa f1
    mov a,[hl+b]            ;6f9c  ab
    and a,#0x0f             ;6f9d  5d 0f
    cmp a,mem_fede          ;6f9f  4e de
    bc lab_6fa6             ;6fa1  8d 03
    mov a,#0x00             ;6fa3  a1 00
    mov [hl+b],a            ;6fa5  bb

lab_6fa6:
    mov a,[hl+b]            ;6fa6  ab
    pop hl                  ;6fa7  b6
    ret                     ;6fa8  af

sub_6fa9:
    push ax                 ;6fa9  b1
    push bc                 ;6faa  b3
    push hl                 ;6fab  b7
    mov a,mem_fed5          ;6fac  f0 d5
    mov b,a                 ;6fae  73
    mov a,mem_fed4          ;6faf  f0 d4
    movw hl,#mem_f1aa       ;6fb1  16 aa f1
    mov [hl+b],a            ;6fb4  bb
    pop hl                  ;6fb5  b6
    pop bc                  ;6fb6  b2
    pop ax                  ;6fb7  b0
    ret                     ;6fb8  af

sub_6fb9:
    mov a,mem_fed4          ;6fb9  f0 d4
    and a,#0x30             ;6fbb  5d 30
    ror a,1                 ;6fbd  24
    ror a,1                 ;6fbe  24
    ror a,1                 ;6fbf  24
    ror a,1                 ;6fc0  24
    mov b,a                 ;6fc1  73
    callf !table_get_byte   ;6fc2  4c 7d      Load A with byte at position B in table [HL]
    bnc lab_6fc8            ;6fc4  9d 02      Branch if lookup succeeded
    mov a,#0x00             ;6fc6  a1 00

lab_6fc8:
    ret                     ;6fc8  af


upd_clear_all:
;Clear upd_disp and upd_pict buffers
    call !upd_clear_disp    ;6fc9  9a d0 6f
    call !upd_clear_pict    ;6fcc  9a e1 6f
    ret                     ;6fcf  af


upd_clear_disp:
;Fill all characters with spaces in upd_disp buffer
    movw hl,#upd_disp       ;6fd0  16 9a f1     HL = pointer to buffer to fill
    mov a,#0x0b             ;6fd3  a1 0b        A = 11 bytes to fill
    cmp a,#0x00             ;6fd5  4d 00
    br lab_6fd9             ;6fd7  fa 00
lab_6fd9:
    bz lab_6fe0             ;6fd9  ad 05
    mov b,a                 ;6fdb  73
    mov a,#0x20             ;6fdc  a1 20        A = value to fill (0x20)
    callf !fill_with_a      ;6fde  4c dc        Fill B bytes in buffer [HL] with A
lab_6fe0:
    ret                     ;6fe0  af


upd_clear_pict:
;Turn off all pictographs in upd_pict buffer
    mov b,#0x08             ;6fe1  a3 08        B = 8 bytes to fill
    bz lab_6fea             ;6fe3  ad 05
    movw hl,#upd_pict       ;6fe5  16 35 fe     HL = pointer to buffer to fill
    callf !fill_with_0      ;6fe8  4c da        Fill B bytes in buffer [HL] with 0
lab_6fea:
    ret                     ;6fea  af


sub_6feb:
;Copy from [HL] into upd_disp
;TODO not fully understood
    push de                 ;6feb  b5
    push bc                 ;6fec  b3
    mov a,b                 ;6fed  63
    cmp a,#0x0b             ;6fee  4d 0b
    bnc lab_7009            ;6ff0  9d 17        TODO bounds check? (11 = LCD size in characters)
    mov a,[hl]              ;6ff2  87
    mov c,a                 ;6ff3  72
    add l,a                 ;6ff4  61 06
    xch a,h                 ;6ff6  37
    addc a,#0x00            ;6ff7  2d 00
    xch a,h                 ;6ff9  37
    movw ax,hl              ;6ffa  c6
    movw de,ax              ;6ffb  d4
    movw hl,#upd_disp       ;6ffc  16 9a f1

lab_6fff:
    mov a,[de]              ;6fff  85
    mov [hl+b],a            ;7000  bb
    decw de                 ;7001  94
    dec b                   ;7002  53
    mov a,b                 ;7003  63
    bt a.7,lab_7009         ;7004  31 7e 02
    dbnz c,lab_6fff         ;7007  8a f6

lab_7009:
    pop bc                  ;7009  b2
    pop de                  ;700a  b4
    ret                     ;700b  af

lab_700c:
    mov a,[de]              ;700c  85
    incw de                 ;700d  84
    push ax                 ;700e  b1
    and a,#0x70             ;700f  5d 70
    ror a,1                 ;7011  24
    ror a,1                 ;7012  24
    ror a,1                 ;7013  24
    ror a,1                 ;7014  24
    mov b,a                 ;7015  73
    movw hl,#mem_af75_patterns ;7016  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;7019  ab
    mov b,a                 ;701a  73
    pop ax                  ;701b  b0
    push ax                 ;701c  b1
    and a,#0x0f             ;701d  5d 0f
    push ax                 ;701f  b1
    push bc                 ;7020  b3
    movw hl,#upd_pict       ;7021  16 35 fe
    mov b,a                 ;7024  73
    mov a,[hl+b]            ;7025  ab
    pop bc                  ;7026  b2
    or a,b                  ;7027  61 6b
    pop bc                  ;7029  b2
    mov [hl+b],a            ;702a  bb
    pop ax                  ;702b  b0
    bt a.7,lab_700c         ;702c  31 7e dd
    ret                     ;702f  af

sub_7030:
    mov b,#0x05             ;7030  a3 05
    movw hl,#upd_disp+10    ;7032  16 a4 f1

lab_7035:
    mov a,[hl+b]            ;7035  ab
    cmp a,#0xff             ;7036  4d ff
    bnz lab_7041            ;7038  bd 07
    dbnz b,lab_7035         ;703a  8b f9

    mov a,#0                ;703c  a1 00        A = 0 seconds
    mov !msg_countdown,a    ;703e  9e 2e fb

lab_7041:
    mov a,b                 ;7041  63
    and a,#0x0f             ;7042  5d 0f
    dec a                   ;7044  51
    mov b,a                 ;7045  73
    cmp a,#0xff             ;7046  4d ff
    bz lab_708e             ;7048  ad 44
    movw hl,#mem_b41b+1     ;704a  16 1c b4

lab_704d:
    callf !table_get_word   ;704d  4c 48        Load DE with word at position B in table [HL]
    bnc lab_7054            ;704f  9d 03        Branch if table lookup succeeded
    br !lab_7690            ;7051  9b 90 76

lab_7054:
    clr1 upd_pict+4.5       ;7054  5b 39        Turn off period pictograph

    mov a,!tmp_msg_idx      ;7056  8e a6 f1
    and a,#0x0f             ;7059  5d 0f
    cmp a,#0x0e             ;705b  4d 0e        e Writes "  MIN  " or "  MAX  "
    bz lab_7065             ;705d  ad 06

    clr1 upd_pict+2.7       ;705f  7b 37        Turn off "METAL" pictograph
    clr1 upd_pict+1.2       ;7061  2b 36        Turn off "DOLBY" pictograph
    clr1 upd_pict+5.1       ;7063  1b 3a        Turn off "MIX" pictograph

lab_7065:
    bf mem_fe2c.3,lab_7070  ;7065  31 33 2c 07
    mov a,#0xc3             ;7069  a1 c3
    cmp a,!mem_fb71         ;706b  48 71 fb
    bz lab_7087             ;706e  ad 17

lab_7070:
    bt mem_fe2c.5,lab_7087  ;7070  dc 2c 14
    bt mem_fe65.5,lab_7087  ;7073  dc 65 11

    mov a,#0                ;7076  a1 00        A = 0 seconds
    mov !msg_countdown,a    ;7078  9e 2e fb

    mov a,#0x0a             ;707b  a1 0a
    mov b,#0xff             ;707d  a3 ff
    movw hl,#blank          ;707f  16 11 65     HL = pointer to 11,"           "
    call !sub_6e70_copy_upd ;7082  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    br lab_708e             ;7085  fa 07

lab_7087:
    movw ax,#lab_708e       ;7087  10 8e 70
    push ax                 ;708a  b1
    movw ax,de              ;708b  c4
    br ax                   ;708c  31 98

lab_708e:
    ret                     ;708e  af

lab_708f:
    mov a,!msg_countdown    ;708f  8e 2e fb
    cmp a,#0                ;7092  4d 00
    bnz lab_70a7            ;7094  bd 11

    mov a,!snd_msg_idx      ;7096  8e a5 f1
    and a,#0x3f             ;7099  5d 3f
    cmp a,#0x06             ;709b  4d 06        A = 0x06 "SELECT EQ #"
    bnz lab_70a1            ;709d  bd 02        Branch if snd_msg_idx != "SELECT EQ #"

    ;A = 0x06 "SELECT EQ #"
    set1 mem_fe80.5         ;709f  5a 80

lab_70a1:
    mov a,#0xff             ;70a1  a1 ff
    mov !snd_msg_idx,a      ;70a3  9e a5 f1
    ret                     ;70a6  af

lab_70a7:
    mov a,#0x00             ;70a7  a1 00
    mov !mem_fb2d,a         ;70a9  9e 2d fb

    mov a,!snd_msg_idx      ;70ac  8e a5 f1
    and a,#0x7f             ;70af  5d 7f
    mov !snd_msg_idx,a      ;70b1  9e a5 f1

    mov b,a                        ;70b4  73
    movw hl,#mem_b426_sound_msgs+1 ;70b5  16 27 b4   HL = pointer to sound control related code table
    br lab_704d                    ;70b8  fa 93

lab_70ba:
    mov a,!msg_countdown    ;70ba  8e 2e fb
    cmp a,#0                ;70bd  4d 00
    bnz lab_70c5            ;70bf  bd 04

    call !sub_67be          ;70c1  9a be 67   Sets tmp_msg_idx = 0xff (may result in "DIAG" being printed)
    ret                     ;70c4  af

lab_70c5:
    mov a,!tmp_msg_idx      ;70c5  8e a6 f1
    and a,#0x0f             ;70c8  5d 0f
    mov !tmp_msg_idx,a      ;70ca  9e a6 f1

    mov b,a                 ;70cd  73
    movw hl,#mem_b435_tmp_msgs+1     ;70ce  16 36 b4   HL = pointer to CD, TAPE, DIAG related code table
    br !lab_704d            ;70d1  9b 4d 70

lab_70d4:
    mov a,!mem_f1a7         ;70d4  8e a7 f1
    push ax                 ;70d7  b1
    and a,#0x7f             ;70d8  5d 7f
    mov b,a                 ;70da  73
    push bc                 ;70db  b3
    mov !mem_f1a7,a         ;70dc  9e a7 f1
    movw hl,#mem_b535+1     ;70df  16 36 b5
    callf !table_get_word   ;70e2  4c 48        Load DE with word at position B in table [HL]
    bnc lab_70ea            ;70e4  9d 04        Branch if table lookup succeeded
    pop ax                  ;70e6  b0
    pop ax                  ;70e7  b0
    br lab_7105             ;70e8  fa 1b

lab_70ea:
    pop bc                  ;70ea  b2
    pop ax                  ;70eb  b0
    and a,#0x80             ;70ec  5d 80
    bz lab_70fe             ;70ee  ad 0e
    xch a,b                 ;70f0  33
    mov !mem_f1a7,a         ;70f1  9e a7 f1
    mov a,d                 ;70f4  65
    mov x,#0x0a             ;70f5  a0 0a
    mulu x                  ;70f7  31 88        AX = A * X
    xch a,x                 ;70f9  30
    mov !mem_fb2c,a         ;70fa  9e 2c fb
    xch a,x                 ;70fd  30

lab_70fe:
    mov a,!mem_fb2c         ;70fe  8e 2c fb
    cmp a,#0x00             ;7101  4d 00
    bnz lab_710b            ;7103  bd 06

lab_7105:
    mov a,#0xff             ;7105  a1 ff
    mov !mem_f1a7,a         ;7107  9e a7 f1
    ret                     ;710a  af

lab_710b:
    mov a,e                 ;710b  64
    bf a.7,lab_711c         ;710c  31 7f 0d
    and a,#0x7f             ;710f  5d 7f
    mov b,a                 ;7111  73
    movw hl,#mem_b550+1     ;7112  16 51 b5
    callf !table_get_word   ;7115  4c 48        Load DE with word at position B in table [HL]
    bc lab_7105             ;7117  8d ec        Branch if table lookup failed
    br !lab_7054            ;7119  9b 54 70

lab_711c:
    callf !bin_a_to_bcd_ax  ;711c  4c f4        Convert binary number in A to BCD number in AX
    push ax                 ;711e  b1
    push ax                 ;711f  b1

    mov b,#0x83             ;7120  a3 83
    mov a,#0x10             ;7122  a1 10
    movw hl,#e__            ;7124  16 be 63     HL = pointer to 11,"E           "
    call !sub_6e70_copy_upd ;7127  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,#0xff             ;712a  a1 ff
    mov b,#0x07             ;712c  a3 07
    push bc                 ;712e  b3
    mov b,#0xff             ;712f  a3 ff
    call !sub_6e70_copy_upd ;7131  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    pop bc                  ;7134  b2
    pop ax                  ;7135  b0
    push ax                 ;7136  b1
    call !write_digit       ;7137  9a 6c 6f     Write low nib of A in ASCII to buf at offset B, decr B
    pop ax                  ;713a  b0
    callf !ror_a_4          ;713b  2c 9e        A = A >> 4
    call !write_nonzero_dig ;713d  9a 68 6f     Write low nib of A in ASCII to buf at B if nonzero, either way decr B
    pop ax                  ;7140  b0
    ret                     ;7141  af

lab_7142:
    mov a,!mem_f1a8         ;7142  8e a8 f1
    and a,#0x7f             ;7145  5d 7f
    mov !mem_f1a8,a         ;7147  9e a8 f1

    mov b,a                 ;714a  73
    movw hl,#mem_b456_safe_msgs+1     ;714b  16 57 b4     HL = pointer to table of SAFE code related code table
    br !lab_704d            ;714e  9b 4d 70

lab_7151:
    bt mem_fe5d.7,lab_715c  ;7151  fc 5d 08
    mov a,#0xff             ;7154  a1 ff
    mov !mem_f1a9,a         ;7156  9e a9 f1
    br !lab_708e            ;7159  9b 8e 70

lab_715c:
    mov a,!mem_f1a9         ;715c  8e a9 f1
    and a,#0x7f             ;715f  5d 7f
    mov !mem_f1a9,a         ;7161  9e a9 f1
    mov b,a                 ;7164  73
    movw hl,#mem_b459_hold_fb_msgs+1     ;7165  16 60 b4     HL = messages when F/B button is held down
    br !lab_704d            ;7168  9b 4d 70

lab_716b_comm_error:
    mov b,#0x83             ;716b  a3 83
    mov a,#0x0d             ;716d  a1 0d
    movw hl,#comm_error     ;716f  16 55 66     HL = pointer to 10,"Comm Error"

lab_7172:
    call !sub_6e70_copy_upd ;7172  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;7175  af

lab_7176_no_tape:
    mov a,#0xff             ;7176  a1 ff
    mov b,#0x0a             ;7178  a3 0a
    movw hl,#no_tape        ;717a  16 17 66     HL = pointer to 11,"    NO TAPE"
    br lab_7172             ;717d  fa f3

lab_717f_tape_error:
    mov a,#0xff             ;717f  a1 ff
    mov b,#0x0a             ;7181  a3 0a
    movw hl,#tape_error     ;7183  16 23 66     HL = pointer to 11,"TAPE ERROR "
    br lab_7172             ;7186  fa ea

lab_7188_tight_tape:
    mov b,#0x83             ;7188  a3 83
    mov a,#0x0d             ;718a  a1 0d
    movw hl,#tight_tape     ;718c  16 6c 66
    br lab_7172             ;718f  fa e1

lab_7191_wrapped_tape:
    mov b,#0x83             ;7191  a3 83
    mov a,#0x0f             ;7193  a1 0f
    movw hl,#wrapped_tape   ;7195  16 77 66
    br lab_7172             ;7198  fa d8

lab_719a:
    br lab_71d6             ;719a  fa 3a

lab_719c:
    br lab_71d6             ;719c  fa 38

lab_719e_player_error:
    mov b,#0x83             ;719e  a3 83
    mov a,#0x0f             ;71a0  a1 0f
    movw hl,#player_error   ;71a2  16 2e 67
    br lab_71d6             ;71a5  fa 2f

lab_71a7_no_changer:
    mov b,#0xff             ;71a7  a3 ff
    mov a,#0x0a             ;71a9  a1 0a
    movw hl,#no_changer     ;71ab  16 71 67     HL = pointer to "NO  CHANGER"
    br lab_71d6             ;71ae  fa 26

lab_71b0_cd_cd_rom:
    mov b,#0xff             ;71b0  a3 ff
    mov a,#0x0a             ;71b2  a1 0a
    movw hl,#cd_cd_rom      ;71b4  16 89 67     HL = pointer to 11,"CD  CD ROM "
    call !sub_6e70_copy_upd ;71b7  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp       ;71ba  16 9a f1
    mov b,#0x03             ;71bd  a3 03
    mov a,!mem_f1b2         ;71bf  8e b2 f1
    add a,#'0               ;71c2  0d 30        Convert it to ASCII
    mov [hl+b],a            ;71c4  bb
    ret                     ;71c5  af

lab_71c6_no_magazin:
    mov b,#0xff             ;71c6  a3 ff
    mov a,#0x0a             ;71c8  a1 0a
    movw hl,#no_magazin     ;71ca  16 65 67     HL = pointer to 11,"NO  MAGAZIN"
    br lab_71d6             ;71cd  fa 07

lab_71cf_no_disc:
    mov b,#0xff             ;71cf  a3 ff
    mov a,#0x0a             ;71d1  a1 0a
    movw hl,#no_disc        ;71d3  16 7d 67     HL = pointer to 11,"    NO DISC"

lab_71d6:
    call !sub_6e70_copy_upd ;71d6  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;71d9  af

lab_71da_changer_error:
    mov b,#0x83             ;71da  a3 83
    mov a,#0x0f             ;71dc  a1 0f
    movw hl,#changer_error  ;71de  16 4e 67
    br lab_71d6             ;71e1  fa f3

lab_71e3_safe_1_of_4:
    set1 mem_fe6a.0         ;71e3  0a 6a
    call !upd_clear_pict    ;71e5  9a e1 6f     Turn off all pictographs in upd_pict buffer
    mov b,#0x0a             ;71e8  a3 0a
    movw hl,#safe           ;71ea  16 f9 64     HL = pointer to 11,"     SAFE  "
    mov a,#0xff             ;71ed  a1 ff
    br !lab_7290            ;71ef  9b 90 72     Branch to copy msg from [HL] to display buf and return

lab_71f2_safe_2_of_4:
    set1 mem_fe6a.0         ;71f2  0a 6a
    call !upd_clear_pict    ;71f4  9a e1 6f     Turn off all pictographs in upd_pict buffer

    mov b,#0x0a             ;71f7  a3 0a
    movw hl,#safe           ;71f9  16 f9 64     HL = pointer to 11,"     SAFE  "
    mov a,#0xff             ;71fc  a1 ff
    call !sub_6e70_copy_upd ;71fe  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp       ;7201  16 9a f1
    mov a,!mem_f206         ;7204  8e 06 f2
    call !bin_a_to_bcd_ax   ;7207  9a f4 0c     Convert binary number in A to BCD number in AX
    mov a,x                 ;720a  60
    and a,#0x0f             ;720b  5d 0f
    add a,#'0               ;720d  0d 30        Convert it to ASCII
    mov b,#0x01             ;720f  a3 01
    mov [hl+b],a            ;7211  bb           '.1.........'
    mov a,x                 ;7212  60
    rol a,1                 ;7213  26
    rol a,1                 ;7214  26
    rol a,1                 ;7215  26
    rol a,1                 ;7216  26
    and a,#0x0f             ;7217  5d 0f
    add a,#'0               ;7219  0d 30        Convert it to ASCII
    mov b,#0x00             ;721b  a3 00
    mov [hl+b],a            ;721d  bb           '0..........'
    mov a,#0xff             ;721e  a1 ff
    mov b,#0xff             ;7220  a3 ff
    br lab_7290             ;7222  fa 6c        Branch to copy msg from [HL] to display buf and return

lab_7224_safe_3_of_4:
    mov a,!msg_countdown    ;7224  8e 2e fb
    cmp a,#0                ;7227  4d 00
    bnz lab_7249            ;7229  bd 1e

    set1 mem_fe6a.0         ;722b  0a 6a
    call !upd_clear_pict    ;722d  9a e1 6f     Turn off all pictographs in upd_pict buffer

    mov b,#0x0a             ;7230  a3 0a
    movw hl,#safe           ;7232  16 f9 64     HL = pointer to 11,"     SAFE  "
    mov a,#0xff             ;7235  a1 ff
    call !sub_6e70_copy_upd ;7237  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_f20b         ;723a  8e 0b f2     SAFE code attempt counter
    add a,#'0               ;723d  0d 30        Convert it to ASCII
    movw hl,#upd_disp       ;723f  16 9a f1
    mov [hl],a              ;7242  97           '2..........'
    mov a,#0xff             ;7243  a1 ff
    mov b,#0xff             ;7245  a3 ff
    br lab_7290             ;7247  fa 47        Branch to copy msg from [HL] to display buf and return

lab_7249:
    call !upd_clear_pict    ;7249  9a e1 6f     Turn off all pictographs in upd_pict buffer

    mov b,#0x0a             ;724c  a3 0a
    movw hl,#safe           ;724e  16 f9 64     HL = pointer to 11,"     SAFE  "
    mov a,#0xff             ;7251  a1 ff
    call !sub_6e70_copy_upd ;7253  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_f20b         ;7256  8e 0b f2     A = SAFE code attempt counter
    add a,#'0               ;7259  0d 30        Convert it to ASCII
    movw hl,#upd_disp       ;725b  16 9a f1
    mov [hl],a              ;725e  97           '2..........'
    mov a,#0xff             ;725f  a1 ff
    mov b,#0xff             ;7261  a3 ff
    bf upd_tick.1,lab_7290  ;7263  31 13 3d 29  Branch to copy msg from [HL] to display buf and return
    mov a,#0x0a             ;7267  a1 0a
    mov b,#0xff             ;7269  a3 ff
    movw hl,#blank          ;726b  16 11 65     HL = pointer to 11,"           "
    mov1 cy,mem_fe62.2      ;726e  71 24 62
    bc lab_7278_lcd_on      ;7271  8d 05
    bt mem_fe62.1,lab_7284_lcd_off  ;7273  9c 62 0e
    br lab_7290             ;7276  fa 18        Branch to copy msg from [HL] to display buf and return

lab_7278_lcd_on:
    set1 shadow_p4.6        ;7278  6a ce        uPD16432B /LCDOFF = 1 (turns LCD on)
    clr1 pm4.6              ;727a  71 6b 24     PM46 = output
    mov a,shadow_p4         ;727d  f0 ce
    mov p4,a                ;727f  f2 04
    br !lab_6a5b            ;7281  9b 5b 6a     Branch to return

lab_7284_lcd_off:
    clr1 shadow_p4.6        ;7284  6b ce        uPD16432B /LCDOFF = 0 (turns LCD off)
    clr1 pm4.6              ;7286  71 6b 24     PM46 = output
    mov a,shadow_p4         ;7289  f0 ce
    mov p4,a                ;728b  f2 04
    br !lab_6a5b            ;728d  9b 5b 6a     Branch to return

lab_7290:
    call !sub_6e70_copy_upd ;7290  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;7293  af

lab_7294_safe_4_of_4:
;Write SAFE code attempt count to the display buffer
    mov a,#0x0a             ;7294  a1 0a
    mov b,#0xff             ;7296  a3 ff
    movw hl,#blank          ;7298  16 11 65     HL = pointer to 11,"           "
    set1 mem_fe6a.0         ;729b  0a 6a
    call !sub_6e70_copy_upd ;729d  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    movw hl,#upd_disp       ;72a0  16 9a f1
    mov a,!mem_f20b         ;72a3  8e 0b f2     A = SAFE code attempt counter
    cmp a,#0x00             ;72a6  4d 00
    bz lab_72ad             ;72a8  ad 03        Skip write count if it is zero
    add a,#'0               ;72aa  0d 30        Convert count to ASCII
    mov [hl],a              ;72ac  97           '2..........'

lab_72ad:
;Write entered SAFE code to the display buffer
    mov a,!mem_fb76         ;72ad  8e 76 fb     A = Entered SAFE code (BCD low byte)
    mov x,a                 ;72b0  70
    mov a,!mem_fb75         ;72b1  8e 75 fb     A = Entered SAFE code (BCD high byte)
    push ax                 ;72b4  b1
    and a,#0x0f             ;72b5  5d 0f
    add a,#'0               ;72b7  0d 30        Convert it to ASCII
    mov b,#0x05             ;72b9  a3 05
    mov [hl+b],a            ;72bb  bb           '.....5.....'
    pop ax                  ;72bc  b0
    rol a,1                 ;72bd  26
    rol a,1                 ;72be  26
    rol a,1                 ;72bf  26
    rol a,1                 ;72c0  26
    and a,#0x0f             ;72c1  5d 0f
    add a,#'0               ;72c3  0d 30        Convert it to ASCII
    mov b,#0x04             ;72c5  a3 04
    mov [hl+b],a            ;72c7  bb           '....4......'
    xch a,x                 ;72c8  30
    push ax                 ;72c9  b1
    and a,#0x0f             ;72ca  5d 0f
    add a,#'0               ;72cc  0d 30        Convert it to ASCII
    mov b,#0x07             ;72ce  a3 07
    mov [hl+b],a            ;72d0  bb           '.......7...'
    pop ax                  ;72d1  b0
    rol a,1                 ;72d2  26
    rol a,1                 ;72d3  26
    rol a,1                 ;72d4  26
    rol a,1                 ;72d5  26
    and a,#0x0f             ;72d6  5d 0f
    add a,#'0               ;72d8  0d 30        Convert it to ASCII
    mov b,#0x06             ;72da  a3 06
    mov [hl+b],a            ;72dc  bb           '......6....'
    ret                     ;72dd  af

lab_72de_rad_de2:
    mov b,#0x0a             ;72de  a3 0a
    movw hl,#rad_de2        ;72e0  16 bd 64     HL = pointer to 11,"RAD   DE2  "
    mov a,#0xff             ;72e3  a1 ff
    call !sub_6e70_copy_upd ;72e5  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;72e8  af

lab_72e9_vers_a99:
    mov a,#0x0a             ;72e9  a1 0a
    movw hl,#vers_a99cznn   ;72eb  16 d5 64     ;HL = pointer to 11,"VersA99CZnn"
    mov b,#0xff             ;72ee  a3 ff
    call !sub_6e70_copy_upd ;72f0  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,#0x23             ;72f3  a1 23        ;0x23 = SOFTWARE 23
    call !sub_0be4          ;72f5  9a e4 0b     ;Convert A to two ASCII hex digits in AX
    movw hl,#upd_disp       ;72f8  16 9a f1
    mov b,#0x09             ;72fb  a3 09
    mov [hl+b],a            ;72fd  bb           ;'.........2.'    (High nibble 0x23)
    mov a,x                 ;72fe  60
    mov b,#0x0a             ;72ff  a3 0a
    mov [hl+b],a            ;7301  bb           ;'..........3'    (Low nibble of 0x23)
    ret                     ;7302  af

lab_7303_blank:
    mov a,#0x0a             ;7303  a1 0a
    mov b,#0xff             ;7305  a3 ff
    movw hl,#blank          ;7307  16 11 65     HL = pointer to 11,"           "
    call !sub_6e70_copy_upd ;730a  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,#0x83             ;730d  a1 83
    mov b,#0xff             ;730f  a3 ff
    call !sub_6e70_copy_upd ;7311  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    clr1 upd_pict+4.5       ;7314  5b 39        Turn off period pictograph

    mov b,#0x04             ;7316  a3 04
    movw hl,#upd_disp       ;7318  16 9a f1
    mov a,!mem_fb69         ;731b  8e 69 fb
    call !sub_6809          ;731e  9a 09 68     Convert lower nibble of A to hex digit in ASCII
    mov [hl+b],a            ;7321  bb           '....A......'

    mov b,#0x06             ;7322  a3 06
    mov a,!mem_fb6a         ;7324  8e 6a fb
    call !sub_6809          ;7327  9a 09 68     Convert lower nibble of A to hex digit in ASCII
    mov [hl+b],a            ;732a  bb           '......A....'

    mov b,#0x08             ;732b  a3 08
    mov a,!mem_fb6b         ;732d  8e 6b fb
    call !sub_6809          ;7330  9a 09 68     Convert lower nibble of A to hex digit in ASCII
    mov [hl+b],a            ;7333  bb           '........A..'

    mov b,#0x0a             ;7334  a3 0a
    mov a,!mem_fb6c         ;7336  8e 6c fb
    call !sub_6809          ;7339  9a 09 68     Convert lower nibble of A to hex digit in ASCII
    mov [hl+b],a            ;733c  bb           '..........A'
    ret                     ;733d  af

lab_733e_fern:
    mov b,#0x0a             ;733e  a3 0a
    movw hl,#fern_on        ;7340  16 e1 64     HL = pointer to 11,"FERN   ON  "
    mov1 cy,mem_fe5e.1      ;7343  71 14 5e     CY = FERN status (0=FERN off, 1=FERN on)
    bc lab_734b             ;7346  8d 03        Branch if FERN is on
    ; FERN is off
    movw hl,#fern_off       ;7348  16 ed 64     HL = pointer to 11,"FERN   OFF "

lab_734b:
    mov a,#0xff             ;734b  a1 ff
    call !sub_6e70_copy_upd ;734d  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;7350  af

lab_7351_set_onvol:
    mov a,#0x0a             ;7351  a1 0a
    movw hl,#set_onvol      ;7353  16 99 64     HL = pointer to 11,"SET ONVOL  "
    mov b,#0xff             ;7356  a3 ff
    call !sub_6e70_copy_upd ;7358  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_f254_onvol   ;735b  8e 54 f2     A=ONVOL
    clr1 a.0                ;735e  61 8b
    ror a,1                 ;7360  24
    call !bin_a_to_bcd_ax   ;7361  9a f4 0c     Convert binary number in A to BCD number in AX

    mov a,x                 ;7364  60
    and a,#0x0f             ;7365  5d 0f
    add a,#'0               ;7367  0d 30        Convert it to ASCII

    mov b,#0x0a             ;7369  a3 0a
    movw hl,#upd_disp       ;736b  16 9a f1
    mov [hl+b],a            ;736e  bb           '..........1' (onvol ones place)

    mov a,x                 ;736f  60
    and a,#0xf0             ;7370  5d f0
    rol a,1                 ;7372  26
    rol a,1                 ;7373  26
    rol a,1                 ;7374  26
    rol a,1                 ;7375  26
    cmp a,#0x00             ;7376  4d 00
    bnz lab_737e            ;7378  bd 04
    mov a,#0x20             ;737a  a1 20        A = space character
    br lab_7380             ;737c  fa 02

lab_737e:
    add a,#0x30             ;737e  0d 30        Convert onvol digit to ASCII

lab_7380:
    mov b,#0x09             ;7380  a3 09
    movw hl,#upd_disp       ;7382  16 9a f1
    mov [hl+b],a            ;7385  bb           '.........1.' (onvol tens place)
    ret                     ;7386  af

lab_7387_set_cdmix:
    mov a,#0x0a             ;7387  a1 0a
    mov b,#0xff             ;7389  a3 ff
    movw hl,#set_cd_mix     ;738b  16 a5 64     HL = pointer to 11,"SET CD MIX "
    call !sub_6e70_copy_upd ;738e  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_fb6f         ;7391  8e 6f fb
    and a,#0x01             ;7394  5d 01
    mov a,#'1               ;7396  a1 31        A = '1' for 'CD MIX 1'
    bz lab_739c             ;7398  ad 02
    mov a,#'6               ;739a  a1 36        A = '6' for 'CD MIX 6'

lab_739c:
    mov b,#0x0a             ;739c  a3 0a
    movw hl,#upd_disp       ;739e  16 9a f1
    mov [hl+b],a            ;73a1  bb           '..........6'
    ret                     ;73a2  af

lab_73a3_tape_skip:
    mov a,#0x0a             ;73a3  a1 0a
    mov b,#0xff             ;73a5  a3 ff
    movw hl,#tape_skip      ;73a7  16 b1 64     HL = pointer to 11,"TAPE SKIP  "
    call !sub_6e70_copy_upd ;73aa  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_fb6f         ;73ad  8e 6f fb
    and a,#0x02             ;73b0  5d 02
    mov a,#'Y               ;73b2  a1 59        A = 'Y' for 'TAPE SKIP Y'
    bnz lab_73b8            ;73b4  bd 02
    mov a,#'N               ;73b6  a1 4e        A = 'N' for 'TAPE SKIP N'

lab_73b8:
    mov b,#0x0a             ;73b8  a3 0a
    movw hl,#upd_disp       ;73ba  16 9a f1
    mov [hl+b],a            ;73bd  bb           '..........Y'
    ret                     ;73be  af

lab_73bf_cut_tape:
    mov b,#0x07             ;73bf  a3 07
    movw hl,#cut_tape       ;73c1  16 43 66     HL = pointer to 8,"CUT TAPE"
    mov a,#0x0f             ;73c4  a1 0f
    movw de,#disabled       ;73c6  14 4c 66     HL = pointer to 8,"DISABLED"
    call !sub_6e70_copy_upd ;73c9  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;73cc  af

lab_73cd_min_or_max:
    mov a,!mem_fc9f         ;73cd  8e 9f fc
    cmp a,#0x00             ;73d0  4d 00
    bz lab_73ec             ;73d2  ad 18        Branch to write 7,"  MIN  "
    cmp a,#0xff             ;73d4  4d ff
    bz lab_73e3             ;73d6  ad 0b        Branch to write 7,"  MAX  "

    mov a,#0                ;73d8  a1 00
    mov !msg_countdown,a    ;73da  9e 2e fb     A = 0 seconds

    mov a,#0xff             ;73dd  a1 ff
    mov b,#0xff             ;73df  a3 ff
    br lab_7401             ;73e1  fa 1e

lab_73e3:
    mov b,#0xff             ;73e3  a3 ff
    mov a,#0x0a             ;73e5  a1 0a
    movw hl,#max            ;73e7  16 89 64     HL = pointer to 7,"  MAX  "
    br lab_7401             ;73ea  fa 15

lab_73ec:
    mov a,!tmp_msg_idx      ;73ec  8e a6 f1
    and a,#0x0f             ;73ef  5d 0f
    cmp a,#0x0e             ;73f1  4d 0e        e Writes "  MIN  " or "  MAX  "
    bnz lab_73fa            ;73f3  bd 05

    mov a,#30               ;73f5  a1 1e        A = 3 seconds
    mov !msg_countdown,a    ;73f7  9e 2e fb

lab_73fa:
    mov b,#0xff             ;73fa  a3 ff
    mov a,#0x0a             ;73fc  a1 0a
    movw hl,#min            ;73fe  16 91 64     HL = pointer to 7,"  MIN  "

lab_7401:
    call !sub_6e70_copy_upd ;7401  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;7404  af

lab_7405:
    mov a,!mem_fc9f         ;7405  8e 9f fc
    cmp a,#0x00             ;7408  4d 00
    bz lab_7414             ;740a  ad 08
    mov a,#0x80             ;740c  a1 80
    mov !mem_f1ab,a         ;740e  9e ab f1
    br !lab_6856            ;7411  9b 56 68

lab_7414:
    call !sub_6d64_wr_band  ;7414  9a 64 6d     Write AM/kHz or FM/MHz without freq to display buf
    mov a,!mem_f1ab         ;7417  8e ab f1
    cmp a,#0x09             ;741a  4d 09
    bz lab_7424             ;741c  ad 06
    and a,#0x0f             ;741e  5d 0f
    cmp a,#0x00             ;7420  4d 00
    bnz lab_7433            ;7422  bd 0f

lab_7424:
    mov a,!mem_fb5a         ;7424  8e 5a fb
    cmp a,#0x00             ;7427  4d 00
    bz lab_7433             ;7429  ad 08
    cmp a,#0x07             ;742b  4d 07
    bnc lab_7433            ;742d  9d 04
    inc a                   ;742f  41           Convert to char code for preset (preset 1 = code 2)
    mov !upd_disp+3,a       ;7430  9e 9d f1     '...1.......' (preset)

lab_7433:
    mov a,!tmp_msg_idx      ;7433  8e a6 f1
    and a,#0x0f             ;7436  5d 0f
    cmp a,#0x0e             ;7438  4d 0e        e Writes "  MIN  " or "  MAX  "
    bnz lab_7441            ;743a  bd 05

    mov a,#0xff             ;743c  a1 ff
    mov !tmp_msg_idx,a      ;743e  9e a6 f1     f Writes " DIAG  "

lab_7441:
    mov b,#0xff             ;7441  a3 ff
    mov a,#0x0a             ;7443  a1 0a
    movw hl,#min            ;7445  16 91 64     HL = pointer to 7,"  MIN  "
    call !sub_6e70_copy_upd ;7448  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;744b  af

lab_744c_tape_ab:
    mov b,#0xff             ;744c  a3 ff
    movw hl,#tape           ;744e  16 a6 65     HL = pointer to 4,"TAPE"
    mov a,#0x03             ;7451  a1 03
    call !sub_6e70_copy_upd ;7453  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    mov a,!mem_f1ac         ;7456  8e ac f1
    cmp a,#0x03             ;7459  4d 03
    bz lab_7474             ;745b  ad 17

    cmp a,#0x02             ;745d  4d 02
    bz lab_7474             ;745f  ad 13

    cmp a,#0x05             ;7461  4d 05
    bz lab_7474             ;7463  ad 0f

    cmp a,#0x06             ;7465  4d 06
    bz lab_7474             ;7467  ad 0b

    mov a,#'A               ;7469  a1 41        A = 'A' for 'TAPE PLAY A'
    bf mem_fe4d.6,lab_7471  ;746b  31 63 4d 02
    mov a,#'B               ;746f  a1 42        B = 'B' for 'TAPE PLAY B'

lab_7471:
    mov !upd_disp+10,a      ;7471  9e a4 f1     '..........A' or '..........B'

lab_7474:
    clr1 upd_pict+1.2       ;7474  2b 36        Turn off "DOLBY" pictograph
    bf mem_fe6f.4,lab_747c  ;7476  31 43 6f 02  Branch if Dolby is off
    set1 upd_pict+1.2       ;747a  2a 36        Turn on "DOLBY" pictograph

lab_747c:
    clr1 upd_pict+2.7       ;747c  7b 37        Turn off "METAL" pictograph
    bf mem_fe71.4,lab_7484  ;747e  31 43 71 02  Branch if METAL sense is off

    ;METAL tape
    set1 upd_pict+2.7       ;7482  7a 37        Turn on "METAL" pictograph

lab_7484:
    mov a,!tmp_msg_idx      ;7484  8e a6 f1
    and a,#0x0f             ;7487  5d 0f
    cmp a,#0x0e             ;7489  4d 0e        e Writes "  MIN  " or "  MAX  "
    bnz lab_7492            ;748b  bd 05

    mov a,#0xff             ;748d  a1 ff
    mov !tmp_msg_idx,a      ;748f  9e a6 f1      f Writes " DIAG  "

lab_7492:
    mov b,#0xff             ;7492  a3 ff
    mov a,#0x0a             ;7494  a1 0a
    movw hl,#min            ;7496  16 91 64     HL = pointer to 7,"  MIN  "
    call !sub_6e70_copy_upd ;7499  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;749c  af

lab_749d_cd_tr:
    mov a,#0xff             ;749d  a1 ff
    mov b,#0x0a             ;749f  a3 0a
    movw hl,#cd_tr          ;74a1  16 9c 66     HL = pointer to 11,"CD   TR    "
    call !sub_6e70_copy_upd ;74a4  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp       ;74a7  16 9a f1
    mov a,!mem_fc75_cd_num1 ;74aa  8e 75 fc     A = CD number
    add a,#'0               ;74ad  0d 30        Convert it to ASCII
    mov [hl+0x03],a         ;74af  be 03        '...1.......'
    clr1 upd_pict+5.1       ;74b1  1b 3a        Turn off "MIX" pictograph
    bt mem_fe6e.0,lab_74bc  ;74b3  8c 6e 06
    mov1 cy,mem_fe6e.1      ;74b6  71 14 6e     Copy MIX flag into carry
    mov1 upd_pict+5.1,cy    ;74b9  71 11 3a     Copy carry to "MIX" pictograph

lab_74bc:
    mov a,!tmp_msg_idx      ;74bc  8e a6 f1
    and a,#0x0f             ;74bf  5d 0f
    cmp a,#0x0e             ;74c1  4d 0e        e Writes "  MIN  " or "  MAX  "
    bnz lab_74ca            ;74c3  bd 05

    mov a,#0xff             ;74c5  a1 ff
    mov !tmp_msg_idx,a      ;74c7  9e a6 f1     f Writes " DIAG  "

lab_74ca:
    mov b,#0xff             ;74ca  a3 ff
    mov a,#0x0a             ;74cc  a1 0a
    movw hl,#min            ;74ce  16 91 64     HL = 7,"  MIN  "
    call !sub_6e70_copy_upd ;74d1  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;74d4  af

lab_74d5_diag:
    call !upd_clear_disp    ;74d5  9a d0 6f     Fill all characters with spaces in upd_disp buffer
    mov a,#0xff             ;74d8  a1 ff
    mov b,#0x0a             ;74da  a3 0a
    movw hl,#diag           ;74dc  16 93 65     HL = pointer to 7," DIAG  "
    call !sub_6e70_copy_upd ;74df  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;74e2  af

lab_74e3_bass:
    mov b,#0x00             ;74e3  a3 00
    call !sub_67d9          ;74e5  9a d9 67
    push ax                 ;74e8  b1

    mov b,#0xff             ;74e9  a3 ff
    mov a,#0x0a             ;74eb  a1 0a
    movw hl,#bass           ;74ed  16 59 64   HL = pointer to 11,"BASS       "
    call !sub_6e70_copy_upd ;74f0  9a 70 6e   Copy message from [HL] to display buf; uses A, B

    pop ax                  ;74f3  b0
    mov x,a                 ;74f4  70
    cmp a,#0x09             ;74f5  4d 09
    bc lab_74ff_bass_minus  ;74f7  8d 06
    cmp a,#0x0c             ;74f9  4d 0c
    bnc lab_7511_bass_plus  ;74fb  9d 14
    br lab_7522_bass_zero   ;74fd  fa 23

lab_74ff_bass_minus:
    movw hl,#upd_disp+6     ;74ff  16 a0 f1
    mov a,#0x2d             ;7502  a1 2d
    mov [hl],a              ;7504  97           '......-....'
    movw hl,#upd_disp+8     ;7505  16 a2 f1
    mov a,#0x09             ;7508  a1 09
    sub a,x                 ;750a  61 18
    add a,#'0               ;750c  0d 30        Convert it to ASCII
    mov [hl],a              ;750e  97           '........9..'
    br lab_7528             ;750f  fa 17

lab_7511_bass_plus:
    movw hl,#upd_disp+6     ;7511  16 a0 f1
    mov a,#0x2b             ;7514  a1 2b
    mov [hl],a              ;7516  97           '......+....'
    movw hl,#upd_disp+8     ;7517  16 a2 f1
    mov a,x                 ;751a  60
    sub a,#0x0b             ;751b  1d 0b
    add a,#'0               ;751d  0d 30        Convert it to ASCII
    mov [hl],a              ;751f  97           '........9..'
    br lab_7528             ;7520  fa 06

lab_7522_bass_zero:
    movw hl,#upd_disp+8     ;7522  16 a2 f1
    mov a,#0x30             ;7525  a1 30
    mov [hl],a              ;7527  97           '........0..'

lab_7528:
    ret                     ;7528  af

lab_7529:
    call !sub_6d61_hl_band  ;7529  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br !lab_6af1            ;752c  9b f1 6a

lab_752f_mid:
    mov b,#0x01             ;752f  a3 01
    call !sub_67d9          ;7531  9a d9 67
    push ax                 ;7534  b1

    mov b,#0xff             ;7535  a3 ff
    mov a,#0x0a             ;7537  a1 0a
    movw hl,#mid            ;7539  16 65 64     HL = pointer to 11,"MID        "
    call !sub_6e70_copy_upd ;753c  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    pop ax                  ;753f  b0
    mov x,a                 ;7540  70
    cmp a,#0x09             ;7541  4d 09
    bc lab_754b_mid_minus   ;7543  8d 06
    cmp a,#0x0c             ;7545  4d 0c
    bnc lab_755d_mid_plus   ;7547  9d 14
    br lab_756e_mid_zero    ;7549  fa 23

lab_754b_mid_minus:
    movw hl,#upd_disp+6     ;754b  16 a0 f1
    mov a,#0x2d             ;754e  a1 2d
    mov [hl],a              ;7550  97           '......-....'
    movw hl,#upd_disp+8     ;7551  16 a2 f1
    mov a,#0x09             ;7554  a1 09
    sub a,x                 ;7556  61 18
    add a,#'0               ;7558  0d 30        Convert it to ASCII
    mov [hl],a              ;755a  97           '........9..'
    br lab_7574             ;755b  fa 17

lab_755d_mid_plus:
    movw hl,#upd_disp+6     ;755d  16 a0 f1
    mov a,#0x2b             ;7560  a1 2b
    mov [hl],a              ;7562  97          '......+.....'
    movw hl,#upd_disp+8     ;7563  16 a2 f1
    mov a,x                 ;7566  60
    sub a,#0x0b             ;7567  1d 0b
    add a,#'0               ;7569  0d 30        Convert it to ASCII
    mov [hl],a              ;756b  97           '........9..'
    br lab_7574             ;756c  fa 06

lab_756e_mid_zero:
    movw hl,#upd_disp+8     ;756e  16 a2 f1
    mov a,#0x30             ;7571  a1 30
    mov [hl],a              ;7573  97           '........0..'

lab_7574:
    ret                     ;7574  af

lab_7575:
    call !sub_6e70_copy_upd ;7575  9a 70 6e     Copy message from [HL] to display buf; uses A, B
    ret                     ;7578  af

lab_7579_treb:
    mov b,#0x02             ;7579  a3 02
    call !sub_67d9          ;757b  9a d9 67
    push ax                 ;757e  b1

    mov b,#0xff             ;757f  a3 ff
    mov a,#0x0a             ;7581  a1 0a
    movw hl,#treb           ;7583  16 71 64     HL = pointer to 11,"TREB       "
    call !sub_6e70_copy_upd ;7586  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    pop ax                  ;7589  b0
    mov x,a                 ;758a  70
    cmp a,#0x09             ;758b  4d 09
    bc lab_7595_treb_minus  ;758d  8d 06
    cmp a,#0x0c             ;758f  4d 0c
    bnc lab_75a7_treb_plus  ;7591  9d 14
    br lab_75b8_treb_zero   ;7593  fa 23

lab_7595_treb_minus:
    movw hl,#upd_disp+6     ;7595  16 a0 f1
    mov a,#0x2d             ;7598  a1 2d
    mov [hl],a              ;759a  97           '......-....'
    movw hl,#upd_disp+8     ;759b  16 a2 f1
    mov a,#0x09             ;759e  a1 09
    sub a,x                 ;75a0  61 18
    add a,#'0               ;75a2  0d 30        Convert it to ASCII
    mov [hl],a              ;75a4  97           '........9..'
    br lab_75be             ;75a5  fa 17

lab_75a7_treb_plus:
    movw hl,#upd_disp+6     ;75a7  16 a0 f1
    mov a,#0x2b             ;75aa  a1 2b
    mov [hl],a              ;75ac  97           '......+....'
    movw hl,#upd_disp+8     ;75ad  16 a2 f1
    mov a,x                 ;75b0  60
    sub a,#0x0b             ;75b1  1d 0b
    add a,#'0               ;75b3  0d 30        Convert it to ASCII
    mov [hl],a              ;75b5  97
    br lab_75be             ;75b6  fa 06

lab_75b8_treb_zero:
    movw hl,#upd_disp+8     ;75b8  16 a2 f1
    mov a,#0x30             ;75bb  a1 30
    mov [hl],a              ;75bd  97

lab_75be:
    ret                     ;75be  af

lab_75bf:
    call !sub_6d61_hl_band  ;75bf  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br !lab_6af1            ;75c2  9b f1 6a

lab_75c5_bal:
    call !sub_aac7          ;75c5  9a c7 aa
    push ax                 ;75c8  b1
    cmp a,#0x09             ;75c9  4d 09
    bc lab_75d3_bal_left    ;75cb  8d 06
    cmp a,#0x0c             ;75cd  4d 0c
    bnc lab_75d3_bal_right  ;75cf  9d 1a
    br lab_75d3_bal_center  ;75d1  fa 2d

lab_75d3_bal_left:
    mov b,#0xff             ;75d3  a3 ff
    mov a,#0x0a             ;75d5  a1 0a
    movw hl,#bal_left       ;75d7  16 35 64     HL = pointer to 11,"BAL LEFT   "
    call !sub_6e70_copy_upd ;75da  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp+10    ;75dd  16 a4 f1
    pop ax                  ;75e0  b0
    xch a,x                 ;75e1  30
    mov a,#0x09             ;75e2  a1 09
    sub a,x                 ;75e4  61 18
    add a,#'0               ;75e6  0d 30        Convert it to ASCII
    mov [hl],a              ;75e8  97
    br lab_760b_ret         ;75e9  fa 20

lab_75d3_bal_right:
    mov b,#0xff             ;75eb  a3 ff
    mov a,#0x0a             ;75ed  a1 0a
    movw hl,#bal_right      ;75ef  16 4d 64     HL = pointer to 11,"BAL RIGHT  "
    call !sub_6e70_copy_upd ;75f2  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp+10    ;75f5  16 a4 f1
    pop ax                  ;75f8  b0
    sub a,#0x0b             ;75f9  1d 0b
    add a,#'0               ;75fb  0d 30        Convert it to ASCII
    mov [hl],a              ;75fd  97
    br lab_760b_ret         ;75fe  fa 0b

lab_75d3_bal_center:
    mov b,#0xff             ;7600  a3 ff
    mov a,#0x0a             ;7602  a1 0a
    movw hl,#bal_center     ;7604  16 41 64     HL = pointer to 11,"BAL CENTER "
    call !sub_6e70_copy_upd ;7607  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    pop ax                  ;760a  b0

lab_760b_ret:
    ret                     ;760b  af

lab_760c:
    call !sub_6d61_hl_band  ;760c  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br !lab_6af1            ;760f  9b f1 6a

lab_7612_fade:
    call !sub_aaae          ;7612  9a ae aa
    push ax                 ;7615  b1
    cmp a,#0x09             ;7616  4d 09
    bc lab_75d3_faderear    ;7618  8d 06
    cmp a,#0x0c             ;761a  4d 0c
    bnc lab_75d3_fadefront  ;761c  9d 1a
    br lab_75d3_fadecenter  ;761e  fa 2d

lab_75d3_faderear:
    mov b,#0xff             ;7620  a3 ff
    mov a,#0x0a             ;7622  a1 0a
    movw hl,#faderear       ;7624  16 24 64     HL = pointer to 11,"FADEREAR   "
    call !sub_6e70_copy_upd ;7627  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp+10    ;762a  16 a4 f1
    pop ax                  ;762d  b0
    xch a,x                 ;762e  30
    mov a,#0x09             ;762f  a1 09
    sub a,x                 ;7631  61 18
    add a,#'0               ;7633  0d 30        Convert it to ASCII
    mov [hl],a              ;7635  97
    br lab_7658_ret         ;7636  fa 20

lab_75d3_fadefront:
    mov b,#0xff             ;7638  a3 ff
    mov a,#0x0a             ;763a  a1 0a
    movw hl,#fadefront      ;763c  16 0c 64     HL = pointer to 11,"FADEFRONT  "
    call !sub_6e70_copy_upd ;763f  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    movw hl,#upd_disp+10    ;7642  16 a4 f1
    pop ax                  ;7645  b0
    sub a,#0x0b             ;7646  1d 0b
    add a,#'0               ;7648  0d 30        Convert it to ASCII
    mov [hl],a              ;764a  97
    br lab_7658_ret         ;764b  fa 0b

lab_75d3_fadecenter:
    mov b,#0xff             ;764d  a3 ff
    mov a,#0x0a             ;764f  a1 0a
    movw hl,#fadecenter     ;7651  16 18 64     HL = pointer to 11,"FADECENTER "
    call !sub_6e70_copy_upd ;7654  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    pop ax                  ;7657  b0

lab_7658_ret:
    ret                     ;7658  af

lab_7659:
    call !sub_6d61_hl_band  ;7659  9a 61 6d     Copy message from [HL] to display buf, then write AM/kHz or FM/MHz
    br !lab_6af1            ;765c  9b f1 6a

lab_765f_flat:
    mov b,#0x83             ;765f  a3 83
    movw hl,#flat           ;7661  16 1d 65     HL = pointer to 9,"FLAT     "
    mov a,#0x0c             ;7664  a1 0c
    call !sub_6e70_copy_upd ;7666  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    ret                     ;7669  af

lab_766a_select_eq:
    mov b,#0x83             ;766a  a3 83
    movw hl,#select_eq      ;766c  16 27 65     HL = pointer to 13,"SELECT EQ #  "
    mov a,#0x10             ;766f  a1 10
    call !sub_6e70_copy_upd ;7671  9a 70 6e     Copy message from [HL] to display buf; uses A, B

    ret                     ;7674  af

lab_7675:
    call !sub_6f78          ;7675  9a 78 6f
    bf a.6,lab_768f         ;7678  31 6f 14
    mov mem_fed4,a          ;767b  f2 d4
    mov a,b                 ;767d  63
    mov mem_fed5,a          ;767e  f2 d5
    movw ax,#lab_7687       ;7680  10 87 76
    push ax                 ;7683  b1
    movw ax,hl              ;7684  c6
    br ax                   ;7685  31 98

lab_7687:
    mov a,#0x00             ;7687  a1 00
    mov !mem_fb2d,a         ;7689  9e 2d fb
    call !sub_6fa9          ;768c  9a a9 6f

lab_768f:
    ret                     ;768f  af

lab_7690:
    call !sub_7697_snd_cd   ;7690  9a 97 76     Unknown; snd_msg_idx and CD related
    call !sub_76c9_f1a9_f1ad;7693  9a c9 76     Unknown; does something with 4 bytes at mem_f1a9 and at mem_f1ad
    ret                     ;7696  af

sub_7697_snd_cd:
;Unknown; snd_msg_idx and CD related
    bt mem_fe5d.7,lab_76c2  ;7697  fc 5d 28     Sets snd_msg_idx = 0xff and returns
    bt mem_fe64.1,lab_76c2  ;769a  9c 64 25     Sets snd_msg_idx = 0xff and returns
    cmp mem_fe30,#0x03      ;769d  c8 30 03
    bnz lab_76b8            ;76a0  bd 16
    cmp mem_fe44,#0x04      ;76a2  c8 44 04
    bc lab_76c2             ;76a5  8d 1b        Sets snd_msg_idx = 0xff and returns
    cmp mem_fe44,#0x05      ;76a7  c8 44 05
    bz lab_76c2             ;76aa  ad 16        Sets snd_msg_idx = 0xff and returns
    bt mem_fe47.5,lab_76c2  ;76ac  dc 47 13     Sets snd_msg_idx = 0xff and returns

    mov a,!tmp_msg_idx      ;76af  8e a6 f1
    and a,#0x7f             ;76b2  5d 7f
    cmp a,#0x09             ;76b4  4d 09        Compare with 0x09 "CD  CD ERR "
    bz lab_76c2             ;76b6  ad 0a        Sets snd_msg_idx = 0xff and returns

lab_76b8:
    mov b,#0x05             ;76b8  a3 05
    mov a,#0xff             ;76ba  a1 ff
    movw hl,#upd_disp+10    ;76bc  16 a4 f1     XXX probably not upd_disp

lab_76bf_loop:
    mov [hl+b],a            ;76bf  bb
    dbnz b,lab_76bf_loop    ;76c0  8b fd

lab_76c2:
;Sets snd_msg_idx = 0xff
    movw hl,#snd_msg_idx    ;76c2  16 a5 f1
    mov a,#0xff             ;76c5  a1 ff
    mov [hl],a              ;76c7  97
    ret                     ;76c8  af

sub_76c9_f1a9_f1ad:
;Unknown; does something with 4 bytes at mem_f1a9 and at mem_f1ad
    mov b,#0x04             ;76c9  a3 04
    mov a,#0x00             ;76cb  a1 00
    movw hl,#mem_f1a9       ;76cd  16 a9 f1
lab_76d0_loop:
    mov [hl+b],a            ;76d0  bb
    push hl                 ;76d1  b7
    movw hl,#mem_f1ad       ;76d2  16 ad f1
    mov [hl+b],a            ;76d5  bb
    pop hl                  ;76d6  b6
    dbnz b,lab_76d0_loop    ;76d7  8b f7
    ret                     ;76d9  af

;XXX appears unused
sub_76da:
    push ax                 ;76da  b1
    mov a,[hl]              ;76db  87
    rorc a,1                ;76dc  25
    xch a,mem_fedc          ;76dd  83 dc
    add a,mem_fedc          ;76df  0e dc
    xch a,mem_fedc          ;76e1  83 dc
    cmp mem_fedc,#0x0b      ;76e3  c8 dc 0b
    bc lab_76eb             ;76e6  8d 03
    mov mem_fedc,#0x0a      ;76e8  11 dc 0a
lab_76eb:
    pop ax                  ;76eb  b0
    ret                     ;76ec  af

;XXX appears unused
sub_76ed:
    push ax                 ;76ed  b1
    push bc                 ;76ee  b3
    mov a,mem_fedc          ;76ef  f0 dc
    cmp a,#0x00             ;76f1  4d 00
    bz lab_7700             ;76f3  ad 0b
    mov b,a                 ;76f5  73
lab_76f6:
    mov a,[hl]              ;76f6  87
    inc a                   ;76f7  41
    add l,a                 ;76f8  61 06
    xch a,h                 ;76fa  37
    addc a,#0x00            ;76fb  2d 00
    xch a,h                 ;76fd  37
    dbnz b,lab_76f6         ;76fe  8b f6
lab_7700:
    pop bc                  ;7700  b2
    pop ax                  ;7701  b0
    ret                     ;7702  af

;XXX appears unused
sub_7703:
    mov a,#0x02             ;7703  a1 02
    mov !mem_fb2f,a         ;7705  9e 2f fb
    ret                     ;7708  af

;XXX appears unused
sub_7709:
    ret                     ;7709  af

mem_770a:
    .byte 0x01              ;770a  01          DATA 0x01
    .byte 0x06              ;770b  06          DATA 0x06
    .byte 0x07              ;770c  07          DATA 0x07
    .byte 0x00              ;770d  00          DATA 0x00
    .byte 0x05              ;770e  05          DATA 0x05
    .byte 0x04              ;770f  04          DATA 0x04
    .byte 0x08              ;7710  08          DATA 0x08
    .byte 0x02              ;7711  02          DATA 0x02

sub_7712:
    bt mem_fe40.1,lab_7734  ;7712  9c 40 1f
    mov a,#0x02             ;7715  a1 02
    mov !mem_fc14,a         ;7717  9e 14 fc

lab_771a:
    mov a,#0x0c             ;771a  a1 0c
    mov !mem_fb12,a         ;771c  9e 12 fb
    mov a,#0x22<<1          ;771f  a1 44        0x22 = TDA7476 I2C address
    mov !i2c_buf,a          ;7721  9e db fb
    mov a,#0xc1             ;7724  a1 c1
    movw hl,#i2c_buf        ;7726  16 db fb
    call !sub_5f51          ;7729  9a 51 5f     TODO perform I2C write?
    clr1 mem_fe40.0         ;772c  0b 40
    bc lab_7734             ;772e  8d 04        Branch if failed
    set1 mem_fe40.0         ;7730  0a 40
    set1 mem_fe40.1         ;7732  1a 40

lab_7734:
    ret                     ;7734  af

sub_7735:
    clr1 mem_fe40.0         ;7735  0b 40
    mov a,#0x44             ;7737  a1 44
    set1 a.0                ;7739  61 8a
    mov x,a                 ;773b  70
    mov a,#0x03             ;773c  a1 03
    or a,#0xc0              ;773e  6d c0
    movw hl,#mem_fc17       ;7740  16 17 fc
    clr1 mem_fe69.3         ;7743  3b 69
    bt mem_fe6b.4,lab_774a  ;7745  cc 6b 02
    set1 mem_fe69.3         ;7748  3a 69

lab_774a:
    call !sub_5ee8          ;774a  9a e8 5e     TODO perform I2C read?
    clr1 mem_fe69.3         ;774d  3b 69
    bnc lab_7761            ;774f  9d 10        Branch if succeeded
    mov a,!mem_fc14         ;7751  8e 14 fc
    cmp a,#0x00             ;7754  4d 00
    bz lab_775e             ;7756  ad 06
    dec a                   ;7758  51
    mov !mem_fc14,a         ;7759  9e 14 fc
    br lab_771a             ;775c  fa bc

lab_775e:
    clr1 mem_fe40.1         ;775e  1b 40
    ret                     ;7760  af

lab_7761:
    clr1 mem_fe40.1         ;7761  1b 40
    mov a,!mem_fc16         ;7763  8e 16 fc
    inc a                   ;7766  41
    cmp a,#0x03             ;7767  4d 03
    bnc lab_776f            ;7769  9d 04
    mov !mem_fc16,a         ;776b  9e 16 fc
    ret                     ;776e  af

lab_776f:
    mov !mem_fc16,a         ;776f  9e 16 fc
    cmp a,#0x07             ;7772  4d 07
    bc lab_777d             ;7774  8d 07
    clr1 mem_fe41.0         ;7776  0b 41
    mov a,#0x07             ;7778  a1 07
    mov !mem_fc16,a         ;777a  9e 16 fc

lab_777d:
    mov mem_fede,a          ;777d  f2 de
    bt mem_fe65.5,lab_7792  ;777f  dc 65 10
    bf mem_fe6b.4,lab_7792  ;7782  31 43 6b 0c
    bf mem_fe41.0,lab_77f8  ;7786  31 03 41 6e
    mov mem_fed4,#0x03      ;778a  11 d4 03
    mov mem_fed5,#0x06      ;778d  11 d5 06
    br lab_77a4             ;7790  fa 12

lab_7792:
    mov mem_fed4,#0x04      ;7792  11 d4 04
    mov mem_fed5,#0x08      ;7795  11 d5 08

lab_7798:
    bt mem_fe65.5,lab_77a4  ;7798  dc 65 09
    bf mem_fe6b.4,lab_77a4  ;779b  31 43 6b 05
    cmp mem_fed5,#0x04      ;779f  c8 d5 04
    bz lab_77f8             ;77a2  ad 54

lab_77a4:
    mov a,mem_fed5          ;77a4  f0 d5
    mov b,a                 ;77a6  73
    dec b                   ;77a7  53

    movw hl,#mem_770a       ;77a8  16 0a 77
    mov a,[hl+b]            ;77ab  ab
    mov mem_fed6,a          ;77ac  f2 d6
    mov c,a                 ;77ae  72

    movw hl,#mem_fb30       ;77af  16 30 fb
    mov a,[hl+b]            ;77b2  ab
    mov mem_fedc,a          ;77b3  f2 dc

    movw hl,#mem_f20d       ;77b5  16 0d f2     HL = faults buffer #2
    mov a,[hl+c]            ;77b8  aa
    mov mem_fed9,a          ;77b9  f2 d9

    movw hl,#mem_f21a       ;77bb  16 1a f2
    mov a,[hl+c]            ;77be  aa
    mov mem_fed8,a          ;77bf  f2 d8

    movw hl,#mem_fc1a       ;77c1  16 1a fc     HL = faults buffer #1
    mov a,[hl+c]            ;77c4  aa
    mov mem_fedd,a          ;77c5  f2 dd

    mov mem_fed7,#0x88      ;77c7  11 d7 88
    bf mem_fe62.1,lab_77d3  ;77ca  31 13 62 05
    cmp mem_fed5,#0x04      ;77ce  c8 d5 04
    bnz lab_77e2            ;77d1  bd 0f

lab_77d3:
    movw hl,#mem_b5c5+1     ;77d3  16 c6 b5
    callf !table_get_word   ;77d6  4c 48        Load DE with word at position B in table [HL]
    movw ax,#lab_77e2       ;77d8  10 e2 77
    push ax                 ;77db  b1
    call !sub_77f9          ;77dc  9a f9 77
    movw ax,de              ;77df  c4
    br ax                   ;77e0  31 98

lab_77e2:
    mov a,mem_fed6          ;77e2  f0 d6
    mov c,a                 ;77e4  72
    mov a,mem_fedd          ;77e5  f0 dd
    movw hl,#mem_fc1a       ;77e7  16 1a fc     HL = faults buffer #1
    mov [hl+c],a            ;77ea  ba
    mov a,mem_fed5          ;77eb  f0 d5
    mov c,a                 ;77ed  72
    dec c                   ;77ee  52
    mov a,mem_fedc          ;77ef  f0 dc
    movw hl,#mem_fb30       ;77f1  16 30 fb
    mov [hl+c],a            ;77f4  ba
    dbnz mem_fed5,lab_7798  ;77f5  04 d5 a0

lab_77f8:
    ret                     ;77f8  af

sub_77f9:
    movw hl,#mem_fc17       ;77f9  16 17 fc
    mov a,mem_fed4          ;77fc  f0 d4
    cmp a,#0x06             ;77fe  4d 06
    bnc lab_7807            ;7800  9d 05
    mov b,a                 ;7802  73
    callf !sub_0c6b         ;7803  4c 6b
    mov mem_feda,a          ;7805  f2 da

lab_7807:
    ret                     ;7807  af

lab_7808:
    mov1 cy,mem_fe40.7      ;7808  71 74 40
    mov1 mem_fe6a.6,cy      ;780b  71 61 6a
    set1 mem_fe41.1         ;780e  1a 41
    mov1 cy,mem_fe3f.3      ;7810  71 34 3f
    mov1 mem_fe6a.4,cy      ;7813  71 41 6a
    mov1 cy,mem_fe42.3      ;7816  71 34 42
    mov1 mem_fe6a.5,cy      ;7819  71 51 6a
    mov a,!mem_fb38         ;781c  8e 38 fb
    mov mem_fedb,a          ;781f  f2 db
    set1 mem_fe6a.7         ;7821  7a 6a
    call !sub_7880          ;7823  9a 80 78
    mov1 cy,mem_fe6a.4      ;7826  71 44 6a
    mov1 mem_fe3f.3,cy      ;7829  71 31 3f
    mov1 cy,mem_fe6a.6      ;782c  71 64 6a
    mov1 mem_fe40.7,cy      ;782f  71 71 40
    mov1 cy,mem_fe6a.5      ;7832  71 54 6a
    mov1 mem_fe42.3,cy      ;7835  71 31 42
    mov a,mem_fedb          ;7838  f0 db
    mov !mem_fb38,a         ;783a  9e 38 fb
    ret                     ;783d  af

lab_783e:
    mov1 cy,mem_fe40.6      ;783e  71 64 40
    mov1 mem_fe6a.6,cy      ;7841  71 61 6a
    mov1 cy,mem_fe3f.2      ;7844  71 24 3f
    mov1 mem_fe6a.4,cy      ;7847  71 41 6a
    mov1 cy,mem_fe42.2      ;784a  71 24 42
    mov1 mem_fe6a.5,cy      ;784d  71 51 6a
    mov1 cy,mem_fe6b.0      ;7850  71 04 6b
    mov1 mem_fe6a.7,cy      ;7853  71 71 6a
    mov a,!mem_fb39         ;7856  8e 39 fb
    mov mem_fedb,a          ;7859  f2 db
    clr1 mem_fe41.1         ;785b  1b 41
    call !sub_7880          ;785d  9a 80 78
    mov1 cy,mem_fe6a.4      ;7860  71 44 6a
    mov1 mem_fe3f.2,cy      ;7863  71 21 3f
    mov1 cy,mem_fe6a.6      ;7866  71 64 6a
    mov1 mem_fe40.6,cy      ;7869  71 61 40
    mov1 cy,mem_fe6a.5      ;786c  71 54 6a
    mov1 mem_fe42.2,cy      ;786f  71 21 42
    mov1 cy,mem_fe6a.7      ;7872  71 74 6a
    mov1 mem_fe6b.0,cy      ;7875  71 01 6b
    mov a,mem_fedb          ;7878  f0 db
    mov !mem_fb39,a         ;787a  9e 39 fb
    dec mem_fed4            ;787d  91 d4
    ret                     ;787f  af

sub_7880:
    bt mem_fe65.5,lab_7888  ;7880  dc 65 05
    bf mem_fe6a.6,lab_78df  ;7883  31 63 6a 58
    ret                     ;7887  af

lab_7888:
    bt mem_fe41.1,lab_78a4  ;7888  9c 41 19
    mov a,mem_fedd          ;788b  f0 dd
    cmp a,#0x88             ;788d  4d 88
    bz lab_789a             ;788f  ad 09
    bf mem_fe6a.5,lab_789a  ;7891  31 53 6a 05
    cmp mem_fedd,#0x2c      ;7895  c8 dd 2c
    bz lab_78bd             ;7898  ad 23

lab_789a:
    bt shadow_p8.1,lab_78df  ;789a  9c d2 42
    set1 shadow_p8.1         ;789d  1a d2
    mov a,shadow_p8          ;789f  f0 d2
    mov p8,a                ;78a1  f2 08
    ret                     ;78a3  af

lab_78a4:
    mov a,mem_fedd          ;78a4  f0 dd
    cmp a,#0x88             ;78a6  4d 88
    bnz lab_78b4            ;78a8  bd 0a

lab_78aa:
    bt shadow_p8.2,lab_78df  ;78aa  ac d2 32    Branch if P82=1 (Monsoon amplifier power is on)
    set1 shadow_p8.2         ;78ad  2a d2       P82=1 (Monsoon amplifier power on)
    mov a,shadow_p8          ;78af  f0 d2
    mov p8,a                ;78b1  f2 08
    ret                     ;78b3  af

lab_78b4:
    bf mem_fe6a.5,lab_78aa  ;78b4  31 53 6a f2
    cmp mem_fedd,#0x1d      ;78b8  c8 dd 1d
    bnz lab_78aa            ;78bb  bd ed

lab_78bd:
    cmp mem_fedb,#0x00      ;78bd  c8 db 00
    bnz lab_78d2            ;78c0  bd 10
    mov mem_fedb,#0x0a      ;78c2  11 db 0a
    bt mem_fe6a.6,lab_78cb  ;78c5  ec 6a 03
    mov mem_fedb,#0x5a      ;78c8  11 db 5a

lab_78cb:
    set1 cy                 ;78cb  20
    xor1 cy,mem_fe6a.6      ;78cc  71 67 6a
    mov1 mem_fe6a.6,cy      ;78cf  71 61 6a

lab_78d2:
    bt mem_fe6a.6,lab_78da  ;78d2  ec 6a 05
    bt mem_fe41.1,lab_78aa  ;78d5  9c 41 d2
    br lab_789a             ;78d8  fa c0

lab_78da:
    bt mem_fe41.1,lab_7931  ;78da  9c 41 54
    br lab_7952             ;78dd  fa 73

lab_78df:
    clr1 mem_fe41.2         ;78df  2b 41
    bf mem_fe41.1,lab_78f2  ;78e1  31 13 41 0d
    mov a,mem_feda          ;78e5  f0 da
    and a,#0x0c             ;78e7  5d 0c
    cmp a,#0x08             ;78e9  4d 08
    bnz lab_7910            ;78eb  bd 23
    mov mem_fed7,#0x1d      ;78ed  11 d7 1d
    br lab_790e             ;78f0  fa 1c

lab_78f2:
    mov a,mem_feda          ;78f2  f0 da
    and a,#0x03             ;78f4  5d 03
    cmp a,#0x02             ;78f6  4d 02
    bnz lab_78ff            ;78f8  bd 05
    mov mem_fed7,#0x2c      ;78fa  11 d7 2c
    br lab_790e             ;78fd  fa 0f

lab_78ff:
    clr1 mem_fe6c.5         ;78ff  5b 6c
    cmp a,#0x01             ;7901  4d 01
    bnz lab_7910            ;7903  bd 0b
    set1 mem_fe6c.5         ;7905  5a 6c
    bf mem_fe6b.7,lab_7910  ;7907  31 73 6b 05
    mov mem_fed7,#0x24      ;790b  11 d7 24

lab_790e:
    set1 mem_fe41.2         ;790e  2a 41

lab_7910:
    call !sub_7c7d          ;7910  9a 7d 7c
    bt mem_fe65.5,lab_795a  ;7913  dc 65 44
    bf mem_fe6a.5,lab_795a  ;7916  31 53 6a 40
    clr1 mem_fe6a.6         ;791a  6b 6a
    bf mem_fe41.1,lab_7939  ;791c  31 13 41 19
    cmp mem_fed7,#0x1d      ;7920  c8 d7 1d
    bz lab_7929             ;7923  ad 04
    set1 mem_fe6c.6         ;7925  6a 6c
    br lab_795a             ;7927  fa 31

lab_7929:
    bf mem_fe6c.6,lab_7931  ;7929  31 63 6c 04
    clr1 mem_fe6c.6         ;792d  6b 6c
    br lab_794b             ;792f  fa 1a

lab_7931:
    clr1 shadow_p8.2        ;7931  2b d2        P82=0 (Monsoon amplifier power off)
    mov a,shadow_p8         ;7933  f0 d2
    mov p8,a                ;7935  f2 08
    br lab_7958             ;7937  fa 1f

lab_7939:
    cmp mem_fed7,#0x88      ;7939  c8 d7 88
    bnz lab_7945            ;793c  bd 07
    bt mem_fe6c.5,lab_7945  ;793e  dc 6c 04
    set1 mem_fe6c.7         ;7941  7a 6c
    br lab_795a             ;7943  fa 15

lab_7945:
    bf mem_fe6c.7,lab_7952  ;7945  31 73 6c 09
    clr1 mem_fe6c.7         ;7949  7b 6c

lab_794b:
    bt mem_fe6a.4,lab_795a  ;794b  cc 6a 0c
    clr1 mem_fe6a.5         ;794e  5b 6a
    br lab_795a             ;7950  fa 08

lab_7952:
    clr1 shadow_p8.1         ;7952  1b d2
    mov a,shadow_p8          ;7954  f0 d2
    mov p8,a                 ;7956  f2 08

lab_7958:
    set1 mem_fe6a.6         ;7958  6a 6a

lab_795a:
    ret                     ;795a  af

lab_795b:
    clr1 mem_fe41.5         ;795b  5b 41
    clr1 mem_fe41.6         ;795d  6b 41
    mov1 cy,mem_fe3f.0      ;795f  71 04 3f
    mov1 mem_fe6a.4,cy      ;7962  71 41 6a
    mov1 cy,mem_fe6b.2      ;7965  71 24 6b
    mov1 mem_fe6a.7,cy      ;7968  71 71 6a
    mov1 cy,mem_fe42.0      ;796b  71 04 42
    mov1 mem_fe6a.5,cy      ;796e  71 51 6a
    mov1 cy,mem_fe40.2      ;7971  71 24 40
    mov1 mem_fe6b.3,cy      ;7974  71 31 6b
    mov1 cy,mem_fe40.4      ;7977  71 44 40
    mov1 mem_fe6a.6,cy      ;797a  71 61 6a
    mov a,!mem_fc24         ;797d  8e 24 fc
    xch a,mem_fedd          ;7980  83 dd
    mov !mem_fc24,a         ;7982  9e 24 fc
    br lab_79ba             ;7985  fa 33

lab_7987:
    mov1 cy,mem_fe3f.1      ;7987  71 14 3f
    mov1 mem_fe6a.4,cy      ;798a  71 41 6a
    mov1 cy,mem_fe6b.1      ;798d  71 14 6b
    mov1 mem_fe6a.7,cy      ;7990  71 71 6a
    mov1 cy,mem_fe42.1      ;7993  71 14 42
    mov1 mem_fe6a.5,cy      ;7996  71 51 6a
    mov1 cy,mem_fe40.3      ;7999  71 34 40
    mov1 mem_fe6b.3,cy      ;799c  71 31 6b
    mov1 cy,mem_fe40.5      ;799f  71 54 40
    mov1 mem_fe6a.6,cy      ;79a2  71 61 6a
    mov a,!mem_fc23         ;79a5  8e 23 fc
    xch a,mem_fedd          ;79a8  83 dd
    mov !mem_fc23,a         ;79aa  9e 23 fc
    clr1 mem_fe41.6         ;79ad  6b 41
    set1 mem_fe41.5         ;79af  5a 41
    mov a,!mem_f1ff         ;79b1  8e ff f1
    cmp a,#0x01             ;79b4  4d 01
    bnz lab_79ba            ;79b6  bd 02
    set1 mem_fe41.6         ;79b8  6a 41

lab_79ba:
    clr1 mem_fe41.2         ;79ba  2b 41
    bt mem_fe65.5,lab_7a0d  ;79bc  dc 65 4e
    bt mem_fe6b.4,lab_7a0d  ;79bf  cc 6b 4b
    bt mem_fe41.5,lab_79e9  ;79c2  dc 41 24
    movw hl,#mem_fc17       ;79c5  16 17 fc
    mov a,[hl+0x00]         ;79c8  ae 00
    mov mem_feda,a          ;79ca  f2 da
    and a,#0x0f             ;79cc  5d 0f
    cmp a,#0x0d             ;79ce  4d 0d
    bnz lab_79d4            ;79d0  bd 02
    br lab_7a06             ;79d2  fa 32

lab_79d4:
    cmp a,#0x0e             ;79d4  4d 0e
    bnz lab_79da            ;79d6  bd 02
    br lab_7a06             ;79d8  fa 2c

lab_79da:
    mov a,mem_feda          ;79da  f0 da
    and a,#0x3c             ;79dc  5d 3c
    cmp a,#0x1c             ;79de  4d 1c
    bz lab_7a06             ;79e0  ad 24
    cmp a,#0x2c             ;79e2  4d 2c
    bz lab_7a06             ;79e4  ad 20
    br !lab_7a70            ;79e6  9b 70 7a

lab_79e9:
    movw hl,#mem_fc17       ;79e9  16 17 fc
    mov a,[hl+0x01]         ;79ec  ae 01
    mov mem_feda,a          ;79ee  f2 da
    and a,#0xfc             ;79f0  5d fc
    cmp a,#0xdc             ;79f2  4d dc
    bz lab_7a06             ;79f4  ad 10
    cmp a,#0xec             ;79f6  4d ec
    bz lab_7a06             ;79f8  ad 0c
    mov a,mem_feda          ;79fa  f0 da
    and a,#0xcf             ;79fc  5d cf
    cmp a,#0xcd             ;79fe  4d cd
    bz lab_7a06             ;7a00  ad 04
    cmp a,#0xce             ;7a02  4d ce
    bnz lab_7a70            ;7a04  bd 6a

lab_7a06:
    clr1 mem_fe6a.6         ;7a06  6b 6a
    mov mem_fed7,#0x2c      ;7a08  11 d7 2c
    br lab_7a69             ;7a0b  fa 5c

lab_7a0d:
    clr1 mem_fe41.4         ;7a0d  4b 41
    mov a,mem_feda          ;7a0f  f0 da
    and a,#0x0f             ;7a11  5d 0f

lab_7a13:
    bt mem_fe41.0,lab_7a26  ;7a13  8c 41 10
    cmp a,#0x07             ;7a16  4d 07
    bnz lab_7a1e            ;7a18  bd 04
    set1 mem_fe6a.6         ;7a1a  6a 6a
    br lab_7a43             ;7a1c  fa 25

lab_7a1e:
    cmp a,#0x0d             ;7a1e  4d 0d
    bz lab_7a43             ;7a20  ad 21
    cmp a,#0x0e             ;7a22  4d 0e
    bz lab_7a43             ;7a24  ad 1d

lab_7a26:
    bt mem_fe41.5,lab_7a2e  ;7a26  dc 41 05
    bt mem_fe6c.1,lab_7a48  ;7a29  9c 6c 1c
    br lab_7a36             ;7a2c  fa 08

lab_7a2e:
    bf mem_fe6c.0,lab_7a36  ;7a2e  31 03 6c 04
    bf mem_fe41.6,lab_7a48  ;7a32  31 63 41 12

lab_7a36:
    and a,#0x0f             ;7a36  5d 0f
    cmp a,#0x0b             ;7a38  4d 0b
    bnz lab_7a48            ;7a3a  bd 0c
    set1 mem_fe6a.6         ;7a3c  6a 6a
    mov mem_fed7,#0x24      ;7a3e  11 d7 24
    br lab_7a46             ;7a41  fa 03

lab_7a43:
    mov mem_fed7,#0x2c      ;7a43  11 d7 2c

lab_7a46:
    set1 mem_fe41.2         ;7a46  2a 41

lab_7a48:
    bt mem_fe65.5,lab_7a51  ;7a48  dc 65 06
    bf mem_fe41.6,lab_7a51  ;7a4b  31 63 41 02
    dec mem_fed4            ;7a4f  91 d4

lab_7a51:
    clr1 mem_fe41.6         ;7a51  6b 41
    bf mem_fe41.4,lab_7a59  ;7a53  31 43 41 02
    br lab_7a70             ;7a57  fa 17

lab_7a59:
    dec mem_fed4            ;7a59  91 d4
    set1 mem_fe41.4         ;7a5b  4a 41
    cmp mem_fed7,#0x2c      ;7a5d  c8 d7 2c
    bz lab_7a70             ;7a60  ad 0e
    call !sub_77f9          ;7a62  9a f9 77
    and a,#0x0f             ;7a65  5d 0f
    br lab_7a13             ;7a67  fa aa

lab_7a69:
    set1 mem_fe41.2         ;7a69  2a 41
    bt mem_fe41.4,lab_7a70  ;7a6b  cc 41 02
    dec mem_fed4            ;7a6e  91 d4

lab_7a70:
    bf mem_fe41.0,lab_7a8f  ;7a70  31 03 41 1b
    cmp mem_fedd,#0x00      ;7a74  c8 dd 00
    bnz lab_7a80            ;7a77  bd 07
    mov a,mem_fed7          ;7a79  f0 d7
    mov mem_fedd,a          ;7a7b  f2 dd
    br !lab_7b04            ;7a7d  9b 04 7b

lab_7a80:
    mov a,mem_fed7          ;7a80  f0 d7
    cmp a,mem_fedd          ;7a82  4e dd
    bz lab_7a8a             ;7a84  ad 04
    set1 mem_fe6b.3         ;7a86  3a 6b
    br lab_7a94             ;7a88  fa 0a

lab_7a8a:
    cmp mem_fede,#0x06      ;7a8a  c8 de 06
    bc lab_7a94             ;7a8d  8d 05

lab_7a8f:
    call !sub_7c7d          ;7a8f  9a 7d 7c
    clr1 mem_fe6b.3         ;7a92  3b 6b

lab_7a94:
    bt mem_fe41.5,lab_7ace  ;7a94  dc 41 37
    mov1 cy,mem_fe6a.4      ;7a97  71 44 6a
    mov1 mem_fe3f.0,cy      ;7a9a  71 01 3f
    mov1 cy,mem_fe6a.7      ;7a9d  71 74 6a
    mov1 mem_fe6b.2,cy      ;7aa0  71 21 6b
    mov1 cy,mem_fe6a.5      ;7aa3  71 54 6a
    mov1 mem_fe42.0,cy      ;7aa6  71 01 42
    mov1 cy,mem_fe6b.3      ;7aa9  71 34 6b
    mov1 mem_fe40.2,cy      ;7aac  71 21 40
    mov1 cy,mem_fe6a.6      ;7aaf  71 64 6a
    mov1 mem_fe40.4,cy      ;7ab2  71 41 40
    mov a,!mem_fc24         ;7ab5  8e 24 fc
    cmp a,mem_fedd          ;7ab8  4e dd
    bz lab_7acd             ;7aba  ad 11
    cmp mem_fedc,#0x50      ;7abc  c8 dc 50
    bc lab_7ac8             ;7abf  8d 07
    xch a,mem_fedd          ;7ac1  83 dd
    mov !mem_fc24,a         ;7ac3  9e 24 fc
    br lab_7acd             ;7ac6  fa 05

lab_7ac8:
    mov a,mem_fedd          ;7ac8  f0 dd
    mov !mem_fc24,a         ;7aca  9e 24 fc

lab_7acd:
    ret                     ;7acd  af

lab_7ace:
    mov1 cy,mem_fe6a.4      ;7ace  71 44 6a
    mov1 mem_fe3f.1,cy      ;7ad1  71 11 3f
    mov1 cy,mem_fe6a.7      ;7ad4  71 74 6a
    mov1 mem_fe6b.1,cy      ;7ad7  71 11 6b
    mov1 cy,mem_fe6a.5      ;7ada  71 54 6a
    mov1 mem_fe42.1,cy      ;7add  71 11 42
    mov1 cy,mem_fe40.3      ;7ae0  71 34 40
    mov1 mem_fe40.3,cy      ;7ae3  71 31 40
    mov1 cy,mem_fe6a.6      ;7ae6  71 64 6a
    mov1 mem_fe40.5,cy      ;7ae9  71 51 40
    mov a,!mem_fc23         ;7aec  8e 23 fc
    cmp a,mem_fedd          ;7aef  4e dd
    bz lab_7b04             ;7af1  ad 11
    cmp mem_fedc,#0x50      ;7af3  c8 dc 50
    bc lab_7aff             ;7af6  8d 07
    xch a,mem_fedd          ;7af8  83 dd
    mov !mem_fc23,a         ;7afa  9e 23 fc
    br lab_7b04             ;7afd  fa 05

lab_7aff:
    mov a,mem_fedd          ;7aff  f0 dd
    mov !mem_fc23,a         ;7b01  9e 23 fc

lab_7b04:
    dec mem_fed4            ;7b04  91 d4
    ret                     ;7b06  af

lab_7b07:
    mov1 cy,mem_fe3f.7      ;7b07  71 74 3f
    mov1 mem_fe6a.4,cy      ;7b0a  71 41 6a
    mov1 cy,mem_fe42.7      ;7b0d  71 74 42
    mov1 mem_fe6a.5,cy      ;7b10  71 51 6a
    clr1 mem_fe41.2         ;7b13  2b 41
    set1 mem_fe6a.7         ;7b15  7a 6a
    mov a,!mem_f18d_t30_avg ;7b17  8e 8d f1
    cmp a,#97               ;7b1a  4d 61        Compare with 9.7V
    bc lab_7b28             ;7b1c  8d 0a
    bf mem_fe6c.3,lab_7b31  ;7b1e  31 33 6c 0f
    clr1 mem_fe6c.3         ;7b22  3b 6c
    cmp a,#115              ;7b24  4d 73        Compare with 11.5V
    bnc lab_7b31            ;7b26  9d 09

lab_7b28:
    set1 mem_fe41.2         ;7b28  2a 41
    set1 mem_fe6c.3         ;7b2a  3a 6c
    set1 mem_fe6c.2         ;7b2c  2a 6c
    mov mem_fed7,#0x07      ;7b2e  11 d7 07

lab_7b31:
    call !sub_7c7d          ;7b31  9a 7d 7c
    mov1 cy,mem_fe6a.4      ;7b34  71 44 6a
    mov1 mem_fe3f.7,cy      ;7b37  71 71 3f
    mov1 cy,mem_fe6a.5      ;7b3a  71 54 6a
    mov1 mem_fe42.7,cy      ;7b3d  71 71 42
    ret                     ;7b40  af

lab_7b41:
    bf mem_fe6c.2,lab_7b4d  ;7b41  31 23 6c 08
    mov a,!mem_f18d_t30_avg ;7b45  8e 8d f1
    cmp a,#116              ;7b48  4d 74        Compare with 11.6V
    bnc lab_7b4d            ;7b4a  9d 01
    ret                     ;7b4c  af

lab_7b4d:
    clr1 mem_fe6c.2         ;7b4d  2b 6c
    mov1 cy,mem_fe3f.4      ;7b4f  71 44 3f
    mov1 mem_fe6a.4,cy      ;7b52  71 41 6a
    mov1 cy,mem_fe42.4      ;7b55  71 44 42
    mov1 mem_fe6a.5,cy      ;7b58  71 51 6a
    clr1 mem_fe41.2         ;7b5b  2b 41
    set1 mem_fe6a.7         ;7b5d  7a 6a
    cmp mem_fe49,#0xff      ;7b5f  c8 49 ff
    bnz lab_7b69            ;7b62  bd 05
    set1 mem_fe41.2         ;7b64  2a 41
    mov mem_fed7,#0x31      ;7b66  11 d7 31

lab_7b69:
    mov a,!mem_f1fd         ;7b69  8e fd f1
    bt a.1,lab_7b71         ;7b6c  31 1e 02
    set1 mem_fe6c.4         ;7b6f  4a 6c

lab_7b71:
    call !sub_7c7d          ;7b71  9a 7d 7c
    mov1 cy,mem_fe6a.4      ;7b74  71 44 6a
    mov1 mem_fe3f.4,cy      ;7b77  71 41 3f
    mov1 cy,mem_fe6a.5      ;7b7a  71 54 6a
    mov1 mem_fe42.4,cy      ;7b7d  71 41 42
    clr1 mem_fe6c.4         ;7b80  4b 6c
    ret                     ;7b82  af

lab_7b83:
    mov1 cy,mem_fe3f.5      ;7b83  71 54 3f
    mov1 mem_fe6a.4,cy      ;7b86  71 41 6a
    mov1 cy,mem_fe42.5      ;7b89  71 54 42
    mov1 mem_fe6a.5,cy      ;7b8c  71 51 6a
    clr1 mem_fe41.2         ;7b8f  2b 41
    set1 mem_fe6a.7         ;7b91  7a 6a
    bt mem_fe61.2,lab_7b9b  ;7b93  ac 61 05
    set1 mem_fe41.2         ;7b96  2a 41
    mov mem_fed7,#0x31      ;7b98  11 d7 31

lab_7b9b:
    mov a,!mem_f1fd         ;7b9b  8e fd f1
    bf a.2,lab_7ba7         ;7b9e  31 2f 06
    mov a,!mem_f1e9         ;7ba1  8e e9 f1
    bt a.3,lab_7ba9         ;7ba4  31 3e 02

lab_7ba7:
    set1 mem_fe6c.4         ;7ba7  4a 6c

lab_7ba9:
    call !sub_7c7d          ;7ba9  9a 7d 7c
    mov1 cy,mem_fe6a.4      ;7bac  71 44 6a
    mov1 mem_fe3f.5,cy      ;7baf  71 51 3f
    mov1 cy,mem_fe6a.5      ;7bb2  71 54 6a
    mov1 mem_fe42.5,cy      ;7bb5  71 51 42
    clr1 mem_fe6c.4         ;7bb8  4b 6c
    ret                     ;7bba  af

lab_7bbb:
    ret                     ;7bbb  af

lab_7bbc:
    ret                     ;7bbc  af

;Perform loudspeakers output test
;XXX this test is unimplemented and does nothing
sub_7bbd:
    ret                     ;7bbd  af

sub_7bbe:
    bf mem_fe62.1,lab_7bc5  ;7bbe  31 13 62 03
    br !lab_7c50_ret        ;7bc2  9b 50 7c     Branch to return

lab_7bc5:
    set1 mem_fe41.5         ;7bc5  5a 41
    mov a,#0x06             ;7bc7  a1 06
    mov mem_fed5,a          ;7bc9  f2 d5

lab_7bcb:
    mov b,a                 ;7bcb  73
    dec b                   ;7bcc  53
    movw hl,#mem_770a       ;7bcd  16 0a 77
    mov a,[hl+b]            ;7bd0  ab
    mov mem_fed6,a          ;7bd1  f2 d6
    mov c,a                 ;7bd3  72
    movw hl,#mem_f20d       ;7bd4  16 0d f2     HL = faults buffer #2
    mov a,[hl+c]            ;7bd7  aa
    mov mem_fed9,a          ;7bd8  f2 d9
    movw hl,#mem_f21a       ;7bda  16 1a f2
    mov a,[hl+c]            ;7bdd  aa
    mov mem_fed8,a          ;7bde  f2 d8
    movw hl,#mem_fc1a       ;7be0  16 1a fc     HL = faults buffer #1
    mov a,[hl+c]            ;7be3  aa
    mov mem_fedd,a          ;7be4  f2 dd
    mov mem_fed7,a          ;7be6  f2 d7
    mov1 cy,mem_fe3f.1      ;7be8  71 14 3f
    mov1 mem_fe6a.4,cy      ;7beb  71 41 6a
    mov1 cy,mem_fe6b.1      ;7bee  71 14 6b
    mov1 mem_fe6a.7,cy      ;7bf1  71 71 6a
    mov1 cy,mem_fe42.1      ;7bf4  71 14 42
    mov1 mem_fe6a.5,cy      ;7bf7  71 51 6a
    cmp a,#0x88             ;7bfa  4d 88
    bz lab_7c03             ;7bfc  ad 05
    cmp a,mem_fed9          ;7bfe  4e d9
    bnz lab_7c0a            ;7c00  bd 08
    ret                     ;7c02  af

lab_7c03:
    clr1 mem_fe41.2         ;7c03  2b 41
    bf mem_fed9.7,lab_7c0c  ;7c05  31 73 d9 03
    ret                     ;7c09  af

lab_7c0a:
    set1 mem_fe41.2         ;7c0a  2a 41

lab_7c0c:
    set1 mem_fe41.0         ;7c0c  0a 41
    call !sub_7c7d          ;7c0e  9a 7d 7c
    bt mem_fe41.5,lab_7c28  ;7c11  dc 41 14
    mov1 cy,mem_fe6a.4      ;7c14  71 44 6a
    mov1 mem_fe3f.0,cy      ;7c17  71 01 3f
    mov1 cy,mem_fe6a.7      ;7c1a  71 74 6a
    mov1 mem_fe6b.2,cy      ;7c1d  71 21 6b
    mov1 cy,mem_fe6a.5      ;7c20  71 54 6a
    mov1 mem_fe42.0,cy      ;7c23  71 01 42
    br lab_7c3a             ;7c26  fa 12

lab_7c28:
    mov1 cy,mem_fe6a.4      ;7c28  71 44 6a
    mov1 mem_fe3f.1,cy      ;7c2b  71 11 3f
    mov1 cy,mem_fe6a.7      ;7c2e  71 74 6a
    mov1 mem_fe6b.1,cy      ;7c31  71 11 6b
    mov1 cy,mem_fe6a.5      ;7c34  71 54 6a
    mov1 mem_fe42.1,cy      ;7c37  71 11 42

lab_7c3a:
    mov a,mem_fed6          ;7c3a  f0 d6
    mov c,a                 ;7c3c  72
    mov a,mem_fedd          ;7c3d  f0 dd
    movw hl,#mem_fc1a       ;7c3f  16 1a fc       HL = faults buffer #1
    mov [hl+c],a            ;7c42  ba
    bf mem_fe41.5,lab_7c50_ret  ;7c43  31 53 41 09
    clr1 mem_fe41.5         ;7c47  5b 41
    mov a,#0x05             ;7c49  a1 05
    mov mem_fed5,a          ;7c4b  f2 d5
    br !lab_7bcb            ;7c4d  9b cb 7b

lab_7c50_ret:
    ret                     ;7c50  af

sub_7c51:
    mov a,!mem_f1fd         ;7c51  8e fd f1
    mov1 cy,a.0             ;7c54  61 8c
    mov1 mem_fe6b.7,cy      ;7c56  71 71 6b
    set1 mem_fe6c.1         ;7c59  1a 6c
    set1 mem_fe6c.0         ;7c5b  0a 6c
    mov a,!mem_f1ff         ;7c5d  8e ff f1
    cmp a,#0x00             ;7c60  4d 00
    bz lab_7c7c             ;7c62  ad 18
    cmp a,#0x04             ;7c64  4d 04
    bnz lab_7c6e            ;7c66  bd 06
    clr1 mem_fe6c.0         ;7c68  0b 6c
    clr1 mem_fe6c.1         ;7c6a  1b 6c
    br lab_7c7c             ;7c6c  fa 0e

lab_7c6e:
    cmp a,#0x02             ;7c6e  4d 02
    bnz lab_7c76            ;7c70  bd 04
    clr1 mem_fe6c.0         ;7c72  0b 6c
    br lab_7c7c             ;7c74  fa 06

lab_7c76:
    cmp a,#0x03             ;7c76  4d 03
    bnz lab_7c7c            ;7c78  bd 02
    clr1 mem_fe6c.1         ;7c7a  1b 6c

lab_7c7c:
    ret                     ;7c7c  af

sub_7c7d:
    bf mem_fe41.2,lab_7ce8  ;7c7d  31 23 41 67
    bf mem_fe41.0,lab_7c8a  ;7c81  31 03 41 05
    bt mem_fe6b.3,lab_7ce3  ;7c85  bc 6b 5b
    br lab_7cb7             ;7c88  fa 2d

lab_7c8a:
    cmp mem_fedd,#0x00      ;7c8a  c8 dd 00
    bz lab_7c94             ;7c8d  ad 05
    cmp mem_fedd,#0x88      ;7c8f  c8 dd 88
    bnz lab_7c99            ;7c92  bd 05

lab_7c94:
    mov mem_fedc,#0x64      ;7c94  11 dc 64
    br lab_7ce3             ;7c97  fa 4a

lab_7c99:
    mov a,mem_fed7          ;7c99  f0 d7
    cmp a,mem_fedd          ;7c9b  4e dd
    bnz lab_7c94            ;7c9d  bd f5
    cmp mem_fedc,#0x00      ;7c9f  c8 dc 00
    bz lab_7ca8             ;7ca2  ad 04
    set1 mem_fe6a.7         ;7ca4  7a 6a
    br lab_7ce3             ;7ca6  fa 3b

lab_7ca8:
    mov a,mem_fed9          ;7ca8  f0 d9
    cmp a,mem_fed7          ;7caa  4e d7
    bz lab_7cdf             ;7cac  ad 31
    cmp mem_fed9,#0x88      ;7cae  c8 d9 88
    bz lab_7cb7             ;7cb1  ad 04
    bf mem_fe6a.7,lab_7c94  ;7cb3  31 73 6a dd

lab_7cb7:
    bt mem_fe6c.4,lab_7cdf  ;7cb7  cc 6c 25
    movw hl,#mem_f21a       ;7cba  16 1a f2
    mov a,mem_fed6          ;7cbd  f0 d6
    mov b,a                 ;7cbf  73
    mov a,#0x00             ;7cc0  a1 00
    call !eeram_wr_byte_hl_b;7cc2  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    cmp mem_fed9,#0x88      ;7cc5  c8 d9 88
    bz lab_7cd4             ;7cc8  ad 0a
    bf mem_fed9.7,lab_7cd4  ;7cca  31 73 d9 06
    bf mem_fe6a.5,lab_7cd4  ;7cce  31 53 6a 02
    set1 mem_fe6a.4         ;7cd2  4a 6a

lab_7cd4:
    movw hl,#mem_f20d       ;7cd4  16 0d f2     HL = faults buffer #2
    mov a,mem_fed6          ;7cd7  f0 d6
    mov b,a                 ;7cd9  73
    mov a,mem_fed7          ;7cda  f0 d7
    call !eeram_wr_byte_hl_b;7cdc  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum

lab_7cdf:
    clr1 mem_fe6a.7         ;7cdf  7b 6a
    set1 mem_fe6a.5         ;7ce1  5a 6a

lab_7ce3:
    mov a,mem_fed7          ;7ce3  f0 d7
    mov mem_fedd,a          ;7ce5  f2 dd
    ret                     ;7ce7  af

lab_7ce8:
    bf mem_fe41.0,lab_7cf1  ;7ce8  31 03 41 05
    bt mem_fe6b.3,lab_7ce3  ;7cec  bc 6b f4
    br lab_7d07             ;7cef  fa 16

lab_7cf1:
    cmp mem_fedd,#0x88      ;7cf1  c8 dd 88
    bnz lab_7c94            ;7cf4  bd 9e
    cmp mem_fedc,#0x00      ;7cf6  c8 dc 00
    bnz lab_7ce3            ;7cf9  bd e8
    bt mem_fe6a.5,lab_7d2b  ;7cfb  dc 6a 2d
    cmp mem_fed9,#0x88      ;7cfe  c8 d9 88
    bnz lab_7d07            ;7d01  bd 04
    set1 mem_fe6a.5         ;7d03  5a 6a
    br lab_7ce3             ;7d05  fa dc

lab_7d07:
    bt mem_fe6a.4,lab_7ce3  ;7d07  cc 6a d9
    cmp mem_fed8,#0x00      ;7d0a  c8 d8 00
    bnz lab_7d14            ;7d0d  bd 05
    mov mem_fed8,#0x32      ;7d0f  11 d8 32
    br lab_7d1e             ;7d12  fa 0a

lab_7d14:
    dec mem_fed8            ;7d14  91 d8
    cmp mem_fed8,#0x00      ;7d16  c8 d8 00
    bnz lab_7d1e            ;7d19  bd 03
    mov mem_fed9,#0x88      ;7d1b  11 d9 88

lab_7d1e:
    movw hl,#mem_f21a       ;7d1e  16 1a f2
    mov a,mem_fed6          ;7d21  f0 d6
    mov b,a                 ;7d23  73
    mov a,mem_fed8          ;7d24  f0 d8
    call !eeram_wr_byte_hl_b;7d26  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    set1 mem_fe6a.5         ;7d29  5a 6a

lab_7d2b:
    cmp mem_fed9,#0x88      ;7d2b  c8 d9 88
    bz lab_7d4f             ;7d2e  ad 1f
    cmp mem_fed5,#0x06      ;7d30  c8 d5 06
    bz lab_7d3a             ;7d33  ad 05
    cmp mem_fed5,#0x05      ;7d35  c8 d5 05
    bnz lab_7d47            ;7d38  bd 0d

lab_7d3a:
    bt mem_fe65.5,lab_7d47  ;7d3a  dc 65 0a
    bt mem_fe6b.4,lab_7d47  ;7d3d  cc 6b 07
    bf mem_fe6a.5,lab_7d47  ;7d40  31 53 6a 03
    bt mem_fe6a.6,lab_7ce3  ;7d44  ec 6a 9c

lab_7d47:
    bt mem_fed9.7,lab_7ce3  ;7d47  fc d9 99
    bt mem_fe6a.4,lab_7ce3  ;7d4a  cc 6a 96
    set1 mem_fed9.7         ;7d4d  7a d9

lab_7d4f:
    movw hl,#mem_f20d       ;7d4f  16 0d f2     HL = faults buffer #2
    mov a,mem_fed6          ;7d52  f0 d6
    mov b,a                 ;7d54  73
    mov a,mem_fed9          ;7d55  f0 d9
    call !eeram_wr_byte_hl_b;7d57  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    br lab_7ce3             ;7d5a  fa 87

lab_7d5c:
    bt rb0_b.7,lab_7d69     ;7d5c  fc fb 0a
    bf rb0_b.6,lab_7d7f     ;7d5f  31 63 fb 1c
    call !sub_7f33          ;7d63  9a 33 7f
    bz lab_7d69             ;7d66  ad 01
    brk                     ;7d68  bf           Force cold start via badisr_0d75

lab_7d69:
    mov mem_fe43_key,#0x00  ;7d69  11 43 00
    mov a,#0xff             ;7d6c  a1 ff
    mov !mem_fc28,a         ;7d6e  9e 28 fc
    mov a,#0x00             ;7d71  a1 00
    mov !mem_fc2b,a         ;7d73  9e 2b fc
    call !sub_7f28          ;7d76  9a 28 7f
    call !sub_7f33          ;7d79  9a 33 7f
    mov a,#0xe0             ;7d7c  a1 e0
    callt [0x0042]          ;7d7e  c3           Calls sub_09b9

lab_7d7f:
    call !sub_7f33          ;7d7f  9a 33 7f
    bz lab_7d89             ;7d82  ad 05
    mov a,#0x00             ;7d84  a1 00
    mov !mem_fc2b,a         ;7d86  9e 2b fc

lab_7d89:
    mov a,!mem_fc2b         ;7d89  8e 2b fc
    mov b,a                 ;7d8c  73
    movw hl,#mem_b69a+1     ;7d8d  16 9b b6
    callf !table_get_word   ;7d90  4c 48        Load DE with word at position B in table [HL]
    bnc lab_7d9b            ;7d92  9d 07        Branch if table lookup succeeded
    mov a,#0x00             ;7d94  a1 00
    mov !mem_fc2b,a         ;7d96  9e 2b fc
    br lab_7da2             ;7d99  fa 07

lab_7d9b:
    movw ax,#lab_7da2       ;7d9b  10 a2 7d
    push ax                 ;7d9e  b1
    movw ax,de              ;7d9f  c4
    br ax                   ;7da0  31 98

lab_7da2:
    call !sub_7f33          ;7da2  9a 33 7f
    ret                     ;7da5  af

lab_7da6:
    mov a,#0x0f             ;7da6  a1 0f
    mov !mem_fb4e,a         ;7da8  9e 4e fb
    clr1 mem_fe6d.0         ;7dab  0b 6d
    call !sub_911b          ;7dad  9a 1b 91
    cmp a,#0x00             ;7db0  4d 00
    bz lab_7dbd             ;7db2  ad 09
    mov mem_fe43_key,a      ;7db4  f2 43
    cmp mem_fe43_key,#0x4a  ;7db6  c8 43 4a
    bnc lab_7dbd            ;7db9  9d 02
    br lab_7e25             ;7dbb  fa 68

lab_7dbd:
    mov a,!mem_fc28         ;7dbd  8e 28 fc
    cmp a,#0x04             ;7dc0  4d 04
    bnc lab_7df2            ;7dc2  9d 2e
    mov b,a                 ;7dc4  73
    movw hl,#mem_fc24       ;7dc5  16 24 fc
    bf mem_fe31.1,lab_7dd1  ;7dc8  31 13 31 05
    cmp a,#0x00             ;7dcc  4d 00
    mov a,[hl+b]            ;7dce  ab
    bnz lab_7dd8            ;7dcf  bd 07

lab_7dd1:
    mov a,[hl+b]            ;7dd1  ab
    bf a.7,lab_7dd8         ;7dd2  31 7f 03
    br !lab_7ed2            ;7dd5  9b d2 7e

lab_7dd8:
    or a,#0x80              ;7dd8  6d 80
    mov mem_fe43_key,a      ;7dda  f2 43
    mov a,#0xff             ;7ddc  a1 ff
    mov !mem_fc28,a         ;7dde  9e 28 fc
    movw hl,#mem_fc24       ;7de1  16 24 fc
    mov a,#0x00             ;7de4  a1 00
    mov [hl+b],a            ;7de6  bb
    mov a,#0x20             ;7de7  a1 20
    callt [0x0042]          ;7de9  c3           Calls sub_09b9
    mov a,#0x00             ;7dea  a1 00
    mov !mem_fc2a,a         ;7dec  9e 2a fc
    br !lab_7ed2            ;7def  9b d2 7e

lab_7df2:
    mov b,#0x01             ;7df2  a3 01
    bt mem_fe31.1,lab_7df9  ;7df4  9c 31 02
    mov b,#0x03             ;7df7  a3 03

lab_7df9:
    movw hl,#mem_fc24       ;7df9  16 24 fc
    mov a,[hl+b]            ;7dfc  ab
    cmp a,#0x00             ;7dfd  4d 00
    bz lab_7e0a             ;7dff  ad 09
    and a,#0x7f             ;7e01  5d 7f
    cmp a,#0x4a             ;7e03  4d 4a
    bc lab_7e0f             ;7e05  8d 08
    mov a,#0x00             ;7e07  a1 00
    mov [hl+b],a            ;7e09  bb

lab_7e0a:
    dbnz b,lab_7df9         ;7e0a  8b ed
    br !lab_7f09            ;7e0c  9b 09 7f

lab_7e0f:
    mov mem_fe43_key,a      ;7e0f  f2 43
    xch a,b                 ;7e11  33
    mov !mem_fc28,a         ;7e12  9e 28 fc
    xch a,b                 ;7e15  33
    clr1 mem_fe77.1         ;7e16  1b 77
    mov a,#0x00             ;7e18  a1 00
    mov !mem_fb2c,a         ;7e1a  9e 2c fb
    mov a,#0xff             ;7e1d  a1 ff
    mov !mem_fb3a,a         ;7e1f  9e 3a fb
    mov a,#0x20             ;7e22  a1 20
    callt [0x0044]          ;7e24  c5           Calls sub_09c6

lab_7e25:
    mov a,#0x00             ;7e25  a1 00
    mov !mem_fc2c,a         ;7e27  9e 2c fc
    mov !mem_fc2a,a         ;7e2a  9e 2a fc

lab_7e2d:
    set1 mem_fe6d.0         ;7e2d  0a 6d
    mov a,mem_fe43_key      ;7e2f  f0 43
    and a,#0x7f             ;7e31  5d 7f
    mov b,a                 ;7e33  73
    movw hl,#mem_b5d6+1     ;7e34  16 d7 b5
    callf !table_get_word   ;7e37  4c 48        Load DE with word at position B in table [HL]
    bnc lab_7e3e            ;7e39  9d 03        Branch if table lookup succeeded
    br !lab_7ed2            ;7e3b  9b d2 7e

lab_7e3e:
    mov a,#0x00             ;7e3e  a1 00
    mov !mem_fc29,a         ;7e40  9e 29 fc
    mov c,#0x00             ;7e43  a2 00
    movw ax,de              ;7e45  c4
    movw !mem_f020,ax       ;7e46  03 20 f0
    mov a,#0x01             ;7e49  a1 01
    mov !mem_fc2b,a         ;7e4b  9e 2b fc

lab_7e4e:
    mov a,c                 ;7e4e  62
    mov b,a                 ;7e4f  73
    mov a,#0x03             ;7e50  a1 03
    cmp a,!mem_fc2b         ;7e52  48 2b fc
    bz lab_7e70             ;7e55  ad 19
    mov a,!mem_f020         ;7e57  8e 20 f0
    rolc a,1                ;7e5a  27
    mov !mem_f020,a         ;7e5b  9e 20 f0
    mov a,!mem_f021         ;7e5e  8e 21 f0
    rolc a,1                ;7e61  27
    mov !mem_f021,a         ;7e62  9e 21 f0
    bnc lab_7eb6            ;7e65  9d 4f
    mov a,c                 ;7e67  62
    cmp a,!mem_fc2c         ;7e68  48 2c fc
    bc lab_7eb6             ;7e6b  8d 49
    mov b,a                 ;7e6d  73
    br lab_7e78             ;7e6e  fa 08

lab_7e70:
    movw hl,#mem_fc2d       ;7e70  16 2d fc
    mov a,[hl+b]            ;7e73  ab
    cmp a,#0x00             ;7e74  4d 00
    bz lab_7eb6             ;7e76  ad 3e

lab_7e78:
    movw hl,#mem_b66b+1     ;7e78  16 6c b6
    callf !table_get_byte   ;7e7b  4c 7d        Load A with byte at position B in table [HL]
    bc lab_7eb6             ;7e7d  8d 37        Branch if lookup failed
    mov mem_fe2f,a          ;7e7f  f2 2f
    movw hl,#mem_b67b+1     ;7e81  16 7c b6
    callf !table_get_word   ;7e84  4c 48        Load DE with word at position B in table [HL]
    bc lab_7eb6             ;7e86  8d 2e        Branch if table lookup failed
    movw ax,de              ;7e88  c4
    cmpw ax,#0x0000         ;7e89  ea 00 00
    bz lab_7eb6             ;7e8c  ad 28
    mov a,c                 ;7e8e  62
    mov !mem_fc2c,a         ;7e8f  9e 2c fc
    movw ax,#lab_7e99       ;7e92  10 99 7e
    push ax                 ;7e95  b1
    movw ax,de              ;7e96  c4
    br ax                   ;7e97  31 98

lab_7e99:
    mov a,!mem_fc2c         ;7e99  8e 2c fc
    mov c,a                 ;7e9c  72
    mov a,!mem_fc29         ;7e9d  8e 29 fc
    inc a                   ;7ea0  41
    mov !mem_fc29,a         ;7ea1  9e 29 fc
    cmp a,#0x10             ;7ea4  4d 10
    bc lab_7eb6             ;7ea6  8d 0e
    mov a,!mem_fc2c         ;7ea8  8e 2c fc
    inc a                   ;7eab  41
    mov !mem_fc2c,a         ;7eac  9e 2c fc
    mov mem_fe2f,#0x00      ;7eaf  11 2f 00
    callf !sub_0991         ;7eb2  1c 91
    br lab_7ed1             ;7eb4  fa 1b

lab_7eb6:
    inc c                   ;7eb6  42
    cmp rb0_c,#0x0f         ;7eb7  c8 fa 0f
    bc lab_7e4e             ;7eba  8d 92
    mov a,#0x00             ;7ebc  a1 00
    mov !mem_fc2c,a         ;7ebe  9e 2c fc
    mov a,#0x00             ;7ec1  a1 00
    mov !mem_fc2b,a         ;7ec3  9e 2b fc
    mov a,#0x02             ;7ec6  a1 02
    mov !mem_fb15,a         ;7ec8  9e 15 fb
    mov mem_fe2f,#0x00      ;7ecb  11 2f 00
    mov a,#0x15             ;7ece  a1 15
    callt [0x0046]          ;7ed0  c7           Calls sub_096c

lab_7ed1:
    ret                     ;7ed1  af

lab_7ed2:
    mov a,#0x00             ;7ed2  a1 00
    mov !mem_fc2c,a         ;7ed4  9e 2c fc
    mov a,!mem_fc2a         ;7ed7  8e 2a fc
    mov b,a                 ;7eda  73
    cmp a,#0x0c             ;7edb  4d 0c
    bnc lab_7ef1            ;7edd  9d 12
    movw hl,#mem_b3b6+1     ;7edf  16 b7 b3
    mov a,[hl+b]            ;7ee2  ab
    cmp a,!mem_fb3a         ;7ee3  48 3a fb
    bc lab_7ef1             ;7ee6  8d 09
    mov a,!mem_fc2a         ;7ee8  8e 2a fc
    inc a                   ;7eeb  41
    mov !mem_fc2a,a         ;7eec  9e 2a fc
    br lab_7f17             ;7eef  fa 26

lab_7ef1:
    mov a,!mem_fb10         ;7ef1  8e 10 fb
    cmp a,#0x00             ;7ef4  4d 00
    bnz lab_7f09            ;7ef6  bd 11
    mov b,#0x0f             ;7ef8  a3 0f

lab_7efa:
    movw hl,#mem_fc2c       ;7efa  16 2c fc
    mov a,[hl+b]            ;7efd  ab
    cmp a,#0x00             ;7efe  4d 00
    bnz lab_7f17            ;7f00  bd 15
    dbnz b,lab_7efa         ;7f02  8b f6
    mov a,#0xff             ;7f04  a1 ff
    mov !mem_fb10,a         ;7f06  9e 10 fb

lab_7f09:
    mov a,#0x00             ;7f09  a1 00
    mov !mem_fc2b,a         ;7f0b  9e 2b fc
    mov a,#0x02             ;7f0e  a1 02
    mov !mem_fb15,a         ;7f10  9e 15 fb
    mov a,#0x15             ;7f13  a1 15
    callt [0x0046]          ;7f15  c7           Calls sub_096c
    ret                     ;7f16  af

lab_7f17:
    mov a,!mem_fc2c         ;7f17  8e 2c fc
    mov c,a                 ;7f1a  72
    mov a,#0x00             ;7f1b  a1 00
    mov !mem_fc29,a         ;7f1d  9e 29 fc
    mov a,#0x03             ;7f20  a1 03
    mov !mem_fc2b,a         ;7f22  9e 2b fc
    br !lab_7e4e            ;7f25  9b 4e 7e

sub_7f28:
    mov b,#0x0f             ;7f28  a3 0f
    movw hl,#mem_fc2c       ;7f2a  16 2c fc
    mov a,#0x00             ;7f2d  a1 00

lab_7f2f:
    mov [hl+b],a            ;7f2f  bb
    dbnz b,lab_7f2f         ;7f30  8b fd
    ret                     ;7f32  af

sub_7f33:
    movw hl,#mem_fc2b       ;7f33  16 2b fc
    movw de,#mem_fc3c       ;7f36  14 3c fc
    mov b,#0x11             ;7f39  a3 11
    br !lab_0bf4            ;7f3b  9b f4 0b

sub_7f3e:
    mov a,!mem_fc2c         ;7f3e  8e 2c fc
    mov b,a                 ;7f41  73
    movw hl,#mem_fc2d       ;7f42  16 2d fc
    mov a,[hl+b]            ;7f45  ab
    mov mem_fed6,a          ;7f46  f2 d6
    ret                     ;7f48  af

lab_7f49:
    mov mem_fed6,#0x00      ;7f49  11 d6 00

sub_7f4c:
    mov a,!mem_fc2c         ;7f4c  8e 2c fc
    mov b,a                 ;7f4f  73
    movw hl,#mem_fc2d       ;7f50  16 2d fc
    mov a,mem_fed6          ;7f53  f0 d6
    mov [hl+b],a            ;7f55  bb
    call !sub_7f33          ;7f56  9a 33 7f
    ret                     ;7f59  af

lab_7f5a:
    call !sub_7faa          ;7f5a  9a aa 7f
    movw de,#mem_b6a3       ;7f5d  14 a3 b6
    mov a,#0x02             ;7f60  a1 02
    cmp mem_fe30,#0x00      ;7f62  c8 30 00
    bnz lab_7f69            ;7f65  bd 02
    mov a,#0x01             ;7f67  a1 01

lab_7f69:
    call !sub_5c64          ;7f69  9a 64 5c
    bz lab_7fa6             ;7f6c  ad 38
    cmp a,#0xff             ;7f6e  4d ff
    bz lab_7fa6             ;7f70  ad 34
    movw hl,#mem_b6b1       ;7f72  16 b1 b6
    br lab_7f9b             ;7f75  fa 24

lab_7f77:
    bt rb0_b.7,lab_7f84     ;7f77  fc fb 0a
    bf rb0_b.6,lab_7f8f     ;7f7a  31 63 fb 11
    call !sub_8085          ;7f7e  9a 85 80
    bz lab_7f8c             ;7f81  ad 09
    brk                     ;7f83  bf           Force cold start via badisr_0d75

lab_7f84:
    call !sub_7faf          ;7f84  9a af 7f
    call !sub_8085          ;7f87  9a 85 80
    clr1 mem_fe6d.2         ;7f8a  2b 6d

lab_7f8c:
    mov a,#0xc0             ;7f8c  a1 c0
    callt [0x0042]          ;7f8e  c3           Calls sub_09b9

lab_7f8f:
    callf !sub_099c         ;7f8f  1c 9c
    call !sub_7faa          ;7f91  9a aa 7f
    movw hl,#mem_b6b9+1     ;7f94  16 ba b6
    mov a,!mem_fc3d         ;7f97  8e 3d fc
    mov b,a                 ;7f9a  73

lab_7f9b:
    callf !table_get_word   ;7f9b  4c 48        Load DE with word at position B in table [HL]
    bc sub_7faf             ;7f9d  8d 10        Branch if table lookup failed
    movw ax,#lab_7fa6       ;7f9f  10 a6 7f
    push ax                 ;7fa2  b1
    movw ax,de              ;7fa3  c4
    br ax                   ;7fa4  31 98

lab_7fa6:
    call !sub_8085          ;7fa6  9a 85 80
    ret                     ;7fa9  af

sub_7faa:
    call !sub_8085          ;7faa  9a 85 80
    bz lab_7fc6             ;7fad  ad 17

sub_7faf:
    mov a,#0x00             ;7faf  a1 00
    mov !mem_fc3e,a         ;7fb1  9e 3e fc
    mov !mem_fc3f,a         ;7fb4  9e 3f fc
    mov !mem_fc40,a         ;7fb7  9e 40 fc
    mov !mem_fc41,a         ;7fba  9e 41 fc
    mov !mem_fc42,a         ;7fbd  9e 42 fc
    mov !mem_fc43,a         ;7fc0  9e 43 fc
    mov !mem_fc3d,a         ;7fc3  9e 3d fc

lab_7fc6:
    ret                     ;7fc6  af

lab_7fc7:
    ret                     ;7fc7  af

lab_7fc8:
    mov a,#0x03             ;7fc8  a1 03
    mov b,#0x0a             ;7fca  a3 0a
    mov c,#0x32             ;7fcc  a2 32
    br lab_7fe8             ;7fce  fa 18

lab_7fd0:
    mov a,#0x01             ;7fd0  a1 01
    mov b,#0x14             ;7fd2  a3 14
    mov c,#0x30             ;7fd4  a2 30
    br lab_7fe8             ;7fd6  fa 10

lab_7fd8:
    mov a,#0x00             ;7fd8  a1 00
    mov !mem_fc41,a         ;7fda  9e 41 fc
    bt mem_fe6d.2,lab_7fe5  ;7fdd  ac 6d 05
    mov a,#0x00             ;7fe0  a1 00
    mov !mem_fc3d,a         ;7fe2  9e 3d fc

lab_7fe5:
    br !sub_8085            ;7fe5  9b 85 80

lab_7fe8:
    mov !mem_fc41,a         ;7fe8  9e 41 fc
    mov a,b                 ;7feb  63
    mov !mem_fc42,a         ;7fec  9e 42 fc
    mov a,c                 ;7fef  62
    mov !mem_fc43,a         ;7ff0  9e 43 fc
    br !sub_8085            ;7ff3  9b 85 80

lab_7ff6:
    mov a,!mem_fc41         ;7ff6  8e 41 fc
    cmp a,#0x00             ;7ff9  4d 00
    bnz lab_8005            ;7ffb  bd 08
    bf mem_fe6d.2,lab_8004  ;7ffd  31 23 6d 03
    call !sub_a022          ;8001  9a 22 a0

lab_8004:
    ret                     ;8004  af

lab_8005:
    mov !mem_fc3e,a         ;8005  9e 3e fc
    mov a,!mem_fc42         ;8008  8e 42 fc
    mov !mem_fc3f,a         ;800b  9e 3f fc
    mov a,!mem_fc43         ;800e  8e 43 fc
    mov !mem_fc40,a         ;8011  9e 40 fc
    mov a,#0x00             ;8014  a1 00
    mov !mem_fc41,a         ;8016  9e 41 fc
    mov !mem_fc42,a         ;8019  9e 42 fc
    mov !mem_fc43,a         ;801c  9e 43 fc

lab_801f:
    mov a,#0x01             ;801f  a1 01
    mov !mem_fc3d,a         ;8021  9e 3d fc
    bt mem_fe73.0,lab_8031  ;8024  8c 73 0a
    bt mem_fe73.1,lab_8031  ;8027  9c 73 07
    bf shadow_p9.7,lab_8031  ;802a  31 73 d3 03
    bt mem_fe2d.0,lab_8032  ;802e  8c 2d 01

lab_8031:
    ret                     ;8031  af

lab_8032:
    mov a,#0x20             ;8032  a1 20
    callt [0x0044]          ;8034  c5           Calls sub_09c6
    mov a,#0x02             ;8035  a1 02
    call !sub_3dbd          ;8037  9a bd 3d
    set1 mem_fe6d.2         ;803a  2a 6d
    mov a,#0x02             ;803c  a1 02
    mov !mem_fc3d,a         ;803e  9e 3d fc
    mov a,!mem_fc3f         ;8041  8e 3f fc
    mov !mem_fb16,a         ;8044  9e 16 fb
    call !sub_9fb1          ;8047  9a b1 9f

lab_804a:
    xch a,!mem_fb16         ;804a  ce 16 fb
    cmp a,#0x00             ;804d  4d 00
    xch a,!mem_fb16         ;804f  ce 16 fb
    bz lab_8055             ;8052  ad 01
    ret                     ;8054  af

lab_8055:
    clr1 mem_fe6d.2         ;8055  2b 6d
    mov a,#0x03             ;8057  a1 03
    mov !mem_fc3d,a         ;8059  9e 3d fc
    mov a,!mem_fc40         ;805c  8e 40 fc
    mov !mem_fb16,a         ;805f  9e 16 fb
    call !sub_a022          ;8062  9a 22 a0

lab_8065:
    xch a,!mem_fb16         ;8065  ce 16 fb
    cmp a,#0x00             ;8068  4d 00
    xch a,!mem_fb16         ;806a  ce 16 fb
    bz lab_8070             ;806d  ad 01
    ret                     ;806f  af

lab_8070:
    mov a,!mem_fc3e         ;8070  8e 3e fc
    cmp a,#0x00             ;8073  4d 00
    bz lab_807d             ;8075  ad 06
    dec a                   ;8077  51
    mov !mem_fc3e,a         ;8078  9e 3e fc
    bnz lab_8032            ;807b  bd b5

lab_807d:
    clr1 mem_fe61.5         ;807d  5b 61
    mov a,#0x00             ;807f  a1 00
    mov !mem_fc3d,a         ;8081  9e 3d fc
    ret                     ;8084  af

sub_8085:
    movw hl,#mem_fc3d       ;8085  16 3d fc
    mov b,#0x08             ;8088  a3 08
    movw de,#mem_fc45       ;808a  14 45 fc
    br !lab_0bf4            ;808d  9b f4 0b

sub_8090:
;Perform ROM checksum if not already performed
    bt mem_fe6d.3,lab_80b0_ret ;8090  bc 6d 1d  Branch if ROM checksum already performed

    call !sub_47fb          ;8093  9a fb 47     Calculate ROM checksum, store in mem_fb9d-mem_fb9e
                            ;                   AX = checksum in reverse order (A=low, X=high)
    set1 mem_fe6d.3         ;8096  3a 6d        ROM checksum calculation = performed
    xch a,x                 ;8098  30           AX = checksum in standard order (A=high, X=low)

    movw hl,#checksum       ;8099  16 fe ef     HL = address of checksum high byte in ROM
    cmp a,[hl]              ;809c  4f           Does the high byte match?
    bnz lab_80a4_bad        ;809d  bd 05          No: branch

    incw hl                 ;809f  86           HL = address of checksum low byte in ROM
    xch a,x                 ;80a0  30           A = calculated low byte
    cmp a,[hl]              ;80a1  4f           Does the low byte match?
    bz lab_80b0_ret         ;80a2  ad 0c          Yes: branch

lab_80a4_bad:
;ROM checksum does not match
    mov a,!mem_f219         ;80a4  8e 19 f2
    cmp a,#0x03             ;80a7  4d 03
    bz lab_80b0_ret         ;80a9  ad 05
    mov a,#0x02             ;80ab  a1 02
    call !sub_2cae          ;80ad  9a ae 2c     Write 0 to mem_f218 and A to mem_f219 via eeram_wr_byte_hl

lab_80b0_ret:
    ret                     ;80b0  af

sub_80b1:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;80b1  4d 0a
    bc lab_80bb_lt_0x0a     ;80b3  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;80b5  1d 0a      A = A - 0x0A
    add a,#'A               ;80b7  0d 41      Convert to ASCII 'A'-'F'
    br lab_80bd_ret         ;80b9  fa 02
lab_80bb_lt_0x0a:
    add a,#'0               ;80bb  0d 30      Convert to ASCII '0'-'9'
lab_80bd_ret:
    ret                     ;80bd  af

sub_80be:
    cmp mem_fe30,#0x03      ;80be  c8 30 03
    ret                     ;80c1  af

sub_80c2:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;80c2  4d 0a
    bc lab_80cc_lt_0x0a     ;80c4  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;80c6  1d 0a      A = A - 0x0A
    add a,#'A               ;80c8  0d 41      Convert to ASCII 'A'-'F'
    br lab_80ce_ret         ;80ca  fa 02
lab_80cc_lt_0x0a:
    add a,#'0               ;80cc  0d 30      Convert to ASCII '0'-'9'
lab_80ce_ret:
    ret                     ;80ce  af

sub_80cf:
    set1 mem_fe6e.6         ;80cf  6a 6e
    mov a,#0x00             ;80d1  a1 00
    bf p6.6,lab_80d9        ;80d3  31 63 06 02
    or a,#0x02              ;80d7  6d 02

lab_80d9:
    bf p6.5,lab_80df        ;80d9  31 53 06 02
    or a,#0x01              ;80dd  6d 01

lab_80df:
    bf p6.7,lab_80e5        ;80df  31 73 06 02
    or a,#0x04              ;80e3  6d 04

lab_80e5:
    mov b,a                 ;80e5  73
    movw hl,#mem_b7a8+1     ;80e6  16 a9 b7
    callf !table_get_word   ;80e9  4c 48        Load DE with word at position B in table [HL]
    movw ax,#lab_80f2       ;80eb  10 f2 80
    push ax                 ;80ee  b1
    movw ax,de              ;80ef  c4
    br ax                   ;80f0  31 98

lab_80f2:
    mov mem_fe4a,#0xff      ;80f2  11 4a ff
    ret                     ;80f5  af

lab_80f6:
    di                      ;80f6  7b 1e
    mov mem_fe4f,#0x00      ;80f8  11 4f 00
    mov mem_fe50,#0x00      ;80fb  11 50 00
    clr1 mem_fe71.3         ;80fe  3b 71
    mov b,#0x00             ;8100  a3 00
    call !sub_813e          ;8102  9a 3e 81
    ei                      ;8105  7a 1e
    ret                     ;8107  af

lab_8108:
    di                      ;8108  7b 1e
    mov mem_fe50,#0x04      ;810a  11 50 04
    br lab_8125             ;810d  fa 16

lab_810f:
    di                      ;810f  7b 1e
    mov mem_fe50,#0x00      ;8111  11 50 00
    mov a,#0x1e             ;8114  a1 1e
    mov !mem_fb41,a         ;8116  9e 41 fb
    clr1 mem_fe71.3         ;8119  3b 71
    mov mem_fe4b,#0x04      ;811b  11 4b 04
    br lab_8133             ;811e  fa 13

lab_8120:
    di                      ;8120  7b 1e
    mov mem_fe50,#0x03      ;8122  11 50 03

lab_8125:
    mov a,#0x14             ;8125  a1 14
    mov !mem_fb41,a         ;8127  9e 41 fb
    br lab_8133             ;812a  fa 07

lab_812c:
    di                      ;812c  7b 1e
    clr1 mem_fe71.3         ;812e  3b 71
    mov mem_fe50,#0x01      ;8130  11 50 01

lab_8133:
    mov mem_fe4f,#0x01      ;8133  11 4f 01
    mov b,#0x01             ;8136  a3 01
    call !sub_813e          ;8138  9a 3e 81
    ei                      ;813b  7a 1e
    ret                     ;813d  af

sub_813e:
    mov a,!mem_fc87         ;813e  8e 87 fc
    sub a,mem_fe4c          ;8141  1e 4c
    add a,b                 ;8143  61 0b
    mov !mem_fc87,a         ;8145  9e 87 fc
    mov a,b                 ;8148  63
    mov mem_fe4c,a          ;8149  f2 4c
    ret                     ;814b  af

lab_814c:
    clr1 mem_fe6f.2         ;814c  2b 6f
    br lab_8152             ;814e  fa 02

lab_8150:
    set1 mem_fe6f.2         ;8150  2a 6f

lab_8152:
    mov a,#0x50             ;8152  a1 50
    mov !mem_fb42,a         ;8154  9e 42 fb

lab_8157:
    mov a,mem_fe50          ;8157  f0 50
    cmp a,mem_fe4f          ;8159  4e 4f
    bnz lab_8160            ;815b  bd 03

lab_815d:
    br !lab_8f58            ;815d  9b 58 8f

lab_8160:
    mov a,!mem_fb42         ;8160  8e 42 fb
    cmp a,#0x00             ;8163  4d 00
    bnz lab_8174            ;8165  bd 0d
    mov a,mem_fe4f          ;8167  f0 4f
    cmp a,#0x01             ;8169  4d 01
    bnz lab_816d            ;816b  bd 00

lab_816d:
    bf mem_fe6f.2,lab_815d  ;816d  31 23 6f ec
    br !sub_8ad0            ;8171  9b d0 8a

lab_8174:
    mov mem_fe4e,#0x1f      ;8174  11 4e 1f
    ret                     ;8177  af

sub_8178:
    bf mem_fe6e.6,lab_81bd  ;8178  31 63 6e 41
    cmp mem_fe4b,#0x25      ;817c  c8 4b 25
    bz lab_8186             ;817f  ad 05
    cmp mem_fe4b,#0x00      ;8181  c8 4b 00
    bz lab_818e             ;8184  ad 08

lab_8186:
    movw hl,#mem_b807+1     ;8186  16 08 b8
    mov a,mem_fe4b          ;8189  f0 4b
    mov b,a                 ;818b  73
    br lab_81ad             ;818c  fa 1f

lab_818e:
    cmp mem_fe50,#0x00      ;818e  c8 50 00
    bnz lab_8197            ;8191  bd 04
    clr1 mem_fe70.7         ;8193  7b 70
    br lab_8199             ;8195  fa 02

lab_8197:
    set1 mem_fe70.7         ;8197  7a 70

lab_8199:
    mov a,mem_fe50          ;8199  f0 50
    mov b,a                 ;819b  73
    movw hl,#mem_b79b+1     ;819c  16 9c b7
    callf !table_get_word   ;819f  4c 48        Load DE with word at position B in table [HL]
    bnc lab_81a8            ;81a1  9d 05        Branch if table lookup succeeded
    call !sub_8f87          ;81a3  9a 87 8f
    br lab_81bd             ;81a6  fa 15

lab_81a8:
    movw ax,de              ;81a8  c4
    movw hl,ax              ;81a9  d6
    mov a,mem_fe4f          ;81aa  f0 4f
    mov b,a                 ;81ac  73

lab_81ad:
    callf !table_get_word   ;81ad  4c 48        Load DE with word at position B in table [HL]
    bnc lab_81b6            ;81af  9d 05        Branch if table lookup succeeded
    call !sub_8f87          ;81b1  9a 87 8f
    br lab_81bd             ;81b4  fa 07

lab_81b6:
    movw ax,#lab_81bd       ;81b6  10 bd 81
    push ax                 ;81b9  b1
    movw ax,de              ;81ba  c4
    br ax                   ;81bb  31 98

lab_81bd:
    ret                     ;81bd  af

lab_81be:
    mov a,#0x14             ;81be  a1 14
    mov !mem_fb41,a         ;81c0  9e 41 fb
    call !sub_886f          ;81c3  9a 6f 88
    mov mem_fe4b,#0x02      ;81c6  11 4b 02

lab_81c9:
    mov a,!mem_fb41         ;81c9  8e 41 fb
    cmp a,#0x00             ;81cc  4d 00
    bz lab_81e6             ;81ce  ad 16
    mov a,!mem_fb18         ;81d0  8e 18 fb
    cmp a,#0x00             ;81d3  4d 00
    bnz lab_81e5            ;81d5  bd 0e
    bt p6.5,lab_81e5        ;81d7  dc 06 0b
    mov a,#0x14             ;81da  a1 14
    mov !mem_fb18,a         ;81dc  9e 18 fb
    call !sub_8853          ;81df  9a 53 88
    mov mem_fe4b,#0x03      ;81e2  11 4b 03

lab_81e5:
    ret                     ;81e5  af

lab_81e6:
    bf mem_fe70.2,lab_81ef  ;81e6  31 23 70 05

lab_81ea:
    clr1 mem_fe71.3         ;81ea  3b 71
    br !lab_873e            ;81ec  9b 3e 87

lab_81ef:
    set1 mem_fe70.2         ;81ef  2a 70
    mov a,#0x1e             ;81f1  a1 1e
    mov !mem_fb41,a         ;81f3  9e 41 fb
    call !sub_8861          ;81f6  9a 61 88

lab_81f9:
    mov a,!mem_fb41         ;81f9  8e 41 fb
    cmp a,#0x00             ;81fc  4d 00
    bz lab_81ea             ;81fe  ad ea
    mov mem_fe4b,#0x26      ;8200  11 4b 26
    bt p6.5,lab_81e5        ;8203  dc 06 df
    mov a,#0x14             ;8206  a1 14
    mov !mem_fb18,a         ;8208  9e 18 fb
    call !sub_8853          ;820b  9a 53 88

lab_820e:
    mov mem_fe4b,#0x27      ;820e  11 4b 27
    mov a,!mem_fb18         ;8211  8e 18 fb
    cmp a,#0x00             ;8214  4d 00
    bnz lab_81e5            ;8216  bd cd
    mov a,#0x14             ;8218  a1 14
    mov !mem_fb41,a         ;821a  9e 41 fb
    call !sub_886f          ;821d  9a 6f 88

lab_8220:
    mov a,!mem_fb41         ;8220  8e 41 fb
    cmp a,#0x00             ;8223  4d 00
    bz lab_81ea             ;8225  ad c3
    mov mem_fe4b,#0x28      ;8227  11 4b 28
    bf p6.5,lab_81e5        ;822a  31 53 06 b7
    br lab_81be             ;822e  fa 8e

lab_8230:
    mov a,!mem_fb18         ;8230  8e 18 fb
    cmp a,#0x00             ;8233  4d 00
    bnz lab_8242            ;8235  bd 0b
    mov a,#0x1e             ;8237  a1 1e
    mov !mem_fb41,a         ;8239  9e 41 fb
    call !sub_8861          ;823c  9a 61 88
    mov mem_fe4b,#0x04      ;823f  11 4b 04

lab_8242:
    ret                     ;8242  af

lab_8243:
    mov a,#0x1e             ;8243  a1 1e
    mov !mem_fb41,a         ;8245  9e 41 fb
    call !sub_8861          ;8248  9a 61 88
    mov mem_fe4b,#0x04      ;824b  11 4b 04

lab_824e:
    mov a,!mem_fb41         ;824e  8e 41 fb
    cmp a,#0x00             ;8251  4d 00
    bnz lab_8258            ;8253  bd 03
    br !lab_8758            ;8255  9b 58 87

lab_8258:
    bf p6.5,lab_827d        ;8258  31 53 06 21
    call !sub_8853          ;825c  9a 53 88
    clr1 mem_fe71.3         ;825f  3b 71
    cmp mem_fe4f,#0x00      ;8261  c8 4f 00
    bnz lab_8272            ;8264  bd 0c
    mov a,#0x38             ;8266  a1 38
    mov !mem_fb18,a         ;8268  9e 18 fb
    call !sub_889a          ;826b  9a 9a 88
    mov mem_fe4b,#0x09      ;826e  11 4b 09
    ret                     ;8271  af

lab_8272:
    call !sub_88f4          ;8272  9a f4 88
    mov a,#0x2d             ;8275  a1 2d
    mov !mem_fb18,a         ;8277  9e 18 fb
    mov mem_fe4b,#0x05      ;827a  11 4b 05

lab_827d:
    ret                     ;827d  af

lab_827e:
    clr1 mem_fe70.5         ;827e  5b 70
    mov a,!mem_fb18         ;8280  8e 18 fb
    cmp a,#0x00             ;8283  4d 00
    bnz lab_827d            ;8285  bd f6
    bt p6.7,lab_8294        ;8287  fc 06 0a
    mov mem_fe4f,#0x00      ;828a  11 4f 00
    set1 mem_fe71.2         ;828d  2a 71
    set1 mem_fe70.5         ;828f  5a 70
    br !lab_837b            ;8291  9b 7b 83

lab_8294:
    mov mem_fe4b,#0x06      ;8294  11 4b 06
    mov a,!mem_fb41         ;8297  8e 41 fb
    cmp a,#0x00             ;829a  4d 00
    bnz lab_82be            ;829c  bd 20
    mov a,!mem_fc80         ;829e  8e 80 fc
    cmp a,#0x00             ;82a1  4d 00
    bnz lab_82aa            ;82a3  bd 05
    bt mem_fe70.2,lab_82ce  ;82a5  ac 70 26
    set1 mem_fe70.2         ;82a8  2a 70

lab_82aa:
    call !sub_887d          ;82aa  9a 7d 88
    mov mem_fe4f,#0x00      ;82ad  11 4f 00
    mov a,#0x1e             ;82b0  a1 1e
    mov !mem_fb41,a         ;82b2  9e 41 fb
    set1 mem_fe71.2         ;82b5  2a 71
    mov mem_fe4b,#0x04      ;82b7  11 4b 04
    call !sub_8861          ;82ba  9a 61 88
    ret                     ;82bd  af

lab_82be:
    bf p6.6,lab_82cd        ;82be  31 63 06 0b
    call !sub_8888          ;82c2  9a 88 88
    mov a,#0x14             ;82c5  a1 14
    mov !mem_fb18,a         ;82c7  9e 18 fb
    mov mem_fe4b,#0x07      ;82ca  11 4b 07

lab_82cd:
    ret                     ;82cd  af

lab_82ce:
    call !sub_892a          ;82ce  9a 2a 89
    call !sub_887d          ;82d1  9a 7d 88
    clr1 mem_fe71.2         ;82d4  2b 71
    clr1 mem_fe71.3         ;82d6  3b 71
    clr1 mem_fe70.2         ;82d8  2b 70
    mov mem_fe50,#0x01      ;82da  11 50 01
    mov mem_fe4b,#0x00      ;82dd  11 4b 00
    br !lab_8adb            ;82e0  9b db 8a

lab_82e3:
    mov a,!mem_fb18         ;82e3  8e 18 fb
    cmp a,#0x00             ;82e6  4d 00
    bnz lab_82f5            ;82e8  bd 0b
    call !sub_8906          ;82ea  9a 06 89
    mov a,#0x0a             ;82ed  a1 0a
    mov !mem_fb18,a         ;82ef  9e 18 fb
    mov mem_fe4b,#0x08      ;82f2  11 4b 08

lab_82f5:
    ret                     ;82f5  af

lab_82f6:
    mov a,!mem_fb18         ;82f6  8e 18 fb
    cmp a,#0x00             ;82f9  4d 00
    bnz lab_831f            ;82fb  bd 22
    call !sub_892a          ;82fd  9a 2a 89
    call !sub_887d          ;8300  9a 7d 88
    clr1 mem_fe71.2         ;8303  2b 71
    clr1 mem_fe71.3         ;8305  3b 71
    clr1 mem_fe70.2         ;8307  2b 70
    mov mem_fe50,#0x01      ;8309  11 50 01
    mov mem_fe4b,#0x00      ;830c  11 4b 00
    mov a,!mem_fc80         ;830f  8e 80 fc
    cmp a,#0x00             ;8312  4d 00
    bz lab_831c             ;8314  ad 06
    mov mem_fe4f,#0x00      ;8316  11 4f 00
    br !lab_81be            ;8319  9b be 81

lab_831c:
    call !sub_8ae9          ;831c  9a e9 8a

lab_831f:
    ret                     ;831f  af

lab_8320:
    mov a,!mem_fb18         ;8320  8e 18 fb
    cmp a,#0x00             ;8323  4d 00
    bnz lab_832c            ;8325  bd 05
    call !sub_88ac          ;8327  9a ac 88
    br lab_832f             ;832a  fa 03

lab_832c:
    bt p6.7,lab_8332        ;832c  fc 06 03

lab_832f:
    mov mem_fe4b,#0x0a      ;832f  11 4b 0a

lab_8332:
    ret                     ;8332  af

lab_8333:
    mov a,!mem_fb41         ;8333  8e 41 fb
    cmp a,#0x00             ;8336  4d 00
    bz lab_8348             ;8338  ad 0e
    bt p6.7,lab_8347        ;833a  fc 06 0a
    call !sub_8888          ;833d  9a 88 88
    mov a,#0x14             ;8340  a1 14
    mov !mem_fb18,a         ;8342  9e 18 fb
    br lab_837b             ;8345  fa 34

lab_8347:
    ret                     ;8347  af

lab_8348:
    set1 mem_fe71.2         ;8348  2a 71
    set1 mem_fe71.7         ;834a  7a 71
    mov a,#0x50             ;834c  a1 50
    mov !mem_fb42,a         ;834e  9e 42 fb
    mov a,!mem_fc80         ;8351  8e 80 fc
    cmp a,#0x00             ;8354  4d 00
    bz lab_8362             ;8356  ad 0a
    dec a                   ;8358  51
    mov !mem_fc80,a         ;8359  9e 80 fc
    cmp a,#0x00             ;835c  4d 00
    bz lab_8372             ;835e  ad 12
    br lab_8367             ;8360  fa 05

lab_8362:
    mov a,#0x02             ;8362  a1 02
    mov !mem_fc80,a         ;8364  9e 80 fc

lab_8367:
    mov a,#0x1e             ;8367  a1 1e
    mov !mem_fb41,a         ;8369  9e 41 fb
    mov mem_fe4f,#0x01      ;836c  11 4f 01
    br !lab_824e            ;836f  9b 4e 82

lab_8372:
    set1 mem_fe71.2         ;8372  2a 71
    set1 mem_fe70.2         ;8374  2a 70
    call !sub_8ad0          ;8376  9a d0 8a
    br lab_8367             ;8379  fa ec

lab_837b:
    mov mem_fe4b,#0x0b      ;837b  11 4b 0b
    mov a,!mem_fb18         ;837e  8e 18 fb
    cmp a,#0x00             ;8381  4d 00
    bnz lab_8393            ;8383  bd 0e
    call !sub_887d          ;8385  9a 7d 88
    call !sub_88be          ;8388  9a be 88
    mov a,#0x08             ;838b  a1 08
    mov !mem_fb18,a         ;838d  9e 18 fb
    mov mem_fe4b,#0x0c      ;8390  11 4b 0c

lab_8393:
    ret                     ;8393  af

lab_8394:
    mov a,!mem_fb18         ;8394  8e 18 fb
    cmp a,#0x00             ;8397  4d 00
    bnz lab_83b0            ;8399  bd 15
    mov a,#0x00             ;839b  a1 00
    mov !mem_fc80,a         ;839d  9e 80 fc
    clr1 mem_fe70.2         ;83a0  2b 70
    call !sub_887d          ;83a2  9a 7d 88
    call !sub_892a          ;83a5  9a 2a 89
    mov mem_fe50,#0x00      ;83a8  11 50 00
    clr1 mem_fe71.2         ;83ab  2b 71
    mov mem_fe4b,#0x00      ;83ad  11 4b 00

lab_83b0:
    ret                     ;83b0  af

lab_83b1:
    clr1 mem_fe71.2         ;83b1  2b 71
    mov a,#0x14             ;83b3  a1 14
    mov !mem_fb41,a         ;83b5  9e 41 fb
    bf p6.5,lab_83c0        ;83b8  31 53 06 04
    mov mem_fe4b,#0x1d      ;83bc  11 4b 1d
    ret                     ;83bf  af

lab_83c0:
    mov mem_fe4b,#0x02      ;83c0  11 4b 02
    ret                     ;83c3  af

lab_83c4:
    clr1 mem_fe71.3         ;83c4  3b 71
    mov a,#0x01             ;83c6  a1 01
    mov !mem_fb18,a         ;83c8  9e 18 fb
    mov mem_fe4b,#0x0d      ;83cb  11 4b 0d

lab_83ce:
    mov a,!mem_fb18         ;83ce  8e 18 fb
    cmp a,#0x00             ;83d1  4d 00
    bnz lab_83b0            ;83d3  bd db
    mov a,#0x1e             ;83d5  a1 1e
    mov !mem_fb41,a         ;83d7  9e 41 fb
    call !sub_8861          ;83da  9a 61 88
    mov mem_fe4b,#0x0e      ;83dd  11 4b 0e
    ret                     ;83e0  af

lab_83e1:
    mov a,!mem_fb41         ;83e1  8e 41 fb
    cmp a,#0x00             ;83e4  4d 00
    bnz lab_83eb            ;83e6  bd 03
    br !lab_8758            ;83e8  9b 58 87

lab_83eb:
    bt p6.5,lab_8429        ;83eb  dc 06 3b
    call !sub_8853          ;83ee  9a 53 88
    mov a,#0x06             ;83f1  a1 06
    mov !mem_fb18,a         ;83f3  9e 18 fb
    mov mem_fe4b,#0x0f      ;83f6  11 4b 0f
    bt mem_fe71.0,lab_8420  ;83f9  8c 71 24
    cmp mem_fe4f,#0x02      ;83fc  c8 4f 02
    bz lab_840b             ;83ff  ad 0a
    cmp mem_fe4f,#0x03      ;8401  c8 4f 03
    bz lab_840b             ;8404  ad 05
    call !sub_8816          ;8406  9a 16 88
    br lab_841c             ;8409  fa 11

lab_840b:
    call !sub_880b          ;840b  9a 0b 88
    push psw                ;840e  22
    bf mem_fe4d.4,lab_841b  ;840f  31 43 4d 08
    pop psw                 ;8413  23
    btclr psw.6,lab_841a    ;8414  31 61 1e 02    If Z flag is set, clear it and branch
    set1 psw.6              ;8418  6a 1e          Set the Z flag

lab_841a:
    push psw                ;841a  22

lab_841b:
    pop psw                 ;841b  23

lab_841c:
    bnz lab_8424            ;841c  bd 06
    set1 mem_fe6f.3         ;841e  3a 6f

lab_8420:
    call !sub_88f4          ;8420  9a f4 88
    ret                     ;8423  af

lab_8424:
    clr1 mem_fe6f.3         ;8424  3b 6f
    call !sub_88ac          ;8426  9a ac 88

lab_8429:
    ret                     ;8429  af

lab_842a:
    mov a,!mem_fb18         ;842a  8e 18 fb
    cmp a,#0x00             ;842d  4d 00
    bnz lab_8429            ;842f  bd f8
    mov a,#0x01             ;8431  a1 01
    mov !mem_fb18,a         ;8433  9e 18 fb
    mov mem_fe4b,#0x10      ;8436  11 4b 10
    call !sub_892a          ;8439  9a 2a 89
    ret                     ;843c  af

lab_843d:
    mov a,!mem_fb18         ;843d  8e 18 fb
    cmp a,#0x00             ;8440  4d 00
    bnz lab_845a            ;8442  bd 16
    mov a,#0x18             ;8444  a1 18
    mov !mem_fb18,a         ;8446  9e 18 fb
    mov mem_fe4b,#0x11      ;8449  11 4b 11
    bt mem_fe71.0,lab_8453  ;844c  8c 71 04
    bf mem_fe6f.3,lab_8457  ;844f  31 33 6f 04

lab_8453:
    call !sub_8906          ;8453  9a 06 89
    ret                     ;8456  af

lab_8457:
    call !sub_88be          ;8457  9a be 88

lab_845a:
    ret                     ;845a  af

lab_845b:
    mov a,!mem_fb18         ;845b  8e 18 fb
    cmp a,#0x00             ;845e  4d 00
    bnz lab_849a            ;8460  bd 38
    cmp mem_fe4f,#0x03      ;8462  c8 4f 03
    bz lab_8475             ;8465  ad 0e
    cmp mem_fe4f,#0x02      ;8467  c8 4f 02
    bz lab_8475             ;846a  ad 09
    mov mem_fe4b,#0x12      ;846c  11 4b 12
    call !sub_892a          ;846f  9a 2a 89
    br !sub_8861            ;8472  9b 61 88

lab_8475:
    call !sub_887d          ;8475  9a 7d 88
    mov a,#0x14             ;8478  a1 14
    mov !mem_fb43,a         ;847a  9e 43 fb
    bt mem_fe4d.4,lab_848c  ;847d  cc 4d 0c
    bf mem_fe6f.3,lab_8489  ;8480  31 33 6f 05
    call !sub_88f4          ;8484  9a f4 88
    br lab_848c             ;8487  fa 03

lab_8489:
    call !sub_88ac          ;8489  9a ac 88

lab_848c:
    clr1 mem_fe71.3         ;848c  3b 71
    mov a,mem_fe4f          ;848e  f0 4f
    mov mem_fe50,a          ;8490  f2 50
    mov mem_fe4b,#0x00      ;8492  11 4b 00
    clr1 mem_fe70.6         ;8495  6b 70
    call !sub_8824          ;8497  9a 24 88

lab_849a:
    ret                     ;849a  af

lab_849b:
    mov a,!mem_fb41         ;849b  8e 41 fb
    cmp a,#0x00             ;849e  4d 00
    bz lab_84f4             ;84a0  ad 52
    bf p6.6,lab_84b6        ;84a2  31 63 06 10
    btclr mem_fe71.0,lab_84ac ;84a6  31 01 71 02
    br lab_84f3             ;84aa  fa 47

lab_84ac:
    bf p6.5,lab_84f3        ;84ac  31 53 06 43
    mov mem_fe4b,#0x0d      ;84b0  11 4b 0d
    br !lab_83ce            ;84b3  9b ce 83

lab_84b6:
    call !sub_8853          ;84b6  9a 53 88
    clr1 mem_fe70.2         ;84b9  2b 70
    clr1 mem_fe70.3         ;84bb  3b 70
    mov a,#0x14             ;84bd  a1 14
    mov !mem_fb18,a         ;84bf  9e 18 fb
    cmp mem_fe4f,#0x04      ;84c2  c8 4f 04
    bz lab_84df             ;84c5  ad 18
    cmp mem_fe4f,#0x05      ;84c7  c8 4f 05
    bz lab_84df             ;84ca  ad 13
    mov mem_fe4b,#0x17      ;84cc  11 4b 17
    btclr mem_fe71.0,lab_84d7 ;84cf  31 01 71 04
    bf mem_fe6f.3,lab_84db  ;84d3  31 33 6f 04

lab_84d7:
   call !sub_8918          ;84d7  9a 18 89
    ret                     ;84da  af

lab_84db:
    call !sub_88d0          ;84db  9a d0 88
    ret                     ;84de  af

lab_84df:
    mov a,#0x0a             ;84df  a1 0a
    mov !mem_fb18,a         ;84e1  9e 18 fb
    mov a,#0x32             ;84e4  a1 32
    mov !mem_fb41,a         ;84e6  9e 41 fb
    mov mem_fe4b,#0x13      ;84e9  11 4b 13
    bf mem_fe6f.3,lab_84db  ;84ec  31 33 6f eb
    call !sub_8918          ;84f0  9a 18 89

lab_84f3:
    ret                     ;84f3  af

lab_84f4:
    mov a,#0x14             ;84f4  a1 14
    mov !mem_fb41,a         ;84f6  9e 41 fb
    call !sub_886f          ;84f9  9a 6f 88
    mov mem_fe4b,#0x2c      ;84fc  11 4b 2c
    bt mem_fe70.3,lab_852a  ;84ff  bc 70 28
    set1 mem_fe70.3         ;8502  3a 70
    mov mem_fe4b,#0x29      ;8504  11 4b 29

lab_8507:
    bf p6.5,lab_852d        ;8507  31 53 06 22
    mov a,#0x14             ;850b  a1 14
    mov !mem_fb41,a         ;850d  9e 41 fb
    mov mem_fe4b,#0x2a      ;8510  11 4b 2a
    ret                     ;8513  af

lab_8514:
    bt p6.5,lab_852d        ;8514  dc 06 16
    mov a,#0x1e             ;8517  a1 1e
    mov !mem_fb41,a         ;8519  9e 41 fb
    call !sub_8861          ;851c  9a 61 88
    mov mem_fe4b,#0x2b      ;851f  11 4b 2b

lab_8522:
    bf p6.5,lab_852d        ;8522  31 53 06 07
    mov mem_fe4b,#0x0d      ;8526  11 4b 0d
    ret                     ;8529  af

lab_852a:
    bt p6.5,lab_8537        ;852a  dc 06 0a

lab_852d:
    mov a,!mem_fb41         ;852d  8e 41 fb
    cmp a,#0x00             ;8530  4d 00
    bnz lab_8537            ;8532  bd 03
    br !lab_8758            ;8534  9b 58 87

lab_8537:
    ret                     ;8537  af

lab_8538:
    mov a,!mem_fb18         ;8538  8e 18 fb
    cmp a,#0x00             ;853b  4d 00
    bnz lab_8547            ;853d  bd 08
    mov mem_fe4b,#0x14      ;853f  11 4b 14
    clr1 mem_fe71.3         ;8542  3b 71
    call !sub_881d          ;8544  9a 1d 88

lab_8547:
    ret                     ;8547  af

lab_8548:
    mov a,!mem_fb18         ;8548  8e 18 fb
    cmp a,#0x00             ;854b  4d 00
    bnz lab_8575            ;854d  bd 26
    cmp mem_fe4a,#0x06      ;854f  c8 4a 06
    bc lab_856a             ;8552  8d 16
    mov a,!mem_fb41         ;8554  8e 41 fb
    cmp a,#0x00             ;8557  4d 00
    bz lab_855f             ;8559  ad 04
    call !sub_881d          ;855b  9a 1d 88
    ret                     ;855e  af

lab_855f:
    bt mem_fe6f.6,lab_856a  ;855f  ec 6f 08
    call !sub_7697_snd_cd   ;8562  9a 97 76     Unknown; snd_msg_idx and CD related
    set1 mem_fe7e.6         ;8565  6a 7e
    call !sub_887d          ;8567  9a 7d 88

lab_856a:
    call !sub_886f          ;856a  9a 6f 88
    mov a,#0x3c             ;856d  a1 3c
    mov !mem_fb18,a         ;856f  9e 18 fb
    mov mem_fe4b,#0x15      ;8572  11 4b 15

lab_8575:
    ret                     ;8575  af

lab_8576:
    mov a,!mem_fb18         ;8576  8e 18 fb
    cmp a,#0x00             ;8579  4d 00
    bnz lab_858d            ;857b  bd 10
    mov a,mem_fe4f          ;857d  f0 4f
    mov mem_fe50,a          ;857f  f2 50
    mov mem_fe4b,#0x00      ;8581  11 4b 00
    clr1 mem_fe70.6         ;8584  6b 70
    call !sub_8824          ;8586  9a 24 88
    clr1 mem_fe70.2         ;8589  2b 70
    clr1 mem_fe70.3         ;858b  3b 70

lab_858d:
    ret                     ;858d  af

lab_858e:
    cmp mem_fe4f,#0x00      ;858e  c8 4f 00
    bnz lab_8595            ;8591  bd 02
    clr1 mem_fe71.2         ;8593  2b 71

lab_8595:
    clr1 mem_fe71.3         ;8595  3b 71
    mov a,#0x1e             ;8597  a1 1e
    mov !mem_fb41,a         ;8599  9e 41 fb
    mov a,#0x14             ;859c  a1 14
    mov !mem_fb18,a         ;859e  9e 18 fb
    call !sub_8853          ;85a1  9a 53 88
    mov mem_fe4b,#0x17      ;85a4  11 4b 17
    ret                     ;85a7  af

lab_85a8:
    mov a,!mem_fb18         ;85a8  8e 18 fb
    cmp a,#0x00             ;85ab  4d 00
    bnz lab_85b5            ;85ad  bd 06
    call !sub_8861          ;85af  9a 61 88
    mov mem_fe4b,#0x18      ;85b2  11 4b 18

lab_85b5:
    ret                     ;85b5  af

lab_85b6:
    mov a,!mem_fb41         ;85b6  8e 41 fb
    cmp a,#0x00             ;85b9  4d 00
    bnz lab_85c0            ;85bb  bd 03
    br !lab_8758            ;85bd  9b 58 87

lab_85c0:
    bf p6.6,lab_85eb        ;85c0  31 63 06 27
    call !sub_8853          ;85c4  9a 53 88
    btclr mem_fe71.0,lab_85e0 ;85c7  31 01 71 15
    mov a,#0x0a             ;85cb  a1 0a
    mov !mem_fb18,a         ;85cd  9e 18 fb
    bf mem_fe6f.3,lab_85d9  ;85d0  31 33 6f 05
    call !sub_88d0          ;85d4  9a d0 88
    br lab_85dc             ;85d7  fa 03

lab_85d9:
    call !sub_8918          ;85d9  9a 18 89

lab_85dc:
    mov mem_fe4b,#0x1a      ;85dc  11 4b 1a
    ret                     ;85df  af

lab_85e0:
    mov a,#0x0a             ;85e0  a1 0a
    mov !mem_fb18,a         ;85e2  9e 18 fb
    call !sub_88d0          ;85e5  9a d0 88
    mov mem_fe4b,#0x19      ;85e8  11 4b 19

lab_85eb:
    ret                     ;85eb  af

lab_85ec:
    mov a,!mem_fb18         ;85ec  8e 18 fb
    cmp a,#0x00             ;85ef  4d 00
    bnz lab_85fe            ;85f1  bd 0b
    mov a,#0x05             ;85f3  a1 05
    mov !mem_fb18,a         ;85f5  9e 18 fb
    call !sub_8906          ;85f8  9a 06 89
    mov mem_fe4b,#0x1a      ;85fb  11 4b 1a

lab_85fe:
    ret                     ;85fe  af

lab_85ff:
    mov a,!mem_fb18         ;85ff  8e 18 fb
    cmp a,#0x00             ;8602  4d 00
    bnz lab_860f            ;8604  bd 09
    call !sub_8888          ;8606  9a 88 88
    call !sub_8861          ;8609  9a 61 88
    mov mem_fe4b,#0x1b      ;860c  11 4b 1b

lab_860f:
    ret                     ;860f  af

lab_8610:
    mov a,!mem_fb41         ;8610  8e 41 fb
    cmp a,#0x00             ;8613  4d 00
    bnz lab_861a            ;8615  bd 03
    br !lab_8758            ;8617  9b 58 87

lab_861a:
    bf p6.5,lab_8644        ;861a  31 53 06 26
    call !sub_892a          ;861e  9a 2a 89
    cmp mem_fe4f,#0x04      ;8621  c8 4f 04
    bz lab_863c             ;8624  ad 16
    cmp mem_fe4f,#0x05      ;8626  c8 4f 05
    bz lab_863c             ;8629  ad 11
    mov a,#0x14             ;862b  a1 14
    mov !mem_fb18,a         ;862d  9e 18 fb
    call !sub_8853          ;8630  9a 53 88
    clr1 mem_fe71.3         ;8633  3b 71
    mov mem_fe50,#0x01      ;8635  11 50 01
    mov mem_fe4b,#0x1d      ;8638  11 4b 1d
    ret                     ;863b  af

lab_863c:
    mov a,#0x05             ;863c  a1 05
    mov !mem_fb18,a         ;863e  9e 18 fb
    mov mem_fe4b,#0x1c      ;8641  11 4b 1c

lab_8644:
    ret                     ;8644  af

lab_8645:
    mov a,!mem_fb18         ;8645  8e 18 fb
    cmp a,#0x00             ;8648  4d 00
    bnz lab_864f            ;864a  bd 03
    mov mem_fe4b,#0x0d      ;864c  11 4b 0d

lab_864f:
    ret                     ;864f  af

lab_8650:
    mov a,!mem_fb18         ;8650  8e 18 fb
    cmp a,#0x00             ;8653  4d 00
    bnz lab_867e            ;8655  bd 27
    call !sub_887d          ;8657  9a 7d 88
    cmp mem_fe4f,#0x01      ;865a  c8 4f 01
    bz lab_8673             ;865d  ad 14
    cmp mem_fe4f,#0x00      ;865f  c8 4f 00
    bz lab_8667             ;8662  ad 03
    br !lab_83ce            ;8664  9b ce 83

lab_8667:
    mov a,#0x1e             ;8667  a1 1e
    mov !mem_fb41,a         ;8669  9e 41 fb
    call !sub_8861          ;866c  9a 61 88
    mov mem_fe4b,#0x1e      ;866f  11 4b 1e
    ret                     ;8672  af

lab_8673:
    call !sub_88be          ;8673  9a be 88
    mov a,#0x07             ;8676  a1 07
    mov !mem_fb18,a         ;8678  9e 18 fb
    mov mem_fe4b,#0x22      ;867b  11 4b 22

lab_867e:
    ret                     ;867e  af

lab_867f:
    mov a,!mem_fb41         ;867f  8e 41 fb
    cmp a,#0x00             ;8682  4d 00
    bnz lab_8689            ;8684  bd 03
    br !lab_8758            ;8686  9b 58 87

lab_8689:
    bt p6.5,lab_869a        ;8689  dc 06 0e
    call !sub_8853          ;868c  9a 53 88
    call !sub_8906          ;868f  9a 06 89
    mov a,#0x1e             ;8692  a1 1e
    mov !mem_fb18,a         ;8694  9e 18 fb
    mov mem_fe4b,#0x1f      ;8697  11 4b 1f

lab_869a:
    ret                     ;869a  af

lab_869b:
    mov a,!mem_fb18         ;869b  8e 18 fb
    cmp a,#0x00             ;869e  4d 00
    bnz lab_86ab            ;86a0  bd 09
    call !sub_892a          ;86a2  9a 2a 89
    call !sub_886f          ;86a5  9a 6f 88
    mov mem_fe4b,#0x20      ;86a8  11 4b 20

lab_86ab:
    ret                     ;86ab  af

lab_86ac:
    mov a,!mem_fb41         ;86ac  8e 41 fb
    cmp a,#0x00             ;86af  4d 00
    bnz lab_86c5            ;86b1  bd 12
    bf mem_fe6e.4,lab_86ba  ;86b3  31 43 6e 03
    br !lab_8758            ;86b7  9b 58 87

lab_86ba:
    set1 mem_fe6e.4         ;86ba  4a 6e
    mov a,#0x1e             ;86bc  a1 1e
    mov !mem_fb41,a         ;86be  9e 41 fb
    mov mem_fe4b,#0x19      ;86c1  11 4b 19
    ret                     ;86c4  af

lab_86c5:
    bf p6.5,lab_86d1        ;86c5  31 53 06 08
    mov a,#0x05             ;86c9  a1 05
    mov !mem_fb18,a         ;86cb  9e 18 fb
    mov mem_fe4b,#0x21      ;86ce  11 4b 21

lab_86d1:
    ret                     ;86d1  af

lab_86d2:
    mov a,!mem_fb18         ;86d2  8e 18 fb
    cmp a,#0x00             ;86d5  4d 00
    bnz lab_86e1            ;86d7  bd 08
    mov a,#0x05             ;86d9  a1 05
    mov !mem_fb18,a         ;86db  9e 18 fb
    mov mem_fe4b,#0x02      ;86de  11 4b 02

lab_86e1:
    ret                     ;86e1  af

lab_86e2:
    mov a,!mem_fb18         ;86e2  8e 18 fb
    cmp a,#0x00             ;86e5  4d 00
    bnz lab_86f4            ;86e7  bd 0b
    call !sub_8888          ;86e9  9a 88 88
    mov a,#0x14             ;86ec  a1 14
    mov !mem_fb18,a         ;86ee  9e 18 fb
    mov mem_fe4b,#0x07      ;86f1  11 4b 07

lab_86f4:
    ret                     ;86f4  af

lab_86f5:
    cmp mem_fe4f,#0x00      ;86f5  c8 4f 00
    bnz lab_86fc            ;86f8  bd 02
    clr1 mem_fe71.2         ;86fa  2b 71

lab_86fc:
    clr1 mem_fe71.3         ;86fc  3b 71
    call !sub_8888          ;86fe  9a 88 88
    mov a,#0x0a             ;8701  a1 0a
    mov !mem_fb18,a         ;8703  9e 18 fb
    mov a,#0x1e             ;8706  a1 1e
    mov !mem_fb41,a         ;8708  9e 41 fb
    mov mem_fe4b,#0x23      ;870b  11 4b 23

lab_870e:
    mov a,!mem_fb18         ;870e  8e 18 fb
    cmp a,#0x00             ;8711  4d 00
    bnz lab_873d            ;8713  bd 28
    mov a,#0x14             ;8715  a1 14
    mov !mem_fb18,a         ;8717  9e 18 fb
    call !sub_892a          ;871a  9a 2a 89
    mov mem_fe4b,#0x24      ;871d  11 4b 24
    ret                     ;8720  af

lab_8721:
    mov a,!mem_fb18         ;8721  8e 18 fb
    cmp a,#0x00             ;8724  4d 00
    bnz lab_873d            ;8726  bd 15
    cmp mem_fe4f,#0x00      ;8728  c8 4f 00
    bz lab_8736             ;872b  ad 09
    cmp mem_fe4f,#0x01      ;872d  c8 4f 01
    bz lab_8736             ;8730  ad 04

lab_8732:
    mov mem_fe4b,#0x0d      ;8732  11 4b 0d
    ret                     ;8735  af

lab_8736:
    btclr mem_fe71.0,lab_8732 ;8736  31 01 71 f8
    mov mem_fe4b,#0x11      ;873a  11 4b 11

lab_873d:
    ret                     ;873d  af

lab_873e:
    mov mem_fe50,#0x06      ;873e  11 50 06
    mov mem_fe4f,#0x01      ;8741  11 4f 01
    call !sub_887d          ;8744  9a 7d 88
    call !sub_892a          ;8747  9a 2a 89
    clr1 mem_fe70.2         ;874a  2b 70
    clr1 mem_fe70.3         ;874c  3b 70
    clr1 mem_fe6e.4         ;874e  4b 6e
    mov a,#0x00             ;8750  a1 00
    mov !mem_fc80,a         ;8752  9e 80 fc
    call !sub_7697_snd_cd   ;8755  9a 97 76     Unknown; snd_msg_idx and CD related

lab_8758:
    set1 mem_fe71.3         ;8758  3a 71
    mov mem_fe4b,#0x25      ;875a  11 4b 25
    cmp mem_fe4f,#0x00      ;875d  c8 4f 00
    bz lab_8773             ;8760  ad 11
    cmp mem_fe4f,#0x04      ;8762  c8 4f 04
    bz lab_876d             ;8765  ad 06
    cmp mem_fe4f,#0x05      ;8767  c8 4f 05
    bz lab_876d             ;876a  ad 01
    ret                     ;876c  af

lab_876d:
    bt mem_fe71.2,lab_878b  ;876d  ac 71 1b
    br !lab_83c4            ;8770  9b c4 83

lab_8773:
    mov a,#0x1e             ;8773  a1 1e
    mov !mem_fb41,a         ;8775  9e 41 fb
    bt mem_fe71.2,lab_8783  ;8778  ac 71 08
    clr1 mem_fe71.2         ;877b  2b 71
    call !sub_886f          ;877d  9a 6f 88
    br !lab_81be            ;8780  9b be 81

lab_8783:
    clr1 mem_fe71.2         ;8783  2b 71
    call !sub_8861          ;8785  9a 61 88
    mov mem_fe4b,#0x04      ;8788  11 4b 04

lab_878b:
    ret                     ;878b  af

lab_878c:
    mov a,!mem_f1e9         ;878c  8e e9 f1
    bf a.2,lab_878b         ;878f  31 2f f9
    bf mem_fe71.1,lab_879a  ;8792  31 13 71 04
    clr1 mem_fe71.1         ;8796  1b 71
    set1 mem_fe71.0         ;8798  0a 71

lab_879a:
    cmp mem_fe50,#0x00      ;879a  c8 50 00
    bz lab_87d3             ;879d  ad 34
    cmp mem_fe50,#0x04      ;879f  c8 50 04
    bz lab_87e0             ;87a2  ad 3c
    cmp mem_fe50,#0x05      ;87a4  c8 50 05
    bz lab_87e0             ;87a7  ad 37
    cmp mem_fe50,#0x03      ;87a9  c8 50 03
    bz lab_87bc             ;87ac  ad 0e
    cmp mem_fe50,#0x02      ;87ae  c8 50 02
    bz lab_87b5             ;87b1  ad 02
    br lab_87f8             ;87b3  fa 43

lab_87b5:
    mov a,#0x00             ;87b5  a1 00
    cmp a,!mem_fb43         ;87b7  48 43 fb
    bnz lab_87f5            ;87ba  bd 39

lab_87bc:
    mov a,!mem_fca2_ani_t30 ;87bc  8e a2 fc     A = P91/ANI10 analog: Terminal 30 Constant B+ (V = value * 0.1)
    cmp a,#98               ;87bf  4d 62        Compare with 9.8V
    bc lab_87f5             ;87c1  8d 32
    cmp mem_fe4a,#0x1a      ;87c3  c8 4a 1a
    bnc lab_87f5            ;87c6  9d 2d
    mov a,!mem_fb18         ;87c8  8e 18 fb
    cmp a,#0x00             ;87cb  4d 00
    bnz lab_87f8            ;87cd  bd 29
    set1 mem_fe70.6         ;87cf  6a 70
    br lab_87f5             ;87d1  fa 22

lab_87d3:
    bt p6.7,lab_87d7        ;87d3  fc 06 01
    ret                     ;87d6  af

lab_87d7:
    mov a,#0x05             ;87d7  a1 05
    mov !mem_fb18,a         ;87d9  9e 18 fb
    mov mem_fe4b,#0x01      ;87dc  11 4b 01
    ret                     ;87df  af

lab_87e0:
    mov a,!mem_fca2_ani_t30 ;87e0  8e a2 fc     A = P91/ANI10 analog: Terminal 30 Constant B+ (V = value * 0.1)
    cmp a,#98               ;87e3  4d 62        Compare with 9.8V
    bc lab_87f5             ;87e5  8d 0e
    cmp mem_fe4a,#0x07      ;87e7  c8 4a 07
    bnc lab_87f5            ;87ea  9d 09
    mov a,!mem_fb18         ;87ec  8e 18 fb
    cmp a,#0x00             ;87ef  4d 00
    bnz lab_87f8            ;87f1  bd 05
    set1 mem_fe70.6         ;87f3  6a 70

lab_87f5:
    call !sub_8824          ;87f5  9a 24 88

lab_87f8:
    ret                     ;87f8  af

lab_87f9:
    mov a,!mem_fb18         ;87f9  8e 18 fb
    cmp a,#0x00             ;87fc  4d 00
    bnz lab_880a            ;87fe  bd 0a
    bf p6.7,lab_8806        ;8800  31 73 06 02
    set1 mem_fe7e.5         ;8804  5a 7e

lab_8806:
    mov mem_fe4b,#0x00      ;8806  11 4b 00
    ret                     ;8809  af

lab_880a:
    ret                     ;880a  af

sub_880b:
    bf mem_fe4d.7,sub_8816  ;880b  31 73 4d 07
    bf mem_fe4d.6,lab_881a  ;880f  31 63 4d 07

lab_8813:
    clr1 psw.6              ;8813  6b 1e        Clear the Z flag
    ret                     ;8815  af

sub_8816:
    bf mem_fe4d.6,lab_8813  ;8816  31 63 4d f9

lab_881a:
    set1 psw.6              ;881a  6a 1e        Set the Z flag
    ret                     ;881c  af

sub_881d:
    mov a,#0x19             ;881d  a1 19
    mov !mem_fb18,a         ;881f  9e 18 fb
    br lab_8829             ;8822  fa 05

sub_8824:
    mov a,#0x32             ;8824  a1 32
    mov !mem_fb18,a         ;8826  9e 18 fb

lab_8829:
    clr1 mk0h.0             ;8829  71 0b e5     Clear PMK7 (enables INTP7)
    set1 pr0h.0             ;882c  71 0a e9     Set PPR7 (makes INTP7 low priority)
    clr1 egn.7              ;882f  71 7b 49     Clear EGN7 (disables INTP7 on falling edge)
    set1 egp.7              ;8832  71 7a 48     Set EGP7 (enables INTP7 on rising edge)
    mov a,#0x00             ;8835  a1 00
    mov mem_fe4a,a          ;8837  f2 4a
    ret                     ;8839  af

;INTP7 external interrupt
;Fires on the rising edge of P07
intp7_883a:
    push ax                 ;883a  b1
    mov a,!mem_fb18         ;883b  8e 18 fb
    cmp a,#0x00             ;883e  4d 00
    bz lab_884e             ;8840  ad 0c
    inc mem_fe4a            ;8842  81 4a
    bz lab_884b             ;8844  ad 05
    clr1 if0h.0             ;8846  71 0b e1     Clear PIF7 (INTP7 interrupt flag)
    br lab_8851             ;8849  fa 06

lab_884b:
    mov mem_fe4a,#0xff      ;884b  11 4a ff

lab_884e:
    set1 mk0h.0             ;884e  71 0a e5     Set PMK7 (disables INTP7)

lab_8851:
    pop ax                  ;8851  b0
    reti                    ;8852  8f

sub_8853:
    call !sub_887d          ;8853  9a 7d 88
    clr1 shadow_p5.0         ;8856  0b cf
    clr1 shadow_p5.1         ;8858  1b cf
    push ax                 ;885a  b1
    mov a,shadow_p5          ;885b  f0 cf
    mov p5,a                ;885d  f2 05
    pop ax                  ;885f  b0
    ret                     ;8860  af

sub_8861:
    call !sub_887d          ;8861  9a 7d 88
    set1 shadow_p5.0         ;8864  0a cf
    clr1 shadow_p5.1         ;8866  1b cf
    push ax                 ;8868  b1
    mov a,shadow_p5          ;8869  f0 cf
    mov p5,a                ;886b  f2 05
    pop ax                  ;886d  b0
    ret                     ;886e  af

sub_886f:
    call !sub_887d          ;886f  9a 7d 88
    clr1 shadow_p5.0         ;8872  0b cf
    set1 shadow_p5.1         ;8874  1a cf
    push ax                 ;8876  b1
    mov a,shadow_p5          ;8877  f0 cf
    mov p5,a                ;8879  f2 05
    pop ax                  ;887b  b0
    ret                     ;887c  af

sub_887d:
    set1 shadow_p5.0         ;887d  0a cf
    set1 shadow_p5.1         ;887f  1a cf
    push ax                 ;8881  b1
    mov a,shadow_p5          ;8882  f0 cf
    mov p5,a                ;8884  f2 05
    pop ax                  ;8886  b0
    ret                     ;8887  af

sub_8888:
    call !sub_892a          ;8888  9a 2a 89
    clr1 shadow_p5.2        ;888b  2b cf
    clr1 shadow_p5.3        ;888d  3b cf
    clr1 shadow_p5.4        ;888f  4b cf
    clr1 shadow_p5.5        ;8891  5b cf
    push ax                 ;8893  b1
    mov a,shadow_p5         ;8894  f0 cf
    mov p5,a                ;8896  f2 05
    pop ax                  ;8898  b0
    ret                     ;8899  af

sub_889a:
    call !sub_892a          ;889a  9a 2a 89
    clr1 shadow_p5.2        ;889d  2b cf
    set1 shadow_p5.3        ;889f  3a cf
    clr1 shadow_p5.4        ;88a1  4b cf
    clr1 shadow_p5.5        ;88a3  5b cf
    push ax                 ;88a5  b1
    mov a,shadow_p5         ;88a6  f0 cf
    mov p5,a                ;88a8  f2 05
    pop ax                  ;88aa  b0
    ret                     ;88ab  af

sub_88ac:
    call !sub_892a          ;88ac  9a 2a 89
    clr1 shadow_p5.2        ;88af  2b cf
    set1 shadow_p5.3        ;88b1  3a cf
    clr1 shadow_p5.4        ;88b3  4b cf
    set1 shadow_p5.5        ;88b5  5a cf
    push ax                 ;88b7  b1
    mov a,shadow_p5         ;88b8  f0 cf
    mov p5,a                ;88ba  f2 05
    pop ax                  ;88bc  b0
    ret                     ;88bd  af

sub_88be:
    call !sub_892a          ;88be  9a 2a 89
    clr1 shadow_p5.2        ;88c1  2b cf
    set1 shadow_p5.3        ;88c3  3a cf
    set1 shadow_p5.4        ;88c5  4a cf
    clr1 shadow_p5.5        ;88c7  5b cf
    push ax                 ;88c9  b1
    mov a,shadow_p5         ;88ca  f0 cf
    mov p5,a                ;88cc  f2 05
    pop ax                  ;88ce  b0
    ret                     ;88cf  af

sub_88d0:
    call !sub_892a          ;88d0  9a 2a 89
    clr1 shadow_p5.2        ;88d3  2b cf
    set1 shadow_p5.3        ;88d5  3a cf
    set1 shadow_p5.4        ;88d7  4a cf
    set1 shadow_p5.5        ;88d9  5a cf
    push ax                 ;88db  b1
    mov a,shadow_p5         ;88dc  f0 cf
    mov p5,a                ;88de  f2 05
    pop ax                  ;88e0  b0
    ret                     ;88e1  af

lab_88e2:
    call !sub_892a          ;88e2  9a 2a 89
    set1 shadow_p5.2        ;88e5  2a cf
    clr1 shadow_p5.3        ;88e7  3b cf
    clr1 shadow_p5.4        ;88e9  4b cf
    clr1 shadow_p5.5        ;88eb  5b cf
    push ax                 ;88ed  b1
    mov a,shadow_p5         ;88ee  f0 cf
    mov p5,a                ;88f0  f2 05
    pop ax                  ;88f2  b0
    ret                     ;88f3  af

sub_88f4:
    call !sub_892a          ;88f4  9a 2a 89
    set1 shadow_p5.2        ;88f7  2a cf
    clr1 shadow_p5.3        ;88f9  3b cf
    clr1 shadow_p5.4        ;88fb  4b cf
    set1 shadow_p5.5        ;88fd  5a cf
    push ax                 ;88ff  b1
    mov a,shadow_p5         ;8900  f0 cf
    mov p5,a                ;8902  f2 05
    pop ax                  ;8904  b0
    ret                     ;8905  af

sub_8906:
    call !sub_892a          ;8906  9a 2a 89
    set1 shadow_p5.2        ;8909  2a cf
    clr1 shadow_p5.3        ;890b  3b cf
    set1 shadow_p5.4        ;890d  4a cf
    clr1 shadow_p5.5        ;890f  5b cf
    push ax                 ;8911  b1
    mov a,shadow_p5         ;8912  f0 cf
    mov p5,a                ;8914  f2 05
    pop ax                  ;8916  b0
    ret                     ;8917  af

sub_8918:
    call !sub_892a          ;8918  9a 2a 89
    set1 shadow_p5.2        ;891b  2a cf
    clr1 shadow_p5.3        ;891d  3b cf
    set1 shadow_p5.4        ;891f  4a cf
    set1 shadow_p5.5        ;8921  5a cf
    push ax                 ;8923  b1
    mov a,shadow_p5         ;8924  f0 cf
    mov p5,a                ;8926  f2 05
    pop ax                  ;8928  b0
    ret                     ;8929  af

sub_892a:
    set1 shadow_p5.2        ;892a  2a cf
    set1 shadow_p5.3        ;892c  3a cf
    set1 shadow_p5.4        ;892e  4a cf
    set1 shadow_p5.5        ;8930  5a cf
    push ax                 ;8932  b1
    mov a,shadow_p5         ;8933  f0 cf
    mov p5,a                ;8935  f2 05
    pop ax                  ;8937  b0
    ret                     ;8938  af

sub_8939:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;8939  4d 0a
    bc lab_8943_lt_0x0a     ;893b  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;893d  1d 0a      A = A - 0x0A
    add a,#'A               ;893f  0d 41      Convert to ASCII 'A'-'F'
    br lab_8945_ret         ;8941  fa 02
lab_8943_lt_0x0a:
    add a,#'0               ;8943  0d 30      Convert to ASCII '0'-'9'
lab_8945_ret:
    ret                     ;8945  af

sub_8946:
    bf mem_fe4d.5,lab_894e  ;8946  31 53 4d 04
    mov !mem_fc86,a         ;894a  9e 86 fc
    pop ax                  ;894d  b0

lab_894e:
    ret                     ;894e  af

lab_894f:
    call !sub_8ac6          ;894f  9a c6 8a
    mov a,mem_fe4c          ;8952  f0 4c
    mov b,a                 ;8954  73
    movw de,#mem_b862       ;8955  14 62 b8
    cmp rb0_b,#0x08         ;8958  c8 fb 08
    bc lab_8963             ;895b  8d 06
    movw de,#mem_b910       ;895d  14 10 b9
    sub rb0_b,#0x08         ;8960  98 fb 08

lab_8963:
    movw hl,#mem_af75_patterns ;8963  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;8966  ab
    call !sub_5c64          ;8967  9a 64 5c
    cmp rb0_b,#0x00         ;896a  c8 fb 00
    bnz lab_8972            ;896d  bd 03
    br !lab_8a9d            ;896f  9b 9d 8a

lab_8972:
    cmp mem_fe30,#0x02      ;8972  c8 30 02
    bz lab_8997             ;8975  ad 20
    cmp mem_fe43_key,#0x27  ;8977  c8 43 27
    bz lab_89b3             ;897a  ad 37
    cmp mem_fe43_key,#0x32  ;897c  c8 43 32
    bz lab_89b3             ;897f  ad 32
    cmp mem_fe43_key,#0x33  ;8981  c8 43 33
    bz lab_89b3             ;8984  ad 2d
    cmp mem_fe43_key,#0x15  ;8986  c8 43 15
    bz lab_89b3             ;8989  ad 28
    cmp mem_fe43_key,#0x34  ;898b  c8 43 34
    bz lab_89b3             ;898e  ad 23
    cmp mem_fe43_key,#0x26  ;8990  c8 43 26
    bz lab_89b3             ;8993  ad 1e
    br lab_89b0             ;8995  fa 19

lab_8997:
    bf mem_fe5d.7,lab_899d  ;8997  31 73 5d 02
    br lab_89b0             ;899b  fa 13

lab_899d:
    mov a,!mem_f1e9         ;899d  8e e9 f1
    mov1 cy,a.0             ;89a0  61 8c
    bnc lab_89b3            ;89a2  9d 0f
    cmp mem_fe43_key,#0x08  ;89a4  c8 43 08     Key = SEEK_UP?
    bz lab_89b0             ;89a7  ad 07
    cmp mem_fe43_key,#0x09  ;89a9  c8 43 09     Key = SEEK_DOWN?
    bz lab_89b0             ;89ac  ad 02
    br lab_89b3             ;89ae  fa 03

lab_89b0:
    mov rb0_b,#0xff         ;89b0  11 fb ff

lab_89b3:
    cmp rb0_b,#0xff         ;89b3  c8 fb ff
    bnz lab_89bb            ;89b6  bd 03
    br !lab_8a9d            ;89b8  9b 9d 8a

lab_89bb:
    clr1 mem_fe6f.0         ;89bb  0b 6f
    movw hl,#mem_b9d8+1     ;89bd  16 d9 b9
    br !lab_8a8a            ;89c0  9b 8a 8a

lab_89c3:
    bt rb0_b.7,lab_89e6     ;89c3  fc fb 20
    bt rb0_b.6,lab_89cb     ;89c6  ec fb 02
    br lab_8a42             ;89c9  fa 77

lab_89cb:
    clr1 pm8.7              ;89cb  71 7b 28
    set1 shadow_p8.7        ;89ce  7a d2
    mov a,shadow_p8         ;89d0  f0 d2
    mov p8,a                ;89d2  f2 08
    clr1 pu2.3              ;89d4  71 3b 32
    set1 pm2.3              ;89d7  71 3a 22
    clr1 mem_fe70.6         ;89da  6b 70
    clr1 mem_fe71.7         ;89dc  7b 71
    clr1 mem_fe6f.7         ;89de  7b 6f
    call !sub_8f8f          ;89e0  9a 8f 8f
    bz lab_8a3f             ;89e3  ad 5a
    brk                     ;89e5  bf           Force cold start via badisr_0d75

lab_89e6:
    clr1 pu6.5              ;89e6  71 5b 36
    set1 pm6.5              ;89e9  71 5a 26
    clr1 pu6.6              ;89ec  71 6b 36
    set1 pm6.6              ;89ef  71 6a 26
    clr1 pu6.7              ;89f2  71 7b 36
    set1 pm6.7              ;89f5  71 7a 26
    set1 shadow_p5.0        ;89f8  0a cf
    set1 shadow_p5.1        ;89fa  1a cf
    push ax                 ;89fc  b1
    mov a,shadow_p5         ;89fd  f0 cf
    mov p5,a                ;89ff  f2 05
    pop ax                  ;8a01  b0
    clr1 pm5.0              ;8a02  71 0b 25
    clr1 pm5.1              ;8a05  71 1b 25
    set1 shadow_p5.2        ;8a08  2a cf
    set1 shadow_p5.3        ;8a0a  3a cf
    set1 shadow_p5.4        ;8a0c  4a cf
    set1 shadow_p5.5        ;8a0e  5a cf
    push ax                 ;8a10  b1
    mov a,shadow_p5         ;8a11  f0 cf
    mov p5,a                ;8a13  f2 05
    pop ax                  ;8a15  b0
    clr1 pm5.2              ;8a16  71 2b 25
    clr1 pm5.3              ;8a19  71 3b 25
    clr1 pm5.4              ;8a1c  71 4b 25
    clr1 pm5.5              ;8a1f  71 5b 25
    clr1 pu5.6              ;8a22  71 6b 35
    set1 pm5.6              ;8a25  71 6a 25
    clr1 pu0.7              ;8a28  71 7b 30
    set1 pm0.7              ;8a2b  71 7a 20
    clr1 shadow_p6.4        ;8a2e  4b d0
    clr1 pm6.4              ;8a30  71 4b 26
    mov a,#0x20             ;8a33  a1 20
    callt [0x0042]          ;8a35  c3           Calls sub_09b9
    call !sub_8f8f          ;8a36  9a 8f 8f
    clr1 mem_fe6e.6         ;8a39  6b 6e
    set1 mem_fe73.1         ;8a3b  1a 73
    clr1 mem_fe75.1         ;8a3d  1b 75

lab_8a3f:
    mov a,#0xc0             ;8a3f  a1 c0
    callt [0x0042]          ;8a41  c3           Calls sub_09b9

lab_8a42:
    clr1 pu6.5              ;8a42  71 5b 36
    set1 pm6.5              ;8a45  71 5a 26
    clr1 pu6.6              ;8a48  71 6b 36
    set1 pm6.6              ;8a4b  71 6a 26
    clr1 pu6.7              ;8a4e  71 7b 36
    set1 pm6.7              ;8a51  71 7a 26
    clr1 pm5.0              ;8a54  71 0b 25
    clr1 pm5.1              ;8a57  71 1b 25
    clr1 pm5.2              ;8a5a  71 2b 25
    clr1 pm5.3              ;8a5d  71 3b 25
    clr1 pm5.4              ;8a60  71 4b 25
    clr1 pm5.5              ;8a63  71 5b 25
    clr1 pm6.4              ;8a66  71 4b 26
    clr1 pu5.6              ;8a69  71 6b 35
    set1 pm5.6              ;8a6c  71 6a 25
    bf mem_fe2d.0,lab_8a79  ;8a6f  31 03 2d 06
    bt mem_fe6e.6,lab_8a79  ;8a73  ec 6e 03
    call !sub_80cf          ;8a76  9a cf 80

lab_8a79:
    mov a,#0x03             ;8a79  a1 03
    mov !mem_fb19,a         ;8a7b  9e 19 fb
    mov a,#0x19             ;8a7e  a1 19
    callt [0x0046]          ;8a80  c7           Calls sub_096c
    call !sub_8ac6          ;8a81  9a c6 8a
    movw hl,#mem_b997+1     ;8a84  16 98 b9
    mov a,mem_fe4e          ;8a87  f0 4e
    mov b,a                 ;8a89  73

lab_8a8a:
    mov a,!mem_f1e9         ;8a8a  8e e9 f1
    bf a.2,sub_8ad0         ;8a8d  31 2f 40
    callf !table_get_word   ;8a90  4c 48        Load DE with word at position B in table [HL]
    bnc lab_8a96            ;8a92  9d 02        Branch if table lookup succeeded
    br sub_8ad0             ;8a94  fa 3a

lab_8a96:
    movw ax,#lab_8a9d       ;8a96  10 9d 8a
    push ax                 ;8a99  b1
    movw ax,de              ;8a9a  c4
    br ax                   ;8a9b  31 98

lab_8a9d:
    bt mem_fe4d.5,lab_8ac0  ;8a9d  dc 4d 20
    mov a,#0x00             ;8aa0  a1 00
    cmp a,!mem_fc86         ;8aa2  48 86 fc
    bnz lab_8aaa            ;8aa5  bd 03
    call !sub_8fa2          ;8aa7  9a a2 8f

lab_8aaa:
    bf mem_fe6e.7,lab_8abc  ;8aaa  31 73 6e 0e
    mov a,!mem_fc86         ;8aae  8e 86 fc
    cmp a,#0x00             ;8ab1  4d 00
    bz lab_8abc             ;8ab3  ad 07
    mov mem_fe4e,a          ;8ab5  f2 4e
    mov a,#0x00             ;8ab7  a1 00
    mov !mem_fc86,a         ;8ab9  9e 86 fc

lab_8abc:
    clr1 mem_fe6e.7         ;8abc  7b 6e
    br lab_8ac2             ;8abe  fa 02

lab_8ac0:
    set1 mem_fe6e.7         ;8ac0  7a 6e

lab_8ac2:
    call !sub_8f8f          ;8ac2  9a 8f 8f
    ret                     ;8ac5  af

sub_8ac6:
    cmp mem_fe4c,#0x0a      ;8ac6  c8 4c 0a
    bnc sub_8ad0            ;8ac9  9d 05
    call !sub_8f8f          ;8acb  9a 8f 8f
    bz lab_8ae8             ;8ace  ad 18

sub_8ad0:
    mov a,!mem_f1e9         ;8ad0  8e e9 f1
    bf a.2,lab_8ae8         ;8ad3  31 2f 12
    set1 mem_fe7e.6         ;8ad6  6a 7e
    call !sub_7697_snd_cd   ;8ad8  9a 97 76     Unknown; snd_msg_idx and CD related

lab_8adb:
    mov mem_fe4c,#0x00      ;8adb  11 4c 00
    clr1 mem_fe4d.5         ;8ade  5b 4d
    call !sub_8f8f          ;8ae0  9a 8f 8f
    mov a,#0x00             ;8ae3  a1 00
    mov !mem_fc34,a         ;8ae5  9e 34 fc

lab_8ae8:
    ret                     ;8ae8  af

sub_8ae9:
    cmp mem_fe4c,#0x00      ;8ae9  c8 4c 00
    bnz lab_8af9            ;8aec  bd 0b
    mov mem_fe4c,#0x01      ;8aee  11 4c 01
    call !sub_8f8f          ;8af1  9a 8f 8f
    mov a,#0x00             ;8af4  a1 00
    mov !mem_fc34,a         ;8af6  9e 34 fc

lab_8af9:
    ret                     ;8af9  af

lab_8afa:
    ret                     ;8afa  af

lab_8afb:
    ret                     ;8afb  af

lab_8afc:
    bf mem_fe2c.5,lab_8b12  ;8afc  31 53 2c 12
    cmp mem_fe4e,#0x09      ;8b00  c8 4e 09
    bc lab_8b12             ;8b03  8d 0d
    cmp mem_fe4e,#0x1f      ;8b05  c8 4e 1f
    bnz lab_8b11            ;8b08  bd 07
    mov a,!mem_fc85         ;8b0a  8e 85 fc
    cmp a,#0x09             ;8b0d  4d 09
    bc lab_8b12             ;8b0f  8d 01

lab_8b11:
    ret                     ;8b11  af

lab_8b12:
    btclr mem_fe71.7,lab_8b21 ;8b12  31 71 71 0b
    clr1 mem_fe6f.7         ;8b16  7b 6f
    mov mem_fe4c,#0x00      ;8b18  11 4c 00
    call !sub_8ff7          ;8b1b  9a f7 8f
    br !lab_8ce4            ;8b1e  9b e4 8c

lab_8b21:
    ret                     ;8b21  af

lab_8b22:
    cmp mem_fe4c,#0x02      ;8b22  c8 4c 02
    bc lab_8b29             ;8b25  8d 02
    br lab_8b2a             ;8b27  fa 01

lab_8b29:
    ret                     ;8b29  af

lab_8b2a:
    mov a,#0x81             ;8b2a  a1 81
    mov !mem_f1ac,a         ;8b2c  9e ac f1
    mov mem_fe4c,#0x01      ;8b2f  11 4c 01
    call !sub_8fee          ;8b32  9a ee 8f
    br !lab_8d05            ;8b35  9b 05 8d

lab_8b38:
    bt mem_fe2d.0,lab_8b3c  ;8b38  8c 2d 01
    ret                     ;8b3b  af

lab_8b3c:
    mov a,#0x20             ;8b3c  a1 20
    callt [0x0044]          ;8b3e  c5           Calls sub_09c6
    mov mem_fe4c,#0x02      ;8b3f  11 4c 02
    call !sub_7697_snd_cd   ;8b42  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x88             ;8b45  a1 88
    mov !mem_f1ac,a         ;8b47  9e ac f1
    clr1 mem_fe4d.6         ;8b4a  6b 4d
    call !sub_8ff7          ;8b4c  9a f7 8f
    br !lab_8c7f            ;8b4f  9b 7f 8c

lab_8b52:
    mov a,#0x81             ;8b52  a1 81
    mov !mem_f1ac,a         ;8b54  9e ac f1
    mov mem_fe4c,#0x02      ;8b57  11 4c 02
    br !lab_8d34            ;8b5a  9b 34 8d

lab_8b5d:
    mov a,#0x81             ;8b5d  a1 81
    mov !mem_f1ac,a         ;8b5f  9e ac f1
    mov mem_fe4c,#0x02      ;8b62  11 4c 02
    br !lab_8d34            ;8b65  9b 34 8d

lab_8b68:
    mov a,#0x81             ;8b68  a1 81
    mov !mem_f1ac,a         ;8b6a  9e ac f1
    mov mem_fe4c,#0x02      ;8b6d  11 4c 02
    br !lab_8d6a            ;8b70  9b 6a 8d

lab_8b73:
    btclr mem_fe4d.6,lab_8b79 ;8b73  31 61 4d 02
    set1 mem_fe4d.6         ;8b77  6a 4d

lab_8b79:
    mov a,#0x81             ;8b79  a1 81
    mov !mem_f1ac,a         ;8b7b  9e ac f1
    mov mem_fe4c,#0x02      ;8b7e  11 4c 02
    br !lab_8d34            ;8b81  9b 34 8d

lab_8b84:
    mov a,#0x81             ;8b84  a1 81
    mov !mem_f1ac,a         ;8b86  9e ac f1
    mov mem_fe4c,#0x02      ;8b89  11 4c 02
    br !lab_8d34            ;8b8c  9b 34 8d

lab_8b8f:
    mov mem_fe4c,#0x04      ;8b8f  11 4c 04
    call !sub_7697_snd_cd   ;8b92  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x83             ;8b95  a1 83
    mov !mem_f1ac,a         ;8b97  9e ac f1
    set1 mem_fe4d.7         ;8b9a  7a 4d
    br !lab_8e26            ;8b9c  9b 26 8e

lab_8b9f:
    mov mem_fe4c,#0x06      ;8b9f  11 4c 06
    call !sub_7697_snd_cd   ;8ba2  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x86             ;8ba5  a1 86
    mov !mem_f1ac,a         ;8ba7  9e ac f1
    set1 mem_fe4d.7         ;8baa  7a 4d
    br !lab_8e26            ;8bac  9b 26 8e

lab_8baf:
    call !sub_7697_snd_cd   ;8baf  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x82             ;8bb2  a1 82
    mov !mem_f1ac,a         ;8bb4  9e ac f1
    mov mem_fe4c,#0x03      ;8bb7  11 4c 03
    clr1 mem_fe4d.7         ;8bba  7b 4d
    br !lab_8e26            ;8bbc  9b 26 8e

lab_8bbf:
    call !sub_7697_snd_cd   ;8bbf  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x85             ;8bc2  a1 85
    mov !mem_f1ac,a         ;8bc4  9e ac f1
    mov mem_fe4c,#0x05      ;8bc7  11 4c 05
    clr1 mem_fe4d.7         ;8bca  7b 4d
    br !lab_8e26            ;8bcc  9b 26 8e

lab_8bcf:
    mov mem_fe4c,#0x07      ;8bcf  11 4c 07
    call !sub_7697_snd_cd   ;8bd2  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x84             ;8bd5  a1 84
    mov !mem_f1ac,a         ;8bd7  9e ac f1
    clr1 mem_fe4d.7         ;8bda  7b 4d
    br !lab_8e26            ;8bdc  9b 26 8e

lab_8bdf:
    mov mem_fe4c,#0x07      ;8bdf  11 4c 07
    call !sub_7697_snd_cd   ;8be2  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x84             ;8be5  a1 84
    mov !mem_f1ac,a         ;8be7  9e ac f1
    clr1 mem_fe4d.7         ;8bea  7b 4d
    br !lab_8e26            ;8bec  9b 26 8e

lab_8bef:
    call !sub_7697_snd_cd   ;8bef  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x83             ;8bf2  a1 83
    mov !mem_f1ac,a         ;8bf4  9e ac f1
    mov mem_fe4c,#0x04      ;8bf7  11 4c 04
    set1 mem_fe4d.7         ;8bfa  7a 4d
    br !lab_8e26            ;8bfc  9b 26 8e

lab_8bff:
    call !sub_7697_snd_cd   ;8bff  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x82             ;8c02  a1 82
    mov !mem_f1ac,a         ;8c04  9e ac f1
    mov mem_fe4c,#0x03      ;8c07  11 4c 03
    clr1 mem_fe4d.7         ;8c0a  7b 4d
    br !lab_8e26            ;8c0c  9b 26 8e

lab_8c0f:
    call !sub_7697_snd_cd   ;8c0f  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x86             ;8c12  a1 86
    mov !mem_f1ac,a         ;8c14  9e ac f1
    mov mem_fe4c,#0x06      ;8c17  11 4c 06
    set1 mem_fe4d.7         ;8c1a  7a 4d
    br !lab_8e26            ;8c1c  9b 26 8e

lab_8c1f:
    call !sub_7697_snd_cd   ;8c1f  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x85             ;8c22  a1 85
    mov !mem_f1ac,a         ;8c24  9e ac f1
    mov mem_fe4c,#0x05      ;8c27  11 4c 05
    clr1 mem_fe4d.7         ;8c2a  7b 4d
    br !lab_8e26            ;8c2c  9b 26 8e

lab_8c2f:
    cmp mem_fe30,#0x02      ;8c2f  c8 30 02
    bz lab_8c37             ;8c32  ad 03
    br !lab_8b2a            ;8c34  9b 2a 8b

lab_8c37:
    br !lab_8b84            ;8c37  9b 84 8b

lab_8c3a:
    cmp mem_fe30,#0x02      ;8c3a  c8 30 02
    bnz lab_8c42            ;8c3d  bd 03
    br !lab_8b84            ;8c3f  9b 84 8b

lab_8c42:
    ret                     ;8c42  af

lab_8c43:
    btclr mem_fe6f.4,lab_8c49 ;8c43  31 41 6f 02
    set1 mem_fe6f.4         ;8c47  4a 6f

lab_8c49:
    cmp mem_fe4c,#0x02      ;8c49  c8 4c 02
    bnz lab_8c76            ;8c4c  bd 28
    mov a,#0x01             ;8c4e  a1 01
    mov !mem_f1ac,a         ;8c50  9e ac f1
    mov a,!mem_f1ac         ;8c53  8e ac f1
    and a,#0x0f             ;8c56  5d 0f
    cmp a,#0x07             ;8c58  4d 07
    bz lab_8c6a             ;8c5a  ad 0e
    call !sub_a694          ;8c5c  9a 94 a6
    cmp a,#0x00             ;8c5f  4d 00
    bnz lab_8c76            ;8c61  bd 13
    mov a,#0xc7             ;8c63  a1 c7
    mov !mem_f1ac,a         ;8c65  9e ac f1
    br lab_8c76             ;8c68  fa 0c

lab_8c6a:
    call !sub_a694          ;8c6a  9a 94 a6
    cmp a,#0x00             ;8c6d  4d 00
    bz lab_8c76             ;8c6f  ad 05
    mov a,#0x81             ;8c71  a1 81
    mov !mem_f1ac,a         ;8c73  9e ac f1

lab_8c76:
    call !sub_9500          ;8c76  9a 00 95
    ret                     ;8c79  af

lab_8c7a:
    mov a,#0x19             ;8c7a  a1 19
    br !lab_8fe7            ;8c7c  9b e7 8f

lab_8c7f:
    mov a,#0x01             ;8c7f  a1 01
    call !sub_8946          ;8c81  9a 46 89
    mov mem_fe4e,#0x01      ;8c84  11 4e 01
    call !sub_a74b          ;8c87  9a 4b a7
    bc lab_8c8f             ;8c8a  8d 03
    mov mem_fe4e,#0x02      ;8c8c  11 4e 02

lab_8c8f:
    ret                     ;8c8f  af

lab_8c90:
    clr1 mem_fe4d.6         ;8c90  6b 4d
    clr1 mem_fe4d.4         ;8c92  4b 4d
    set1 mem_fe4d.5         ;8c94  5a 4d
    call !sub_8f5e          ;8c96  9a 5e 8f
    mov mem_fe4f,#0x01      ;8c99  11 4f 01
    mov a,#0x03             ;8c9c  a1 03
    mov !mem_fc85,a         ;8c9e  9e 85 fc
    br !lab_8150            ;8ca1  9b 50 81

lab_8ca4:
    clr1 mem_fe4d.5         ;8ca4  5b 4d
    clr1 mem_fe70.6         ;8ca6  6b 70
    cmp mem_fe50,#0x01      ;8ca8  c8 50 01
    bz lab_8cbf             ;8cab  ad 12
    bf mem_fe70.5,lab_8cb4  ;8cad  31 53 70 03
    bt p6.7,lab_8cb6        ;8cb1  fc 06 02

lab_8cb4:
    set1 mem_fe6f.7         ;8cb4  7a 6f

lab_8cb6:
    clr1 mem_fe70.4         ;8cb6  4b 70
    clr1 mem_fe70.5         ;8cb8  5b 70
    mov mem_fe4c,#0x00      ;8cba  11 4c 00
    br lab_8cdd             ;8cbd  fa 1e

lab_8cbf:
    mov1 cy,p2.3            ;8cbf  71 34 02     Carry = Tape METAL sense (1=metal)
    mov1 mem_fe71.4,cy      ;8cc2  71 41 71     Store METAL sense
    bnc lab_8cd6_not_metal  ;8cc5  9d 0f        Branch if METAL sense is off

    ;METAL tape
    cmp mem_fe30,#0x02      ;8cc7  c8 30 02
    bnz lab_8cd6_not_metal  ;8cca  bd 0a

    mov a,#50               ;8ccc  a1 32        A = 5 seconds
    mov !msg_countdown,a    ;8cce  9e 2e fb

    mov a,#0x8c             ;8cd1  a1 8c        c Writes "TAPE METAL"
    mov !tmp_msg_idx,a      ;8cd3  9e a6 f1

lab_8cd6_not_metal:
    cmp mem_fe4c,#0x01      ;8cd6  c8 4c 01
    bz lab_8cdd             ;8cd9  ad 02
    br lab_8d34             ;8cdb  fa 57

lab_8cdd:
    mov mem_fe4e,#0x00      ;8cdd  11 4e 00
    mov a,#0x20             ;8ce0  a1 20
    callt [0x0042]          ;8ce2  c3           Calls sub_09b9
    ret                     ;8ce3  af

lab_8ce4:
    mov a,#0x04             ;8ce4  a1 04
    call !sub_8946          ;8ce6  9a 46 89
    mov mem_fe4c,#0x00      ;8ce9  11 4c 00
    mov mem_fe4e,#0x04      ;8cec  11 4e 04
    set1 mem_fe4d.5         ;8cef  5a 4d
    mov mem_fe4f,#0x00      ;8cf1  11 4f 00
    mov a,#0x05             ;8cf4  a1 05
    mov !mem_fc85,a         ;8cf6  9e 85 fc
    br !lab_814c            ;8cf9  9b 4c 81

lab_8cfc:
    clr1 mem_fe4d.5         ;8cfc  5b 4d
    mov a,#0x20             ;8cfe  a1 20
    callt [0x0042]          ;8d00  c3           Calls sub_09b9
    mov mem_fe4e,#0x00      ;8d01  11 4e 00
    ret                     ;8d04  af

lab_8d05:
    mov a,#0x06             ;8d05  a1 06
    call !sub_8946          ;8d07  9a 46 89
    cmp mem_fe58,#0x02      ;8d0a  c8 58 02
    bnz lab_8d18            ;8d0d  bd 09
    call !sub_a74b          ;8d0f  9a 4b a7
    bnc lab_8d18            ;8d12  9d 04
    mov mem_fe4e,#0x06      ;8d14  11 4e 06
    ret                     ;8d17  af

lab_8d18:
    call !sub_9000          ;8d18  9a 00 90
    set1 mem_fe4d.5         ;8d1b  5a 4d
    mov mem_fe4e,#0x07      ;8d1d  11 4e 07
    mov mem_fe4f,#0x01      ;8d20  11 4f 01
    mov a,#0x08             ;8d23  a1 08
    mov !mem_fc85,a         ;8d25  9e 85 fc
    br !lab_8150            ;8d28  9b 50 81

lab_8d2b:
    mov mem_fe4e,#0x00      ;8d2b  11 4e 00
    clr1 mem_fe4d.5         ;8d2e  5b 4d
    mov a,#0x20             ;8d30  a1 20
    callt [0x0042]          ;8d32  c3           Calls sub_09b9
    ret                     ;8d33  af

lab_8d34:
    mov a,#0x09             ;8d34  a1 09
    call !sub_8946          ;8d36  9a 46 89
    mov mem_fe4e,#0x09      ;8d39  11 4e 09
    call !sub_a74b          ;8d3c  9a 4b a7
    bc lab_8d44             ;8d3f  8d 03
    mov mem_fe4e,#0x0a      ;8d41  11 4e 0a

lab_8d44:
    ret                     ;8d44  af

lab_8d45:
    mov a,#0x20             ;8d45  a1 20
    callt [0x0044]          ;8d47  c5           Calls sub_09c6
    set1 mem_fe4d.5         ;8d48  5a 4d
    mov a,#0x0b             ;8d4a  a1 0b
    mov !mem_fc85,a         ;8d4c  9e 85 fc
    mov mem_fe4f,#0x04      ;8d4f  11 4f 04
    bf mem_fe4d.6,lab_8d59  ;8d52  31 63 4d 03
    mov mem_fe4f,#0x05      ;8d56  11 4f 05

lab_8d59:
    br !lab_8150            ;8d59  9b 50 81

lab_8d5c:
    clr1 mem_fe4d.5         ;8d5c  5b 4d
    clr1 shadow_p6.4         ;8d5e  4b d0
    bf mem_fe4d.6,lab_8d66  ;8d60  31 63 4d 02
    set1 shadow_p6.4         ;8d64  4a d0

lab_8d66:
    mov mem_fe4e,#0x0c      ;8d66  11 4e 0c
    ret                     ;8d69  af

lab_8d6a:
    cmp mem_fe4c,#0x08      ;8d6a  c8 4c 08
    bz lab_8d8a             ;8d6d  ad 1b
    cmp mem_fe4c,#0x07      ;8d6f  c8 4c 07
    bz lab_8d8a             ;8d72  ad 16
    mov a,#0x81             ;8d74  a1 81
    mov !mem_f1ac,a         ;8d76  9e ac f1
    mov mem_fe4c,#0x02      ;8d79  11 4c 02
    mov mem_fe4e,#0x0d      ;8d7c  11 4e 0d
    mov a,#0x96             ;8d7f  a1 96
    mov !mem_fb44,a         ;8d81  9e 44 fb
    mov a,#0x00             ;8d84  a1 00
    call !sub_9098          ;8d86  9a 98 90
    ret                     ;8d89  af

lab_8d8a:
    call !sub_a694          ;8d8a  9a 94 a6
    cmp a,#0x00             ;8d8d  4d 00
    bnz lab_8d96            ;8d8f  bd 05
    mov a,#0xc4             ;8d91  a1 c4
    mov !mem_f1ac,a         ;8d93  9e ac f1

lab_8d96:
    mov mem_fe4c,#0x08      ;8d96  11 4c 08
    mov mem_fe4e,#0x0e      ;8d99  11 4e 0e
    mov a,#0x64             ;8d9c  a1 64
    mov !mem_fb44,a         ;8d9e  9e 44 fb
    ret                     ;8da1  af

lab_8da2:
    call !sub_9000          ;8da2  9a 00 90
    call !sub_a780          ;8da5  9a 80 a7
    mov a,!mem_f1ac         ;8da8  8e ac f1
    and a,#0x0f             ;8dab  5d 0f
    cmp a,#0x07             ;8dad  4d 07
    bz lab_8dbf             ;8daf  ad 0e
    call !sub_a694          ;8db1  9a 94 a6
    cmp a,#0x00             ;8db4  4d 00
    bnz lab_8dcb            ;8db6  bd 13
    mov a,#0xc7             ;8db8  a1 c7
    mov !mem_f1ac,a         ;8dba  9e ac f1
    br lab_8dcb             ;8dbd  fa 0c

lab_8dbf:
    call !sub_a694          ;8dbf  9a 94 a6
    cmp a,#0x00             ;8dc2  4d 00
    bz lab_8dcb             ;8dc4  ad 05
    mov a,#0x81             ;8dc6  a1 81
    mov !mem_f1ac,a         ;8dc8  9e ac f1

lab_8dcb:
    call !sub_8f65          ;8dcb  9a 65 8f
    call !sub_901d          ;8dce  9a 1d 90
    bt mem_fe5e.0,lab_8ddb  ;8dd1  8c 5e 07
    mov a,!mem_f255         ;8dd4  8e 55 f2
    and a,#0x02             ;8dd7  5d 02
    bnz lab_8de5            ;8dd9  bd 0a

lab_8ddb:
    mov a,#0x96             ;8ddb  a1 96
    mov !mem_fb44,a         ;8ddd  9e 44 fb
    mov a,#0x00             ;8de0  a1 00
    br !sub_9098            ;8de2  9b 98 90

lab_8de5:
    bf mem_fe71.5,lab_8df9  ;8de5  31 53 71 10
    call !sub_7697_snd_cd   ;8de9  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0x89             ;8dec  a1 89
    mov !mem_f1ac,a         ;8dee  9e ac f1
    clr1 mem_fe4d.7         ;8df1  7b 4d
    mov mem_fe4c,#0x09      ;8df3  11 4c 09
    br !lab_8e26            ;8df6  9b 26 8e

lab_8df9:
    ret                     ;8df9  af

lab_8dfa:
    call !sub_9000          ;8dfa  9a 00 90
    call !sub_a780          ;8dfd  9a 80 a7
    mov a,!mem_f1ac         ;8e00  8e ac f1
    and a,#0x0f             ;8e03  5d 0f
    cmp a,#0x07             ;8e05  4d 07
    bnz lab_8e15            ;8e07  bd 0c
    call !sub_a694          ;8e09  9a 94 a6
    cmp a,#0x00             ;8e0c  4d 00
    bz lab_8e15             ;8e0e  ad 05
    mov a,#0x84             ;8e10  a1 84
    mov !mem_f1ac,a         ;8e12  9e ac f1

lab_8e15:
    call !sub_8f65          ;8e15  9a 65 8f
    call !sub_901d          ;8e18  9a 1d 90
    mov a,!mem_fb44         ;8e1b  8e 44 fb
    cmp a,#0x00             ;8e1e  4d 00
    bnz lab_8e25            ;8e20  bd 03
    br !lab_8bdf            ;8e22  9b df 8b

lab_8e25:
    ret                     ;8e25  af

lab_8e26:
    mov a,#0x0f             ;8e26  a1 0f
    call !sub_8946          ;8e28  9a 46 89
    mov mem_fe4e,#0x0f      ;8e2b  11 4e 0f
    call !sub_a74b          ;8e2e  9a 4b a7
    bc lab_8e3d             ;8e31  8d 0a
    mov mem_fe4e,#0x11      ;8e33  11 4e 11
    bf mem_fe4d.4,lab_8e3d  ;8e36  31 43 4d 03
    mov mem_fe4e,#0x10      ;8e3a  11 4e 10

lab_8e3d:
    ret                     ;8e3d  af

lab_8e3e:
    call !sub_9000          ;8e3e  9a 00 90
    set1 mem_fe4d.5         ;8e41  5a 4d
    mov mem_fe4f,#0x01      ;8e43  11 4f 01
    mov a,#0x11             ;8e46  a1 11
    mov !mem_fc85,a         ;8e48  9e 85 fc
    br !lab_8150            ;8e4b  9b 50 81

lab_8e4e:
    call !sub_9000          ;8e4e  9a 00 90
    set1 mem_fe4d.5         ;8e51  5a 4d
    mov a,#0x12             ;8e53  a1 12
    mov !mem_fc85,a         ;8e55  9e 85 fc
    clr1 mem_fe4d.4         ;8e58  4b 4d
    mov mem_fe4f,#0x03      ;8e5a  11 4f 03
    bt mem_fe4d.7,lab_8e65  ;8e5d  fc 4d 05
    bt mem_fe4d.6,lab_8e68  ;8e60  ec 4d 05
    br lab_8e6b             ;8e63  fa 06

lab_8e65:
    bt mem_fe4d.6,lab_8e6b  ;8e65  ec 4d 03

lab_8e68:
    mov mem_fe4f,#0x02      ;8e68  11 4f 02

lab_8e6b:
    br !lab_8150            ;8e6b  9b 50 81

lab_8e6e:
    clr1 mem_fe4d.5         ;8e6e  5b 4d
    call !sub_8f65          ;8e70  9a 65 8f
    call !sub_901d          ;8e73  9a 1d 90
    cmp mem_fe4c,#0x06      ;8e76  c8 4c 06
    bz lab_8e9a             ;8e79  ad 1f
    cmp mem_fe4c,#0x05      ;8e7b  c8 4c 05
    bz lab_8e9a             ;8e7e  ad 1a
    cmp mem_fe4c,#0x04      ;8e80  c8 4c 04
    bz lab_8ef5             ;8e83  ad 70
    cmp mem_fe4c,#0x03      ;8e85  c8 4c 03
    bz lab_8e9b             ;8e88  ad 11
    cmp mem_fe4c,#0x07      ;8e8a  c8 4c 07
    bz lab_8e9b             ;8e8d  ad 0c
    cmp mem_fe4c,#0x09      ;8e8f  c8 4c 09
    mov a,#0x0a             ;8e92  a1 0a
    call !sub_9094          ;8e94  9a 94 90
    mov mem_fe4e,#0x1b      ;8e97  11 4e 1b

lab_8e9a:
    ret                     ;8e9a  af

lab_8e9b:
    mov a,#0x0a             ;8e9b  a1 0a
    call !sub_9098          ;8e9d  9a 98 90
    mov mem_fe4e,#0x1a      ;8ea0  11 4e 1a
    ret                     ;8ea3  af

lab_8ea4:
    call !sub_8f65          ;8ea4  9a 65 8f
    call !sub_901d          ;8ea7  9a 1d 90
    bf mem_fe71.5,lab_8eb6  ;8eaa  31 53 71 08
    mov a,#0x0a             ;8eae  a1 0a
    call !sub_9094          ;8eb0  9a 94 90
    mov mem_fe4e,#0x1b      ;8eb3  11 4e 1b

lab_8eb6:
    ret                     ;8eb6  af

lab_8eb7:
    call !sub_8f65          ;8eb7  9a 65 8f
    call !sub_901d          ;8eba  9a 1d 90
    bf mem_fe71.5,lab_8ec4  ;8ebd  31 53 71 03
    mov mem_fe4e,#0x1c      ;8ec1  11 4e 1c

lab_8ec4:
    ret                     ;8ec4  af

lab_8ec5:
    set1 mem_fe4d.5         ;8ec5  5a 4d
    mov a,#0x1d             ;8ec7  a1 1d
    mov !mem_fc85,a         ;8ec9  9e 85 fc
    clr1 mem_fe4d.4         ;8ecc  4b 4d
    set1 mem_fe4d.7         ;8ece  7a 4d
    mov mem_fe4f,#0x03      ;8ed0  11 4f 03
    bt mem_fe6f.3,lab_8ed9  ;8ed3  bc 6f 03
    mov mem_fe4f,#0x02      ;8ed6  11 4f 02

lab_8ed9:
    br !lab_8150            ;8ed9  9b 50 81

lab_8edc:
    clr1 mem_fe4d.5         ;8edc  5b 4d
    mov mem_fe4e,#0x1e      ;8ede  11 4e 1e
    mov a,#0x05             ;8ee1  a1 05
    call !sub_9098          ;8ee3  9a 98 90
    ret                     ;8ee6  af

lab_8ee7:
    call !sub_8f65          ;8ee7  9a 65 8f
    call !sub_901d          ;8eea  9a 1d 90
    bf mem_fe71.5,lab_8ef4  ;8eed  31 53 71 03
    br !lab_8d34            ;8ef1  9b 34 8d

lab_8ef4:
    ret                     ;8ef4  af

lab_8ef5:
    mov a,#0x19             ;8ef5  a1 19
    call !sub_9094          ;8ef7  9a 94 90
    mov mem_fe4e,#0x14      ;8efa  11 4e 14
    ret                     ;8efd  af

lab_8efe:
    call !sub_8f65          ;8efe  9a 65 8f
    call !sub_901d          ;8f01  9a 1d 90
    bf mem_fe71.5,lab_8f10  ;8f04  31 53 71 08
    mov a,#0x0a             ;8f08  a1 0a
    call !sub_9098          ;8f0a  9a 98 90
    mov mem_fe4e,#0x15      ;8f0d  11 4e 15

lab_8f10:
    ret                     ;8f10  af

lab_8f11:
    call !sub_8f65          ;8f11  9a 65 8f
    call !sub_901d          ;8f14  9a 1d 90
    bf mem_fe71.5,lab_8f1e  ;8f17  31 53 71 03
    mov mem_fe4e,#0x16      ;8f1b  11 4e 16

lab_8f1e:
    ret                     ;8f1e  af

lab_8f1f:
    set1 mem_fe4d.5         ;8f1f  5a 4d
    mov a,#0x17             ;8f21  a1 17
    mov !mem_fc85,a         ;8f23  9e 85 fc
    mov mem_fe4f,#0x04      ;8f26  11 4f 04
    bf mem_fe4d.6,lab_8f30  ;8f29  31 63 4d 03
    mov mem_fe4f,#0x05      ;8f2d  11 4f 05

lab_8f30:
    br !lab_8150            ;8f30  9b 50 81

lab_8f33:
    clr1 mem_fe4d.5         ;8f33  5b 4d
    mov a,#0x14             ;8f35  a1 14
    mov !mem_fb44,a         ;8f37  9e 44 fb
    mov mem_fe4e,#0x18      ;8f3a  11 4e 18
    mov a,#0x3e             ;8f3d  a1 3e
    call !sub_9098          ;8f3f  9a 98 90
    ret                     ;8f42  af

lab_8f43:
    call !sub_8f65          ;8f43  9a 65 8f
    call !sub_901d          ;8f46  9a 1d 90
    mov a,!mem_fb44         ;8f49  8e 44 fb
    cmp a,#0x00             ;8f4c  4d 00
    bz lab_8f54             ;8f4e  ad 04
    bf mem_fe71.5,lab_8f57  ;8f50  31 53 71 03

lab_8f54:
    br !lab_8d34            ;8f54  9b 34 8d

lab_8f57:
    ret                     ;8f57  af

lab_8f58:
    mov a,!mem_fc85         ;8f58  8e 85 fc
    mov mem_fe4e,a          ;8f5b  f2 4e
    ret                     ;8f5d  af

sub_8f5e:
    clr1 mem_fe70.0         ;8f5e  0b 70
    clr1 mem_fe70.1         ;8f60  1b 70
    set1 mem_fe4d.5         ;8f62  5a 4d
    ret                     ;8f64  af

sub_8f65:
    mov a,mem_fe4f          ;8f65  f0 4f
    cmp a,mem_fe50          ;8f67  4e 50
    bnz sub_8f87            ;8f69  bd 1c
    mov a,mem_fe50          ;8f6b  f0 50
    cmp a,#0x04             ;8f6d  4d 04
    bz lab_8f80             ;8f6f  ad 0f      Branch to read METAL sense and return
    cmp a,#0x05             ;8f71  4d 05
    bz lab_8f80             ;8f73  ad 0b      Branch to read METAL sense and return
    cmp a,#0x03             ;8f75  4d 03
    bz lab_8f80             ;8f77  ad 07      Branch to read METAL sense and return
    cmp a,#0x02             ;8f79  4d 02
    bz lab_8f80             ;8f7b  ad 03      Branch to read METAL sense and return
    set1 mem_fe7e.6         ;8f7d  6a 7e
    ret                     ;8f7f  af

lab_8f80:
    mov1 cy,p2.3            ;8f80  71 34 02     Carry = Tape METAL sense (1=metal)
    mov1 mem_fe71.4,cy      ;8f83  71 41 71     Store METAL sense
    ret                     ;8f86  af

sub_8f87:
    mov a,mem_fe4e          ;8f87  f0 4e
    mov !mem_fc85,a         ;8f89  9e 85 fc
    br !lab_8150            ;8f8c  9b 50 81

sub_8f8f:
    movw de,#mem_fc87       ;8f8f  14 87 fc
    movw hl,#mem_fe4c       ;8f92  16 4c fe
    mov b,#0x03             ;8f95  a3 03
    call !sub_0bef          ;8f97  9a ef 0b

    movw hl,#mem_fc85       ;8f9a  16 85 fc
    mov b,#0x02             ;8f9d  a3 02
    br !sub_0bf6            ;8f9f  9b f6 0b

sub_8fa2:
    bt mem_fe7d.2,lab_8fe3  ;8fa2  ac 7d 3e

lab_8fa5:
    cmp mem_fe30,#0x02      ;8fa5  c8 30 02
    bz lab_8fd3             ;8fa8  ad 29
    cmp mem_fe4c,#0x05      ;8faa  c8 4c 05
    bz lab_8fe3             ;8fad  ad 34
    cmp mem_fe4c,#0x06      ;8faf  c8 4c 06
    bz lab_8fe3             ;8fb2  ad 2f
    bt mem_fe6f.7,lab_8fe4  ;8fb4  fc 6f 2d
    cmp mem_fe4e,#0x08      ;8fb7  c8 4e 08
    bc lab_8fe3             ;8fba  8d 27
    cmp mem_fe4c,#0x02      ;8fbc  c8 4c 02
    bc lab_8fe3             ;8fbf  8d 22
    cmp mem_fe4e,#0x1f      ;8fc1  c8 4e 1f
    bz lab_8fc9             ;8fc4  ad 03
    br !lab_8b2a            ;8fc6  9b 2a 8b

lab_8fc9:
    mov a,!mem_fc85         ;8fc9  8e 85 fc
    cmp a,#0x06             ;8fcc  4d 06
    bc lab_8fe3             ;8fce  8d 13
    br !lab_8b2a            ;8fd0  9b 2a 8b

lab_8fd3:
    cmp mem_fe4c,#0x00      ;8fd3  c8 4c 00
    bz lab_8fe4             ;8fd6  ad 0c
    cmp mem_fe4c,#0x01      ;8fd8  c8 4c 01
    bnz lab_8fe3            ;8fdb  bd 06
    bt mem_fe6f.7,lab_8fe3  ;8fdd  fc 6f 03
    br !lab_8b84            ;8fe0  9b 84 8b

lab_8fe3:
    ret                     ;8fe3  af

lab_8fe4:
    br !sub_8ad0            ;8fe4  9b d0 8a

lab_8fe7:
    mov !mem_fb19,a         ;8fe7  9e 19 fb
    mov a,#0x19             ;8fea  a1 19
    callt [0x0046]          ;8fec  c7           Calls sub_096c
    ret                     ;8fed  af

sub_8fee:
    mov a,#0x06             ;8fee  a1 06
    call !sub_3dbd          ;8ff0  9a bd 3d
    mov a,#0x20             ;8ff3  a1 20
    callt [0x0044]          ;8ff5  c5           Calls sub_09c6
    ret                     ;8ff6  af

sub_8ff7:
    mov a,#0x19             ;8ff7  a1 19
    call !sub_3dbd          ;8ff9  9a bd 3d
    mov a,#0x20             ;8ffc  a1 20
    callt [0x0044]          ;8ffe  c5           Calls sub_09c6
    ret                     ;8fff  af

sub_9000:
    cmp mem_fe4c,#0x01      ;9000  c8 4c 01
    bz lab_9016             ;9003  ad 11
    cmp mem_fe4c,#0x05      ;9005  c8 4c 05
    bz lab_9016             ;9008  ad 0c
    cmp mem_fe4c,#0x06      ;900a  c8 4c 06
    bz lab_9016             ;900d  ad 07
    clr1 shadow_p8.7         ;900f  7b d2
    mov a,shadow_p8          ;9011  f0 d2
    mov p8,a                ;9013  f2 08
    ret                     ;9015  af

lab_9016:
    set1 shadow_p8.7         ;9016  7a d2
    mov a,shadow_p8          ;9018  f0 d2
    mov p8,a                ;901a  f2 08
    ret                     ;901c  af

sub_901d:
    bf mem_fe70.6,lab_906a  ;901d  31 63 70 49
    pop ax                  ;9021  b0
    clr1 mem_fe70.6         ;9022  6b 70
    call !sub_906b          ;9024  9a 6b 90
    bc lab_906a             ;9027  8d 41
    cmp mem_fe4c,#0x02      ;9029  c8 4c 02
    bz lab_9049             ;902c  ad 1b
    cmp mem_fe4c,#0x07      ;902e  c8 4c 07
    bz lab_9049             ;9031  ad 16
    cmp mem_fe4c,#0x08      ;9033  c8 4c 08
    bz lab_9049             ;9036  ad 11
    cmp mem_fe4c,#0x09      ;9038  c8 4c 09
    bz lab_9049             ;903b  ad 0c
    bt mem_fe4d.7,lab_9046  ;903d  fc 4d 06
    btclr mem_fe4d.6,lab_9046 ;9040  31 61 4d 02
    set1 mem_fe4d.6         ;9044  6a 4d

lab_9046:
    br !lab_8b84            ;9046  9b 84 8b

lab_9049:
    br !lab_8b73            ;9049  9b 73 8b

lab_904c:
    btclr mem_fe4d.6,lab_9052 ;904c  31 61 4d 02
    set1 mem_fe4d.6         ;9050  6a 4d

lab_9052:
    btclr shadow_p6.4,lab_9058 ;9052  31 41 d0 02
    set1 shadow_p6.4         ;9056  4a d0

lab_9058:
    br !lab_8bdf            ;9058  9b df 8b

lab_905b:
    btclr mem_fe4d.6,lab_9061 ;905b  31 61 4d 02
    set1 mem_fe4d.6         ;905f  6a 4d

lab_9061:
    btclr shadow_p6.4,lab_9067 ;9061  31 41 d0 02
    set1 shadow_p6.4         ;9065  4a d0

lab_9067:
    br !lab_8e26            ;9067  9b 26 8e

lab_906a:
    ret                     ;906a  af

sub_906b:
    bt mem_fe6f.0,lab_907a  ;906b  8c 6f 0c
    set1 mem_fe6f.0         ;906e  0a 6f
    mov a,#0xc8             ;9070  a1 c8
    mov !mem_fb45,a         ;9072  9e 45 fb
    mov a,#0x00             ;9075  a1 00
    mov !mem_fc88,a         ;9077  9e 88 fc

lab_907a:
    mov a,!mem_fc88         ;907a  8e 88 fc
    inc a                   ;907d  41
    mov !mem_fc88,a         ;907e  9e 88 fc
    cmp a,#0x05             ;9081  4d 05
    bc lab_9092             ;9083  8d 0d
    clr1 mem_fe6f.0         ;9085  0b 6f
    mov a,!mem_fb45         ;9087  8e 45 fb
    cmp a,#0x00             ;908a  4d 00
    bz lab_9092             ;908c  ad 04
    set1 mem_fe7e.6         ;908e  6a 7e
    set1 cy                 ;9090  20
    ret                     ;9091  af

lab_9092:
    clr1 cy                 ;9092  21
    ret                     ;9093  af

sub_9094:
    clr1 mem_fe71.6         ;9094  6b 71
    br lab_909a             ;9096  fa 02

sub_9098:
    set1 mem_fe71.6         ;9098  6a 71

lab_909a:
    mov !mem_fc81,a         ;909a  9e 81 fc
    mov !mem_fc82,a         ;909d  9e 82 fc
    mov mem_fe51,#0x00      ;90a0  11 51 00
    clr1 mem_fe71.5         ;90a3  5b 71
    ret                     ;90a5  af

sub_90a6:
    call !sub_a04a          ;90a6  9a 4a a0
    cmp mem_fed4,#0x00      ;90a9  c8 d4 00
    bz lab_90b4             ;90ac  ad 06
    mov mem_fed5,#0xff      ;90ae  11 d5 ff
    mov mem_fed6,#0xff      ;90b1  11 d6 ff

lab_90b4:
    mov a,mem_fed6          ;90b4  f0 d6
    mov x,a                 ;90b6  70
    mov a,mem_fed5          ;90b7  f0 d5
    cmp mem_fe50,#0x03      ;90b9  c8 50 03
    bz lab_90c7             ;90bc  ad 09
    cmp mem_fe50,#0x02      ;90be  c8 50 02
    bz lab_90c7             ;90c1  ad 04
    cmpw ax,#0x00b0         ;90c3  ea b0 00
    ret                     ;90c6  af

lab_90c7:
    bt mem_fe4d.4,lab_90ce  ;90c7  cc 4d 04
    cmpw ax,#sub_0314       ;90ca  ea 14 03
    ret                     ;90cd  af

lab_90ce:
    cmpw ax,#sub_0314       ;90ce  ea 14 03
    ret                     ;90d1  af

sub_90d2:
    bt mem_fe71.6,lab_90dc  ;90d2  ec 71 07
    bc lab_90fd             ;90d5  8d 26
    mov mem_fe51,#0x00      ;90d7  11 51 00
    br lab_90e1             ;90da  fa 05

lab_90dc:
    bnc lab_90fd            ;90dc  9d 1f
    mov mem_fe51,#0x00      ;90de  11 51 00

lab_90e1:
    cmp mem_fe4c,#0x02      ;90e1  c8 4c 02
    bnz lab_90ee            ;90e4  bd 08
    mov a,!mem_fb44         ;90e6  8e 44 fb
    cmp a,#0x00             ;90e9  4d 00
    bz lab_90ee             ;90eb  ad 01
    ret                     ;90ed  af

lab_90ee:
    mov a,!mem_fc81         ;90ee  8e 81 fc
    cmp a,#0x00             ;90f1  4d 00
    bnz lab_90f8            ;90f3  bd 03
    set1 mem_fe71.5         ;90f5  5a 71
    ret                     ;90f7  af

lab_90f8:
    dec a                   ;90f8  51
    mov !mem_fc81,a         ;90f9  9e 81 fc
    ret                     ;90fc  af

lab_90fd:
    inc mem_fe51            ;90fd  81 51
    cmp mem_fe51,#0x02      ;90ff  c8 51 02
    bc lab_90e1             ;9102  8d dd
    cmp mem_fe4c,#0x02      ;9104  c8 4c 02
    bnz lab_910e            ;9107  bd 05
    mov a,#0x96             ;9109  a1 96
    mov !mem_fb44,a         ;910b  9e 44 fb

lab_910e:
    mov mem_fe51,#0x00      ;910e  11 51 00
    mov a,!mem_fc82         ;9111  8e 82 fc
    mov !mem_fc81,a         ;9114  9e 81 fc
    ret                     ;9117  af

sub_9118:
    clr1 mem_fe6f.4         ;9118  4b 6f        Dolby = off
    ret                     ;911a  af

sub_911b:
    mov c,#0x25             ;911b  a2 25
    movw hl,#mem_fe7d       ;911d  16 7d fe
    callf !sub_0aa7         ;9120  2c a7
    bnc lab_912b            ;9122  9d 07
    movw hl,#mem_ba07+1     ;9124  16 08 ba
    callf !table_get_byte   ;9127  4c 7d        Load A with byte at position B in table [HL]
    bnc lab_912d            ;9129  9d 02        Branch if lookup succeeded

lab_912b:
    mov a,#0x00             ;912b  a1 00

lab_912d:
    ret                     ;912d  af

sub_912e:
    mov b,a                 ;912e  73
    mov c,#0x25             ;912f  a2 25
    movw hl,#mem_fe7d       ;9131  16 7d fe
    callf !sub_0b26         ;9134  3c 26
    ret                     ;9136  af

sub_9137:
    bf mem_fe72.5,lab_913f  ;9137  31 53 72 04
    mov !mem_fc89,a         ;913b  9e 89 fc
    pop ax                  ;913e  b0

lab_913f:
    ret                     ;913f  af

sub_9140:
    mov a,!mem_fb1b         ;9140  8e 1b fb
    cmp a,#0x00             ;9143  4d 00
    bnz lab_915d            ;9145  bd 16
    clr1 pm7.0              ;9147  71 0b 27
    clr1 shadow_p7.0        ;914a  0b d1
    mov a,shadow_p7         ;914c  f0 d1
    mov p7,a                ;914e  f2 07
    bf mem_fe72.0,lab_915e  ;9150  31 03 72 0a
    clr1 mem_fe72.0         ;9154  0b 72
    mov a,#0x0f             ;9156  a1 0f
    mov !mem_fb1c,a         ;9158  9e 1c fb
    br lab_915e             ;915b  fa 01

lab_915d:
    ret                     ;915d  af

lab_915e:
    mov a,!mem_fb1c         ;915e  8e 1c fb
    cmp a,#0x00             ;9161  4d 00
    bnz lab_915d            ;9163  bd f8
    clr1 mem_fe74.6         ;9165  6b 74
    clr1 mem_fe74.7         ;9167  7b 74
    mov a,!mem_f1fe         ;9169  8e fe f1     TODO coding, monsoon related
    cmp a,#0x00             ;916c  4d 00
    bz lab_917c             ;916e  ad 0c
    cmp a,#0x03             ;9170  4d 03
    bz lab_917a             ;9172  ad 06
    cmp a,#0x04             ;9174  4d 04
    bnz lab_917c            ;9176  bd 04
    set1 mem_fe74.7         ;9178  7a 74

lab_917a:
    set1 mem_fe74.6         ;917a  6a 74

lab_917c:
    clr1 mem_fe72.5         ;917c  5b 72
    mov a,#0x00             ;917e  a1 00
    mov !mem_fc8b,a         ;9180  9e 8b fc
    btclr mem_fe72.6,lab_918c ;9183  31 61 72 05
    bt mem_fe72.7,lab_9195  ;9187  fc 72 0b
    br lab_91fd             ;918a  fa 71

lab_918c:
    movw hl,#mem_baa0       ;918c  16 a0 ba
    call !sub_9f33          ;918f  9a 33 9f
    bt mem_fe72.5,lab_91fc  ;9192  dc 72 67

lab_9195:
    bt mem_fe72.2,lab_91c8  ;9195  ac 72 30
    bt mem_fe2d.2,lab_919f  ;9198  ac 2d 04
    bf mem_fe72.3,lab_91c1  ;919b  31 33 72 22

lab_919f:
    clr1 mem_fe72.3         ;919f  3b 72
    bf mem_fe61.4,lab_91fd  ;91a1  31 43 61 58
    mov a,mem_fe58          ;91a5  f0 58
    cmp a,#0x01             ;91a7  4d 01
    bz lab_91ae             ;91a9  ad 03
    call !sub_609e          ;91ab  9a 9e 60

lab_91ae:
    movw hl,#mem_baab       ;91ae  16 ab ba
    bf mem_fe76.5,lab_91ba  ;91b1  31 53 76 05
    clr1 mem_fe76.5         ;91b5  5b 76
    movw hl,#mem_bab6       ;91b7  16 b6 ba

lab_91ba:
    call !sub_9f33          ;91ba  9a 33 9f
    mov a,#0x04             ;91bd  a1 04
    callf !sub_09d7         ;91bf  1c d7

lab_91c1:
    clr1 mem_fe72.7         ;91c1  7b 72
    bt mem_fe72.5,lab_91fc  ;91c3  dc 72 36
    br lab_91fd             ;91c6  fa 35

lab_91c8:
    bt mem_fe72.3,lab_91e6  ;91c8  bc 72 1b
    mov a,#0x00             ;91cb  a1 00
    mov !mem_fb46,a         ;91cd  9e 46 fb
    mov a,#0x20             ;91d0  a1 20
    mov x,a                 ;91d2  70
    mov a,!mem_f190         ;91d3  8e 90 f1
    cmp a,#0x02             ;91d6  4d 02
    bnz lab_91dc            ;91d8  bd 02
    mov x,#0x20             ;91da  a0 20

lab_91dc:
    mov a,x                 ;91dc  60
    mov !mem_fb1f,a         ;91dd  9e 1f fb
    movw hl,#mem_bac1       ;91e0  16 c1 ba
    call !sub_9f33          ;91e3  9a 33 9f

lab_91e6:
    mov a,!mem_fb1f         ;91e6  8e 1f fb
    cmp a,#0x00             ;91e9  4d 00
    bnz lab_91f6            ;91eb  bd 09
    bt mem_fe2d.2,lab_91f6  ;91ed  ac 2d 06
    mov a,#0x04             ;91f0  a1 04
    callf !sub_09d3         ;91f2  1c d3
    clr1 mem_fe72.7         ;91f4  7b 72

lab_91f6:
    set1 mem_fe72.3         ;91f6  3a 72
    bf mem_fe72.5,lab_91fd  ;91f8  31 53 72 01

lab_91fc:
    ret                     ;91fc  af

lab_91fd:
    mov a,mem_fe58          ;91fd  f0 58
    movw hl,#mem_cf7d+1     ;91ff  16 7e cf
    cmp a,#0x00             ;9202  4d 00
    bz lab_922a             ;9204  ad 24
    cmp a,mem_fe54          ;9206  4e 54
    bnz lab_9238            ;9208  bd 2e
    cmp a,#0x01             ;920a  4d 01
    bnz lab_922a            ;920c  bd 1c
    bf mem_fe75.0,lab_9217  ;920e  31 03 75 05
    bt mem_fe76.4,lab_921d  ;9212  cc 76 08
    br lab_922a             ;9215  fa 13

lab_9217:
    bf mem_fe76.4,lab_921d  ;9217  31 43 76 02
    br lab_922a             ;921b  fa 0d

lab_921d:
    set1 mem_fe75.0         ;921d  0a 75
    call !sub_0800_mode     ;921f  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;9222  4d 01
    bnz lab_9238            ;9224  bd 12
    ;mem_f253 = 0 (FM1/FM2)
    clr1 mem_fe75.0         ;9226  0b 75
    br lab_9238             ;9228  fa 0e

lab_922a:
    mov a,!mem_fc89         ;922a  8e 89 fc
    inc a                   ;922d  41
    dec a                   ;922e  51
    bnz lab_9240            ;922f  bd 0f
    mov a,#0x00             ;9231  a1 00
    xch a,!mem_fc8a         ;9233  ce 8a fc
    br lab_9240             ;9236  fa 08

lab_9238:
    mov a,#0x00             ;9238  a1 00
    mov !mem_fc89,a         ;923a  9e 89 fc
    mov !mem_fc8a,a         ;923d  9e 8a fc

lab_9240:
    mov b,a                 ;9240  73
    callf !table_get_word   ;9241  4c 48        Load DE with word at position B in table [HL]
    bc lab_924d             ;9243  8d 08        Branch if table lookup failed
    movw ax,#lab_924c       ;9245  10 4c 92
    push ax                 ;9248  b1
    movw ax,de              ;9249  c4
    br ax                   ;924a  31 98

lab_924c:
    ret                     ;924c  af

lab_924d:
    mov a,mem_fe58          ;924d  f0 58
    cmp a,#0x00             ;924f  4d 00
    bz lab_9269             ;9251  ad 16
    mov mem_fe54,a          ;9253  f2 54
    bt mem_fe73.0,lab_9269  ;9255  8c 73 11
    bt mem_fe73.1,lab_9269  ;9258  9c 73 0e
    cmp a,mem_fe55          ;925b  4e 55
    bz lab_9269             ;925d  ad 0a
    set1 mem_fe73.0         ;925f  0a 73
    set1 mem_fe73.1         ;9261  1a 73
    set1 mem_fe73.3         ;9263  3a 73
    set1 mem_fe73.5         ;9265  5a 73
    set1 mem_fe73.4         ;9267  4a 73

lab_9269:
    bt mem_fe73.0,lab_926f  ;9269  8c 73 03
    br !lab_9462            ;926c  9b 62 94

lab_926f:
    bf mem_fe6d.2,lab_9274  ;926f  31 23 6d 01
    ret                     ;9273  af

lab_9274:
    clr1 mem_fe74.2         ;9274  2b 74
    mov a,mem_fe58          ;9276  f0 58
    cmp a,#0x03             ;9278  4d 03
    bnz lab_927e            ;927a  bd 02
    set1 mem_fe74.2         ;927c  2a 74

lab_927e:
    movw hl,#mem_ba6d       ;927e  16 6d ba
    call !sub_9f33          ;9281  9a 33 9f
    mov a,#0x02             ;9284  a1 02
    call !sub_9137          ;9286  9a 37 91

lab_9289:
    movw hl,#mem_ba30       ;9289  16 30 ba
    call !sub_9f33          ;928c  9a 33 9f
    mov a,#0x01             ;928f  a1 01
    call !sub_9137          ;9291  9a 37 91

lab_9294:
    movw hl,#mem_ba72       ;9294  16 72 ba
    call !sub_9f33          ;9297  9a 33 9f
    mov a,#0x03             ;929a  a1 03
    call !sub_9137          ;929c  9a 37 91

lab_929f:
    movw hl,#mem_ba83       ;929f  16 83 ba
    call !sub_9f33          ;92a2  9a 33 9f
    mov a,#0x04             ;92a5  a1 04
    call !sub_9137          ;92a7  9a 37 91

lab_92aa:
    call !sub_9d61          ;92aa  9a 61 9d
    call !sub_9dd3          ;92ad  9a d3 9d
    call !sub_9ec7          ;92b0  9a c7 9e
    mov a,#0x05             ;92b3  a1 05
    call !sub_9137          ;92b5  9a 37 91

lab_92b8:
    movw hl,#mem_bacc       ;92b8  16 cc ba
    bf mem_fe74.2,lab_92c2  ;92bb  31 23 74 03
    movw hl,#mem_bb06       ;92bf  16 06 bb

lab_92c2:
    bf mem_fe74.6,lab_92d0  ;92c2  31 63 74 0a
    movw hl,#mem_bb2f       ;92c6  16 2f bb
    bf mem_fe74.2,lab_92d0  ;92c9  31 23 74 03
    movw hl,#mem_bb42       ;92cd  16 42 bb

lab_92d0:
    call !sub_9f33          ;92d0  9a 33 9f
    mov a,#0x06             ;92d3  a1 06
    call !sub_9137          ;92d5  9a 37 91

lab_92d8:
    movw hl,#mem_badf       ;92d8  16 df ba
    call !sub_9f33          ;92db  9a 33 9f
    mov a,#0x07             ;92de  a1 07
    call !sub_9137          ;92e0  9a 37 91

lab_92e3:
    movw hl,#mem_bae4       ;92e3  16 e4 ba
    bf mem_fe74.6,lab_92ed  ;92e6  31 63 74 03
    movw hl,#mem_baf5       ;92ea  16 f5 ba

lab_92ed:
    call !sub_9f33          ;92ed  9a 33 9f
    mov a,#0x08             ;92f0  a1 08
    call !sub_9137          ;92f2  9a 37 91

lab_92f5:
    mov a,#0x09             ;92f5  a1 09
    mov !mem_fc8a,a         ;92f7  9e 8a fc
    br !lab_9ca3            ;92fa  9b a3 9c

lab_92fd:
    mov a,#0x0a             ;92fd  a1 0a
    mov !mem_fc8a,a         ;92ff  9e 8a fc
    br !lab_9a3f            ;9302  9b 3f 9a

lab_9305:
    bt mem_fe74.6,lab_930b  ;9305  ec 74 03
    br !lab_939f            ;9308  9b 9f 93

lab_930b:
    mov a,!mem_f200         ;930b  8e 00 f2
    mov b,a                 ;930e  73
    movw hl,#mem_cf68+1     ;930f  16 69 cf
    callf !table_get_word   ;9312  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9314  c4
    bt mem_fe74.7,lab_9319  ;9315  fc 74 01
    xch a,x                 ;9318  30

lab_9319:
    mov b,a                 ;9319  73
    mov mem_fe56,a          ;931a  f2 56
    mov mem_fe52,#0x00      ;931c  11 52 00
    cmp a,#0x00             ;931f  4d 00
    bz lab_9328             ;9321  ad 05

lab_9323:
    add mem_fe52,#0x06      ;9323  88 52 06
    dbnz b,lab_9323         ;9326  8b fb

lab_9328:
    mov a,mem_fe52          ;9328  f0 52
    mov b,a                 ;932a  73
    movw hl,#mem_cee4+1     ;932b  16 e5 ce
    callf !table_get_word   ;932e  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9330  c4
    movw hl,ax              ;9331  d6
    inc mem_fe52            ;9332  81 52
    bt mem_fe74.2,lab_933b  ;9334  ac 74 04
    inc mem_fe52            ;9337  81 52
    br lab_9347             ;9339  fa 0c

lab_933b:
    mov a,mem_fe52          ;933b  f0 52
    mov b,a                 ;933d  73
    movw hl,#mem_cee4+1     ;933e  16 e5 ce
    callf !table_get_word   ;9341  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9343  c4
    movw hl,ax              ;9344  d6
    inc mem_fe52            ;9345  81 52

lab_9347:
    call !sub_9f33          ;9347  9a 33 9f
    mov a,#0x0d             ;934a  a1 0d
    call !sub_9137          ;934c  9a 37 91

lab_934f:
    mov a,mem_fe52          ;934f  f0 52
    mov b,a                 ;9351  73
    movw hl,#mem_cee4+1     ;9352  16 e5 ce
    callf !table_get_word   ;9355  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9357  c4
    movw hl,ax              ;9358  d6
    inc mem_fe52            ;9359  81 52
    bt mem_fe74.2,lab_9362  ;935b  ac 74 04
    inc mem_fe52            ;935e  81 52
    br lab_936e             ;9360  fa 0c

lab_9362:
    mov a,mem_fe52          ;9362  f0 52
    mov b,a                 ;9364  73
    movw hl,#mem_cee4+1     ;9365  16 e5 ce
    callf !table_get_word   ;9368  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;936a  c4
    movw hl,ax              ;936b  d6
    inc mem_fe52            ;936c  81 52

lab_936e:
    call !sub_9f33          ;936e  9a 33 9f
    mov a,#0x0e             ;9371  a1 0e
    call !sub_9137          ;9373  9a 37 91

lab_9376:
    mov a,mem_fe52          ;9376  f0 52
    mov b,a                 ;9378  73
    movw hl,#mem_cee4+1     ;9379  16 e5 ce
    callf !table_get_word   ;937c  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;937e  c4
    movw hl,ax              ;937f  d6
    inc mem_fe52            ;9380  81 52
    bt mem_fe74.2,lab_9389  ;9382  ac 74 04
    inc mem_fe52            ;9385  81 52
    br lab_9395             ;9387  fa 0c

lab_9389:
    mov a,mem_fe52          ;9389  f0 52
    mov b,a                 ;938b  73
    movw hl,#mem_cee4+1     ;938c  16 e5 ce
    callf !table_get_word   ;938f  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9391  c4
    movw hl,ax              ;9392  d6
    inc mem_fe52            ;9393  81 52

lab_9395:
    call !sub_9f33          ;9395  9a 33 9f
    mov a,#0x0c             ;9398  a1 0c
    call !sub_9137          ;939a  9a 37 91
    br lab_9407             ;939d  fa 68

lab_939f:
    mov a,!mem_f200         ;939f  8e 00 f2
    mov b,a                 ;93a2  73
    bt mem_fe74.2,lab_93ad  ;93a3  ac 74 07
    movw hl,#mem_c933+1     ;93a6  16 34 c9
    callf !table_get_word   ;93a9  4c 48        Load DE with word at position B in table [HL]
    br lab_93b2             ;93ab  fa 05

lab_93ad:
    movw hl,#mem_c95d+1     ;93ad  16 5e c9
    callf !table_get_word   ;93b0  4c 48        Load DE with word at position B in table [HL]

lab_93b2:
    movw ax,#0x0f8c         ;93b2  10 8c 0f
    call !sub_9e8e          ;93b5  9a 8e 9e
    mov a,#0x5c             ;93b8  a1 5c
    call !sub_9137          ;93ba  9a 37 91

lab_93bd:
    mov a,!mem_f200         ;93bd  8e 00 f2
    mov b,a                 ;93c0  73
    bt mem_fe74.2,lab_93cb  ;93c1  ac 74 07
    movw hl,#mem_c948+1     ;93c4  16 49 c9
    callf !table_get_word   ;93c7  4c 48        Load DE with word at position B in table [HL]
    br lab_93d0             ;93c9  fa 05

lab_93cb:
    movw hl,#mem_c972+1     ;93cb  16 73 c9
    callf !table_get_word   ;93ce  4c 48        Load DE with word at position B in table [HL]

lab_93d0:
    movw ax,#0x0fa0         ;93d0  10 a0 0f
    call !sub_9e8e          ;93d3  9a 8e 9e
    mov a,#0x5d             ;93d6  a1 5d
    call !sub_9137          ;93d8  9a 37 91

lab_93db:
    movw ax,#0x0177         ;93db  10 77 01
    bf mem_fe74.2,lab_93e5  ;93de  31 23 74 03
    movw ax,#0x0117         ;93e2  10 17 01

lab_93e5:
    movw de,ax              ;93e5  d4
    movw ax,#0x0f90         ;93e6  10 90 0f
    call !sub_9e8e          ;93e9  9a 8e 9e
    mov a,#0x0b             ;93ec  a1 0b
    call !sub_9137          ;93ee  9a 37 91

lab_93f1:
    movw ax,#0x5540         ;93f1  10 40 55
    bf mem_fe74.2,lab_93fb  ;93f4  31 23 74 03
    movw ax,#0x4540         ;93f8  10 40 45

lab_93fb:
    movw de,ax              ;93fb  d4
    movw ax,#0x0fa4         ;93fc  10 a4 0f
    call !sub_9e8e          ;93ff  9a 8e 9e
    mov a,#0x0c             ;9402  a1 0c
    call !sub_9137          ;9404  9a 37 91

lab_9407:
    mov a,#0x0f             ;9407  a1 0f
    mov !mem_fc8a,a         ;9409  9e 8a fc
    set1 mem_fe73.5         ;940c  5a 73
    br !lab_9b35            ;940e  9b 35 9b

lab_9411:
    movw hl,#mem_c98a       ;9411  16 8a c9
    call !sub_9f33          ;9414  9a 33 9f
    mov a,#0x10             ;9417  a1 10
    call !sub_9137          ;9419  9a 37 91

lab_941c:
    movw hl,#mem_bdc6       ;941c  16 c6 bd
    call !sub_9f2a          ;941f  9a 2a 9f
    mov a,#0x11             ;9422  a1 11
    call !sub_9137          ;9424  9a 37 91

lab_9427:
    movw hl,#mem_bdcc       ;9427  16 cc bd
    call !sub_9f2a          ;942a  9a 2a 9f
    mov a,#0x12             ;942d  a1 12
    call !sub_9137          ;942f  9a 37 91

lab_9432:
    movw hl,#mem_bdd2       ;9432  16 d2 bd
    call !sub_9f33          ;9435  9a 33 9f
    mov a,#0x13             ;9438  a1 13
    call !sub_9137          ;943a  9a 37 91

lab_943d:
    movw hl,#mem_bddd       ;943d  16 dd bd
    call !sub_9f2a          ;9440  9a 2a 9f
    mov a,#0x14             ;9443  a1 14
    call !sub_9137          ;9445  9a 37 91

lab_9448:
    movw hl,#mem_bde3       ;9448  16 e3 bd
    call !sub_9f2a          ;944b  9a 2a 9f
    mov a,#0x15             ;944e  a1 15
    call !sub_9137          ;9450  9a 37 91

lab_9453:
    movw hl,#mem_bde9       ;9453  16 e9 bd
    call !sub_9f33          ;9456  9a 33 9f
    mov a,#0x16             ;9459  a1 16
    call !sub_9137          ;945b  9a 37 91

lab_945e:
    clr1 mem_fe73.0         ;945e  0b 73
    clr1 mem_fe76.3         ;9460  3b 76

lab_9462:
    bt mem_fe73.1,lab_9468  ;9462  9c 73 03
    br !lab_9a1a            ;9465  9b 1a 9a

lab_9468:
    bt mem_fe6d.2,lab_9470  ;9468  ac 6d 05
    call !sub_a74b          ;946b  9a 4b a7
    bnc lab_9471            ;946e  9d 01

lab_9470:
    ret                     ;9470  af

lab_9471:
    mov a,mem_fe54          ;9471  f0 54
    clr1 mem_fe75.0         ;9473  0b 75
    cmp a,#0x02             ;9475  4d 02
    bz lab_947c             ;9477  ad 03
    br !lab_9571            ;9479  9b 71 95

lab_947c:
    mov a,mem_fe4c          ;947c  f0 4c
    bf mem_fe75.1,lab_9485  ;947e  31 13 75 03
    br !lab_9525            ;9482  9b 25 95

lab_9485:
    movw hl,#mem_bc8b       ;9485  16 8b bc
    call !sub_9f2a          ;9488  9a 2a 9f
    mov mem_fe55,#0x02      ;948b  11 55 02
    mov a,#0x17             ;948e  a1 17
    call !sub_9137          ;9490  9a 37 91

lab_9493:
    movw hl,#mem_bcbb       ;9493  16 bb bc
    call !sub_9f2a          ;9496  9a 2a 9f
    movw hl,#mem_bcc1       ;9499  16 c1 bc
    call !sub_9f2a          ;949c  9a 2a 9f
    movw hl,#mem_bcc7       ;949f  16 c7 bc
    call !sub_9f2a          ;94a2  9a 2a 9f
    movw hl,#mem_bccd       ;94a5  16 cd bc
    call !sub_9f2a          ;94a8  9a 2a 9f
    mov a,#0x18             ;94ab  a1 18
    call !sub_9137          ;94ad  9a 37 91

lab_94b0:
    movw hl,#mem_ba43       ;94b0  16 43 ba
    call !sub_9f33          ;94b3  9a 33 9f
    mov a,#0x19             ;94b6  a1 19
    call !sub_9137          ;94b8  9a 37 91

lab_94bb:
    movw hl,#mem_ba51       ;94bb  16 51 ba
    call !sub_9f33          ;94be  9a 33 9f
    mov a,#0x1a             ;94c1  a1 1a
    call !sub_9137          ;94c3  9a 37 91

lab_94c6:
    mov a,!mem_f1e3         ;94c6  8e e3 f1
    mov !i2c_buf+3,a        ;94c9  9e de fb
    mov a,!mem_f1e4         ;94cc  8e e4 f1
    mov !i2c_buf+4,a        ;94cf  9e df fb
    mov a,!mem_f1e5         ;94d2  8e e5 f1
    mov !i2c_buf+5,a        ;94d5  9e e0 fb
    mov a,!mem_f1e6         ;94d8  8e e6 f1
    mov !i2c_buf+6,a        ;94db  9e e1 fb
    movw ax,#0x0853         ;94de  10 53 08
    mov b,#0x07             ;94e1  a3 07
    call !sub_9f12          ;94e3  9a 12 9f
    mov a,#0x1b             ;94e6  a1 1b
    call !sub_9137          ;94e8  9a 37 91

lab_94eb:
    movw hl,#mem_bca9       ;94eb  16 a9 bc
    call !sub_9f2a          ;94ee  9a 2a 9f
    mov a,#0x1c             ;94f1  a1 1c
    call !sub_9137          ;94f3  9a 37 91

lab_94f6:
    br lab_9514             ;94f6  fa 1c

lab_94f8:
    mov a,#0x1d             ;94f8  a1 1d
    call !sub_9137          ;94fa  9a 37 91

lab_94fd:
    br !lab_99d7            ;94fd  9b d7 99

sub_9500:
    bt mem_fe73.0,lab_9524  ;9500  8c 73 21
    bt mem_fe73.1,lab_9524  ;9503  9c 73 1e
    mov a,!mem_fb1b         ;9506  8e 1b fb
    cmp a,#0x00             ;9509  4d 00
    bnz lab_9524            ;950b  bd 17
    mov a,!mem_fb1c         ;950d  8e 1c fb
    cmp a,#0x00             ;9510  4d 00
    bnz lab_9524            ;9512  bd 10

lab_9514:
    movw ax,#0xbdf4         ;9514  10 f4 bd
    bt mem_fe6f.4,lab_951d  ;9517  cc 6f 03
    movw ax,#0xbdf9         ;951a  10 f9 bd

lab_951d:
    movw hl,ax              ;951d  d6
    call !sub_9f33          ;951e  9a 33 9f
    br !lab_99d7            ;9521  9b d7 99

lab_9524:
    ret                     ;9524  af

lab_9525:
    movw hl,#mem_bc91       ;9525  16 91 bc
    call !sub_9f2a          ;9528  9a 2a 9f
    mov a,#0x1e             ;952b  a1 1e
    call !sub_9137          ;952d  9a 37 91

lab_9530:
    movw hl,#mem_bdfe       ;9530  16 fe bd
    call !sub_9f2a          ;9533  9a 2a 9f
    mov a,#0x1f             ;9536  a1 1f
    call !sub_9137          ;9538  9a 37 91

lab_953b:
    movw hl,#mem_be04       ;953b  16 04 be
    call !sub_9f2a          ;953e  9a 2a 9f
    mov a,#0x20             ;9541  a1 20
    call !sub_9137          ;9543  9a 37 91

lab_9546:
    mov a,!mem_fc84         ;9546  8e 84 fc
    sub a,#0x02             ;9549  1d 02
    mov x,#0x4c             ;954b  a0 4c
    mulu x                  ;954d  31 88        AX = A * X
    mov !i2c_buf+4,a        ;954f  9e df fb
    xch a,x                 ;9552  30
    mov !i2c_buf+5,a        ;9553  9e e0 fb
    mov a,#0x00             ;9556  a1 00
    mov !i2c_buf+3,a        ;9558  9e de fb
    movw ax,#0x0052         ;955b  10 52 00
    mov b,#0x06             ;955e  a3 06
    call !sub_9f12          ;9560  9a 12 9f
    mov a,#0x21             ;9563  a1 21
    call !sub_9137          ;9565  9a 37 91

lab_9568:
    movw hl,#mem_bcaf       ;9568  16 af bc
    call !sub_9f2a          ;956b  9a 2a 9f
    br !lab_99d7            ;956e  9b d7 99

lab_9571:
    cmp a,#0x03             ;9571  4d 03
    bnz lab_95b2            ;9573  bd 3d
    movw hl,#mem_bc97       ;9575  16 97 bc
    call !sub_9f2a          ;9578  9a 2a 9f
    mov mem_fe55,#0x03      ;957b  11 55 03
    mov a,#0x22             ;957e  a1 22
    call !sub_9137          ;9580  9a 37 91

lab_9583:
    movw hl,#mem_ba43       ;9583  16 43 ba
    call !sub_9f33          ;9586  9a 33 9f
    mov a,#0x23             ;9589  a1 23
    call !sub_9137          ;958b  9a 37 91

lab_958e:
    movw hl,#mem_ba66       ;958e  16 66 ba
    call !sub_9f33          ;9591  9a 33 9f
    mov a,#0x24             ;9594  a1 24
    call !sub_9137          ;9596  9a 37 91

lab_9599:
    movw hl,#mem_bcb5       ;9599  16 b5 bc
    call !sub_9f2a          ;959c  9a 2a 9f
    mov a,#0x25             ;959f  a1 25
    call !sub_9137          ;95a1  9a 37 91

lab_95a4:
    movw hl,#mem_be0f       ;95a4  16 0f be
    call !sub_9f33          ;95a7  9a 33 9f
    mov a,#0x26             ;95aa  a1 26
    call !sub_9137          ;95ac  9a 37 91

lab_95af:
    br !lab_99d7            ;95af  9b d7 99

lab_95b2:
    bf mem_fe69.4,lab_95c1  ;95b2  31 43 69 0b
    btclr mem_fe76.3,lab_95c4 ;95b6  31 31 76 0a
    mov a,#0x1e             ;95ba  a1 1e
    mov !mem_fb1b,a         ;95bc  9e 1b fb
    set1 mem_fe76.3         ;95bf  3a 76

lab_95c1:
    br !lab_9d1f            ;95c1  9b 1f 9d

lab_95c4:
    call !sub_0800_mode     ;95c4  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;95c7  4d 01
    bnz lab_95ce_am         ;95c9  bd 03
    ;mem_f253 = 0x01 (FM1/FM2)
    br !lab_96ed_fm         ;95cb  9b ed 96

lab_95ce_am:
    set1 mem_fe75.0         ;95ce  0a 75
    movw hl,#mem_bc85       ;95d0  16 85 bc
    call !sub_9f2a          ;95d3  9a 2a 9f
    mov mem_fe55,#0x01      ;95d6  11 55 01
    mov a,#0x27             ;95d9  a1 27
    call !sub_9137          ;95db  9a 37 91

lab_95de:
    movw hl,#mem_ba43       ;95de  16 43 ba
    call !sub_9f33          ;95e1  9a 33 9f
    mov a,#0x28             ;95e4  a1 28
    call !sub_9137          ;95e6  9a 37 91

lab_95e9:
    movw hl,#mem_ba5f       ;95e9  16 5f ba
    call !sub_9f33          ;95ec  9a 33 9f
    mov a,#0x29             ;95ef  a1 29
    call !sub_9137          ;95f1  9a 37 91

lab_95f4:
    movw hl,#mem_bca3       ;95f4  16 a3 bc
    call !sub_9f2a          ;95f7  9a 2a 9f
    mov a,#0x2a             ;95fa  a1 2a
    call !sub_9137          ;95fc  9a 37 91

lab_95ff:
    mov a,!mem_f1d7         ;95ff  8e d7 f1
    mov !i2c_buf+3,a        ;9602  9e de fb
    mov a,!mem_f1d8         ;9605  8e d8 f1
    mov !i2c_buf+4,a        ;9608  9e df fb
    mov a,!mem_f1d9         ;960b  8e d9 f1
    mov !i2c_buf+5,a        ;960e  9e e0 fb
    mov a,!mem_f1da         ;9611  8e da f1
    mov !i2c_buf+6,a        ;9614  9e e1 fb
    movw ax,#0x081d         ;9617  10 1d 08
    mov b,#0x07             ;961a  a3 07
    call !sub_9f12          ;961c  9a 12 9f
    mov a,#0x2b             ;961f  a1 2b
    call !sub_9137          ;9621  9a 37 91

lab_9624:
    mov a,!mem_f1db         ;9624  8e db f1
    mov !i2c_buf+3,a        ;9627  9e de fb
    mov a,!mem_f1dc         ;962a  8e dc f1
    mov !i2c_buf+4,a        ;962d  9e df fb
    mov a,!mem_f1dd         ;9630  8e dd f1
    mov !i2c_buf+5,a        ;9633  9e e0 fb
    mov a,!mem_f1de         ;9636  8e de f1
    mov !i2c_buf+6,a        ;9639  9e e1 fb
    movw ax,#0x0837         ;963c  10 37 08
    mov b,#0x07             ;963f  a3 07
    call !sub_9f12          ;9641  9a 12 9f
    mov a,#0x2c             ;9644  a1 2c
    call !sub_9137          ;9646  9a 37 91

lab_9649:
    movw hl,#mem_bd5b       ;9649  16 5b bd
    call !sub_9f33          ;964c  9a 33 9f
    mov a,#0x2d             ;964f  a1 2d
    call !sub_9137          ;9651  9a 37 91

lab_9654:
    movw hl,#mem_bd60       ;9654  16 60 bd
    call !sub_9f33          ;9657  9a 33 9f
    mov a,#0x2e             ;965a  a1 2e
    call !sub_9137          ;965c  9a 37 91

lab_965f:
    mov a,!mem_f1df         ;965f  8e df f1
    mov !i2c_buf+3,a        ;9662  9e de fb
    mov a,!mem_f1e0         ;9665  8e e0 f1
    mov !i2c_buf+4,a        ;9668  9e df fb
    mov a,!mem_f1e1         ;966b  8e e1 f1
    mov !i2c_buf+5,a        ;966e  9e e0 fb
    mov a,!mem_f1e2         ;9671  8e e2 f1
    mov !i2c_buf+6,a        ;9674  9e e1 fb
    movw ax,#0x083d         ;9677  10 3d 08
    mov b,#0x07             ;967a  a3 07
    call !sub_9f12          ;967c  9a 12 9f
    mov a,#0x2f             ;967f  a1 2f
    call !sub_9137          ;9681  9a 37 91

lab_9684:
    movw hl,#mem_bd67       ;9684  16 67 bd
    call !sub_9f33          ;9687  9a 33 9f
    mov a,#0x30             ;968a  a1 30
    call !sub_9137          ;968c  9a 37 91

lab_968f:
    movw hl,#mem_bd6e       ;968f  16 6e bd
    call !sub_9f33          ;9692  9a 33 9f
    mov a,#0x31             ;9695  a1 31
    call !sub_9137          ;9697  9a 37 91

lab_969a:
    movw hl,#mem_bd9c       ;969a  16 9c bd
    call !sub_9f33          ;969d  9a 33 9f
    mov a,#0x32             ;96a0  a1 32
    call !sub_9137          ;96a2  9a 37 91

lab_96a5:
    mov a,#0x01             ;96a5  a1 01
    mov !i2c_buf+3,a        ;96a7  9e de fb
    mov a,#0xf0             ;96aa  a1 f0
    mov !i2c_buf+4,a        ;96ac  9e df fb
    movw ax,#0x0862         ;96af  10 62 08
    mov b,#0x05             ;96b2  a3 05
    call !sub_9f12          ;96b4  9a 12 9f
    mov a,#0x33             ;96b7  a1 33
    call !sub_9137          ;96b9  9a 37 91

lab_96bc:
    mov a,#0x00             ;96bc  a1 00
    mov !i2c_buf+3,a        ;96be  9e de fb
    mov a,#0x00             ;96c1  a1 00
    mov !i2c_buf+4,a        ;96c3  9e df fb
    movw ax,#0x0866         ;96c6  10 66 08
    mov b,#0x05             ;96c9  a3 05
    call !sub_9f12          ;96cb  9a 12 9f
    mov a,#0x42             ;96ce  a1 42
    call !sub_9137          ;96d0  9a 37 91

lab_96d3:
    mov a,#0x00             ;96d3  a1 00
    mov !i2c_buf+3,a        ;96d5  9e de fb
    mov a,#0x20             ;96d8  a1 20
    mov !i2c_buf+4,a        ;96da  9e df fb
    movw ax,#0x0864         ;96dd  10 64 08
    mov b,#0x05             ;96e0  a3 05
    call !sub_9f12          ;96e2  9a 12 9f
    mov a,#0x35             ;96e5  a1 35
    call !sub_9137          ;96e7  9a 37 91

lab_96ea:
    br !lab_99d7            ;96ea  9b d7 99

lab_96ed_fm:
    movw hl,#mem_bc7f       ;96ed  16 7f bc
    call !sub_9f2a          ;96f0  9a 2a 9f
    mov mem_fe55,#0x01      ;96f3  11 55 01
    mov a,#0x36             ;96f6  a1 36
    call !sub_9137          ;96f8  9a 37 91

lab_96fb:
    movw hl,#mem_bc79       ;96fb  16 79 bc
    call !sub_9f2a          ;96fe  9a 2a 9f
    mov a,#0x37             ;9701  a1 37
    call !sub_9137          ;9703  9a 37 91

lab_9706:
    movw hl,#mem_ba4a       ;9706  16 4a ba
    call !sub_9f33          ;9709  9a 33 9f
    mov a,#0x38             ;970c  a1 38
    call !sub_9137          ;970e  9a 37 91

lab_9711:
    movw hl,#mem_ba58       ;9711  16 58 ba
    call !sub_9f33          ;9714  9a 33 9f
    mov a,#0x39             ;9717  a1 39
    call !sub_9137          ;9719  9a 37 91

lab_971c:
    movw hl,#mem_ba35       ;971c  16 35 ba
    call !sub_9f33          ;971f  9a 33 9f
    mov a,#0x0a             ;9722  a1 0a
    mov !i2c_buf+3,a        ;9724  9e de fb
    mov a,#0xed             ;9727  a1 ed
    mov !i2c_buf+4,a        ;9729  9e df fb
    mov a,#0xe0             ;972c  a1 e0
    mov !i2c_buf+5,a        ;972e  9e e0 fb
    mov a,#0x48             ;9731  a1 48
    mov !i2c_buf+6,a        ;9733  9e e1 fb
    movw ax,#0x0ffb         ;9736  10 fb 0f
    mov b,#0x07             ;9739  a3 07
    call !sub_9f12          ;973b  9a 12 9f
    mov a,#0x3a             ;973e  a1 3a
    call !sub_9137          ;9740  9a 37 91

lab_9743:
    mov a,!mem_f1c5         ;9743  8e c5 f1
    mov !i2c_buf+3,a        ;9746  9e de fb
    mov a,!mem_f1c6         ;9749  8e c6 f1
    mov !i2c_buf+4,a        ;974c  9e df fb
    movw ax,#0x0831         ;974f  10 31 08
    mov b,#0x05             ;9752  a3 05
    call !sub_9f12          ;9754  9a 12 9f
    mov a,#0x3b             ;9757  a1 3b
    call !sub_9137          ;9759  9a 37 91

lab_975c:
    bt mem_fe5d.4,lab_9768  ;975c  cc 5d 09   Branch if mem_f1e7_region & 0x07 = 0 (see sub_1c9d_region)

    ;mem_f1e7_region & 0x07 != 0
    movw ax,#mem_bcde       ;975f  10 de bc
    movw hl,ax              ;9762  d6
    call !sub_9f33          ;9763  9a 33 9f
    br lab_979b             ;9766  fa 33

lab_9768:
    movw hl,#mem_bcd3       ;9768  16 d3 bc
    mov a,[hl+0x03]         ;976b  ae 03
    mov !i2c_buf+3,a        ;976d  9e de fb
    mov a,[hl+0x04]         ;9770  ae 04
    mov !i2c_buf+4,a        ;9772  9e df fb
    mov a,[hl+0x05]         ;9775  ae 05
    mov !i2c_buf+5,a        ;9777  9e e0 fb
    mov a,[hl+0x06]         ;977a  ae 06
    mov !i2c_buf+6,a        ;977c  9e e1 fb
    mov a,#0x03             ;977f  a1 03
    mov !i2c_buf+7,a        ;9781  9e e2 fb
    mov a,#0xf8             ;9784  a1 f8
    mov !i2c_buf+8,a        ;9786  9e e3 fb
    mov a,#0x02             ;9789  a1 02
    mov !i2c_buf+9,a        ;978b  9e e4 fb
    mov a,#0x08             ;978e  a1 08
    mov !i2c_buf+0x0a,a         ;9790  9e e5 fb
    movw ax,#0x0876         ;9793  10 76 08
    mov b,#0x0b             ;9796  a3 0b
    call !sub_9f12          ;9798  9a 12 9f

lab_979b:
    mov a,#0x3c             ;979b  a1 3c
    call !sub_9137          ;979d  9a 37 91

lab_97a0:
    mov a,!mem_f1c7         ;97a0  8e c7 f1
    mov !i2c_buf+3,a        ;97a3  9e de fb
    mov a,!mem_f1c8         ;97a6  8e c8 f1
    mov !i2c_buf+4,a        ;97a9  9e df fb
    mov a,!mem_f1c9         ;97ac  8e c9 f1
    mov !i2c_buf+5,a        ;97af  9e e0 fb
    mov a,!mem_f1ca         ;97b2  8e ca f1
    mov !i2c_buf+6,a        ;97b5  9e e1 fb
    movw ax,#0x081d         ;97b8  10 1d 08
    mov b,#0x07             ;97bb  a3 07
    call !sub_9f12          ;97bd  9a 12 9f
    mov a,#0x3d             ;97c0  a1 3d
    call !sub_9137          ;97c2  9a 37 91

lab_97c5:
    mov a,!mem_f1cb         ;97c5  8e cb f1
    mov !i2c_buf+3,a        ;97c8  9e de fb
    mov a,!mem_f1cc         ;97cb  8e cc f1
    mov !i2c_buf+4,a        ;97ce  9e df fb
    mov a,!mem_f1cd         ;97d1  8e cd f1
    mov !i2c_buf+5,a        ;97d4  9e e0 fb
    mov a,!mem_f1ce         ;97d7  8e ce f1
    mov !i2c_buf+6,a        ;97da  9e e1 fb
    movw ax,#0x084d         ;97dd  10 4d 08
    mov b,#0x07             ;97e0  a3 07
    call !sub_9f12          ;97e2  9a 12 9f
    mov a,#0x3e             ;97e5  a1 3e
    call !sub_9137          ;97e7  9a 37 91

lab_97ea:
    mov a,#0x02             ;97ea  a1 02
    mov !i2c_buf+3,a        ;97ec  9e de fb
    mov a,#0xdf             ;97ef  a1 df
    mov !i2c_buf+4,a        ;97f1  9e df fb
    movw ax,#0x084f         ;97f4  10 4f 08
    mov b,#0x05             ;97f7  a3 05
    call !sub_9f12          ;97f9  9a 12 9f
    mov a,#0x40             ;97fc  a1 40
    call !sub_9137          ;97fe  9a 37 91

lab_9801:
    mov a,!mem_f1cf         ;9801  8e cf f1
    mov !i2c_buf+3,a        ;9804  9e de fb
    mov a,!mem_f1d0         ;9807  8e d0 f1
    mov !i2c_buf+4,a        ;980a  9e df fb
    mov a,!mem_f1d1         ;980d  8e d1 f1
    mov !i2c_buf+5,a        ;9810  9e e0 fb
    mov a,!mem_f1d2         ;9813  8e d2 f1
    mov !i2c_buf+6,a        ;9816  9e e1 fb
    movw ax,#0x0861         ;9819  10 61 08
    mov b,#0x07             ;981c  a3 07
    call !sub_9f12          ;981e  9a 12 9f
    mov a,#0x41             ;9821  a1 41
    call !sub_9137          ;9823  9a 37 91

lab_9826:
    mov a,#0x0c             ;9826  a1 0c
    mov !i2c_buf+3,a        ;9828  9e de fb
    mov a,#0x28             ;982b  a1 28
    mov !i2c_buf+4,a        ;982d  9e df fb
    mov a,#0x03             ;9830  a1 03
    mov !i2c_buf+5,a        ;9832  9e e0 fb
    mov a,#0x80             ;9835  a1 80
    mov !i2c_buf+6,a        ;9837  9e e1 fb
    movw ax,#0x0853         ;983a  10 53 08
    mov b,#0x07             ;983d  a3 07
    call !sub_9f12          ;983f  9a 12 9f
    mov a,#0x42             ;9842  a1 42
    call !sub_9137          ;9844  9a 37 91

lab_9847:
    mov a,!mem_f1d3         ;9847  8e d3 f1
    mov !i2c_buf+3,a        ;984a  9e de fb
    mov a,!mem_f1d4         ;984d  8e d4 f1
    mov !i2c_buf+4,a        ;9850  9e df fb
    mov a,!mem_f1d5         ;9853  8e d5 f1
    mov !i2c_buf+5,a        ;9856  9e e0 fb
    mov a,!mem_f1d6         ;9859  8e d6 f1
    mov !i2c_buf+6,a        ;985c  9e e1 fb
    movw ax,#0x086d         ;985f  10 6d 08
    mov b,#0x07             ;9862  a3 07
    call !sub_9f12          ;9864  9a 12 9f
    mov a,#0x43             ;9867  a1 43
    call !sub_9137          ;9869  9a 37 91

lab_986c:
    movw hl,#mem_bd03       ;986c  16 03 bd
    call !sub_9f33          ;986f  9a 33 9f
    mov a,#0x06             ;9872  a1 06
    mov !i2c_buf+3,a        ;9874  9e de fb
    mov a,#0x5b             ;9877  a1 5b
    mov !i2c_buf+4,a        ;9879  9e df fb
    movw ax,#0x0842         ;987c  10 42 08
    mov b,#0x05             ;987f  a3 05
    call !sub_9f12          ;9881  9a 12 9f
    mov a,#0x44             ;9884  a1 44
    call !sub_9137          ;9886  9a 37 91

lab_9889:
    mov a,#0x0a             ;9889  a1 0a
    mov !i2c_buf+3,a        ;988b  9e de fb
    mov a,#0xf6             ;988e  a1 f6
    mov !i2c_buf+4,a        ;9890  9e df fb
    mov a,#0x01             ;9893  a1 01
    mov !i2c_buf+5,a        ;9895  9e e0 fb
    mov a,#0x5c             ;9898  a1 5c
    mov !i2c_buf+6,a        ;989a  9e e1 fb
    movw ax,#0x085c         ;989d  10 5c 08
    mov b,#0x07             ;98a0  a3 07
    call !sub_9f12          ;98a2  9a 12 9f
    mov a,#0x45             ;98a5  a1 45
    call !sub_9137          ;98a7  9a 37 91

lab_98aa:
    mov a,#0x00             ;98aa  a1 00
    mov !i2c_buf+3,a        ;98ac  9e de fb
    mov a,#0x00             ;98af  a1 00
    mov !i2c_buf+4,a        ;98b1  9e df fb
    movw ax,#0x0873         ;98b4  10 73 08
    mov b,#0x05             ;98b7  a3 05
    call !sub_9f12          ;98b9  9a 12 9f
    mov a,#0x46             ;98bc  a1 46
    call !sub_9137          ;98be  9a 37 91

lab_98c1:
    movw hl,#mem_bd16       ;98c1  16 16 bd
    call !sub_9f33          ;98c4  9a 33 9f
    mov a,#0x47             ;98c7  a1 47
    call !sub_9137          ;98c9  9a 37 91

lab_98cc:
    mov a,#0x00             ;98cc  a1 00
    mov !i2c_buf+3,a        ;98ce  9e de fb
    mov a,#0x00             ;98d1  a1 00
    mov !i2c_buf+4,a        ;98d3  9e df fb
    mov a,#0x07             ;98d6  a1 07
    mov !i2c_buf+5,a        ;98d8  9e e0 fb
    mov a,#0xff             ;98db  a1 ff
    mov !i2c_buf+6,a        ;98dd  9e e1 fb
    movw ax,#0x085a         ;98e0  10 5a 08
    mov b,#0x07             ;98e3  a3 07
    call !sub_9f12          ;98e5  9a 12 9f
    mov a,#0x48             ;98e8  a1 48
    call !sub_9137          ;98ea  9a 37 91

lab_98ed:
    mov a,#0x00             ;98ed  a1 00
    mov !i2c_buf+3,a        ;98ef  9e de fb
    mov a,#0x00             ;98f2  a1 00
    mov !i2c_buf+4,a        ;98f4  9e df fb
    movw ax,#0x0872         ;98f7  10 72 08
    mov b,#0x05             ;98fa  a3 05
    call !sub_9f12          ;98fc  9a 12 9f
    mov a,#0x49             ;98ff  a1 49
    call !sub_9137          ;9901  9a 37 91

lab_9904:
    movw hl,#mem_bd29       ;9904  16 29 bd
    call !sub_9f33          ;9907  9a 33 9f
    mov a,#0x4a             ;990a  a1 4a
    call !sub_9137          ;990c  9a 37 91

lab_990f:
    movw hl,#mem_bd32       ;990f  16 32 bd
    call !sub_9f33          ;9912  9a 33 9f
    mov a,#0x4b             ;9915  a1 4b
    call !sub_9137          ;9917  9a 37 91

lab_991a:
    movw hl,#mem_bd37       ;991a  16 37 bd
    call !sub_9f33          ;991d  9a 33 9f
    mov a,#0x4c             ;9920  a1 4c
    call !sub_9137          ;9922  9a 37 91

lab_9925:
    movw hl,#mem_bd3c       ;9925  16 3c bd
    call !sub_9f33          ;9928  9a 33 9f
    mov a,#0x4d             ;992b  a1 4d
    call !sub_9137          ;992d  9a 37 91

lab_9930:
    movw hl,#mem_bd41       ;9930  16 41 bd
    call !sub_9f33          ;9933  9a 33 9f
    mov a,#0x4e             ;9936  a1 4e
    call !sub_9137          ;9938  9a 37 91

lab_993b:
    movw hl,#mem_bd46       ;993b  16 46 bd
    call !sub_9f33          ;993e  9a 33 9f
    mov a,#0x4f             ;9941  a1 4f
    call !sub_9137          ;9943  9a 37 91

lab_9946:
    movw hl,#mem_bd4b       ;9946  16 4b bd
    call !sub_9f33          ;9949  9a 33 9f
    mov a,#0x50             ;994c  a1 50
    call !sub_9137          ;994e  9a 37 91

lab_9951:
    mov a,#0x00             ;9951  a1 00
    mov !i2c_buf+3,a        ;9953  9e de fb
    mov a,#0x13             ;9956  a1 13
    mov !i2c_buf+4,a        ;9958  9e df fb
    mov a,#0x00             ;995b  a1 00
    mov !i2c_buf+5,a        ;995d  9e e0 fb
    mov a,#0x03             ;9960  a1 03
    mov !i2c_buf+6,a        ;9962  9e e1 fb
    movw ax,#0x0855         ;9965  10 55 08
    mov b,#0x07             ;9968  a3 07
    call !sub_9f12          ;996a  9a 12 9f
    mov a,#0x51             ;996d  a1 51
    call !sub_9137          ;996f  9a 37 91

lab_9972:
    mov a,#0x00             ;9972  a1 00
    mov !i2c_buf+3,a        ;9974  9e de fb
    mov a,#0x13             ;9977  a1 13
    mov !i2c_buf+4,a        ;9979  9e df fb
    mov a,#0x00             ;997c  a1 00
    mov !i2c_buf+5,a        ;997e  9e e0 fb
    mov a,#0x03             ;9981  a1 03
    mov !i2c_buf+6,a        ;9983  9e e1 fb
    movw ax,#0x085e         ;9986  10 5e 08
    mov b,#0x07             ;9989  a3 07
    call !sub_9f12          ;998b  9a 12 9f
    mov a,#0x52             ;998e  a1 52
    call !sub_9137          ;9990  9a 37 91

lab_9993:
    mov a,#0x0d             ;9993  a1 0d
    mov !i2c_buf+3,a        ;9995  9e de fb
    mov a,#0x80             ;9998  a1 80
    mov !i2c_buf+4,a        ;999a  9e df fb
    movw ax,#0x0821         ;999d  10 21 08
    mov b,#0x05             ;99a0  a3 05
    call !sub_9f12          ;99a2  9a 12 9f
    mov a,#0x53             ;99a5  a1 53
    call !sub_9137          ;99a7  9a 37 91

lab_99aa:
    mov a,#0x01             ;99aa  a1 01
    mov !i2c_buf+3,a        ;99ac  9e de fb
    mov a,#0xeb             ;99af  a1 eb
    mov !i2c_buf+4,a        ;99b1  9e df fb
    movw ax,#0x083e         ;99b4  10 3e 08
    mov b,#0x05             ;99b7  a3 05
    call !sub_9f12          ;99b9  9a 12 9f
    mov a,#0x54             ;99bc  a1 54
    call !sub_9137          ;99be  9a 37 91

lab_99c1:
    movw hl,#mem_bd52       ;99c1  16 52 bd
    call !sub_9f33          ;99c4  9a 33 9f
    mov a,#0x55             ;99c7  a1 55
    call !sub_9137          ;99c9  9a 37 91

lab_99cc:
    movw hl,#mem_bc9d       ;99cc  16 9d bc
    call !sub_9f2a          ;99cf  9a 2a 9f
    mov a,#0x3f             ;99d2  a1 3f
    call !sub_9137          ;99d4  9a 37 91

lab_99d7:
    movw hl,#mem_bb55       ;99d7  16 55 bb
    bf mem_fe74.2,lab_99e1  ;99da  31 23 74 03
    movw hl,#mem_bbeb       ;99de  16 eb bb

lab_99e1:
    call !sub_9f33          ;99e1  9a 33 9f
    mov a,#0x5e             ;99e4  a1 5e
    call !sub_9137          ;99e6  9a 37 91

lab_99e9:
    movw hl,#mem_bb64       ;99e9  16 64 bb
    bf mem_fe74.2,lab_99f3  ;99ec  31 23 74 03
    movw hl,#mem_bbfa       ;99f0  16 fa bb

lab_99f3:
    call !sub_9f33          ;99f3  9a 33 9f
    mov a,#0x5f             ;99f6  a1 5f
    call !sub_9137          ;99f8  9a 37 91

lab_99fb:
    movw hl,#mem_bb7b       ;99fb  16 7b bb
    bf mem_fe74.2,lab_9a05  ;99fe  31 23 74 03
    movw hl,#mem_bc11       ;9a02  16 11 bc

lab_9a05:
    call !sub_9f33          ;9a05  9a 33 9f
    mov a,#0x60             ;9a08  a1 60
    call !sub_9137          ;9a0a  9a 37 91

lab_9a0d:
    movw hl,#mem_bbb9       ;9a0d  16 b9 bb
    call !sub_9f33          ;9a10  9a 33 9f
    mov a,#0x61             ;9a13  a1 61
    call !sub_9137          ;9a15  9a 37 91
    br lab_9a1e             ;9a18  fa 04

lab_9a1a:
    bf mem_fe73.2,sub_9a39  ;9a1a  31 23 73 1b

lab_9a1e:
    call !sub_9d25          ;9a1e  9a 25 9d
    mov !i2c_buf+3,a        ;9a21  9e de fb
    xch a,x                 ;9a24  30
    mov !i2c_buf+4,a        ;9a25  9e df fb
    movw ax,#0x08f3         ;9a28  10 f3 08
    mov b,#0x05             ;9a2b  a3 05
    call !sub_9f12          ;9a2d  9a 12 9f
    clr1 mem_fe73.1         ;9a30  1b 73
    clr1 mem_fe73.2         ;9a32  2b 73
    mov a,#0x00             ;9a34  a1 00
    call !sub_9137          ;9a36  9a 37 91

sub_9a39:
    bt mem_fe73.3,lab_9a3f  ;9a39  bc 73 03
    br !lab_9b35            ;9a3c  9b 35 9b

lab_9a3f:
    set1 mem_fe74.3         ;9a3f  3a 74
    mov a,!mem_fc96         ;9a41  8e 96 fc
    bt mem_fe76.2,lab_9a4d  ;9a44  ac 76 06
    bt mem_fe75.7,lab_9ab4  ;9a47  fc 75 6a
    bt mem_fe76.0,lab_9ab4  ;9a4a  8c 76 67

lab_9a4d:
    clr1 mem_fe75.7         ;9a4d  7b 75
    clr1 mem_fe76.0         ;9a4f  0b 76
    set1 mem_fe78.0         ;9a51  0a 78
    call !sub_a694          ;9a53  9a 94 a6
    clr1 mem_fe78.0         ;9a56  0b 78
    mov x,a                 ;9a58  70
    mov a,#0x00             ;9a59  a1 00
    mov c,#0x02             ;9a5b  a2 02
    divuw c                 ;9a5d  31 82        AX = AX / C
    mov a,x                 ;9a5f  60
    bt mem_fe74.6,lab_9a81  ;9a60  ec 74 1e
    push ax                 ;9a63  b1
    mov b,a                 ;9a64  73
    mov a,#0x3d             ;9a65  a1 3d
    sub a,b                 ;9a67  61 1b
    mov b,a                 ;9a69  73
    cmp a,#0x0f             ;9a6a  4d 0f
    bc lab_9a70             ;9a6c  8d 02
    mov b,#0x0e             ;9a6e  a3 0e

lab_9a70:
    movw hl,#mem_be1b+1     ;9a70  16 1c be
    call !table_get_byte    ;9a73  9a 7d 0c     Load A with byte at position B in table [HL]
    cmp a,!mem_fc99         ;9a76  48 99 fc
    bz lab_9a80             ;9a79  ad 05
    mov !mem_fc99,a         ;9a7b  9e 99 fc
    set1 mem_fe73.5         ;9a7e  5a 73

lab_9a80:
    pop ax                  ;9a80  b0

lab_9a81:
    mov !mem_fc97,a         ;9a81  9e 97 fc
    clr1 mem_fe75.5         ;9a84  5b 75
    clr1 mem_fe75.6         ;9a86  6b 75
    bt mem_fe76.5,lab_9ab4  ;9a88  dc 76 29
    bf mem_fe76.2,lab_9a96  ;9a8b  31 23 76 07
    clr1 mem_fe76.2         ;9a8f  2b 76
    cmp a,!mem_fc96         ;9a91  48 96 fc
    bnc lab_9ab4            ;9a94  9d 1e

lab_9a96:
    cmp a,!mem_fc96         ;9a96  48 96 fc
    mov a,!mem_fc96         ;9a99  8e 96 fc
    bnc lab_9aa9            ;9a9c  9d 0b
    set1 mem_fe75.6         ;9a9e  6a 75
    dec a                   ;9aa0  51
    bf mem_fe2d.2,lab_9ab4  ;9aa1  31 23 2d 0f
    mov a,#0x00             ;9aa5  a1 00
    br lab_9ab4             ;9aa7  fa 0b

lab_9aa9:
    bnz lab_9ab1            ;9aa9  bd 06
    clr1 mem_fe73.3         ;9aab  3b 73
    clr1 mem_fe66.3         ;9aad  3b 66
    br lab_9ab4             ;9aaf  fa 03

lab_9ab1:
    set1 mem_fe75.5         ;9ab1  5a 75
    inc a                   ;9ab3  41

lab_9ab4:
    mov !mem_fc96,a         ;9ab4  9e 96 fc
    mov b,a                 ;9ab7  73
    bf mem_fe74.6,lab_9ac4  ;9ab8  31 63 74 08
    cmp a,#0x2d             ;9abc  4d 2d
    bc lab_9aca             ;9abe  8d 0a
    mov b,#0x2d             ;9ac0  a3 2d
    br lab_9aca             ;9ac2  fa 06

lab_9ac4:
    cmp a,#0x3d             ;9ac4  4d 3d
    bc lab_9aca             ;9ac6  8d 02
    mov b,#0x3d             ;9ac8  a3 3d

lab_9aca:
    movw hl,#mem_bea8+1     ;9aca  16 a9 be
    bf mem_fe74.3,lab_9ad4  ;9acd  31 33 74 03
    movw hl,#mem_bfa2+1     ;9ad1  16 a3 bf

lab_9ad4:
    bf mem_fe74.6,lab_9ae2  ;9ad4  31 63 74 0a
    movw hl,#mem_c1b3+1     ;9ad8  16 b4 c1
    bf mem_fe74.3,lab_9ae2  ;9adb  31 33 74 03
    movw hl,#mem_c156+1     ;9adf  16 57 c1

lab_9ae2:
    callf !table_get_word   ;9ae2  4c 48            Load DE with word at position B in table [HL]
    bnc lab_9aea            ;9ae4  9d 04            Branch if table lookup succeeded
    mov b,#0x00             ;9ae6  a3 00
    br lab_9aca             ;9ae8  fa e0

lab_9aea:
    set1 mem_fe76.1         ;9aea  1a 76
    call !sub_a1a6          ;9aec  9a a6 a1
    push bc                 ;9aef  b3
    movw ax,#0x08ec         ;9af0  10 ec 08
    call !sub_9f07          ;9af3  9a 07 9f
    pop bc                  ;9af6  b2
    movw hl,#mem_be2b+1     ;9af7  16 2c be
    bf mem_fe74.3,lab_9b01  ;9afa  31 33 74 03
    movw hl,#mem_bf25+1     ;9afe  16 26 bf

lab_9b01:
    bf mem_fe74.6,lab_9b0f  ;9b01  31 63 74 0a
    movw hl,#mem_c0f9+1     ;9b05  16 fa c0
    bf mem_fe74.3,lab_9b0f  ;9b08  31 33 74 03
    movw hl,#mem_c09c+1     ;9b0c  16 9d c0

lab_9b0f:
    callf !table_get_word   ;9b0f  4c 48        Load DE with word at position B in table [HL]
    clr1 mem_fe76.1         ;9b11  1b 76
    call !sub_a1a6          ;9b13  9a a6 a1
    movw ax,#0x08e0         ;9b16  10 e0 08
    call !sub_9f07          ;9b19  9a 07 9f
    mov a,!mem_fc96         ;9b1c  8e 96 fc
    mov b,a                 ;9b1f  73
    movw hl,#mem_c019+1       ;9b20  16 20 c0
    bf mem_fe74.6,lab_9b2a  ;9b23  31 63 74 03
    movw hl,#mem_c210+1     ;9b27  16 11 c2

lab_9b2a:
    callf !table_get_word   ;9b2a  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x08fa         ;9b2c  10 fa 08
    call !sub_9f07          ;9b2f  9a 07 9f
    br !lab_9d1f            ;9b32  9b 1f 9d

lab_9b35:
    bt mem_fe73.5,lab_9b3b  ;9b35  dc 73 03
    br !lab_9c8b            ;9b38  9b 8b 9c

lab_9b3b:
    clr1 mem_fe74.4         ;9b3b  4b 74
    mov b,#0x01             ;9b3d  a3 01
    call !sub_aae0          ;9b3f  9a e0 aa
    bt mem_fe2d.2,lab_9b53  ;9b42  ac 2d 0e
    cmp a,!mem_fc8c         ;9b45  48 8c fc
    mov a,!mem_fc8c         ;9b48  8e 8c fc
    bz lab_9b53             ;9b4b  ad 06
    bc lab_9b52             ;9b4d  8d 03
    inc a                   ;9b4f  41
    br lab_9b53             ;9b50  fa 01

lab_9b52:
    dec a                   ;9b52  51

lab_9b53:
    mov !mem_fc8c,a         ;9b53  9e 8c fc
    mov b,#0x02             ;9b56  a3 02
    call !sub_aae0          ;9b58  9a e0 aa
    bt mem_fe2d.2,lab_9b6c  ;9b5b  ac 2d 0e
    cmp a,!mem_fc8d         ;9b5e  48 8d fc
    mov a,!mem_fc8d         ;9b61  8e 8d fc
    bz lab_9b6c             ;9b64  ad 06
    bc lab_9b6b             ;9b66  8d 03
    inc a                   ;9b68  41
    br lab_9b6c             ;9b69  fa 01

lab_9b6b:
    dec a                   ;9b6b  51

lab_9b6c:
    mov !mem_fc8d,a         ;9b6c  9e 8d fc
    bt mem_fe74.6,lab_9bb4  ;9b6f  ec 74 42
    mov a,!mem_fc8c         ;9b72  8e 8c fc
    mov b,a                 ;9b75  73
    movw hl,#mem_c37d+1     ;9b76  16 7e c3
    bt mem_fe75.0,lab_9b7f  ;9b79  8c 75 03
    movw hl,#mem_c2d1+1     ;9b7c  16 d2 c2

lab_9b7f:
    bf mem_fe74.2,lab_9b86  ;9b7f  31 23 74 03
    movw hl,#mem_c52b+1     ;9b83  16 2c c5

lab_9b86:
    callf !table_get_word   ;9b86  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f80         ;9b88  10 80 0f
    call !sub_9e8e          ;9b8b  9a 8e 9e
    mov a,#0x56             ;9b8e  a1 56
    call !sub_9137          ;9b90  9a 37 91

lab_9b93:
    mov a,!mem_fc8c         ;9b93  8e 8c fc
    mov b,a                 ;9b96  73
    movw hl,#mem_c3a8+1     ;9b97  16 a9 c3
    bt mem_fe75.0,lab_9ba0  ;9b9a  8c 75 03
    movw hl,#mem_c2fc+1     ;9b9d  16 fd c2

lab_9ba0:
    bf mem_fe74.2,lab_9ba7  ;9ba0  31 23 74 03
    movw hl,#mem_c556+1     ;9ba4  16 57 c5

lab_9ba7:
    callf !table_get_word   ;9ba7  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f94         ;9ba9  10 94 0f
    call !sub_9e8e          ;9bac  9a 8e 9e
    mov a,#0x57             ;9baf  a1 57
    call !sub_9137          ;9bb1  9a 37 91

lab_9bb4:
    mov a,!mem_fc8c         ;9bb4  8e 8c fc
    mov b,a                 ;9bb7  73
    movw hl,#mem_c3d3+1     ;9bb8  16 d4 c3
    bt mem_fe75.0,lab_9bc1  ;9bbb  8c 75 03
    movw hl,#mem_c327+1     ;9bbe  16 28 c3

lab_9bc1:
    bf mem_fe74.2,lab_9bc8  ;9bc1  31 23 74 03
    movw hl,#mem_c581+1     ;9bc5  16 82 c5

lab_9bc8:
    bf mem_fe74.6,lab_9bdc  ;9bc8  31 63 74 10
    movw hl,#mem_c47f+1     ;9bcc  16 80 c4
    bt mem_fe75.0,lab_9bd5  ;9bcf  8c 75 03
    movw hl,#mem_c429+1     ;9bd2  16 2a c4

lab_9bd5:
    bf mem_fe74.2,lab_9bdc  ;9bd5  31 23 74 03
    movw hl,#mem_c4d5+1     ;9bd9  16 d6 c4

lab_9bdc:
    callf !table_get_word   ;9bdc  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f84         ;9bde  10 84 0f
    call !sub_9e8e          ;9be1  9a 8e 9e
    mov a,#0x58             ;9be4  a1 58
    call !sub_9137          ;9be6  9a 37 91

lab_9be9:
    mov a,!mem_fc8c         ;9be9  8e 8c fc
    mov b,a                 ;9bec  73
    movw hl,#mem_c3fe+1     ;9bed  16 ff c3
    bt mem_fe75.0,lab_9bf6  ;9bf0  8c 75 03
    movw hl,#mem_c352+1     ;9bf3  16 53 c3

lab_9bf6:
    bf mem_fe74.2,lab_9bfd  ;9bf6  31 23 74 03
    movw hl,#mem_c5ac+1     ;9bfa  16 ad c5

lab_9bfd:
    bf mem_fe74.6,lab_9c11  ;9bfd  31 63 74 10
    movw hl,#mem_c4aa+1     ;9c01  16 ab c4
    bt mem_fe75.0,lab_9c0a  ;9c04  8c 75 03
    movw hl,#mem_c454+1     ;9c07  16 55 c4

lab_9c0a:
    bf mem_fe74.2,lab_9c11  ;9c0a  31 23 74 03
    movw hl,#mem_c500+1     ;9c0e  16 01 c5

lab_9c11:
    callf !table_get_word   ;9c11  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f98         ;9c13  10 98 0f
    call !sub_9e8e          ;9c16  9a 8e 9e
    mov a,#0x59             ;9c19  a1 59
    call !sub_9137          ;9c1b  9a 37 91

lab_9c1e:
    mov a,!mem_fc8d         ;9c1e  8e 8d fc
    mov b,a                 ;9c21  73
    movw hl,#mem_c5d7+1     ;9c22  16 d8 c5
    bf mem_fe74.2,lab_9c2c  ;9c25  31 23 74 03
    movw hl,#mem_c62d+1     ;9c29  16 2e c6

lab_9c2c:
    bf mem_fe74.6,lab_9c3a  ;9c2c  31 63 74 0a
    movw hl,#mem_c683+1     ;9c30  16 84 c6
    bf mem_fe74.2,lab_9c3a  ;9c33  31 23 74 03
    movw hl,#mem_c6d9+1     ;9c37  16 da c6

lab_9c3a:
    callf !table_get_word   ;9c3a  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f88         ;9c3c  10 88 0f
    call !sub_9e8e          ;9c3f  9a 8e 9e
    mov a,#0x5a             ;9c42  a1 5a
    call !sub_9137          ;9c44  9a 37 91

lab_9c47:
    mov a,!mem_fc8d         ;9c47  8e 8d fc
    mov b,a                 ;9c4a  73
    movw hl,#mem_c602+1     ;9c4b  16 03 c6
    bf mem_fe74.2,lab_9c55  ;9c4e  31 23 74 03
    movw hl,#mem_c658+1     ;9c52  16 59 c6

lab_9c55:
    bf mem_fe74.6,lab_9c63  ;9c55  31 63 74 0a
    movw hl,#mem_c6ae+1     ;9c59  16 af c6
    bf mem_fe74.2,lab_9c63  ;9c5c  31 23 74 03
    movw hl,#mem_c704+1     ;9c60  16 05 c7

lab_9c63:
    callf !table_get_word   ;9c63  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f9c         ;9c65  10 9c 0f
    call !sub_9e8e          ;9c68  9a 8e 9e
    mov a,#0x62             ;9c6b  a1 62
    call !sub_9137          ;9c6d  9a 37 91

lab_9c70:
    mov b,#0x01             ;9c70  a3 01
    call !sub_aae0          ;9c72  9a e0 aa
    cmp a,!mem_fc8c         ;9c75  48 8c fc
    bnz lab_9c88            ;9c78  bd 0e
    mov b,#0x02             ;9c7a  a3 02
    call !sub_aae0          ;9c7c  9a e0 aa
    cmp a,!mem_fc8d         ;9c7f  48 8d fc
    bnz lab_9c88            ;9c82  bd 04
    clr1 mem_fe73.5         ;9c84  5b 73
    set1 mem_fe72.1         ;9c86  1a 72

lab_9c88:
    br !lab_9d1f            ;9c88  9b 1f 9d

lab_9c8b:
    bf mem_fe73.4,lab_9c9f  ;9c8b  31 43 73 10
    call !sub_9d61          ;9c8f  9a 61 9d
    call !sub_9dd3          ;9c92  9a d3 9d
    call !sub_9ec7          ;9c95  9a c7 9e
    clr1 mem_fe73.4         ;9c98  4b 73
    mov a,#0x00             ;9c9a  a1 00
    call !sub_9137          ;9c9c  9a 37 91

lab_9c9f:
    bf mem_fe73.6,lab_9d00  ;9c9f  31 63 73 5d

lab_9ca3:
    movw ax,#0x0800         ;9ca3  10 00 08
    mov !i2c_buf+3,a        ;9ca6  9e de fb
    mov !i2c_buf+5,a        ;9ca9  9e e0 fb
    mov !i2c_buf+7,a        ;9cac  9e e2 fb
    mov !i2c_buf+9,a        ;9caf  9e e4 fb
    xch a,x                 ;9cb2  30
    mov !i2c_buf+4,a        ;9cb3  9e df fb
    mov !i2c_buf+6,a        ;9cb6  9e e1 fb
    mov !i2c_buf+8,a        ;9cb9  9e e3 fb
    mov !i2c_buf+0x0a,a         ;9cbc  9e e5 fb
    call !sub_aaae          ;9cbf  9a ae aa
    mov b,a                 ;9cc2  73
    cmp a,#0x0a             ;9cc3  4d 0a
    bnc lab_9cdc            ;9cc5  9d 15
    movw hl,#mem_c98c+1     ;9cc7  16 8d c9
    callf !table_get_word   ;9cca  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9ccc  c4
    mov !i2c_buf+3,a        ;9ccd  9e de fb
    mov !i2c_buf+5,a        ;9cd0  9e e0 fb
    xch a,x                 ;9cd3  30
    mov !i2c_buf+4,a        ;9cd4  9e df fb
    mov !i2c_buf+6,a        ;9cd7  9e e1 fb
    br lab_9cf4             ;9cda  fa 18

lab_9cdc:
    mov a,#0x14             ;9cdc  a1 14
    sub a,b                 ;9cde  61 1b
    mov b,a                 ;9ce0  73
    movw hl,#mem_c98c+1     ;9ce1  16 8d c9
    callf !table_get_word   ;9ce4  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9ce6  c4
    mov !i2c_buf+7,a        ;9ce7  9e e2 fb
    mov !i2c_buf+9,a        ;9cea  9e e4 fb
    xch a,x                 ;9ced  30
    mov !i2c_buf+8,a        ;9cee  9e e3 fb
    mov !i2c_buf+0x0a,a         ;9cf1  9e e5 fb

lab_9cf4:
    mov b,#0x0b             ;9cf4  a3 0b
    movw ax,#0x08ef         ;9cf6  10 ef 08
    call !sub_9f12          ;9cf9  9a 12 9f
    clr1 mem_fe73.6         ;9cfc  6b 73
    br lab_9d1f             ;9cfe  fa 1f

lab_9d00:
    call !sub_a09b          ;9d00  9a 9b a0
    mov a,!mem_fb46         ;9d03  8e 46 fb
    cmp a,#0x00             ;9d06  4d 00
    bnz lab_9d1f            ;9d08  bd 15
    mov a,!mem_fb47         ;9d0a  8e 47 fb
    cmp a,#0x00             ;9d0d  4d 00
    bnz lab_9d1f            ;9d0f  bd 0e
    btclr mem_fe72.1,lab_9d17 ;9d11  31 11 72 02
    br lab_9d1f             ;9d15  fa 08

lab_9d17:
    mov a,#0x0a             ;9d17  a1 0a
    mov !mem_fb47,a         ;9d19  9e 47 fb
    br !lab_a246            ;9d1c  9b 46 a2

lab_9d1f:
    mov a,#0x00             ;9d1f  a1 00
    mov !mem_fc89,a         ;9d21  9e 89 fc
    ret                     ;9d24  af

sub_9d25:
    mov a,#0x00             ;9d25  a1 00
    push ax                 ;9d27  b1
    mov a,mem_fe58          ;9d28  f0 58
    mov b,a                 ;9d2a  73
    cmp a,#0x01             ;9d2b  4d 01
    bnz lab_9d36            ;9d2d  bd 07
    call !sub_0800_mode     ;9d2f  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;9d32  4d 01
    bz lab_9d3d_fm          ;9d34  ad 07

    ;mem_f253 != 0x01 (must be AM)

lab_9d36:
    movw hl,#mem_c2cc+1     ;9d36  16 cd c2
    callf !table_get_byte   ;9d39  4c 7d        Load A with byte at position B in table [HL]
    bnc lab_9d3f            ;9d3b  9d 02        Branch if lookup succeeded

lab_9d3d_fm:
    mov a,#0xf6             ;9d3d  a1 f6

lab_9d3f:
    pop bc                  ;9d3f  b2
    add a,b                 ;9d40  61 0b
    bf a.7,lab_9d4e         ;9d42  31 7f 09
    add a,#0x28             ;9d45  0d 28
    bf a.7,lab_9d50         ;9d47  31 7f 06
    mov a,#0x00             ;9d4a  a1 00
    br lab_9d56             ;9d4c  fa 08

lab_9d4e:
    add a,#0x28             ;9d4e  0d 28

lab_9d50:
    cmp a,#0x2f             ;9d50  4d 2f
    bc lab_9d56             ;9d52  8d 02
    mov a,#0x2e             ;9d54  a1 2e

lab_9d56:
    mov b,a                 ;9d56  73
    mov !mem_fc95,a         ;9d57  9e 95 fc
    movw hl,#mem_c26d+1     ;9d5a  16 6e c2
    callf !table_get_word   ;9d5d  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9d5f  c4
    ret                     ;9d60  af

sub_9d61:
    mov b,#0x03             ;9d61  a3 03
    call !sub_aae0          ;9d63  9a e0 aa
    mov b,a                 ;9d66  73
    push bc                 ;9d67  b3
    movw hl,#mem_c785+1     ;9d68  16 86 c7
    bf mem_fe74.2,lab_9d72  ;9d6b  31 23 74 03
    movw hl,#mem_c7db+1     ;9d6f  16 dc c7

lab_9d72:
    bf mem_fe74.6,lab_9d80  ;9d72  31 63 74 0a
    movw hl,#mem_c85c+1     ;9d76  16 5d c8
    bf mem_fe74.2,lab_9d80  ;9d79  31 23 74 03
    movw hl,#mem_c8dd+1     ;9d7d  16 de c8

lab_9d80:
    callf !table_get_word   ;9d80  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9d82  c4
    movw !mem_f022,ax       ;9d83  03 22 f0
    pop bc                  ;9d86  b2
    push bc                 ;9d87  b3
    movw hl,#mem_c7b0+1     ;9d88  16 b1 c7
    bf mem_fe74.2,lab_9d92  ;9d8b  31 23 74 03
    movw hl,#mem_c806+1     ;9d8f  16 07 c8

lab_9d92:
    bf mem_fe74.6,lab_9da0  ;9d92  31 63 74 0a
    movw hl,#mem_c887+1     ;9d96  16 88 c8
    bf mem_fe74.2,lab_9da0  ;9d99  31 23 74 03
    movw hl,#mem_c908+1     ;9d9d  16 09 c9

lab_9da0:
    callf !table_get_word   ;9da0  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9da2  c4
    movw !mem_f024,ax       ;9da3  03 24 f0
    pop bc                  ;9da6  b2
    push bc                 ;9da7  b3
    movw hl,#mem_c72f+1     ;9da8  16 30 c7
    bf mem_fe74.6,lab_9db2  ;9dab  31 63 74 03
    movw hl,#mem_c831+1     ;9daf  16 32 c8

lab_9db2:
    callf !table_get_word   ;9db2  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9db4  c4
    movw !mem_f02a,ax       ;9db5  03 2a f0
    pop bc                  ;9db8  b2
    bt mem_fe74.6,lab_9dc3  ;9db9  ec 74 07
    movw hl,#mem_c75a+1     ;9dbc  16 5b c7
    callf !table_get_word   ;9dbf  4c 48        Load DE with word at position B in table [HL]
    br lab_9dc8             ;9dc1  fa 05

lab_9dc3:
    movw hl,#mem_c8b2+1     ;9dc3  16 b3 c8
    callf !table_get_word   ;9dc6  4c 48        Load DE with word at position B in table [HL]

lab_9dc8:
    movw ax,de              ;9dc8  c4
    movw !mem_f026,ax       ;9dc9  03 26 f0
    movw ax,#0x0000         ;9dcc  10 00 00
    movw !mem_f028,ax       ;9dcf  03 28 f0
    ret                     ;9dd2  af

sub_9dd3:
    mov b,#0x03             ;9dd3  a3 03
    call !sub_aae0          ;9dd5  9a e0 aa
    mov b,a                 ;9dd8  73
    movw hl,#mem_c9d1+1     ;9dd9  16 d2 c9
    bf mem_fe74.6,lab_9de3  ;9ddc  31 63 74 03
    movw hl,#mem_c9fc+1     ;9de0  16 fd c9

lab_9de3:
    callf !table_get_word   ;9de3  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;9de5  c4
    movw mem_fed4,ax        ;9de6  99 d4
    call !sub_aac7          ;9de8  9a c7 aa
    mov b,a                 ;9deb  73
    cmp a,#0x0a             ;9dec  4d 0a
    bnc lab_9e11            ;9dee  9d 21
    bt mem_fe74.6,lab_9dfa  ;9df0  ec 74 07
    movw hl,#mem_c9a3+1     ;9df3  16 a4 c9
    callf !table_get_word   ;9df6  4c 48        Load DE with word at position B in table [HL]
    br lab_9dff             ;9df8  fa 05

lab_9dfa:
    movw hl,#mem_c9ba+1     ;9dfa  16 bb c9
    callf !table_get_word   ;9dfd  4c 48        Load DE with word at position B in table [HL]

lab_9dff:
    movw ax,de              ;9dff  c4
    call !sub_9e36          ;9e00  9a 36 9e
    movw !mem_f02e,ax       ;9e03  03 2e f0
    movw ax,#0x2000         ;9e06  10 00 20
    call !sub_9e36          ;9e09  9a 36 9e
    movw !mem_f02c,ax       ;9e0c  03 2c f0
    br lab_9e35             ;9e0f  fa 24

lab_9e11:
    mov a,#0x14             ;9e11  a1 14
    sub a,b                 ;9e13  61 1b
    mov b,a                 ;9e15  73
    bt mem_fe74.6,lab_9e20  ;9e16  ec 74 07
    movw hl,#mem_c9a3+1     ;9e19  16 a4 c9
    callf !table_get_word   ;9e1c  4c 48        Load DE with word at position B in table [HL]
    br lab_9e25             ;9e1e  fa 05

lab_9e20:
    movw hl,#mem_c9ba+1     ;9e20  16 bb c9
    callf !table_get_word   ;9e23  4c 48        Load DE with word at position B in table [HL]

lab_9e25:
    movw ax,de              ;9e25  c4
    call !sub_9e36          ;9e26  9a 36 9e
    movw !mem_f02c,ax       ;9e29  03 2c f0
    movw ax,#0x2000         ;9e2c  10 00 20
    call !sub_9e36          ;9e2f  9a 36 9e
    movw !mem_f02e,ax       ;9e32  03 2e f0

lab_9e35:
    ret                     ;9e35  af

sub_9e36:
    movw mem_fed6,ax        ;9e36  99 d6
    call !sub_0bad          ;9e38  9a ad 0b
    add rb0_d,#0x80         ;9e3b  88 fd 80
    bnc lab_9e41            ;9e3e  9d 01
    incw bc                 ;9e40  82

lab_9e41:
    movw ax,bc              ;9e41  c2
    xch a,x                 ;9e42  30
    ret                     ;9e43  af

lab_9e44:
    call !sub_9e5d          ;9e44  9a 5d 9e
    bnc lab_9e52            ;9e47  9d 09
    bf mem_fe74.4,lab_9e5a  ;9e49  31 43 74 0d
    clr1 mem_fe74.3         ;9e4d  3b 74
    br !lab_9a3f            ;9e4f  9b 3f 9a

lab_9e52:
    bt mem_fe74.4,lab_9e5a  ;9e52  cc 74 05
    set1 mem_fe74.3         ;9e55  3a 74
    br !lab_9a3f            ;9e57  9b 3f 9a

lab_9e5a:
    br !lab_9d1f            ;9e5a  9b 1f 9d

sub_9e5d:
    mov a,!mem_fc8d         ;9e5d  8e 8d fc
    cmp a,#0x0c             ;9e60  4d 0c
    bf mem_fe74.6,lab_9e68  ;9e62  31 63 74 02
    cmp a,#0x0c             ;9e66  4d 0c

lab_9e68:
    bnc lab_9e8d            ;9e68  9d 23
    mov a,!mem_fc8c         ;9e6a  8e 8c fc
    cmp a,#0x05             ;9e6d  4d 05
    bf mem_fe74.6,lab_9e75  ;9e6f  31 63 74 02
    cmp a,#0x0c             ;9e73  4d 0c

lab_9e75:
    bnc lab_9e8d            ;9e75  9d 16
    mov a,!mem_f200         ;9e77  8e 00 f2
    mov b,a                 ;9e7a  73
    movw hl,#mem_cf5d+1     ;9e7b  16 5e cf
    callf !table_get_byte   ;9e7e  4c 7d        Load A with byte at position B in table [HL]
    bt mem_fe74.6,lab_9e89  ;9e80  ec 74 06
    and a,#0xf0             ;9e83  5d f0
    cmp a,#0x01             ;9e85  4d 01
    br lab_9e8d             ;9e87  fa 04

lab_9e89:
    and a,#0x0f             ;9e89  5d 0f
    cmp a,#0x01             ;9e8b  4d 01

lab_9e8d:
    ret                     ;9e8d  af

sub_9e8e:
    mov !i2c_buf+1,a        ;9e8e  9e dc fb
    xch a,x                 ;9e91  30
    mov !i2c_buf+2,a        ;9e92  9e dd fb
    mov a,#0x1C<<1          ;9e95  a1 38        0x1C = SAA7705H I2C address
    mov !i2c_buf,a          ;9e97  9e db fb
    movw ax,de              ;9e9a  c4
    mov !i2c_buf+3,a        ;9e9b  9e de fb
    xch a,x                 ;9e9e  30
    mov !i2c_buf+4,a        ;9e9f  9e df fb
    mov a,#0x85             ;9ea2  a1 85
    movw hl,#i2c_buf        ;9ea4  16 db fb
    call !sub_5f51          ;9ea7  9a 51 5f     TODO perform I2C write?
    mov a,#0x02             ;9eaa  a1 02
    movw hl,#i2c_buf+3      ;9eac  16 de fb
    call !sub_5f51          ;9eaf  9a 51 5f     TODO perform I2C write?
    mov a,#0x02             ;9eb2  a1 02
    movw hl,#i2c_buf+3      ;9eb4  16 de fb
    call !sub_5f51          ;9eb7  9a 51 5f     TODO perform I2C write?
    mov a,#0x42             ;9eba  a1 42
    movw hl,#i2c_buf+3      ;9ebc  16 de fb
    call !sub_5f51          ;9ebf  9a 51 5f     TODO perform I2C write?
    mov a,#0x0b             ;9ec2  a1 0b
    br !sub_9f9f            ;9ec4  9b 9f 9f

sub_9ec7:
    movw ax,#0x08b7         ;9ec7  10 b7 08
    bf mem_fe73.7,lab_9ed1  ;9eca  31 73 73 03
    movw ax,#0x08c5         ;9ece  10 c5 08

lab_9ed1:
    mov !i2c_buf+1,a        ;9ed1  9e dc fb
    xch a,x                 ;9ed4  30
    mov !i2c_buf+2,a        ;9ed5  9e dd fb
    mov a,#0x1C<<1          ;9ed8  a1 38        0x1C = SAA7705H I2C address
    mov !i2c_buf,a          ;9eda  9e db fb
    mov a,#0x83             ;9edd  a1 83
    movw hl,#i2c_buf        ;9edf  16 db fb
    call !sub_5f51          ;9ee2  9a 51 5f     TODO perform I2C write?
    mov a,#0x4e             ;9ee5  a1 4e
    movw hl,#mem_f022       ;9ee7  16 22 f0
    call !sub_5f51          ;9eea  9a 51 5f     TODO perform I2C write?
    movw hl,#mem_ba94       ;9eed  16 94 ba
    bf mem_fe73.7,lab_9ef7  ;9ef0  31 73 73 03
    movw hl,#mem_ba9a       ;9ef4  16 9a ba

lab_9ef7:
    call !sub_9f2a          ;9ef7  9a 2a 9f
    mov a,#0x13             ;9efa  a1 13
    call !sub_9f9f          ;9efc  9a 9f 9f
    set1 cy                 ;9eff  20
    xor1 cy,mem_fe73.7      ;9f00  71 77 73
    mov1 mem_fe73.7,cy      ;9f03  71 71 73
    ret                     ;9f06  af

sub_9f07:
    mov b,#0x05             ;9f07  a3 05
    xchw ax,de              ;9f09  e4
    mov !i2c_buf+3,a        ;9f0a  9e de fb
    mov a,x                 ;9f0d  60
    mov !i2c_buf+4,a        ;9f0e  9e df fb
    xchw ax,de              ;9f11  e4

sub_9f12:
    mov !i2c_buf+1,a        ;9f12  9e dc fb
    mov a,x                 ;9f15  60
    mov !i2c_buf+2,a        ;9f16  9e dd fb
    mov a,#0x1C<<1          ;9f19  a1 38        0x1C = SAA7705H I2C address
    mov !i2c_buf,a          ;9f1b  9e db fb
    mov a,b                 ;9f1e  63
    call !sub_9f9f          ;9f1f  9a 9f 9f
    or a,#0xc0              ;9f22  6d c0
    movw hl,#i2c_buf        ;9f24  16 db fb
    br !sub_5f51            ;9f27  9b 51 5f     TODO perform I2C write?

sub_9f2a:
    call !sub_9f8a          ;9f2a  9a 8a 9f
    mov x,a                 ;9f2d  70
    rol a,1                 ;9f2e  26
    add a,x                 ;9f2f  61 08
    br lab_9f37             ;9f31  fa 04

sub_9f33:
    call !sub_9f8a          ;9f33  9a 8a 9f
    rol a,1                 ;9f36  26

lab_9f37:
    add a,#0x03             ;9f37  0d 03
    call !sub_9f9f          ;9f39  9a 9f 9f
    set1 mem_fe74.0         ;9f3c  0a 74

lab_9f3e:
    cmp a,#0x1e             ;9f3e  4d 1e
    bc lab_9f59             ;9f40  8d 17
    sub a,#0x1e             ;9f42  1d 1e
    push ax                 ;9f44  b1
    push hl                 ;9f45  b7
    mov a,#0x1e             ;9f46  a1 1e
    call !sub_9f55          ;9f48  9a 55 9f
    pop hl                  ;9f4b  b6
    add rb0_l,#0x1e         ;9f4c  88 fe 1e
    bnc lab_9f52            ;9f4f  9d 01
    inc h                   ;9f51  47

lab_9f52:
    pop ax                  ;9f52  b0
    br lab_9f3e             ;9f53  fa e9

sub_9f55:
    clr1 mem_fe74.1         ;9f55  1b 74
    br lab_9f5b             ;9f57  fa 02

lab_9f59:
    set1 mem_fe74.1         ;9f59  1a 74

lab_9f5b:
    movw de,#i2c_buf+3      ;9f5b  14 de fb     DE = destination address
    push ax                 ;9f5e  b1
    sub a,#0x03             ;9f5f  1d 03
    call !copy              ;9f61  9a 9e 0c     Copy A bytes from [HL] to [DE]
    pop ax                  ;9f64  b0
    movw hl,#i2c_buf        ;9f65  16 db fb
    bf mem_fe74.0,lab_9f70  ;9f68  31 03 74 04
    or a,#0x80              ;9f6c  6d 80
    clr1 mem_fe74.0         ;9f6e  0b 74

lab_9f70:
    bf mem_fe74.1,lab_9f76  ;9f70  31 13 74 02
    or a,#0x40              ;9f74  6d 40

lab_9f76:
    br !sub_5f51            ;9f76  9b 51 5f     TODO perform I2C write?

lab_9f79:
    push hl                 ;9f79  b7
    push bc                 ;9f7a  b3
    mov b,#0x03             ;9f7b  a3 03
    call !sub_9f12          ;9f7d  9a 12 9f
    pop ax                  ;9f80  b0
    call !sub_9f9f          ;9f81  9a 9f 9f
    or a,#0x40              ;9f84  6d 40
    pop hl                  ;9f86  b6
    br !sub_5f51            ;9f87  9b 51 5f     TODO perform I2C write?

sub_9f8a:
    mov a,#0x1C<<1          ;9f8a  a1 38        0x1C = SAA7705H I2C address
    mov !i2c_buf,a          ;9f8c  9e db fb
    decw hl                 ;9f8f  96
    decw hl                 ;9f90  96
    decw hl                 ;9f91  96
    mov a,[hl]              ;9f92  87
    mov !i2c_buf+2,a        ;9f93  9e dd fb
    incw hl                 ;9f96  86
    mov a,[hl]              ;9f97  87
    mov !i2c_buf+1,a        ;9f98  9e dc fb
    incw hl                 ;9f9b  86
    mov a,[hl]              ;9f9c  87
    incw hl                 ;9f9d  86
    ret                     ;9f9e  af

sub_9f9f:
    xch a,!mem_fc8b         ;9f9f  ce 8b fc
    add a,!mem_fc8b         ;9fa2  08 8b fc
    bc lab_9fab             ;9fa5  8d 04
    cmp a,#0x21             ;9fa7  4d 21
    bc lab_9fad             ;9fa9  8d 02

lab_9fab:
    set1 mem_fe72.5         ;9fab  5a 72

lab_9fad:
    xch a,!mem_fc8b         ;9fad  ce 8b fc
    ret                     ;9fb0  af

sub_9fb1:
    movw hl,#mem_bc2d       ;9fb1  16 2d bc
    bf mem_fe74.2,lab_9fbb  ;9fb4  31 23 74 03
    movw hl,#mem_bc3c       ;9fb8  16 3c bc

lab_9fbb:
    call !sub_9f2a          ;9fbb  9a 2a 9f
    mov a,!mem_fe57         ;9fbe  8e 57 fe
    bf mem_fe5e.0,lab_9fc8  ;9fc1  31 03 5e 03
    mov a,!mem_f268         ;9fc5  8e 68 f2

lab_9fc8:
    bt mem_fe74.6,lab_9fed  ;9fc8  ec 74 22
    movw hl,#mem_bb92       ;9fcb  16 92 bb
    cmp a,#0x18             ;9fce  4d 18
    bc lab_a00c             ;9fd0  8d 3a
    movw hl,#mem_bb9d       ;9fd2  16 9d bb
    cmp a,#0x30             ;9fd5  4d 30
    bc lab_a00c             ;9fd7  8d 33
    movw hl,#mem_bba4       ;9fd9  16 a4 bb
    cmp a,#0x49             ;9fdc  4d 49
    bc lab_a00c             ;9fde  8d 2c
    movw hl,#mem_bbab       ;9fe0  16 ab bb
    cmp a,#0x61             ;9fe3  4d 61
    bc lab_a00c             ;9fe5  8d 25
    movw hl,#mem_bbb2       ;9fe7  16 b2 bb
    br !lab_a00c            ;9fea  9b 0c a0

lab_9fed:
    movw hl,#mem_bbc4       ;9fed  16 c4 bb
    cmp a,#0x12             ;9ff0  4d 12
    bc lab_a00c             ;9ff2  8d 18
    movw hl,#mem_bbcf       ;9ff4  16 cf bb
    cmp a,#0x24             ;9ff7  4d 24
    bc lab_a00c             ;9ff9  8d 11
    movw hl,#mem_bbd6       ;9ffb  16 d6 bb
    cmp a,#0x36             ;9ffe  4d 36
    bc lab_a00c             ;a000  8d 0a
    movw hl,#mem_bbdd       ;a002  16 dd bb
    cmp a,#0x48             ;a005  4d 48
    bc lab_a00c             ;a007  8d 03
    movw hl,#mem_bbe4       ;a009  16 e4 bb

lab_a00c:
    call !sub_9f33          ;a00c  9a 33 9f
    movw hl,#mem_bc72       ;a00f  16 72 bc
    call !sub_9f33          ;a012  9a 33 9f
    movw hl,#mem_bc54       ;a015  16 54 bc
    bf mem_fe74.2,lab_a01f  ;a018  31 23 74 03
    movw hl,#mem_bc63       ;a01c  16 63 bc

lab_a01f:
    br !sub_9f33            ;a01f  9b 33 9f

sub_a022:
    movw hl,#mem_bc28       ;a022  16 28 bc
    call !sub_9f33          ;a025  9a 33 9f
    movw hl,#mem_bbb9       ;a028  16 b9 bb
    call !sub_9f33          ;a02b  9a 33 9f
    movw hl,#mem_bc4b       ;a02e  16 4b bc
    br !sub_9f33            ;a031  9b 33 9f

sub_a034:
    movw ax,#0x00de         ;a034  10 de 00
    call !sub_a04d          ;a037  9a 4d a0
    cmp mem_fed4,#0x00      ;a03a  c8 d4 00
    bz lab_a045             ;a03d  ad 06
    mov mem_fed5,#0xff      ;a03f  11 d5 ff
    mov mem_fed6,#0xff      ;a042  11 d6 ff

lab_a045:
    mov a,mem_fed6          ;a045  f0 d6
    mov mem_fed4,a          ;a047  f2 d4
    ret                     ;a049  af

sub_a04a:
    movw ax,#0x00db         ;a04a  10 db 00

sub_a04d:
    mov !i2c_buf+1,a        ;a04d  9e dc fb
    mov a,x                 ;a050  60
    mov !i2c_buf+2,a        ;a051  9e dd fb
    mov a,#0x1C<<1          ;a054  a1 38        0x1C = SAA7705H I2C address
    mov !i2c_buf,a          ;a056  9e db fb
    mov a,#0x83             ;a059  a1 83
    movw hl,#i2c_buf        ;a05b  16 db fb
    call !sub_5f51          ;a05e  9a 51 5f     TODO perform I2C write?
    mov x,#0x39             ;a061  a0 39
    movw hl,#mem_fed4       ;a063  16 d4 fe
    mov a,#0xc3             ;a066  a1 c3
    br !sub_5ee8            ;a068  9b e8 5e     TODO perform I2C read?

sub_a06b:
    mov a,#0x32             ;a06b  a1 32
    mov !mem_fb1f,a         ;a06d  9e 1f fb
    mov a,#0x1e             ;a070  a1 1e
    mov !mem_fb46,a         ;a072  9e 46 fb
    mov a,#0x0a             ;a075  a1 0a
    mov !mem_fb1a,a         ;a077  9e 1a fb
    mov a,!mem_f1e8         ;a07a  8e e8 f1
    cmp a,#0xa5             ;a07d  4d a5
    bnz lab_a083            ;a07f  bd 02
    set1 mem_fe75.3         ;a081  3a 75

lab_a083:
    bf mem_fe75.3,lab_a08f  ;a083  31 33 75 08
    mov a,#0x00             ;a087  a1 00
    mov !mem_fc92,a         ;a089  9e 92 fc
    mov !mem_fc91,a         ;a08c  9e 91 fc

lab_a08f:
    mov a,#0x00             ;a08f  a1 00
    mov !mem_fc93,a         ;a091  9e 93 fc
    set1 mem_fe75.2         ;a094  2a 75
    set1 mem_fe75.4         ;a096  4a 75
    set1 mem_fe73.3         ;a098  3a 73
    ret                     ;a09a  af

sub_a09b:
    mov a,!mem_fb46         ;a09b  8e 46 fb
    cmp a,#0x00             ;a09e  4d 00
    bnz lab_a0a5            ;a0a0  bd 03
    br !lab_a142            ;a0a2  9b 42 a1

lab_a0a5:
    mov a,!mem_fb1a         ;a0a5  8e 1a fb
    cmp a,#0x00             ;a0a8  4d 00
    bz lab_a0af             ;a0aa  ad 03
    br !lab_a141            ;a0ac  9b 41 a1

lab_a0af:
    mov a,#0x0a             ;a0af  a1 0a
    mov !mem_fb1a,a         ;a0b1  9e 1a fb
    call !sub_a034          ;a0b4  9a 34 a0
    movw ax,mem_fed4        ;a0b7  89 d4
    cmp a,#0x02             ;a0b9  4d 02
    bnc lab_a0c0            ;a0bb  9d 03
    br !lab_a141            ;a0bd  9b 41 a1

lab_a0c0:
    movw hl,#mem_ca27+1     ;a0c0  16 28 ca
    call !sub_0adf          ;a0c3  9a df 0a
    mov a,#0x24             ;a0c6  a1 24
    sub a,b                 ;a0c8  61 1b
    mov !mem_fc8f,a         ;a0ca  9e 8f fc
    mov b,a                 ;a0cd  73
    call !sub_a156          ;a0ce  9a 56 a1
    bf mem_fe75.3,lab_a0d7  ;a0d1  31 33 75 02
    br lab_a141             ;a0d5  fa 6a

lab_a0d7:
    sub a,!mem_fc90         ;a0d7  18 90 fc
    add a,!mem_fc92         ;a0da  08 92 fc
    mov x,a                 ;a0dd  70
    sub a,!mem_fc93         ;a0de  18 93 fc
    bt a.7,lab_a0f0         ;a0e1  31 7e 0c
    cmp a,#0x06             ;a0e4  4d 06
    mov a,x                 ;a0e6  60
    bc lab_a0ff             ;a0e7  8d 16
    mov a,!mem_fc93         ;a0e9  8e 93 fc
    add a,#0x06             ;a0ec  0d 06
    br lab_a0ff             ;a0ee  fa 0f

lab_a0f0:
    mov b,#0x00             ;a0f0  a3 00
    xch a,b                 ;a0f2  33
    sub a,b                 ;a0f3  61 1b
    cmp a,#0x06             ;a0f5  4d 06
    mov a,x                 ;a0f7  60
    bc lab_a0ff             ;a0f8  8d 05
    mov a,!mem_fc93         ;a0fa  8e 93 fc
    sub a,#0x06             ;a0fd  1d 06

lab_a0ff:
    bf a.7,lab_a114         ;a0ff  31 7f 12
    mov x,a                 ;a102  70
    mov a,#0x00             ;a103  a1 00
    sub a,x                 ;a105  61 18
    cmp a,#0x25             ;a107  4d 25
    mov a,x                 ;a109  60
    bc lab_a11a             ;a10a  8d 0e
    mov a,#0x00             ;a10c  a1 00
    mov x,#0x24             ;a10e  a0 24
    sub a,x                 ;a110  61 18
    br lab_a11a             ;a112  fa 06

lab_a114:
    cmp a,#0x25             ;a114  4d 25
    bc lab_a11a             ;a116  8d 02
    mov a,#0x24             ;a118  a1 24

lab_a11a:
    cmp a,!mem_fc91         ;a11a  48 91 fc
    bz lab_a141             ;a11d  ad 22
    mov x,a                 ;a11f  70
    mov a,!mem_fe57         ;a120  8e 57 fe
    and a,#0xfe             ;a123  5d fe
    ror a,1                 ;a125  24
    mov mem_fed4,a          ;a126  f2 d4
    add a,x                 ;a128  61 08
    bt a.7,lab_a131         ;a12a  31 7e 04
    cmp a,#0x00             ;a12d  4d 00
    bnz lab_a139            ;a12f  bd 08

lab_a131:
    dec mem_fed4            ;a131  91 d4
    mov a,#0x00             ;a133  a1 00
    sub a,mem_fed4          ;a135  1e d4
    br lab_a13a             ;a137  fa 01

lab_a139:
    mov a,x                 ;a139  60

lab_a13a:
    mov !mem_fc91,a         ;a13a  9e 91 fc
    set1 mem_fe73.3         ;a13d  3a 73
    set1 mem_fe76.2         ;a13f  2a 76

lab_a141:
    ret                     ;a141  af

lab_a142:
    btclr mem_fe75.4,lab_a147 ;a142  31 41 75 01
    ret                     ;a146  af

lab_a147:
    mov a,!mem_fc8f         ;a147  8e 8f fc
    mov !mem_fc90,a         ;a14a  9e 90 fc
    mov a,!mem_fc91         ;a14d  8e 91 fc
    mov !mem_fc92,a         ;a150  9e 92 fc
    clr1 mem_fe75.3         ;a153  3b 75
    ret                     ;a155  af

sub_a156:
    btclr mem_fe75.2,lab_a16f ;a156  31 21 75 15
    mov a,!mem_fc94         ;a15a  8e 94 fc
    add a,b                 ;a15d  61 0b
    sub a,!mem_fc9a         ;a15f  18 9a fc
    xch a,!mem_fc94         ;a162  ce 94 fc
    add a,b                 ;a165  61 0b
    and a,#0xfc             ;a167  5d fc
    ror a,1                 ;a169  24
    ror a,1                 ;a16a  24
    mov !mem_fc9a,a         ;a16b  9e 9a fc
    ret                     ;a16e  af

lab_a16f:
    mov a,b                 ;a16f  63
    add a,b                 ;a170  61 0b
    add a,b                 ;a172  61 0b
    mov !mem_fc94,a         ;a174  9e 94 fc
    mov a,b                 ;a177  63
    mov !mem_fc9a,a         ;a178  9e 9a fc
    ret                     ;a17b  af

lab_a17c:
    bt a.7,lab_a186         ;a17c  31 7e 07
    cmp a,#0x02             ;a17f  4d 02
    bc lab_a185             ;a181  8d 02
    mov a,#0x01             ;a183  a1 01

lab_a185:
    ret                     ;a185  af

lab_a186:
    mov a,#0xff             ;a186  a1 ff
    ret                     ;a188  af

lab_a189:
    mov b,a                 ;a189  73
    add a,!mem_fc92         ;a18a  08 92 fc
    sub a,!mem_fc93         ;a18d  18 93 fc
    bt a.7,lab_a19d         ;a190  31 7e 0a
    sub a,#0x07             ;a193  1d 07
    bc lab_a19b             ;a195  8d 04
    xch a,b                 ;a197  33
    sub a,b                 ;a198  61 1b
    ret                     ;a19a  af

lab_a19b:
    mov a,b                 ;a19b  63
    ret                     ;a19c  af

lab_a19d:
    add a,#0x06             ;a19d  0d 06
    bf a.7,lab_a19b         ;a19f  31 7f f9
    xch a,b                 ;a1a2  33
    sub a,b                 ;a1a3  61 1b
    ret                     ;a1a5  af

sub_a1a6:
    push de                 ;a1a6  b5
    bt mem_fe75.5,lab_a1ba  ;a1a7  dc 75 10
    bt mem_fe75.6,lab_a1b4  ;a1aa  ec 75 07
    clr1 mem_fe76.0         ;a1ad  0b 76
    clr1 mem_fe75.7         ;a1af  7b 75
    br !lab_a23d            ;a1b1  9b 3d a2

lab_a1b4:
    inc b                   ;a1b4  43
    callf !table_get_word   ;a1b5  4c 48        Load DE with word at position B in table [HL]
    dec b                   ;a1b7  53
    br lab_a1be             ;a1b8  fa 04

lab_a1ba:
    dec b                   ;a1ba  53
    callf !table_get_word   ;a1bb  4c 48        Load DE with word at position B in table [HL]
    inc b                   ;a1bd  43

lab_a1be:
    bt mem_fe76.1,lab_a1c6  ;a1be  9c 76 05
    bt mem_fe76.0,lab_a1f9  ;a1c1  8c 76 35
    br lab_a1c9             ;a1c4  fa 03

lab_a1c6:
    bt mem_fe75.7,lab_a1f9  ;a1c6  fc 75 30

lab_a1c9:
    pop ax                  ;a1c9  b0
    push ax                 ;a1ca  b1
    push de                 ;a1cb  b5
    xch a,x                 ;a1cc  30
    sub a,e                 ;a1cd  61 1c
    xch a,x                 ;a1cf  30
    subc a,d                ;a1d0  61 3d
    bnc lab_a1db            ;a1d2  9d 07
    xor a,#0xff             ;a1d4  7d ff
    xch a,x                 ;a1d6  30
    xor a,#0xff             ;a1d7  7d ff
    xch a,x                 ;a1d9  30
    incw ax                 ;a1da  80

lab_a1db:
    bt mem_fe76.1,lab_a1ea  ;a1db  9c 76 0c
    clr1 mem_fe76.0         ;a1de  0b 76
    cmpw ax,#0x0008         ;a1e0  ea 08 00
    bc lab_a23c             ;a1e3  8d 57
    set1 mem_fe76.0         ;a1e5  0a 76
    br !lab_a1f3            ;a1e7  9b f3 a1

lab_a1ea:
    clr1 mem_fe75.7         ;a1ea  7b 75
    cmpw ax,#0x0030         ;a1ec  ea 30 00
    bc lab_a23c             ;a1ef  8d 4b
    set1 mem_fe75.7         ;a1f1  7a 75

lab_a1f3:
    pop de                  ;a1f3  b4
    mov a,#0x00             ;a1f4  a1 00
    mov !mem_fc98,a         ;a1f6  9e 98 fc

lab_a1f9:
    mov a,!mem_fc98         ;a1f9  8e 98 fc
    inc a                   ;a1fc  41
    mov mem_fed6,a          ;a1fd  f2 d6
    mov !mem_fc98,a         ;a1ff  9e 98 fc
    movw ax,de              ;a202  c4
    bt mem_fe75.5,lab_a21d  ;a203  dc 75 17

lab_a206:
    bt mem_fe76.1,lab_a20e  ;a206  9c 76 05
    addw ax,#0x0008         ;a209  ca 08 00
    br lab_a211             ;a20c  fa 03

lab_a20e:
    addw ax,#0x0030         ;a20e  ca 30 00

lab_a211:
    dbnz mem_fed6,lab_a206  ;a211  04 d6 f2
    pop de                  ;a214  b4
    push ax                 ;a215  b1
    call !sub_a23f          ;a216  9a 3f a2
    bnc lab_a232            ;a219  9d 17
    br lab_a23d             ;a21b  fa 20

lab_a21d:
    bt mem_fe76.1,lab_a225  ;a21d  9c 76 05
    subw ax,#0x0008         ;a220  da 08 00
    br lab_a228             ;a223  fa 03

lab_a225:
    subw ax,#0x0030         ;a225  da 30 00

lab_a228:
    dbnz mem_fed6,lab_a21d  ;a228  04 d6 f2
    pop de                  ;a22b  b4
    push ax                 ;a22c  b1
    call !sub_a23f          ;a22d  9a 3f a2
    bnc lab_a23d            ;a230  9d 0b

lab_a232:
    pop ax                  ;a232  b0
    bt mem_fe76.1,lab_a239  ;a233  9c 76 03
    clr1 mem_fe76.0         ;a236  0b 76
    ret                     ;a238  af

lab_a239:
    clr1 mem_fe75.7         ;a239  7b 75
    ret                     ;a23b  af

lab_a23c:
    pop ax                  ;a23c  b0

lab_a23d:
    pop de                  ;a23d  b4
    ret                     ;a23e  af

sub_a23f:
    xch a,x                 ;a23f  30
    sub a,e                 ;a240  61 1c
    xch a,x                 ;a242  30
    subc a,d                ;a243  61 3d
    ret                     ;a245  af

lab_a246:
    bt mem_fe74.6,lab_a24c  ;a246  ec 74 03
    br !lab_a347            ;a249  9b 47 a3

lab_a24c:
    mov a,!mem_fe56         ;a24c  8e 56 fe
    mov b,a                 ;a24f  73
    mov mem_fe52,#0x00      ;a250  11 52 00
    cmp a,#0x00             ;a253  4d 00
    bz lab_a25c             ;a255  ad 05

lab_a257:
    add mem_fe52,#0x06      ;a257  88 52 06
    dbnz b,lab_a257         ;a25a  8b fb

lab_a25c:
    mov a,mem_fe52          ;a25c  f0 52
    mov b,a                 ;a25e  73
    movw hl,#mem_cee4+1     ;a25f  16 e5 ce
    callf !table_get_word   ;a262  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;a264  c4
    movw hl,ax              ;a265  d6
    inc mem_fe52            ;a266  81 52
    bt mem_fe74.2,lab_a26f  ;a268  ac 74 04
    inc mem_fe52            ;a26b  81 52
    br lab_a27b             ;a26d  fa 0c

lab_a26f:
    mov a,mem_fe52          ;a26f  f0 52
    mov b,a                 ;a271  73
    movw hl,#mem_cee4+1     ;a272  16 e5 ce
    callf !table_get_word   ;a275  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;a277  c4
    movw hl,ax              ;a278  d6
    inc mem_fe52            ;a279  81 52

lab_a27b:
    call !sub_9f33          ;a27b  9a 33 9f
    mov a,#0x63             ;a27e  a1 63
    call !sub_9137          ;a280  9a 37 91

lab_a283:
    mov a,!mem_fc8c         ;a283  8e 8c fc
    mov b,a                 ;a286  73
    movw hl,#mem_c47f+1     ;a287  16 80 c4
    bt mem_fe75.0,lab_a290  ;a28a  8c 75 03
    movw hl,#mem_c429+1     ;a28d  16 2a c4

lab_a290:
    bf mem_fe74.2,lab_a297  ;a290  31 23 74 03
    movw hl,#mem_c4d5+1     ;a294  16 d6 c4

lab_a297:
    callf !table_get_word   ;a297  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f84         ;a299  10 84 0f
    call !sub_9e8e          ;a29c  9a 8e 9e
    mov a,#0x64             ;a29f  a1 64
    call !sub_9137          ;a2a1  9a 37 91

lab_a2a4:
    mov a,!mem_fc8d         ;a2a4  8e 8d fc
    mov b,a                 ;a2a7  73
    movw hl,#mem_c683+1     ;a2a8  16 84 c6
    bf mem_fe74.2,lab_a2b2  ;a2ab  31 23 74 03
    movw hl,#mem_c6d9+1     ;a2af  16 da c6

lab_a2b2:
    callf !table_get_word   ;a2b2  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f88         ;a2b4  10 88 0f
    call !sub_9e8e          ;a2b7  9a 8e 9e
    mov a,#0x65             ;a2ba  a1 65
    call !sub_9137          ;a2bc  9a 37 91

lab_a2bf:
    mov a,mem_fe52          ;a2bf  f0 52
    mov b,a                 ;a2c1  73
    movw hl,#mem_cee4+1     ;a2c2  16 e5 ce
    callf !table_get_word   ;a2c5  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;a2c7  c4
    movw hl,ax              ;a2c8  d6
    inc mem_fe52            ;a2c9  81 52
    bt mem_fe74.2,lab_a2d2  ;a2cb  ac 74 04
    inc mem_fe52            ;a2ce  81 52
    br lab_a2de             ;a2d0  fa 0c

lab_a2d2:
    mov a,mem_fe52          ;a2d2  f0 52
    mov b,a                 ;a2d4  73
    movw hl,#mem_cee4+1     ;a2d5  16 e5 ce
    callf !table_get_word   ;a2d8  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;a2da  c4
    movw hl,ax              ;a2db  d6
    inc mem_fe52            ;a2dc  81 52

lab_a2de:
    call !sub_9f33          ;a2de  9a 33 9f
    mov a,#0x66             ;a2e1  a1 66
    call !sub_9137          ;a2e3  9a 37 91

lab_a2e6:
    mov a,!mem_fc8c         ;a2e6  8e 8c fc
    mov b,a                 ;a2e9  73
    movw hl,#mem_c4aa+1     ;a2ea  16 ab c4
    bt mem_fe75.0,lab_a2f3  ;a2ed  8c 75 03
    movw hl,#mem_c454+1     ;a2f0  16 55 c4

lab_a2f3:
    bf mem_fe74.2,lab_a2fa  ;a2f3  31 23 74 03
    movw hl,#mem_c500+1     ;a2f7  16 01 c5

lab_a2fa:
    callf !table_get_word   ;a2fa  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f98         ;a2fc  10 98 0f
    call !sub_9e8e          ;a2ff  9a 8e 9e
    mov a,#0x67             ;a302  a1 67
    call !sub_9137          ;a304  9a 37 91

lab_a307:
    mov a,!mem_fc8d         ;a307  8e 8d fc
    mov b,a                 ;a30a  73
    movw hl,#mem_c6ae+1     ;a30b  16 af c6
    bf mem_fe74.2,lab_a315  ;a30e  31 23 74 03
    movw hl,#mem_c704+1     ;a312  16 05 c7

lab_a315:
    callf !table_get_word   ;a315  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f9c         ;a317  10 9c 0f
    call !sub_9e8e          ;a31a  9a 8e 9e
    mov a,#0x68             ;a31d  a1 68
    call !sub_9137          ;a31f  9a 37 91

lab_a322:
    mov a,mem_fe52          ;a322  f0 52
    mov b,a                 ;a324  73
    movw hl,#mem_cee4+1     ;a325  16 e5 ce
    callf !table_get_word   ;a328  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;a32a  c4
    movw hl,ax              ;a32b  d6
    inc mem_fe52            ;a32c  81 52
    bt mem_fe74.2,lab_a335  ;a32e  ac 74 04
    inc mem_fe52            ;a331  81 52
    br lab_a341             ;a333  fa 0c

lab_a335:
    mov a,mem_fe52          ;a335  f0 52
    mov b,a                 ;a337  73
    movw hl,#mem_cee4+1     ;a338  16 e5 ce
    callf !table_get_word   ;a33b  4c 48        Load DE with word at position B in table [HL]
    movw ax,de              ;a33d  c4
    movw hl,ax              ;a33e  d6
    inc mem_fe52            ;a33f  81 52

lab_a341:
    call !sub_9f33          ;a341  9a 33 9f
    br !lab_9d1f            ;a344  9b 1f 9d

lab_a347:
    mov a,!mem_fc8c         ;a347  8e 8c fc
    mov b,a                 ;a34a  73
    movw hl,#mem_c37d+1     ;a34b  16 7e c3
    bt mem_fe75.0,lab_a354  ;a34e  8c 75 03
    movw hl,#mem_c2d1+1     ;a351  16 d2 c2

lab_a354:
    bf mem_fe74.2,lab_a35b  ;a354  31 23 74 03
    movw hl,#mem_c52b+1     ;a358  16 2c c5

lab_a35b:
    callf !table_get_word   ;a35b  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f80         ;a35d  10 80 0f
    call !sub_9e8e          ;a360  9a 8e 9e
    mov a,#0x69             ;a363  a1 69
    call !sub_9137          ;a365  9a 37 91

lab_a368:
    mov a,!mem_fc8c         ;a368  8e 8c fc
    mov b,a                 ;a36b  73
    movw hl,#mem_c3d3+1     ;a36c  16 d4 c3
    bt mem_fe75.0,lab_a375  ;a36f  8c 75 03
    movw hl,#mem_c327+1     ;a372  16 28 c3

lab_a375:
    bf mem_fe74.2,lab_a37c  ;a375  31 23 74 03
    movw hl,#mem_c581+1     ;a379  16 82 c5

lab_a37c:
    callf !table_get_word   ;a37c  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f84         ;a37e  10 84 0f
    call !sub_9e8e          ;a381  9a 8e 9e
    mov a,#0x6a             ;a384  a1 6a
    call !sub_9137          ;a386  9a 37 91

lab_a389:
    mov a,!mem_fc8d         ;a389  8e 8d fc
    mov b,a                 ;a38c  73
    movw hl,#mem_c5d7+1     ;a38d  16 d8 c5
    bf mem_fe74.2,lab_a397  ;a390  31 23 74 03
    movw hl,#mem_c62d+1     ;a394  16 2e c6

lab_a397:
    callf !table_get_word   ;a397  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f88         ;a399  10 88 0f
    call !sub_9e8e          ;a39c  9a 8e 9e
    mov a,#0x6b             ;a39f  a1 6b
    call !sub_9137          ;a3a1  9a 37 91

lab_a3a4:
    mov a,!mem_f200         ;a3a4  8e 00 f2
    mov b,a                 ;a3a7  73
    bt mem_fe74.2,lab_a3b2  ;a3a8  ac 74 07
    movw hl,#mem_c933+1     ;a3ab  16 34 c9
    callf !table_get_word   ;a3ae  4c 48        Load DE with word at position B in table [HL]
    br lab_a3b7             ;a3b0  fa 05

lab_a3b2:
    movw hl,#mem_c95d+1     ;a3b2  16 5e c9
    callf !table_get_word   ;a3b5  4c 48        Load DE with word at position B in table [HL]

lab_a3b7:
    movw ax,#0x0f8c         ;a3b7  10 8c 0f
    call !sub_9e8e          ;a3ba  9a 8e 9e
    mov a,#0x6c             ;a3bd  a1 6c
    call !sub_9137          ;a3bf  9a 37 91

lab_a3c2:
    movw ax,#0x0177         ;a3c2  10 77 01
    bf mem_fe74.2,lab_a3cc  ;a3c5  31 23 74 03
    movw ax,#0x0117         ;a3c9  10 17 01

lab_a3cc:
    movw de,ax              ;a3cc  d4
    movw ax,#0x0f90         ;a3cd  10 90 0f
    call !sub_9e8e          ;a3d0  9a 8e 9e
    mov a,#0x6d             ;a3d3  a1 6d
    call !sub_9137          ;a3d5  9a 37 91

lab_a3d8:
    mov a,!mem_fc8c         ;a3d8  8e 8c fc
    mov b,a                 ;a3db  73
    movw hl,#mem_c3a8+1     ;a3dc  16 a9 c3
    bt mem_fe75.0,lab_a3e5  ;a3df  8c 75 03
    movw hl,#mem_c2fc+1     ;a3e2  16 fd c2

lab_a3e5:
    bf mem_fe74.2,lab_a3ec  ;a3e5  31 23 74 03
    movw hl,#mem_c556+1     ;a3e9  16 57 c5

lab_a3ec:
    callf !table_get_word   ;a3ec  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f94         ;a3ee  10 94 0f
    call !sub_9e8e          ;a3f1  9a 8e 9e
    mov a,#0x6e             ;a3f4  a1 6e
    call !sub_9137          ;a3f6  9a 37 91

lab_a3f9:
    mov a,!mem_fc8c         ;a3f9  8e 8c fc
    mov b,a                 ;a3fc  73
    movw hl,#mem_c3fe+1     ;a3fd  16 ff c3
    bt mem_fe75.0,lab_a406  ;a400  8c 75 03
    movw hl,#mem_c352+1     ;a403  16 53 c3

lab_a406:
    bf mem_fe74.2,lab_a40d  ;a406  31 23 74 03
    movw hl,#mem_c5ac+1     ;a40a  16 ad c5

lab_a40d:
    callf !table_get_word   ;a40d  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f98         ;a40f  10 98 0f
    call !sub_9e8e          ;a412  9a 8e 9e
    mov a,#0x6f             ;a415  a1 6f
    call !sub_9137          ;a417  9a 37 91

lab_a41a:
    mov a,!mem_fc8d         ;a41a  8e 8d fc
    mov b,a                 ;a41d  73
    movw hl,#mem_c602+1     ;a41e  16 03 c6
    bf mem_fe74.2,lab_a428  ;a421  31 23 74 03
    movw hl,#mem_c658+1     ;a425  16 59 c6

lab_a428:
    callf !table_get_word   ;a428  4c 48        Load DE with word at position B in table [HL]
    movw ax,#0x0f9c         ;a42a  10 9c 0f
    call !sub_9e8e          ;a42d  9a 8e 9e
    mov a,#0x70             ;a430  a1 70
    call !sub_9137          ;a432  9a 37 91

lab_a435:
    mov a,!mem_f200         ;a435  8e 00 f2
    mov b,a                 ;a438  73
    bt mem_fe74.2,lab_a443  ;a439  ac 74 07
    movw hl,#mem_c948+1     ;a43c  16 49 c9
    callf !table_get_word   ;a43f  4c 48        Load DE with word at position B in table [HL]
    br lab_a448             ;a441  fa 05

lab_a443:
    movw hl,#mem_c972+1     ;a443  16 73 c9
    callf !table_get_word   ;a446  4c 48        Load DE with word at position B in table [HL]

lab_a448:
    movw ax,#0x0fa0         ;a448  10 a0 0f
    call !sub_9e8e          ;a44b  9a 8e 9e
    mov a,#0x71             ;a44e  a1 71
    call !sub_9137          ;a450  9a 37 91

lab_a453:
    movw ax,#0x5540         ;a453  10 40 55
    bf mem_fe74.2,lab_a45d  ;a456  31 23 74 03
    movw ax,#0x4540         ;a45a  10 40 45

lab_a45d:
    movw de,ax              ;a45d  d4
    movw ax,#0x0fa4         ;a45e  10 a4 0f
    call !sub_9e8e          ;a461  9a 8e 9e
    br !lab_9d1f            ;a464  9b 1f 9d

sub_a467:
;Convert lower nibble of A to hexadecimal digit in ASCII
;XXX redundant: this is one of many identical copies of sub_6809
    cmp a,#0x0a             ;a467  4d 0a
    bc lab_a471_lt_0x0a     ;a469  8d 06      Branch if A < 0x0A
    sub a,#0x0a             ;a46b  1d 0a      A = A - 0x0A
    add a,#'A               ;a46d  0d 41      Convert to ASCII 'A'-'F'
    br lab_a473_ret         ;a46f  fa 02
lab_a471_lt_0x0a:
    add a,#'0               ;a471  0d 30      Convert to ASCII '0'-'9'
lab_a473_ret:
    ret                     ;a473  af

lab_a474:
    bf rb0_b.7,lab_a47d     ;a474  31 73 fb 05
    call !sub_a4fe          ;a478  9a fe a4
    br lab_a498             ;a47b  fa 1b

lab_a47d:
    bf rb0_b.6,lab_a49d     ;a47d  31 63 fb 1c
    call !sub_aa9c          ;a481  9a 9c aa
    bz lab_a487             ;a484  ad 01
    brk                     ;a486  bf           Force cold start via badisr_0d75

lab_a487:
    set1 mem_fe72.6         ;a487  6a 72
    set1 mem_fe73.0         ;a489  0a 73
    set1 mem_fe73.1         ;a48b  1a 73
    set1 mem_fe73.3         ;a48d  3a 73
    set1 mem_fe73.4         ;a48f  4a 73
    set1 mem_fe73.5         ;a491  5a 73
    set1 mem_fe73.6         ;a493  6a 73
    call !sub_a514          ;a495  9a 14 a5

lab_a498:
    mov a,#0xc0             ;a498  a1 c0
    callt [0x0042]          ;a49a  c3           Calls sub_09b9
    br lab_a4a5             ;a49b  fa 08

lab_a49d:
    call !sub_aa9c          ;a49d  9a 9c aa
    bz lab_a4a5             ;a4a0  ad 03
    call !sub_a4fe          ;a4a2  9a fe a4

lab_a4a5:
    mov a,#0x05             ;a4a5  a1 05
    mov !mem_fb1e,a         ;a4a7  9e 1e fb
    mov a,#0x1e             ;a4aa  a1 1e
    callt [0x0046]          ;a4ac  c7           Calls sub_096c
    set1 pm9.5              ;a4ad  71 5a 29
    call !sub_a729          ;a4b0  9a 29 a7
    call !sub_aa40          ;a4b3  9a 40 aa
    mov a,!mem_fc9b         ;a4b6  8e 9b fc
    mov b,a                 ;a4b9  73
    movw hl,#mem_d0c7+1     ;a4ba  16 c8 d0

lab_a4bd:
    callf !table_get_word   ;a4bd  4c 48        Load DE with word at position B in table [HL]
    bnc lab_a4c6            ;a4bf  9d 05        Branch if table lookup succeeded
    call !sub_a4fe          ;a4c1  9a fe a4
    br lab_a4cd             ;a4c4  fa 07

lab_a4c6:
    movw ax,#lab_a4cd       ;a4c6  10 cd a4
    push ax                 ;a4c9  b1
    movw ax,de              ;a4ca  c4
    br ax                   ;a4cb  31 98

lab_a4cd:
    bf mem_fe2d.0,lab_a4d4  ;a4cd  31 03 2d 03
    call !sub_9140          ;a4d1  9a 40 91

lab_a4d4:
    br !sub_aa9c            ;a4d4  9b 9c aa

lab_a4d7:
    call !sub_aa9c          ;a4d7  9a 9c aa
    bz lab_a4df             ;a4da  ad 03
    call !sub_a4fe          ;a4dc  9a fe a4

lab_a4df:
    mov a,#0xf7             ;a4df  a1 f7
    bt mem_fe2d.2,lab_a4e6  ;a4e1  ac 2d 02
    clr1 a.0                ;a4e4  61 8b

lab_a4e6:
    cmp mem_fe58,#0x00      ;a4e6  c8 58 00
    bnz lab_a4ed            ;a4e9  bd 02
    clr1 a.1                ;a4eb  61 9b

lab_a4ed:
    movw de,#mem_d062       ;a4ed  14 62 d0
    call !sub_5c64          ;a4f0  9a 64 5c
    cmp a,#0xff             ;a4f3  4d ff
    bnz lab_a4f9            ;a4f5  bd 02
    mov b,#0x00             ;a4f7  a3 00

lab_a4f9:
    movw hl,#mem_d0cc+1     ;a4f9  16 cd d0
    br lab_a4bd             ;a4fc  fa bf

sub_a4fe:
    set1 mem_fe73.0         ;a4fe  0a 73
    set1 mem_fe73.1         ;a500  1a 73
    mov a,#0x00             ;a502  a1 00
    mov !mem_fc9b,a         ;a504  9e 9b fc
    mov a,#0x15             ;a507  a1 15
    mov !mem_fe57,a         ;a509  9e 57 fe
    call !center_fade_bal       ;a50c  9a 29 a5     Set FADE=CENTER and BAL=CENTER
    call !center_bass_mid_treb  ;a50f  9a 3a a5     Set BASS=0, MID=0, TREB=0
    set1 mem_fe76.7         ;a512  7a 76

sub_a514:
    mov mem_fe58,#0x00      ;a514  11 58 00
    clr1 mem_fe77.1         ;a517  1b 77
    clr1 mem_fe77.5         ;a519  5b 77
    clr1 mem_fe77.0         ;a51b  0b 77
    set1 mem_fe77.4         ;a51d  4a 77
    set1 pm9.5              ;a51f  71 5a 29
    set1 mem_fe72.2         ;a522  2a 72
    set1 mem_fe72.7         ;a524  7a 72
    set1 mem_fe77.4         ;a526  4a 77
    ret                     ;a528  af

;Set FADE=CENTER and BAL=CENTER
center_fade_bal:
    mov a,#0x0a             ;a529  a1 0a        0x0A = CENTER
    movw hl,#mem_f258_bal   ;a52b  16 58 f2     BAL
    call !eeram_wr_byte_hl  ;a52e  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

    mov a,#0x0a             ;a531  a1 0a        0x0A = CENTER
    movw hl,#mem_f257_fade  ;a533  16 57 f2     FADE
    call !eeram_wr_byte_hl  ;a536  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    ret                     ;a539  af

;Set BASS=0, MID=0, TREB=0
center_bass_mid_treb:
    mov a,#0x0a             ;a53a  a1 0a        0x0A = CENTER
    mov b,#0x03             ;a53c  a3 03        3 = counts down 3 bytes to write, also the offset
    movw hl,#mem_f25b_treb-3;a53e  16 58 f2
lab_a541_loop:
    call !eeram_wr_byte_hl_b;a541  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum
    dbnz b,lab_a541_loop    ;a544  8b fb
    ret                     ;a546  af

lab_a547_ret:
    ret                     ;a547  af

lab_a548:
    mov a,#0x00             ;a548  a1 00
    xch a,!mem_fbce         ;a54a  ce ce fb

lab_a54d:
    mov x,a                 ;a54d  70
    bf mem_fe5d.7,lab_a55d  ;a54e  31 73 5d 0b
    mov a,!mem_fb68         ;a552  8e 68 fb
    cmp a,#0x06             ;a555  4d 06
    bz lab_a56d             ;a557  ad 14
    cmp a,#0x07             ;a559  4d 07
    bz lab_a56d             ;a55b  ad 10

lab_a55d:
    mov a,x                 ;a55d  60
    bf shadow_p9.7,lab_a56d ;a55e  31 73 d3 0b
    bf mem_fe76.6,lab_a56e  ;a562  31 63 76 08
    bt mem_fe77.2,lab_a56d  ;a566  ac 77 04
    clr1 mem_fe76.6         ;a569  6b 76
    br lab_a56e             ;a56b  fa 01

lab_a56d:
    ret                     ;a56d  af

lab_a56e:
    clr1 mem_fe76.5         ;a56e  5b 76
    mov x,a                 ;a570  70
    mov a,#0x00             ;a571  a1 00
    mov !mem_fb46,a         ;a573  9e 46 fb
    mov a,x                 ;a576  60
    bf mem_fe77.1,lab_a57e  ;a577  31 13 77 03
    br !lab_a6cd            ;a57b  9b cd a6

lab_a57e:
    rol a,1                 ;a57e  26
    and a,#0xfe             ;a57f  5d fe
    mov b,a                 ;a581  73
    mov h,a                 ;a582  77
    mov a,!mem_fe57         ;a583  8e 57 fe
    add a,b                 ;a586  61 0b
    bf mem_fe74.6,lab_a594  ;a588  31 63 74 08
    cmp a,#0x5b             ;a58c  4d 5b
    bc lab_a5a4             ;a58e  8d 14
    mov a,#0x5a             ;a590  a1 5a
    br lab_a59e             ;a592  fa 0a

lab_a594:
    cmp a,#0x7b             ;a594  4d 7b
    bc lab_a5a4             ;a596  8d 0c
    sub a,#0x7a             ;a598  1d 7a
    sub b,a                 ;a59a  61 13
    mov a,#0x7a             ;a59c  a1 7a

lab_a59e:
    bf rb0_h.7,lab_a5a4     ;a59e  31 73 ff 02
    mov a,#0x00             ;a5a2  a1 00

lab_a5a4:
    push ax                 ;a5a4  b1
    bf rb0_b.7,lab_a5be     ;a5a5  31 73 fb 15
    cmp mem_fe5a,#0x00      ;a5a9  c8 5a 00
    bz lab_a5e8             ;a5ac  ad 3a
    mov a,mem_fe5a          ;a5ae  f0 5a
    add a,b                 ;a5b0  61 0b
    mov mem_fe5a,a          ;a5b2  f2 5a
    bf a.7,lab_a5ba         ;a5b4  31 7f 03
    mov mem_fe5a,#0x00      ;a5b7  11 5a 00

lab_a5ba:
    clr1 mem_fe76.2         ;a5ba  2b 76
    br lab_a5e8             ;a5bc  fa 2a

lab_a5be:
    cmp mem_fe5a,#0x00      ;a5be  c8 5a 00
    bz lab_a5e8             ;a5c1  ad 25
    mov a,!mem_fe57         ;a5c3  8e 57 fe
    cmp a,#0x7a             ;a5c6  4d 7a
    bf mem_fe74.6,lab_a5ce  ;a5c8  31 63 74 02
    cmp a,#0x5a             ;a5cc  4d 5a

lab_a5ce:
    bnc lab_a5e8            ;a5ce  9d 18
    mov a,!mem_fc97         ;a5d0  8e 97 fc
    sub a,!mem_fc96         ;a5d3  18 96 fc
    bz lab_a5da             ;a5d6  ad 02
    bnc lab_a5dc            ;a5d8  9d 02

lab_a5da:
    br lab_a5e8             ;a5da  fa 0c

lab_a5dc:
    add a,a                 ;a5dc  61 01
    add a,mem_fe5a          ;a5de  0e 5a
    add a,b                 ;a5e0  61 0b
    mov mem_fe5a,a          ;a5e2  f2 5a
    set1 mem_fe76.2         ;a5e4  2a 76
    br lab_a5e8             ;a5e6  fa 00

lab_a5e8:
    pop ax                  ;a5e8  b0
    set1 mem_fe73.3         ;a5e9  3a 73
    call !sub_a670          ;a5eb  9a 70 a6
    bt mem_fe5d.7,lab_a648  ;a5ee  fc 5d 57
    cmp mem_fe58,#0x00      ;a5f1  c8 58 00
    bz lab_a648             ;a5f4  ad 52
    call !sub_a694          ;a5f6  9a 94 a6
    cmp a,#0x00             ;a5f9  4d 00
    bnz lab_a60d            ;a5fb  bd 10
    mov a,!mem_fc9f         ;a5fd  8e 9f fc
    cmp a,#0x00             ;a600  4d 00
    bz lab_a648             ;a602  ad 44
    set1 mem_fe80.0         ;a604  0a 80
    mov a,#0x00             ;a606  a1 00
    mov !mem_fc9f,a         ;a608  9e 9f fc
    br lab_a61c             ;a60b  fa 0f

lab_a60d:
    cmp a,#0x7a             ;a60d  4d 7a
    bf mem_fe74.6,lab_a615  ;a60f  31 63 74 02
    cmp a,#0x5a             ;a613  4d 5a

lab_a615:
    bc lab_a630             ;a615  8d 19
    mov a,#0xff             ;a617  a1 ff
    mov !mem_fc9f,a         ;a619  9e 9f fc

lab_a61c:
    call !sub_7697_snd_cd   ;a61c  9a 97 76     Unknown; snd_msg_idx and CD related

    mov a,#0x8e             ;a61f  a1 8e
    mov !tmp_msg_idx,a      ;a621  9e a6 f1     e Writes "  MIN  " or "  MAX  "

    mov a,#30               ;a624  a1 1e        A = 3 seconds
    mov !msg_countdown,a    ;a626  9e 2e fb

    mov a,#0x0a             ;a629  a1 0a
    mov !mem_fb49,a         ;a62b  9e 49 fb
    br lab_a648             ;a62e  fa 18

lab_a630:
    mov a,#0x55             ;a630  a1 55
    mov !mem_fc9f,a         ;a632  9e 9f fc

    mov a,!tmp_msg_idx      ;a635  8e a6 f1
    and a,#0x7f             ;a638  5d 7f
    cmp a,#0x0e             ;a63a  4d 0e        e Writes "  MIN  " or "  MAX  "
    bnz lab_a648            ;a63c  bd 0a

    mov a,#0xff             ;a63e  a1 ff
    mov !tmp_msg_idx,a      ;a640  9e a6 f1     f Writes " DIAG  "

    mov a,#0                ;a643  a1 00        A = 0 seconds
    mov !msg_countdown,a    ;a645  9e 2e fb

lab_a648:
    ret                     ;a648  af

lab_a649:
    bf mem_fe5e.0,lab_a64e  ;a649  31 03 5e 01
    ret                     ;a64d  af

lab_a64e:
    mov a,#0x01             ;a64e  a1 01
    br !lab_a54d            ;a650  9b 4d a5

lab_a653:
    bf mem_fe5e.0,lab_a658  ;a653  31 03 5e 01
    ret                     ;a657  af

lab_a658:
    mov a,#0xff             ;a658  a1 ff
    br !lab_a54d            ;a65a  9b 4d a5

lab_a65d:
    bt mem_fe77.5,lab_a66f  ;a65d  dc 77 0f
    set1 mem_fe77.5         ;a660  5a 77
    br lab_a66a             ;a662  fa 06

lab_a664:
    bf mem_fe77.5,lab_a66f  ;a664  31 53 77 07
    clr1 mem_fe77.5         ;a668  5b 77

lab_a66a:
    set1 mem_fe80.5         ;a66a  5a 80
    call !sub_aa9c          ;a66c  9a 9c aa

lab_a66f:
    ret                     ;a66f  af

sub_a670:
    cmp mem_fe58,#0x00      ;a670  c8 58 00
    bz lab_a693             ;a673  ad 1e
    bf a.7,lab_a67a         ;a675  31 7f 02
    mov a,#0x00             ;a678  a1 00

lab_a67a:
    mov x,a                 ;a67a  70
    mov a,!mem_fb68         ;a67b  8e 68 fb
    cmp a,#0x05             ;a67e  4d 05
    bnz lab_a689            ;a680  bd 07
    mov a,x                 ;a682  60
    cmp a,#0x10             ;a683  4d 10
    bnc lab_a689            ;a685  9d 02
    mov x,#0x10             ;a687  a0 10

lab_a689:
    cmp a,#0x7b             ;a689  4d 7b
    bc lab_a68f             ;a68b  8d 02
    mov x,#0x7a             ;a68d  a0 7a

lab_a68f:
    mov a,x                 ;a68f  60
    mov !mem_fe57,a         ;a690  9e 57 fe

lab_a693:
    ret                     ;a693  af

sub_a694:
    mov a,#0x00             ;a694  a1 00
    cmp mem_fe58,#0x00      ;a696  c8 58 00
    bz lab_a6cc_ret         ;a699  ad 31
    mov a,!mem_fe57         ;a69b  8e 57 fe
    mov x,a                 ;a69e  70
    mov a,#0x00             ;a69f  a1 00
    bf mem_fe78.0,lab_a6b0  ;a6a1  31 03 78 0b
    sub a,mem_fe5a          ;a6a5  1e 5a
    add a,!mem_fc91         ;a6a7  08 91 fc
    add a,!mem_fc91         ;a6aa  08 91 fc
    bf a.7,lab_a6b9         ;a6ad  31 7f 09

lab_a6b0:
    add a,x                 ;a6b0  61 08
    bf a.7,lab_a6bb         ;a6b2  31 7f 06
    mov a,#0x00             ;a6b5  a1 00
    br lab_a6cc_ret         ;a6b7  fa 13

lab_a6b9:
    add a,x                 ;a6b9  61 08

lab_a6bb:
    bt mem_fe74.6,lab_a6c6  ;a6bb  ec 74 08
    cmp a,#0x7b             ;a6be  4d 7b
    bc lab_a6cc_ret         ;a6c0  8d 0a
    mov a,#0x7a             ;a6c2  a1 7a
    br lab_a6cc_ret         ;a6c4  fa 06

lab_a6c6:
    cmp a,#0x5b             ;a6c6  4d 5b
    bc lab_a6cc_ret         ;a6c8  8d 02
    mov a,#0x5a             ;a6ca  a1 5a

lab_a6cc_ret:
    ret                     ;a6cc  af

lab_a6cd:
    bf mem_fe77.2,lab_a6d5  ;a6cd  31 23 77 04
    ret                     ;a6d1  af

sub_a6d2:
    bt mem_fe77.1,lab_a6f4  ;a6d2  9c 77 1f

lab_a6d5:
    bt mem_fe7d.2,lab_a6f4  ;a6d5  ac 7d 1c
    mov a,!mem_fb1f         ;a6d8  8e 1f fb
    cmp a,#0x00             ;a6db  4d 00
    bnz lab_a6f4            ;a6dd  bd 15
    bt mem_fe73.0,lab_a6f4  ;a6df  8c 73 12
    bt mem_fe73.1,lab_a6f4  ;a6e2  9c 73 0f
    clr1 mem_fe77.1         ;a6e5  1b 77
    clr1 mem_fe77.2         ;a6e7  2b 77
    set1 mem_fe77.4         ;a6e9  4a 77

lab_a6eb:
    clr1 mem_fe72.2         ;a6eb  2b 72
    set1 mem_fe72.7         ;a6ed  7a 72
    mov a,#0x01             ;a6ef  a1 01
    mov !mem_fc9b,a         ;a6f1  9e 9b fc

lab_a6f4:
    ret                     ;a6f4  af

lab_a6f5:
    bt mem_fe77.2,lab_a728  ;a6f5  ac 77 30
    set1 mem_fe77.1         ;a6f8  1a 77
    br lab_a719             ;a6fa  fa 1d

lab_a6fc:
    bt mem_fe5e.0,lab_a70b  ;a6fc  8c 5e 0c
    bt mem_fe23.6,lab_a70b  ;a6ff  ec 23 09

    mov a,!mem_fe57         ;a702  8e 57 fe
    movw hl,#mem_f268       ;a705  16 68 f2
    call !eeram_wr_byte_hl  ;a708  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

lab_a70b:
    ret                     ;a70b  af

sub_a70c:
    set1 mem_fe72.7         ;a70c  7a 72
    set1 mem_fe72.2         ;a70e  2a 72
    clr1 mem_fe80.4         ;a710  4b 80
    clr1 mem_fe77.1         ;a712  1b 77
    bt mem_fe77.2,lab_a728  ;a714  ac 77 11
    set1 mem_fe77.2         ;a717  2a 77

lab_a719:
    mov a,#0x00             ;a719  a1 00
    mov !mem_fc9b,a         ;a71b  9e 9b fc
    mov a,#0x20             ;a71e  a1 20
    mov b,#0x03             ;a720  a3 03
    callf !sub_0970         ;a722  1c 70

lab_a724:
    set1 mem_fe72.2         ;a724  2a 72
    set1 mem_fe72.7         ;a726  7a 72

lab_a728:
    ret                     ;a728  af

sub_a729:
    mov a,!mem_fb1f         ;a729  8e 1f fb
    cmp a,#0x00             ;a72c  4d 00
    bnz lab_a745            ;a72e  bd 15
    bt mem_fe77.2,lab_a747  ;a730  ac 77 14
    bt mem_fe77.1,lab_a747  ;a733  9c 77 11
    call !sub_a694          ;a736  9a 94 a6
    cmp a,#0x00             ;a739  4d 00
    bz lab_a747             ;a73b  ad 0a
    bt a.7,lab_a747         ;a73d  31 7e 07
    cmp mem_fe58,#0x00      ;a740  c8 58 00
    bnz lab_a749            ;a743  bd 04

lab_a745:
    set1 mem_fe77.2         ;a745  2a 77

lab_a747:
    br lab_a724             ;a747  fa db

lab_a749:
    br lab_a6eb             ;a749  fa a0

;Unknown, returns set on failure
sub_a74b:
    set1 mem_fe76.6         ;a74b  6a 76
    bf mem_fe77.2,lab_a754  ;a74d  31 23 77 03
    bt mem_fe2d.2,lab_a77e_clr_cy_ret  ;a751  ac 2d 2a

lab_a754:
    mov a,mem_fe2f          ;a754  f0 2f
    mov b,#0x03             ;a756  a3 03

lab_a758_loop:
    movw hl,#mem_d0b1+1     ;a758  16 b2 d0
    cmp a,[hl+b]            ;a75b  31 4b
    bz lab_a763_found       ;a75d  ad 04
    dbnz b,lab_a758_loop    ;a75f  8b f7
    br lab_a768_not_found   ;a761  fa 05

lab_a763_found:
    mov a,b                 ;a763  63
    cmp a,mem_fe58          ;a764  4e 58
    bnz lab_a77e_clr_cy_ret ;a766  bd 16

lab_a768_not_found:
    bt mem_fe2d.2,lab_a77a  ;a768  ac 2d 0f
    clr1 mem_fe80.4         ;a76b  4b 80
    call !sub_a70c          ;a76d  9a 0c a7
    mov a,#0x04             ;a770  a1 04
    mov a,#0x04             ;a772  a1 04        XXX redundant
    callt [0x0048]          ;a774  c9           Calls sub_09a7
    call !sub_aa9c          ;a775  9a 9c aa
    set1 cy                 ;a778  20
    ret                     ;a779  af

lab_a77a:
    set1 mem_fe77.2         ;a77a  2a 77
    clr1 mem_fe80.4         ;a77c  4b 80

lab_a77e_clr_cy_ret:
    clr1 cy                 ;a77e  21
    ret                     ;a77f  af

sub_a780:
    bf mem_fe77.2,lab_a7b8  ;a780  31 23 77 34
    mov a,!mem_fb1f         ;a784  8e 1f fb
    cmp a,#0x00             ;a787  4d 00
    bnz lab_a7b8            ;a789  bd 2d
    bt mem_fe7d.2,lab_a7b8  ;a78b  ac 7d 2a
    xch a,b                 ;a78e  33
    mov a,mem_fe30          ;a78f  f0 30
    xch a,b                 ;a791  33
    movw hl,#mem_d0ac+1     ;a792  16 ad d0
    callf !table_get_byte   ;a795  4c 7d        Load A with byte at position B in table [HL]
    bc lab_a7b8             ;a797  8d 1f        Branch if lookup failed
    mov b,a                 ;a799  73
    cmp a,#0x00             ;a79a  4d 00
    bz lab_a7b8             ;a79c  ad 1a
    cmp a,mem_fe58          ;a79e  4e 58
    bnz lab_a7b8            ;a7a0  bd 16
    movw hl,#mem_d0b1+1     ;a7a2  16 b2 d0
    callf !table_get_byte   ;a7a5  4c 7d        Load A with byte at position B in table [HL]
    bc lab_a7b8             ;a7a7  8d 0f        Branch if lookup failed
    cmp a,mem_fe2f          ;a7a9  4e 2f
    bnz lab_a7b8            ;a7ab  bd 0b
    clr1 mem_fe76.6         ;a7ad  6b 76
    mov a,!mem_fc9f         ;a7af  8e 9f fc
    cmp a,#0x00             ;a7b2  4d 00
    bz lab_a7b8             ;a7b4  ad 02
    set1 mem_fe80.4         ;a7b6  4a 80

lab_a7b8:
    ret                     ;a7b8  af

sub_a7b9:
    mov a,mem_fe58          ;a7b9  f0 58
    cmp a,#0x00             ;a7bb  4d 00
    bz lab_a7cd             ;a7bd  ad 0e
    cmp a,#0x04             ;a7bf  4d 04
    bnc lab_a7cd            ;a7c1  9d 0a
    mov b,a                 ;a7c3  73
    dec b                   ;a7c4  53
    movw hl,#mem_f269       ;a7c5  16 69 f2
    callf !sub_0c6b         ;a7c8  4c 6b
    mov !mem_fc9c,a         ;a7ca  9e 9c fc

lab_a7cd:
    ret                     ;a7cd  af

sub_a7ce:
    cmp mem_fe58,#0x01      ;a7ce  c8 58 01
    bnz lab_a7ed            ;a7d1  bd 1a
    mov !mem_fc9c,a         ;a7d3  9e 9c fc
    push ax                 ;a7d6  b1
    call !sub_aa9c          ;a7d7  9a 9c aa
    pop ax                  ;a7da  b0
    mov b,a                 ;a7db  73
    mov a,mem_fe58          ;a7dc  f0 58
    cmp a,#0x00             ;a7de  4d 00
    bz lab_a7ed             ;a7e0  ad 0b
    cmp a,#0x04             ;a7e2  4d 04
    bnc lab_a7ed            ;a7e4  9d 07
    xch a,b                 ;a7e6  33
    dec b                   ;a7e7  53
    movw hl,#mem_f269       ;a7e8  16 69 f2
    callf !sub_0b68         ;a7eb  3c 68

lab_a7ed:
    ret                     ;a7ed  af

sub_a7ee:
    cmp mem_fe58,#0         ;a7ee  c8 58 00
    bz lab_a7fd_ret         ;a7f1  ad 0a
    call !find_eq_area      ;a7f3  9a 0e a8     Find an EQ# EEPROM area of RAM, return address in AX.  Selects EQ#1-4 based on ???
    movw de,ax              ;a7f6  d4
    movw hl,#mem_f259_bass  ;a7f7  16 59 f2     HL = address of BASS (will write 3 bytes: BASS, MID, TREB)
    call !eeram_wr_3_de_hl  ;a7fa  9a 2e a8     Write 3 bytes to EEPROM area in RAM from [DE] to [HL]
lab_a7fd_ret:
    ret                     ;a7fd  af

sub_a7fe:
    cmp mem_fe58,#0         ;a7fe  c8 58 00
    bz lab_a80d_ret         ;a801  ad 0a
    call !find_eq_area      ;a803  9a 0e a8     Find an EQ# EEPROM area of RAM, return address in AX.  Selects EQ#1-4 based on ???
    movw hl,ax              ;a806  d6
    movw de,#mem_f259_bass  ;a807  14 59 f2     HL = address of BASS (will write 3 bytes: BASS, MID, TREB)
    call !eeram_wr_3_de_hl  ;a80a  9a 2e a8     Write 3 bytes to EEPROM area in RAM from [DE] to [HL]
lab_a80d_ret:
    ret                     ;a80d  af

;Find an EQ# EEPROM area of RAM, return address in AX.  Selects EQ#1-4 based on ???
find_eq_area:
    cmp mem_fe58,#1             ;a80e  c8 58 01
    bnz lab_a822                ;a811  bd 0f
    call !sub_080b_fm1fm2       ;a813  9a 0b 08     Return mem_f252 in A (FM1/FM2: 0x00=FM1, 0x01=FM2), also copy it into mem_fb57
    cmp a,#0x02                 ;a816  4d 02
    movw ax,#mem_f25c_eq1_bass  ;a818  10 5c f2
    bnz lab_a82d_ret            ;a81b  bd 10
    movw ax,#mem_f25f_eq2_bass  ;a81d  10 5f f2
    br lab_a82d_ret             ;a820  fa 0b

lab_a822:
    movw ax,#mem_f262_eq3_bass  ;a822  10 62 f2
    cmp mem_fe58,#2             ;a825  c8 58 02
    bz lab_a82d_ret             ;a828  ad 03
    movw ax,#mem_f265_eq4_bass  ;a82a  10 65 f2

lab_a82d_ret:
    ret                         ;a82d  af

;Write 3 bytes to EEPROM area in RAM from [DE] to [HL]
eeram_wr_3_de_hl:
    mov b,#0x03             ;a82e  a3 03
lab_a830_loop:
    mov a,[de]              ;a830  85
    call !eeram_wr_byte_hl  ;a831  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    incw de                 ;a834  84
    incw hl                 ;a835  86
    dbnz b,lab_a830_loop    ;a836  8b f8
    ret                     ;a838  af

lab_a839:
    bt mem_fe5d.7,lab_a872  ;a839  fc 5d 36
    set1 mem_fe81.0         ;a83c  0a 81
    mov a,!mem_fb68         ;a83e  8e 68 fb
    cmp a,#0x00             ;a841  4d 00
    bz lab_a849             ;a843  ad 04
    cmp a,#0x05             ;a845  4d 05
    bc lab_a872             ;a847  8d 29

lab_a849:
    mov a,!snd_msg_idx      ;a849  8e a5 f1
    cmp a,#0xff             ;a84c  4d ff
    bz lab_a865             ;a84e  ad 15

    mov a,!mem_fc9e         ;a850  8e 9e fc
    cmp a,#0x03             ;a853  4d 03
    bz lab_a862             ;a855  ad 0b

    cmp a,#0x04             ;a857  4d 04
    bnz lab_a865            ;a859  bd 0a

    mov a,#0xff             ;a85b  a1 ff
    mov !snd_msg_idx,a      ;a85d  9e a5 f1

    br lab_a872             ;a860  fa 10

lab_a862:
    inc a                   ;a862  41
    br lab_a867             ;a863  fa 02

lab_a865:
    mov a,#0x03             ;a865  a1 03

lab_a867:
    mov !mem_fc9e,a         ;a867  9e 9e fc
    cmp mem_fe58,#0x00      ;a86a  c8 58 00
    bz lab_a872             ;a86d  ad 03
    call !sub_a937          ;a86f  9a 37 a9

lab_a872:
    ret                     ;a872  af

lab_a873:
    call !center_fade_bal   ;a873  9a 29 a5     Set FADE=CENTER and BAL=CENTER
    br lab_a865             ;a876  fa ed

lab_a878:
    mov a,#0x00             ;a878  a1 00
    cmp mem_fe43_key,#0x0d  ;a87a  c8 43 0d     Key = SOUND_BASS?
    bz lab_a88f             ;a87d  ad 10
    mov a,#0x01             ;a87f  a1 01
    cmp mem_fe43_key,#0x0e  ;a881  c8 43 0e     Key = SOUND_MID?
    bz lab_a88f             ;a884  ad 09
    mov a,#0x02             ;a886  a1 02
    cmp mem_fe43_key,#0x0f  ;a888  c8 43 0f     Key = SOUND_TREB?
    bz lab_a88f             ;a88b  ad 02
    mov a,#0x00             ;a88d  a1 00

lab_a88f:
    mov !mem_fc9e,a         ;a88f  9e 9e fc
    set1 mem_fe77.4         ;a892  4a 77
    cmp mem_fe58,#0x00      ;a894  c8 58 00
    bz lab_a89c_ret         ;a897  ad 03
    call !sub_a937          ;a899  9a 37 a9

lab_a89c_ret:
    ret                     ;a89c  af

lab_a89d:
    bt mem_fe5d.7,lab_a89c_ret  ;a89d  fc 5d fc
    set1 mem_fe81.1         ;a8a0  1a 81
    mov a,#0x00             ;a8a2  a1 00
    br lab_a88f             ;a8a4  fa e9

lab_a8a6:
    bt mem_fe5d.7,lab_a89c_ret  ;a8a6  fc 5d f3
    set1 mem_fe81.3         ;a8a9  3a 81
    mov a,#0x02             ;a8ab  a1 02
    br lab_a88f             ;a8ad  fa e0

lab_a8af:
    bt mem_fe5d.7,lab_a89c_ret  ;a8af  fc 5d ea
    set1 mem_fe81.2         ;a8b2  2a 81
    mov a,#0x01             ;a8b4  a1 01
    br lab_a88f             ;a8b6  fa d7

lab_a8b8:
    mov a,!snd_msg_idx      ;a8b8  8e a5 f1
    cmp a,#0xff             ;a8bb  4d ff
    bnz lab_a8c1            ;a8bd  bd 02
    br lab_a936_ret         ;a8bf  fa 75

lab_a8c1:
    mov a,#0x00             ;a8c1  a1 00
    xch a,!mem_fbcc         ;a8c3  ce cc fb
    mov c,#0x01             ;a8c6  a2 01
    bf a.7,lab_a8cd         ;a8c8  31 7f 02
    mov c,#0xff             ;a8cb  a2 ff

lab_a8cd:
    mov a,!mem_fc9e         ;a8cd  8e 9e fc
    mov b,a                 ;a8d0  73
    movw hl,#mem_d0b6_sound_adjs+1  ;a8d1  16 b7 d0
    callf !table_get_word   ;a8d4  4c 48        Load DE with word at position B in table [HL]
    bc lab_a936_ret         ;a8d6  8d 5e        Branch if table lookup failed

    mov a,[de]              ;a8d8  85           A = sound adjustment byte (BASS, MID, TREB, FADE, BAL)
    mov x,a                 ;a8d9  70
    mov a,!mem_fc9e         ;a8da  8e 9e fc
    cmp a,#0x00             ;a8dd  4d 00
    mov a,x                 ;a8df  60
    bnz lab_a8f9            ;a8e0  bd 17
    mov a,mem_fe59          ;a8e2  f0 59
    cmp a,#0x00             ;a8e4  4d 00
    mov a,x                 ;a8e6  60
    bz lab_a8f9             ;a8e7  ad 10
    mov a,c                 ;a8e9  62
    bf a.7,lab_a8f9         ;a8ea  31 7f 0c
    mov a,mem_fe59          ;a8ed  f0 59
    add a,c                 ;a8ef  61 0a
    bf a.7,lab_a8f6         ;a8f1  31 7f 02
    mov a,#0x00             ;a8f4  a1 00

lab_a8f6:
    mov mem_fe59,a          ;a8f6  f2 59
    mov a,x                 ;a8f8  60

lab_a8f9:
    mov a,c                 ;a8f9  62
    bf a.7,lab_a904         ;a8fa  31 7f 07
    mov a,x                 ;a8fd  60
    cmp a,#0x00             ;a8fe  4d 00
    bz lab_a931             ;a900  ad 2f
    br lab_a909             ;a902  fa 05

lab_a904:
    mov a,x                 ;a904  60
    cmp a,#0x14             ;a905  4d 14
    bz lab_a931             ;a907  ad 28

lab_a909:
    mov a,!mem_fc9e         ;a909  8e 9e fc
    cmp a,#0x00             ;a90c  4d 00
    bnz lab_a914            ;a90e  bd 04
    set1 mem_fe73.5         ;a910  5a 73
    br lab_a926             ;a912  fa 12

lab_a914:
    cmp a,#0x01             ;a914  4d 01
    bnz lab_a91c            ;a916  bd 04
    set1 mem_fe73.5         ;a918  5a 73
    br lab_a926             ;a91a  fa 0a

lab_a91c:
    cmp a,#0x03             ;a91c  4d 03
    bnz lab_a924            ;a91e  bd 04
    set1 mem_fe73.6         ;a920  6a 73
    br lab_a926             ;a922  fa 02

lab_a924:
    set1 mem_fe73.4         ;a924  4a 73

lab_a926:
    mov a,x                 ;a926  60
    add a,c                 ;a927  61 0a
    push de                 ;a929  b5
    pop hl                  ;a92a  b6
    call !eeram_wr_byte_hl  ;a92b  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    call !sub_a7fe          ;a92e  9a fe a7

lab_a931:
    mov a,#50               ;a931  a1 32        A = 5 seconds
    mov !msg_countdown,a    ;a933  9e 2e fb

lab_a936_ret:
    ret                     ;a936  af

sub_a937:
    mov a,!mem_fc9e         ;a937  8e 9e fc
    mov b,a                 ;a93a  73
    movw hl,#mem_d0c1_sound_vals+1 ;a93b  16 c2 d0
    callf !table_get_byte   ;a93e  4c 7d        Load A with byte at position B in table [HL]
    bc lab_a95d_ret         ;a940  8d 1b        Branch if lookup failed
    push ax                 ;a942  b1
    and a,#0x7f             ;a943  5d 7f
    mov b,a                 ;a945  73

    mov a,!snd_msg_idx      ;a946  8e a5 f1
    and a,#0x7f             ;a949  5d 7f
    cmp a,b                 ;a94b  61 4b

    push psw                ;a94d  22
    call !sub_7697_snd_cd   ;a94e  9a 97 76     Unknown; snd_msg_idx and CD related
    pop psw                 ;a951  23
    pop ax                  ;a952  b0
    bz lab_a95d_ret         ;a953  ad 08

    mov !snd_msg_idx,a      ;a955  9e a5 f1

    mov a,#50               ;a958  a1 32        A = 5 seconds
    mov !msg_countdown,a    ;a95a  9e 2e fb

lab_a95d_ret:
    ret                     ;a95d  af

lab_a95e:
    bf mem_fe77.0,lab_a973  ;a95e  31 03 77 11
    cmp mem_fe59,#0x00      ;a962  c8 59 00
    bnz lab_a973            ;a965  bd 0c
    br !lab_aa0e_set_1_ret  ;a967  9b 0e aa     Set mem_fc9b=0x1 and return

lab_a96a:
    mov mem_fe5a,#0x00      ;a96a  11 5a 00
    mov mem_fe59,#0x00      ;a96d  11 59 00
    br !lab_aa09_set_2_ret  ;a970  9b 09 aa     Set mem_fb1d=0x0a, mem_fc9b=0x1 and return

lab_a973:
    mov a,!mem_fca4_ani     ;a973  8e a4 fc     A = P95/ANI50 analog reading

    cmp a,#0x26             ;a976  4d 26
    bc lab_a983_a_lt_0x26   ;a978  8d 09        Branch if A < 0x26 (38)

    ;A >= 0x26

    cmp a,#0x30             ;a97a  4d 30
    bc lab_a980_a_lt_0x30   ;a97c  8d 02        Branch if A < 0x30 (48)

    ;A >= 0x30

    br lab_a9df             ;a97e  fa 5f

lab_a980_a_lt_0x30:
    br !lab_aa0e_set_1_ret  ;a980  9b 0e aa     Set mem_fc9b=0x1 and return

lab_a983_a_lt_0x26:
    mov a,!mem_fb1d         ;a983  8e 1d fb
    cmp a,#0x00             ;a986  4d 00
    bz lab_a98d             ;a988  ad 03
    br !lab_aa0e_set_1_ret  ;a98a  9b 0e aa     Set mem_fc9b=0x1 and return

lab_a98d:
    mov b,#0x01             ;a98d  a3 01
    call !sub_ab0a          ;a98f  9a 0a ab
    sub a,#0x0a             ;a992  1d 0a
    bc lab_a9b2             ;a994  8d 1c
    cmp a,mem_fe59          ;a996  4e 59
    bf mem_fe74.6,lab_a9a4  ;a998  31 63 74 08
    cmp a,#0x02             ;a99c  4d 02
    bc lab_a9b5             ;a99e  8d 15
    sub a,#0x02             ;a9a0  1d 02
    cmp a,mem_fe59          ;a9a2  4e 59

lab_a9a4:
    bz lab_a9b5             ;a9a4  ad 0f
    bnc lab_a9ac            ;a9a6  9d 04
    mov mem_fe59,a          ;a9a8  f2 59
    br lab_a9b5             ;a9aa  fa 09

lab_a9ac:
    inc mem_fe59            ;a9ac  81 59
    set1 mem_fe73.5         ;a9ae  5a 73
    br lab_aa04_set_3_ret   ;a9b0  fa 52        Set mem_fb48=0x0a, mem_fb1d=0x0a, mem_fc9b=0x1 and return

lab_a9b2:
    mov mem_fe59,#0x00      ;a9b2  11 59 00

lab_a9b5:
    mov a,!snd_msg_idx      ;a9b5  8e a5 f1
    cmp a,#0xff             ;a9b8  4d ff
    bnz lab_aa0e_set_1_ret  ;a9ba  bd 52        Set mem_fc9b=0x1 and return
    cmp mem_fe5a,#0x3d      ;a9bc  c8 5a 3d
    bf mem_fe74.6,lab_a9c6  ;a9bf  31 63 74 03
    cmp mem_fe5a,#0x2d      ;a9c3  c8 5a 2d

lab_a9c6:
    bnc lab_aa0e_set_1_ret  ;a9c6  9d 46        Set mem_fc9b=0x1 and return
    add mem_fe5a,#0x02      ;a9c8  88 5a 02
    mov a,!mem_fc97         ;a9cb  8e 97 fc
    sub a,!mem_fc96         ;a9ce  18 96 fc
    bc lab_a9d9             ;a9d1  8d 06
    add a,a                 ;a9d3  61 01
    add a,mem_fe5a          ;a9d5  0e 5a
    mov mem_fe5a,a          ;a9d7  f2 5a

lab_a9d9:
    set1 mem_fe73.3         ;a9d9  3a 73
    set1 mem_fe76.2         ;a9db  2a 76
    br lab_aa04_set_3_ret   ;a9dd  fa 25        Set mem_fb48=0x0a, mem_fb1d=0x0a, mem_fc9b=0x1 and return

lab_a9df:
    mov a,!mem_fb48         ;a9df  8e 48 fb
    cmp a,#0x00             ;a9e2  4d 00
    bnz lab_aa0e_set_1_ret  ;a9e4  bd 28        Set mem_fc9b=0x1 and return

    mov a,!snd_msg_idx      ;a9e6  8e a5 f1
    cmp a,#0xff             ;a9e9  4d ff
    bnz lab_aa0e_set_1_ret  ;a9eb  bd 21        Set mem_fc9b=0x1 and return

    cmp mem_fe5a,#0x00      ;a9ed  c8 5a 00
    bz lab_a9fb             ;a9f0  ad 09

    sub mem_fe5a,#0x02      ;a9f2  98 5a 02
    set1 mem_fe73.3         ;a9f5  3a 73
    set1 mem_fe76.2         ;a9f7  2a 76
    br lab_aa04_set_3_ret   ;a9f9  fa 09        Set mem_fb48=0x0a, mem_fb1d=0x0a, mem_fc9b=0x1 and return

lab_a9fb:
    cmp mem_fe59,#0x00      ;a9fb  c8 59 00
    bz lab_aa0e_set_1_ret   ;a9fe  ad 0e        Set mem_fc9b=0x1 and return
    dec mem_fe59            ;aa00  91 59
    set1 mem_fe73.5         ;aa02  5a 73

;Set mem_fb48=0x0a, mem_fb1d=0x0a, mem_fc9b=0x1 and return
lab_aa04_set_3_ret:
    mov a,#0x0a             ;aa04  a1 0a
    mov !mem_fb48,a         ;aa06  9e 48 fb

;Set mem_fb1d=0x0a, mem_fc9b=0x1 and return
lab_aa09_set_2_ret:
    mov a,#0x0a             ;aa09  a1 0a
    mov !mem_fb1d,a         ;aa0b  9e 1d fb

;Set mem_fc9b=0x1 and return
lab_aa0e_set_1_ret:
    mov a,#0x01             ;aa0e  a1 01
    mov !mem_fc9b,a         ;aa10  9e 9b fc
    ret                     ;aa13  af

sub_aa14:
    mov a,mem_fe30          ;aa14  f0 30
    mov b,a                 ;aa16  73
    movw hl,#mem_d0ac+1     ;aa17  16 ad d0
    callf !table_get_byte   ;aa1a  4c 7d        Load A with byte at position B in table [HL]
    bc lab_aa3b             ;aa1c  8d 1d        Branch if lookup failed
    cmp a,#0x01             ;aa1e  4d 01
    bnz lab_aa3d            ;aa20  bd 1b
    call !sub_0800_mode     ;aa22  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;aa25  4d 01
    bz lab_aa2e_fm          ;aa27  ad 05
    ;mem_f253 != 0x01 (must be AM)
    bt mem_fe76.4,lab_aa36  ;aa29  cc 76 0a
    br lab_aa32             ;aa2c  fa 04

lab_aa2e_fm:
    bf mem_fe76.4,lab_aa36  ;aa2e  31 43 76 04

lab_aa32:
    mov a,#0x01             ;aa32  a1 01
    br lab_aa3d             ;aa34  fa 07

lab_aa36:
    mov a,#0x01             ;aa36  a1 01
    cmp a,#0x00             ;aa38  4d 00
    ret                     ;aa3a  af

lab_aa3b:
    mov a,#0xff             ;aa3b  a1 ff

lab_aa3d:
    cmp a,mem_fe58          ;aa3d  4e 58
    ret                     ;aa3f  af

sub_aa40:
    call !sub_aa14          ;aa40  9a 14 aa
    bnz lab_aa47            ;aa43  bd 02
    br lab_aa91             ;aa45  fa 4a

lab_aa47:
    bt mem_fe77.2,lab_aa4d  ;aa47  ac 77 03
    br !sub_a70c            ;aa4a  9b 0c a7

lab_aa4d:
    bt mem_fe2d.2,lab_aa51  ;aa4d  ac 2d 01
    ret                     ;aa50  af

lab_aa51:
    cmp a,#0x00             ;aa51  4d 00
    bz lab_aa75             ;aa53  ad 20
    cmp a,#0x01             ;aa55  4d 01
    bnz lab_aa6b            ;aa57  bd 12
    push ax                 ;aa59  b1
    set1 mem_fe76.4         ;aa5a  4a 76
    call !sub_0800_mode     ;aa5c  9a 00 08     Return mem_f253 in A (0x00=?, 0x01=FM1/FM2, 0x02=AM), also copy it into mem_fb58
    cmp a,#0x01             ;aa5f  4d 01
    bz lab_aa65_fm          ;aa61  ad 02
    ;mem_f253 != 0x01 (must be AM)
    clr1 mem_fe76.4         ;aa63  4b 76

lab_aa65_fm:
    pop ax                  ;aa65  b0
    cmp mem_fe58,#0x01      ;aa66  c8 58 01
    bz lab_aa6d             ;aa69  ad 02

lab_aa6b:
    set1 mem_fe73.0         ;aa6b  0a 73

lab_aa6d:
    set1 mem_fe73.1         ;aa6d  1a 73
    set1 mem_fe73.3         ;aa6f  3a 73
    set1 mem_fe73.5         ;aa71  5a 73
    set1 mem_fe73.4         ;aa73  4a 73

lab_aa75:
    mov mem_fe58,a          ;aa75  f2 58
    mov mem_fe59,#0x00      ;aa77  11 59 00
    mov mem_fe5a,#0x00      ;aa7a  11 5a 00
    set1 mem_fe77.4         ;aa7d  4a 77
    call !sub_a7b9          ;aa7f  9a b9 a7
    call !sub_a7ee          ;aa82  9a ee a7
    mov a,!mem_fb1f         ;aa85  8e 1f fb
    cmp a,#0x19             ;aa88  4d 19
    bnc lab_aa91            ;aa8a  9d 05
    mov a,#0x19             ;aa8c  a1 19
    mov a,!mem_fb1f         ;aa8e  8e 1f fb

lab_aa91:
    ret                     ;aa91  af

lab_aa92:
    call !sub_a6d2          ;aa92  9a d2 a6
    call !sub_aa9c          ;aa95  9a 9c aa
    ret                     ;aa98  af

lab_aa99:
    set1 mem_fe77.4         ;aa99  4a 77
    ret                     ;aa9b  af

sub_aa9c:
    movw de,#mem_fc9d       ;aa9c  14 9d fc
    movw hl,#mem_fe58       ;aa9f  16 58 fe
    mov b,#0x01             ;aaa2  a3 01
    callf !sub_0bef         ;aaa4  3c ef

    movw hl,#mem_fc9b       ;aaa6  16 9b fc
    mov b,#0x02             ;aaa9  a3 02
    br !sub_0bf6            ;aaab  9b f6 0b

sub_aaae:
    mov a,!mem_f257_fade    ;aaae  8e 57 f2
    call !sub_aaba          ;aab1  9a ba aa
    movw hl,#mem_f257_fade  ;aab4  16 57 f2
    call !eeram_wr_byte_hl  ;aab7  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

sub_aaba:
    bf a.7,lab_aac0         ;aaba  31 7f 03
    mov a,#0x00             ;aabd  a1 00
    ret                     ;aabf  af

lab_aac0:
    cmp a,#0x15             ;aac0  4d 15
    bc lab_aac6             ;aac2  8d 02
    mov a,#0x14             ;aac4  a1 14

lab_aac6:
    ret                     ;aac6  af

sub_aac7:
    mov a,!mem_f258_bal     ;aac7  8e 58 f2
    call !sub_aad3          ;aaca  9a d3 aa
    movw hl,#mem_f258_bal   ;aacd  16 58 f2
    call !eeram_wr_byte_hl  ;aad0  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum

sub_aad3:
    bf a.7,lab_aad9         ;aad3  31 7f 03
    mov a,#0x00             ;aad6  a1 00
    ret                     ;aad8  af

lab_aad9:
    cmp a,#0x15             ;aad9  4d 15
    bc lab_aadf             ;aadb  8d 02
    mov a,#0x14             ;aadd  a1 14

lab_aadf:
    ret                     ;aadf  af

sub_aae0:
    call !sub_ab0a          ;aae0  9a 0a ab
    cmp mem_feda,#0x00      ;aae3  c8 da 00
    bnz lab_aaea            ;aae6  bd 02
    sub a,mem_fe59          ;aae8  1e 59

lab_aaea:
    cmp mem_feda,#0x00      ;aaea  c8 da 00
    bnz lab_aafa            ;aaed  bd 0b
    bt mem_fe74.6,lab_aafa  ;aaef  ec 74 08
    cmp a,!mem_fc99         ;aaf2  48 99 fc
    bc lab_aafa             ;aaf5  8d 03
    mov a,!mem_fc99         ;aaf7  8e 99 fc

lab_aafa:
    br lab_aafe             ;aafa  fa 02

lab_aafc:
    mov a,#0x0a             ;aafc  a1 0a

lab_aafe:
    bf a.7,lab_ab03         ;aafe  31 7f 02
    mov a,#0x00             ;ab01  a1 00

lab_ab03:
    cmp a,#0x15             ;ab03  4d 15
    bc lab_ab09             ;ab05  8d 02
    mov a,#0x14             ;ab07  a1 14

lab_ab09:
    ret                     ;ab09  af

sub_ab0a:
    dec b                   ;ab0a  53
    mov a,b                 ;ab0b  63
    bt a.7,lab_aafc         ;ab0c  31 7e ed
    mov mem_fed9,a          ;ab0f  f2 d9
    cmp a,#0x03             ;ab11  4d 03
    bnc lab_aafc            ;ab13  9d e7
    mov mem_feda,a          ;ab15  f2 da
    mov b,a                 ;ab17  73
    mov a,mem_feda          ;ab18  f0 da
    mov b,a                 ;ab1a  73
    movw hl,#mem_f259_bass  ;ab1b  16 59 f2     HL = address of BASS
    mov a,[hl+b]            ;ab1e  ab
    bf a.7,lab_ab26         ;ab1f  31 7f 04
    mov a,#0x00             ;ab22  a1 00
    br lab_ab2c             ;ab24  fa 06

lab_ab26:
    cmp a,#0x15             ;ab26  4d 15
    bc lab_ab32             ;ab28  8d 08
    mov a,#0x14             ;ab2a  a1 14

lab_ab2c:
    movw hl,#mem_f259_bass  ;ab2c  16 59 f2     HL = Address of BASS
    call !eeram_wr_byte_hl_b;ab2f  9a 8f 40     Write A to EEPROM area in RAM at [HL+B], add to checksum

lab_ab32:
    ret                     ;ab32  af

lab_ab33:
    bf mem_fe2c.5,sub_ab3c  ;ab33  31 53 2c 05
    mov a,!mem_fe57         ;ab37  8e 57 fe
    br lab_ab61             ;ab3a  fa 25

sub_ab3c:
;unknown, called only if logged in
    clr1 mem_fe76.2         ;ab3c  2b 76
    mov a,#0x00             ;ab3e  a1 00
    mov mem_fe5a,a          ;ab40  f2 5a
    mov mem_fe59,a          ;ab42  f2 59
    mov a,#0x0a             ;ab44  a1 0a
    mov !mem_fc8c,a         ;ab46  9e 8c fc
    mov !mem_fc8d,a         ;ab49  9e 8d fc
    set1 mem_fe75.3         ;ab4c  3a 75
    mov a,!mem_f268         ;ab4e  8e 68 f2
    mov b,a                 ;ab51  73
    mov a,!mem_f254_onvol   ;ab52  8e 54 f2     A=ONVOL
    cmp a,b                 ;ab55  61 4b
    bc lab_ab5a             ;ab57  8d 01
    mov a,b                 ;ab59  63

lab_ab5a:
    set1 mem_fe76.5         ;ab5a  5a 76
    mov !mem_fe57,a         ;ab5c  9e 57 fe
    set1 mem_fe73.3         ;ab5f  3a 73

lab_ab61:
    cmp a,#0x00             ;ab61  4d 00
    bnz lab_ab6b            ;ab63  bd 06
    mov a,#0x00             ;ab65  a1 00
    mov !mem_fc9f,a         ;ab67  9e 9f fc
    ret                     ;ab6a  af

lab_ab6b:
    cmp a,#0x7a             ;ab6b  4d 7a
    bc lab_ab75             ;ab6d  8d 06
    mov a,#0xff             ;ab6f  a1 ff
    mov !mem_fc9f,a         ;ab71  9e 9f fc
    ret                     ;ab74  af

lab_ab75:
    mov a,#0x55             ;ab75  a1 55
    mov !mem_fc9f,a         ;ab77  9e 9f fc
    ret                     ;ab7a  af

read_3_analogs:
;Table-driven analog input routine
;
;Reads 3 analog inputs and stores the readings in mem_fca2_ani_t30-mem_fca4_ani
;
    bf mem_fe2d.0,lab_abc2_ret  ;ab7b  31 03 2d 43  If mem_fe2d.0=1, branch to just return
    bt mem_fe31.1,lab_abc2_ret  ;ab7f  9c 31 40     If mem_fe31.1=1, branch to just return

    mov mem_fed6,#0x03          ;ab82  11 d6 03     mem_fed6 = 3 groups to read in table
    movw hl,#mem_d0e9_analogs+1 ;ab85  16 ea d0     HL = pointer to table of analog inputs to read
    movw de,#mem_fca2_ani_t30   ;ab88  14 a2 fc     DE = destination address to store analog reading

lab_ab8b_loop:
    mov a,[hl+0x00]         ;ab8b  ae 00
    mov x,a                 ;ab8d  70
    mov a,[hl+0x01]         ;ab8e  ae 01
    push hl                 ;ab90  b7
    call !read_analog       ;ab91  9a c3 ab     Read analog input number A and do ???
    pop hl                  ;ab94  b6
    bc lab_abb9             ;ab95  8d 22        Branch if analog read failed
    mov x,a                 ;ab97  70
    mov a,[hl+0x02]         ;ab98  ae 02
    bf a.7,lab_aba3         ;ab9a  31 7f 06
    and a,#0x7f             ;ab9d  5d 7f
    xch a,x                 ;ab9f  30
    xor a,#0xff             ;aba0  7d ff
    xch a,x                 ;aba2  30

lab_aba3:
    mov b,a                 ;aba3  73
    mov a,[de]              ;aba4  85
    sub a,x                 ;aba5  61 18
    bnc lab_abac            ;aba7  9d 03
    xor a,#0xff             ;aba9  7d ff
    inc a                   ;abab  41

lab_abac:
    cmp a,b                 ;abac  61 4b
    bc lab_abb9             ;abae  8d 09
    mov a,x                 ;abb0  60
    mov [de],a              ;abb1  95
    mov a,[hl+0x03]         ;abb2  ae 03
    push hl                 ;abb4  b7
    call !sub_912e          ;abb5  9a 2e 91
    pop hl                  ;abb8  b6

lab_abb9:
    incw de                 ;abb9  84
    movw ax,hl              ;abba  c6
    addw ax,#0x0004         ;abbb  ca 04 00
    movw hl,ax              ;abbe  d6
    dbnz mem_fed6,lab_ab8b_loop  ;abbf  04 d6 c9  Decrement number of groups to read,
                                 ;                  loop until done.

lab_abc2_ret:
    ret                     ;abc2  af

read_analog:
;Read analog input number A and do ???
;
;Call with:
;  A = analog input number
;
;Returns:
;  AX = ???
;  carry set = failed, carry clear = success
;
    call !sub_abf5          ;abc3  9a f5 ab   Read analog input number A
    bc lab_abef_failed      ;abc6  8d 27      Branch if analog read failed
    mov c,a                 ;abc8  72
    mov a,x                 ;abc9  60
    cmp a,#127              ;abca  4d 7f      127 = 12.7 V
    bnz lab_abd3            ;abcc  bd 05
    mov a,c                 ;abce  62
    mov x,#0x00             ;abcf  a0 00
    br lab_abeb             ;abd1  fa 18

lab_abd3:
    call !sub_abf5          ;abd3  9a f5 ab   Read analog input number A
    bc lab_abef_failed      ;abd6  8d 17      Branch if analog read failed
    cmp a,#0x55             ;abd8  4d 55
    bc lab_abef_failed      ;abda  8d 13
    xch a,c                 ;abdc  32
    cmp a,c                 ;abdd  61 4a
    bc lab_abe6             ;abdf  8d 05
    movw ax,#0xffff         ;abe1  10 ff ff
    br lab_abeb             ;abe4  fa 05

lab_abe6:
    mov x,#0x00             ;abe6  a0 00
    divuw c                 ;abe8  31 82      AX = AX / C
    xch a,x                 ;abea  30

lab_abeb:
    clr1 cy                 ;abeb  21

lab_abec:
    clr1 mem_fe78.1         ;abec  1b 78
    ret                     ;abee  af

lab_abef_failed:
    set1 cy                 ;abef  20
    movw ax,#0x0000         ;abf0  10 00 00
    br lab_abec             ;abf3  fa f7


sub_abf5:
;Read analog input number A
;
;Call with:
;  A = analog input number
;        0x00 = P90/ANI00    0x08 = P80/ANI01
;        0x01 = P91/ANI10    0x09 = P81/ANI11
;        0x02 = P92/ANI20    0x0A = P82/ANI21
;        0x03 = P93/ANI30    0x0B = P83/ANI31
;        0x04 = P94/ANI40    0x0C = P84/ANI41
;        0x05 = P95/ANI50    0x0D = P85/ANI51
;        0x06 = P96/ANI60    0x0E = P86/ANI61
;        0x07 = P97/ANI70    0x0F = P87/ANI71
;
;Returns:
;  A = value read from an A/D conversion result register
;  carry set = failed, carry clear = success
    bt a.3,lab_ac25         ;abf5  31 3e 2d       If bit 3 is set, branch to handle P80-P87 group

    ;Set corresponding port mode bit in PM9 to input
    and a,#0b00000111       ;abf8  5d 07
    mov b,a                 ;abfa  73
    movw hl,#mem_af75_patterns ;abfb  16 75 af       HL = pointer to table of bit patterns
    mov a,pm9               ;abfe  f4 29
    or a,[hl+b]             ;ac00  31 6b          OR with mask to turn a bit on (make it an input)
    mov pm9,a               ;ac02  f6 29

    mov a,b                 ;ac04  63
    mov ads00,a             ;ac05  f6 81
    mov adm00,#0x00         ;ac07  13 80 00
    clr1 if1l.5             ;ac0a  71 5b e2       Clear ADIF00 (INTAD00 interrupt flag)
    set1 mk1l.5             ;ac0d  71 5a e6       Set ADMK00 (disables INTAD00)
    set1 adm00.7            ;ac10  71 7a 80

    mov b,#0x1e             ;ac13  a3 1e          0x1E = number of loops to busy wait
lab_ac15:
    bt if1l.5,lab_ac1e      ;ac15  31 56 e2 05    Branch if ADIF00 (INTAD00 interrupt flag) is set
    dbnz b,lab_ac15         ;ac19  8b fa          Busy wait until ADIF00 is set or timeout

    ;Timeout waiting for ADIF00=1
    set1 cy                 ;ac1b  20             Set carry to indicate timeout
    br lab_ac21             ;ac1c  fa 03          Branch to clear ADM00 and then RET

lab_ac1e:
    mov a,adcr00            ;ac1e  f0 17          A = A/D conversion result register 00
    clr1 cy                 ;ac20  21

lab_ac21:
    mov adm00,#0x00         ;ac21  13 80 00
    ret                     ;ac24  af

lab_ac25:
    ;Set corresponding port mode bit in PM8 to input
    and a,#0b00000111       ;ac25  5d 07
    mov b,a                 ;ac27  73
    movw hl,#mem_af75_patterns ;ac28  16 75 af     HL = pointer to table of bit patterns
    mov a,pm8               ;ac2b  f4 28
    or a,[hl+b]             ;ac2d  31 6b        OR with mask to turn a bit on (make it an input)
    mov pm8,a               ;ac2f  f6 28

    mov a,b                 ;ac31  63
    mov ads01,a             ;ac32  f6 89
    mov adm01,#0x00         ;ac34  13 88 00
    clr1 if1l.6             ;ac37  71 6b e2     Clear ADIF01 (INTAD01 interrupt flag)
    set1 mk1l.6             ;ac3a  71 6a e6     Set ADMK01 (disables INTAD01)
    set1 adm01.7            ;ac3d  71 7a 88

    mov b,#0x1e             ;ac40  a3 1e        0x1E = number of loops to busy wait
lab_ac42:
    bt if1l.6,lab_ac4b      ;ac42  31 66 e2 05  Branch if ADIF01 (INTAD01 interrupt flag) is set
    dbnz b,lab_ac42         ;ac46  8b fa        Busy wait until ADIF00 is set or timeout

    ;Timeout waiting for ADIF01=1
    set1 cy                 ;ac48  20           Set carry to indicate timeout
    br lab_ac4e             ;ac49  fa 03        Branch to clear ADM01 and then RET

lab_ac4b:
    mov a,adcr01            ;ac4b  f4 8b
    clr1 cy                 ;ac4d  21

lab_ac4e:
    mov adm01,#0x00         ;ac4e  13 88 00
    ret                     ;ac51  af

    .byte 0x2b              ;ac52  2b          DATA 0x2b '+'
    .byte 0x60              ;ac53  60          DATA 0x60 '`'
    .byte 0x09              ;ac54  09          DATA 0x09
    .byte 0x06              ;ac55  06          DATA 0x06
    .byte 0x07              ;ac56  07          DATA 0x07
    .byte 0x60              ;ac57  60          DATA 0x60 '`'
    .byte 0x13              ;ac58  13          DATA 0x13
    .byte 0xce              ;ac59  ce          DATA 0xce
    .byte 0x13              ;ac5a  13          DATA 0x13
    .byte 0xa1              ;ac5b  a1          DATA 0xa1
    .byte 0x13              ;ac5c  13          DATA 0x13
    .byte 0x60              ;ac5d  60          DATA 0x60 '`'
    .byte 0x14              ;ac5e  14          DATA 0x14
    .byte 0xce              ;ac5f  ce          DATA 0xce
    .byte 0x14              ;ac60  14          DATA 0x14
    .byte 0xa1              ;ac61  a1          DATA 0xa1
    .byte 0x14              ;ac62  14          DATA 0x14
    .byte 0x60              ;ac63  60          DATA 0x60 '`'
    .byte 0x04              ;ac64  04          DATA 0x04
    .byte 0x20              ;ac65  20          DATA 0x20 ' '
    .byte 0x15              ;ac66  15          DATA 0x15
    .byte 0x42              ;ac67  42          DATA 0x42 'B'
    .byte 0x0d              ;ac68  0d          DATA 0x0d
    .byte 0xe2              ;ac69  e2          DATA 0xe2
    .byte 0x18              ;ac6a  18          DATA 0x18
    .byte 0x0b              ;ac6b  0b          DATA 0x0b
    .byte 0x0d              ;ac6c  0d          DATA 0x0d
    .byte 0x43              ;ac6d  43          DATA 0x43 'C'
    .byte 0x0d              ;ac6e  0d          DATA 0x0d
    .byte 0xe2              ;ac6f  e2          DATA 0xe2
    .byte 0x18              ;ac70  18          DATA 0x18
    .byte 0x0b              ;ac71  0b          DATA 0x0b
    .byte 0x0d              ;ac72  0d          DATA 0x0d
    .byte 0x42              ;ac73  42          DATA 0x42 'B'
    .byte 0x0e              ;ac74  0e          DATA 0x0e
    .byte 0xe2              ;ac75  e2          DATA 0xe2
    .byte 0x19              ;ac76  19          DATA 0x19
    .byte 0x0b              ;ac77  0b          DATA 0x0b
    .byte 0x0e              ;ac78  0e          DATA 0x0e
    .byte 0x43              ;ac79  43          DATA 0x43 'C'
    .byte 0x0e              ;ac7a  0e          DATA 0x0e
    .byte 0xe2              ;ac7b  e2          DATA 0xe2
    .byte 0x19              ;ac7c  19          DATA 0x19
    .byte 0x0b              ;ac7d  0b          DATA 0x0b
    .byte 0x0e              ;ac7e  0e          DATA 0x0e
    .byte 0x46              ;ac7f  46          DATA 0x46 'F'
    .byte 0x0c              ;ac80  0c          DATA 0x0c
    .byte 0x26              ;ac81  26          DATA 0x26 '&'
    .byte 0x00              ;ac82  00          DATA 0x00
    .byte 0x60              ;ac83  60          DATA 0x60 '`'
    .byte 0x0f              ;ac84  0f          DATA 0x0f
    .byte 0x7f              ;ac85  7f          DATA 0x7f
    .byte 0x1c              ;ac86  1c          DATA 0x1c
    .byte 0x60              ;ac87  60          DATA 0x60 '`'
    .byte 0x10              ;ac88  10          DATA 0x10
    .byte 0x46              ;ac89  46          DATA 0x46 'F'
    .byte 0x11              ;ac8a  11          DATA 0x11
    .byte 0x66              ;ac8b  66          DATA 0x66 'f'
    .byte 0x92              ;ac8c  92          DATA 0x92
    .byte 0x0b              ;ac8d  0b          DATA 0x0b
    .byte 0x03              ;ac8e  03          DATA 0x03
    .byte 0x60              ;ac8f  60          DATA 0x60 '`'
    .byte 0x03              ;ac90  03          DATA 0x03
    .byte 0x66              ;ac91  66          DATA 0x66 'f'
    .byte 0x8b              ;ac92  8b          DATA 0x8b
    .byte 0x48              ;ac93  48          DATA 0x48 'H'
    .byte 0x0c              ;ac94  0c          DATA 0x0c
    .byte 0x28              ;ac95  28          DATA 0x28 '('
    .byte 0xc8              ;ac96  c8          DATA 0xc8
    .byte 0x60              ;ac97  60          DATA 0x60 '`'
    .byte 0x03              ;ac98  03          DATA 0x03
    .byte 0x66              ;ac99  66          DATA 0x66 'f'
    .byte 0x8b              ;ac9a  8b          DATA 0x8b
    .byte 0x48              ;ac9b  48          DATA 0x48 'H'
    .byte 0x0c              ;ac9c  0c          DATA 0x0c
    .byte 0x28              ;ac9d  28          DATA 0x28 '('
    .byte 0xc8              ;ac9e  c8          DATA 0xc8
    .byte 0x60              ;ac9f  60          DATA 0x60 '`'
    .byte 0x09              ;aca0  09          DATA 0x09
    .byte 0x7f              ;aca1  7f          DATA 0x7f
    .byte 0x0b              ;aca2  0b          DATA 0x0b
    .byte 0x60              ;aca3  60          DATA 0x60 '`'
    .byte 0x09              ;aca4  09          DATA 0x09
    .byte 0x7f              ;aca5  7f          DATA 0x7f
    .byte 0x11              ;aca6  11          DATA 0x11

mem_aca7:
    .byte 0x2a              ;aca7  2a          DATA 0x2a '*'
    .byte 0x52              ;aca8  52          DATA 0x52 'R'
    .byte 0xac              ;aca9  ac          DATA 0xac
    .byte 0x26              ;acaa  26          DATA 0x26 '&'
    .byte 0x10              ;acab  10          DATA 0x10
    .byte 0x02              ;acac  02          DATA 0x02
    .byte 0x26              ;acad  26          DATA 0x26 '&'
    .byte 0xff              ;acae  ff          DATA 0xff
    .byte 0x01              ;acaf  01          DATA 0x01
    .byte 0x32              ;acb0  32          DATA 0x32 '2'
    .byte 0xff              ;acb1  ff          DATA 0xff
    .byte 0x16              ;acb2  16          DATA 0x16
    .byte 0x17              ;acb3  17          DATA 0x17
    .byte 0x01              ;acb4  01          DATA 0x01
    .byte 0x17              ;acb5  17          DATA 0x17
    .byte 0x17              ;acb6  17          DATA 0x17
    .byte 0xff              ;acb7  ff          DATA 0xff
    .byte 0x06              ;acb8  06          DATA 0x06
    .byte 0x16              ;acb9  16          DATA 0x16
    .byte 0xff              ;acba  ff          DATA 0xff
    .byte 0x05              ;acbb  05          DATA 0x05
    .byte 0x48              ;acbc  48          DATA 0x48 'H'
    .byte 0x0e              ;acbd  0e          DATA 0x0e
    .byte 0x07              ;acbe  07          DATA 0x07
    .byte 0x1c              ;acbf  1c          DATA 0x1c
    .byte 0x1e              ;acc0  1e          DATA 0x1e
    .byte 0x83              ;acc1  83          DATA 0x83
    .byte 0x1d              ;acc2  1d          DATA 0x1d
    .byte 0x1e              ;acc3  1e          DATA 0x1e
    .byte 0x86              ;acc4  86          DATA 0x86
    .byte 0x0a              ;acc5  0a          DATA 0x0a
    .byte 0x1e              ;acc6  1e          DATA 0x1e
    .byte 0x83              ;acc7  83          DATA 0x83
    .byte 0x0b              ;acc8  0b          DATA 0x0b
    .byte 0x1e              ;acc9  1e          DATA 0x1e
    .byte 0x86              ;acca  86          DATA 0x86
    .byte 0x20              ;accb  20          DATA 0x20 ' '
    .byte 0x02              ;accc  02          DATA 0x02
    .byte 0x8e              ;accd  8e          DATA 0x8e
    .byte 0x20              ;acce  20          DATA 0x20 ' '
    .byte 0x04              ;accf  04          DATA 0x04
    .byte 0x03              ;acd0  03          DATA 0x03
    .byte 0x20              ;acd1  20          DATA 0x20 ' '
    .byte 0x18              ;acd2  18          DATA 0x18
    .byte 0x8e              ;acd3  8e          DATA 0x8e
    .byte 0x08              ;acd4  08          DATA 0x08
    .byte 0x02              ;acd5  02          DATA 0x02
    .byte 0x8b              ;acd6  8b          DATA 0x8b
    .byte 0x08              ;acd7  08          DATA 0x08
    .byte 0x04              ;acd8  04          DATA 0x04
    .byte 0x03              ;acd9  03          DATA 0x03
    .byte 0x08              ;acda  08          DATA 0x08
    .byte 0x18              ;acdb  18          DATA 0x18
    .byte 0x8b              ;acdc  8b          DATA 0x8b
    .byte 0x21              ;acdd  21          DATA 0x21 '!'
    .byte 0x02              ;acde  02          DATA 0x02
    .byte 0x94              ;acdf  94          DATA 0x94
    .byte 0x21              ;ace0  21          DATA 0x21 '!'
    .byte 0x04              ;ace1  04          DATA 0x04
    .byte 0x03              ;ace2  03          DATA 0x03
    .byte 0x21              ;ace3  21          DATA 0x21 '!'
    .byte 0x18              ;ace4  18          DATA 0x18
    .byte 0x94              ;ace5  94          DATA 0x94
    .byte 0x09              ;ace6  09          DATA 0x09
    .byte 0x02              ;ace7  02          DATA 0x02
    .byte 0x91              ;ace8  91          DATA 0x91
    .byte 0x09              ;ace9  09          DATA 0x09
    .byte 0x04              ;acea  04          DATA 0x04
    .byte 0x03              ;aceb  03          DATA 0x03
    .byte 0x09              ;acec  09          DATA 0x09
    .byte 0x18              ;aced  18          DATA 0x18
    .byte 0x91              ;acee  91          DATA 0x91
    .byte 0x07              ;acef  07          DATA 0x07
    .byte 0x02              ;acf0  02          DATA 0x02
    .byte 0x97              ;acf1  97          DATA 0x97
    .byte 0x07              ;acf2  07          DATA 0x07
    .byte 0x08              ;acf3  08          DATA 0x08
    .byte 0x0a              ;acf4  0a          DATA 0x0a
    .byte 0x07              ;acf5  07          DATA 0x07
    .byte 0x04              ;acf6  04          DATA 0x04
    .byte 0x97              ;acf7  97          DATA 0x97
    .byte 0x44              ;acf8  44          DATA 0x44 'D'
    .byte 0x0c              ;acf9  0c          DATA 0x0c
    .byte 0x0a              ;acfa  0a          DATA 0x0a
    .byte 0x45              ;acfb  45          DATA 0x45 'E'
    .byte 0x0c              ;acfc  0c          DATA 0x0c
    .byte 0x0a              ;acfd  0a          DATA 0x0a
    .byte 0x46              ;acfe  46          DATA 0x46 'F'
    .byte 0x0c              ;acff  0c          DATA 0x0c
    .byte 0x0a              ;ad00  0a          DATA 0x0a
    .byte 0x47              ;ad01  47          DATA 0x47 'G'
    .byte 0x0c              ;ad02  0c          DATA 0x0c
    .byte 0x0a              ;ad03  0a          DATA 0x0a
    .byte 0x01              ;ad04  01          DATA 0x01
    .byte 0x12              ;ad05  12          DATA 0x12
    .byte 0x9b              ;ad06  9b          DATA 0x9b
    .byte 0x01              ;ad07  01          DATA 0x01
    .byte 0x0c              ;ad08  0c          DATA 0x0c
    .byte 0x99              ;ad09  99          DATA 0x99
    .byte 0x02              ;ad0a  02          DATA 0x02
    .byte 0x12              ;ad0b  12          DATA 0x12
    .byte 0x9b              ;ad0c  9b          DATA 0x9b
    .byte 0x02              ;ad0d  02          DATA 0x02
    .byte 0x0c              ;ad0e  0c          DATA 0x0c
    .byte 0x99              ;ad0f  99          DATA 0x99
    .byte 0x03              ;ad10  03          DATA 0x03
    .byte 0x12              ;ad11  12          DATA 0x12
    .byte 0x9b              ;ad12  9b          DATA 0x9b
    .byte 0x03              ;ad13  03          DATA 0x03
    .byte 0x0c              ;ad14  0c          DATA 0x0c
    .byte 0x99              ;ad15  99          DATA 0x99
    .byte 0x04              ;ad16  04          DATA 0x04
    .byte 0x12              ;ad17  12          DATA 0x12
    .byte 0x9b              ;ad18  9b          DATA 0x9b
    .byte 0x04              ;ad19  04          DATA 0x04
    .byte 0x0c              ;ad1a  0c          DATA 0x0c
    .byte 0x99              ;ad1b  99          DATA 0x99
    .byte 0x05              ;ad1c  05          DATA 0x05
    .byte 0x12              ;ad1d  12          DATA 0x12
    .byte 0x9b              ;ad1e  9b          DATA 0x9b
    .byte 0x05              ;ad1f  05          DATA 0x05
    .byte 0x0c              ;ad20  0c          DATA 0x0c
    .byte 0x99              ;ad21  99          DATA 0x99
    .byte 0x06              ;ad22  06          DATA 0x06
    .byte 0x12              ;ad23  12          DATA 0x12
    .byte 0x9b              ;ad24  9b          DATA 0x9b
    .byte 0x06              ;ad25  06          DATA 0x06
    .byte 0x0c              ;ad26  0c          DATA 0x0c
    .byte 0x99              ;ad27  99          DATA 0x99
    .byte 0x03              ;ad28  03          DATA 0x03
    .byte 0x52              ;ad29  52          DATA 0x52 'R'
    .byte 0xac              ;ad2a  ac          DATA 0xac
    .byte 0x26              ;ad2b  26          DATA 0x26 '&'
    .byte 0x10              ;ad2c  10          DATA 0x10
    .byte 0x02              ;ad2d  02          DATA 0x02
    .byte 0x26              ;ad2e  26          DATA 0x26 '&'
    .byte 0xff              ;ad2f  ff          DATA 0xff
    .byte 0x01              ;ad30  01          DATA 0x01
    .byte 0x32              ;ad31  32          DATA 0x32 '2'
    .byte 0xff              ;ad32  ff          DATA 0xff
    .byte 0x16              ;ad33  16          DATA 0x16

mem_ad34_freq_tables:
;Table of pointers to frequency info tables
;table of words used with table_get_word
    .byte 0x08              ;ad34  08          DATA 0x08        8 entries below:
    .word mem_ad45_region_0_4_5_6+1 ;Region 0
    .word mem_ad5a_region_1+1       ;Region 1
    .word mem_ad6f_region_2+1       ;Region 2
    .word mem_ad84_region_3+1       ;Region 3
    .word mem_ad45_region_0_4_5_6+1 ;Region 4
    .word mem_ad45_region_0_4_5_6+1 ;Region 5
    .word mem_ad45_region_0_4_5_6+1 ;Region 6
    .word mem_ad99_region_7+1       ;Region 7

mem_ad45_region_0_4_5_6:
    .byte 0x03              ;ad45  03          DATA 0x03        ?
    .byte 0x10              ;ad46  10          DATA 0x10        0
    .byte 0x04              ;ad47  04          DATA 0x04        1
    .byte 0x07              ;ad48  07          DATA 0x07        2
    .byte 0xac              ;ad49  ac          DATA 0xac        3
    .byte 0x66              ;ad4a  66          DATA 0x66 'f'    4 = 0x66
    .byte 0x3b              ;ad4b  3b          DATA 0x3b ';'
    .byte 0x11              ;ad4c  11          DATA 0x11
    .byte 0x04              ;ad4d  04          DATA 0x04
    .byte 0x07              ;ad4e  07          DATA 0x07
    .byte 0xac              ;ad4f  ac          DATA 0xac
    .byte 0x66              ;ad50  66          DATA 0x66 'f'
    .byte 0x3b              ;ad51  3b          DATA 0x3b ';'
    .byte 0x22              ;ad52  22          DATA 0x22 '"'
    .byte 0x0a              ;ad53  0a          DATA 0x0a
    .byte 0x2b              ;ad54  2b          DATA 0x2b '+'
    .byte 0xd4              ;ad55  d4          DATA 0xd4
    .byte 0x77              ;ad56  77          DATA 0x77 'w'
    .byte 0x00              ;ad57  00          DATA 0x00
    .byte 0x27              ;ad58  27          DATA 0x27 '''
    .byte 0xc4              ;ad59  c4          DATA 0xc4

mem_ad5a_region_1:
    .byte 0x03              ;ad5a  03          DATA 0x03        ?
    .byte 0x10              ;ad5b  10          DATA 0x10        0
    .byte 0x02              ;ad5c  02          DATA 0x02        1
    .byte 0x06              ;ad5d  06          DATA 0x06        2
    .byte 0xc4              ;ad5e  c4          DATA 0xc4        3
    .byte 0x8d              ;ad5f  8d          DATA 0x8d        4 = 0x8d
    .byte 0x00              ;ad60  00          DATA 0x00
    .byte 0x11              ;ad61  11          DATA 0x11
    .byte 0x02              ;ad62  02          DATA 0x02
    .byte 0x06              ;ad63  06          DATA 0x06
    .byte 0xc4              ;ad64  c4          DATA 0xc4
    .byte 0x8d              ;ad65  8d          DATA 0x8d
    .byte 0x00              ;ad66  00          DATA 0x00
    .byte 0x22              ;ad67  22          DATA 0x22 '"'
    .byte 0x09              ;ad68  09          DATA 0x09
    .byte 0x2b              ;ad69  2b          DATA 0x2b '+'
    .byte 0xcd              ;ad6a  cd          DATA 0xcd
    .byte 0x7c              ;ad6b  7c          DATA 0x7c '|'
    .byte 0x00              ;ad6c  00          DATA 0x00
    .byte 0x27              ;ad6d  27          DATA 0x27 '''
    .byte 0xcb              ;ad6e  cb          DATA 0xcb

mem_ad6f_region_2:
    .byte 0x03              ;ad6f  03          DATA 0x03        ?
    .byte 0x10              ;ad70  10          DATA 0x10        0
    .byte 0x02              ;ad71  02          DATA 0x02        1
    .byte 0x07              ;ad72  07          DATA 0x07        2
    .byte 0xaa              ;ad73  aa          DATA 0xaa        3
    .byte 0xce              ;ad74  ce          DATA 0xce        4 = 0xce
    .byte 0x3a              ;ad75  3a          DATA 0x3a ':'
    .byte 0x11              ;ad76  11          DATA 0x11
    .byte 0x02              ;ad77  02          DATA 0x02
    .byte 0x07              ;ad78  07          DATA 0x07
    .byte 0xaa              ;ad79  aa          DATA 0xaa
    .byte 0xce              ;ad7a  ce          DATA 0xce
    .byte 0x3a              ;ad7b  3a          DATA 0x3a ':'
    .byte 0x22              ;ad7c  22          DATA 0x22 '"'
    .byte 0x09              ;ad7d  09          DATA 0x09
    .byte 0x2b              ;ad7e  2b          DATA 0x2b '+'
    .byte 0xd6              ;ad7f  d6          DATA 0xd6
    .byte 0x7b              ;ad80  7b          DATA 0x7b '{'
    .byte 0x00              ;ad81  00          DATA 0x00
    .byte 0x27              ;ad82  27          DATA 0x27 '''
    .byte 0xc2              ;ad83  c2          DATA 0xc2

mem_ad84_region_3:
    .byte 0x03              ;ad84  03          DATA 0x03        ?
    .byte 0x10              ;ad85  10          DATA 0x10        0
    .byte 0x02              ;ad86  02          DATA 0x02        1
    .byte 0x07              ;ad87  07          DATA 0x07        2
    .byte 0xaa              ;ad88  aa          DATA 0xaa        3
    .byte 0xce              ;ad89  ce          DATA 0xce        4 = 0xce
    .byte 0x3a              ;ad8a  3a          DATA 0x3a ':'
    .byte 0x11              ;ad8b  11          DATA 0x11
    .byte 0x02              ;ad8c  02          DATA 0x02
    .byte 0x07              ;ad8d  07          DATA 0x07
    .byte 0xaa              ;ad8e  aa          DATA 0xaa
    .byte 0xce              ;ad8f  ce          DATA 0xce
    .byte 0x3a              ;ad90  3a          DATA 0x3a ':'
    .byte 0x22              ;ad91  22          DATA 0x22 '"'
    .byte 0x09              ;ad92  09          DATA 0x09
    .byte 0x2b              ;ad93  2b          DATA 0x2b '+'
    .byte 0xd6              ;ad94  d6          DATA 0xd6
    .byte 0x7a              ;ad95  7a          DATA 0x7a 'z'
    .byte 0x00              ;ad96  00          DATA 0x00
    .byte 0x27              ;ad97  27          DATA 0x27 '''
    .byte 0xc2              ;ad98  c2          DATA 0xc2

mem_ad99_region_7:
    .byte 0x03              ;ad99  03          DATA 0x03        ?
    .byte 0x10              ;ad9a  10          DATA 0x10        0
    .byte 0x04              ;ad9b  04          DATA 0x04        1
    .byte 0x06              ;ad9c  06          DATA 0x06        2
    .byte 0xc0              ;ad9d  c0          DATA 0xc0        3
    .byte 0xa2              ;ad9e  a2          DATA 0xa2        4 = 0xa2
    .byte 0x00              ;ad9f  00          DATA 0x00
    .byte 0x11              ;ada0  11          DATA 0x11
    .byte 0x04              ;ada1  04          DATA 0x04
    .byte 0x06              ;ada2  06          DATA 0x06
    .byte 0xc0              ;ada3  c0          DATA 0xc0
    .byte 0xa2              ;ada4  a2          DATA 0xa2
    .byte 0x00              ;ada5  00          DATA 0x00
    .byte 0x22              ;ada6  22          DATA 0x22 '"'
    .byte 0x0a              ;ada7  0a          DATA 0x0a
    .byte 0x2b              ;ada8  2b          DATA 0x2b '+'
    .byte 0xca              ;ada9  ca          DATA 0xca
    .byte 0x78              ;adaa  78          DATA 0x78 'x'
    .byte 0x00              ;adab  00          DATA 0x00
    .byte 0x27              ;adac  27          DATA 0x27 '''
    .byte 0xce              ;adad  ce          DATA 0xce

mem_adae:
;table of words used with table_get_word
    .byte 0x1a              ;adae  1a          DATA 0x1a        26 entries below:
    .word lab_1698
    .word lab_172e
    .word lab_172b
    .word lab_17e2
    .word sub_17ef
    .word lab_17a5
    .word lab_179b
    .word lab_17ce
    .word lab_181c
    .word lab_174f
    .word lab_180c
    .word lab_1874
    .word lab_1880
    .word lab_18ea
    .word lab_18ee
    .word lab_169b
    .word lab_16af
    .word lab_16fb
    .word lab_170d
    .word lab_1758
    .word lab_1760
    .word lab_1814
    .word lab_1c72
    .word lab_17a0
    .word lab_1754
    .word lab_175c

mem_ade3:
;table of words used with table_get_word
    .byte 0x15              ;ade3  15          DATA 0x15        21 entries below:
    .word lab_1698
    .word lab_173a
    .word lab_174c
    .word lab_1c81
    .word lab_183f
    .word lab_184d
    .word lab_1858
    .word lab_1869
    .word lab_1831
    .word lab_18a5
    .word lab_18b0
    .word lab_18cb
    .word lab_1916
    .word lab_1921
    .word lab_1945
    .word sub_19a1
    .word lab_19f8
    .word lab_1798
    .word lab_193c
    .word lab_17df
    .word lab_1945

mem_ae0e:
;table of words used with table_get_word
    .byte 0x0b              ;ae0e  0b          DATA 0x0b        11 entries below:
    .word sub_1d4f
    .word lab_1d11
    .word lab_1d11
    .word lab_1d2c
    .word lab_1d2c
    .word lab_1cdc
    .word lab_1ce7
    .word lab_1d7b
    .word lab_1d7b
    .word lab_1cf9
    .word lab_1cc6_maybe_freq_inc_dec   ;Frequency inc/dec if mem_fe20 = 2,3

mem_ae25:
    .byte 0x01              ;ae25  01          DATA 0x01
    .byte 0x01              ;ae26  01          DATA 0x01
    .byte 0x10              ;ae27  10          DATA 0x10
    .byte 0x5a              ;ae28  5a          DATA 0x5a 'Z'
    .byte 0xae              ;ae29  ae          DATA 0xae
    .byte 0x26              ;ae2a  26          DATA 0x26 '&'
    .byte 0xff              ;ae2b  ff          DATA 0xff
    .byte 0x06              ;ae2c  06          DATA 0x06
    .byte 0x24              ;ae2d  24          DATA 0x24 '$'
    .byte 0xff              ;ae2e  ff          DATA 0xff
    .byte 0x06              ;ae2f  06          DATA 0x06
    .byte 0x0c              ;ae30  0c          DATA 0x0c
    .byte 0x01              ;ae31  01          DATA 0x01
    .byte 0x81              ;ae32  81          DATA 0x81
    .byte 0x15              ;ae33  15          DATA 0x15
    .byte 0x1e              ;ae34  1e          DATA 0x1e
    .byte 0x04              ;ae35  04          DATA 0x04
    .byte 0x14              ;ae36  14          DATA 0x14
    .byte 0x1e              ;ae37  1e          DATA 0x1e
    .byte 0x05              ;ae38  05          DATA 0x05
    .byte 0x0c              ;ae39  0c          DATA 0x0c
    .byte 0x1e              ;ae3a  1e          DATA 0x1e
    .byte 0x84              ;ae3b  84          DATA 0x84
    .byte 0x07              ;ae3c  07          DATA 0x07
    .byte 0x01              ;ae3d  01          DATA 0x01
    .byte 0x87              ;ae3e  87          DATA 0x87
    .byte 0x07              ;ae3f  07          DATA 0x07
    .byte 0x60              ;ae40  60          DATA 0x60 '`'
    .byte 0x85              ;ae41  85          DATA 0x85
    .byte 0x07              ;ae42  07          DATA 0x07
    .byte 0x80              ;ae43  80          DATA 0x80
    .byte 0x89              ;ae44  89          DATA 0x89
    .byte 0x08              ;ae45  08          DATA 0x08
    .byte 0xe0              ;ae46  e0          DATA 0xe0
    .byte 0x04              ;ae47  04          DATA 0x04
    .byte 0x0a              ;ae48  0a          DATA 0x0a
    .byte 0xe0              ;ae49  e0          DATA 0xe0
    .byte 0x04              ;ae4a  04          DATA 0x04
    .byte 0x1c              ;ae4b  1c          DATA 0x1c
    .byte 0xe0              ;ae4c  e0          DATA 0xe0
    .byte 0x04              ;ae4d  04          DATA 0x04
    .byte 0x0b              ;ae4e  0b          DATA 0x0b
    .byte 0xe0              ;ae4f  e0          DATA 0xe0
    .byte 0x05              ;ae50  05          DATA 0x05
    .byte 0x09              ;ae51  09          DATA 0x09
    .byte 0xe0              ;ae52  e0          DATA 0xe0
    .byte 0x05              ;ae53  05          DATA 0x05
    .byte 0x1d              ;ae54  1d          DATA 0x1d
    .byte 0xe0              ;ae55  e0          DATA 0xe0
    .byte 0x05              ;ae56  05          DATA 0x05
    .byte 0x2c              ;ae57  2c          DATA 0x2c ','
    .byte 0xe0              ;ae58  e0          DATA 0xe0
    .byte 0x0a              ;ae59  0a          DATA 0x0a
    .byte 0x0b              ;ae5a  0b          DATA 0x0b
    .byte 0x68              ;ae5b  68          DATA 0x68 'h'
    .byte 0x02              ;ae5c  02          DATA 0x02
    .byte 0x4a              ;ae5d  4a          DATA 0x4a 'J'
    .byte 0x03              ;ae5e  03          DATA 0x03
    .byte 0x2a              ;ae5f  2a          DATA 0x2a '*'
    .byte 0x01              ;ae60  01          DATA 0x01
    .byte 0x29              ;ae61  29          DATA 0x29 ')'
    .byte 0x07              ;ae62  07          DATA 0x07
    .byte 0x46              ;ae63  46          DATA 0x46 'F'
    .byte 0x04              ;ae64  04          DATA 0x04
    .byte 0x26              ;ae65  26          DATA 0x26 '&'
    .byte 0x07              ;ae66  07          DATA 0x07
    .byte 0x46              ;ae67  46          DATA 0x46 'F'
    .byte 0x09              ;ae68  09          DATA 0x09
    .byte 0x26              ;ae69  26          DATA 0x26 '&'
    .byte 0x08              ;ae6a  08          DATA 0x08
    .byte 0x46              ;ae6b  46          DATA 0x46 'F'
    .byte 0x07              ;ae6c  07          DATA 0x07
    .byte 0x26              ;ae6d  26          DATA 0x26 '&'
    .byte 0x07              ;ae6e  07          DATA 0x07

mem_ae6f:
;table of words used with table_get_word
    .byte 0x04              ;ae6f  04          DATA 0x04      4 entries below:
    .word mem_ae78+1
    .word mem_ae89+1
    .word mem_ae9a+1
    .word mem_aeab+1

mem_ae78:
    .byte 0x10              ;ae78  10          DATA 0x10      16 entries below:
    .byte 0x04              ;ae79  04          DATA 0x04
    .byte 0x09              ;ae7a  09          DATA 0x09
    .byte 0x11              ;ae7b  11          DATA 0x11
    .byte 0x1a              ;ae7c  1a          DATA 0x1a
    .byte 0x22              ;ae7d  22          DATA 0x22 '"'
    .byte 0x2b              ;ae7e  2b          DATA 0x2b '+'
    .byte 0x33              ;ae7f  33          DATA 0x33 '3'
    .byte 0x3c              ;ae80  3c          DATA 0x3c '<'
    .byte 0x44              ;ae81  44          DATA 0x44 'D'
    .byte 0x4d              ;ae82  4d          DATA 0x4d 'M'
    .byte 0x55              ;ae83  55          DATA 0x55 'U'
    .byte 0x5e              ;ae84  5e          DATA 0x5e '^'
    .byte 0x66              ;ae85  66          DATA 0x66 'f'
    .byte 0x6f              ;ae86  6f          DATA 0x6f 'o'
    .byte 0x77              ;ae87  77          DATA 0x77 'w'
    .byte 0x80              ;ae88  80          DATA 0x80

mem_ae89:
    .byte 0x10              ;ae89  10          DATA 0x10      16 entries below:
    .byte 0x08              ;ae8a  08          DATA 0x08
    .byte 0x12              ;ae8b  12          DATA 0x12
    .byte 0x22              ;ae8c  22          DATA 0x22 '"'
    .byte 0x34              ;ae8d  34          DATA 0x34 '4'
    .byte 0x44              ;ae8e  44          DATA 0x44 'D'
    .byte 0x56              ;ae8f  56          DATA 0x56 'V'
    .byte 0x66              ;ae90  66          DATA 0x66 'f'
    .byte 0x78              ;ae91  78          DATA 0x78 'x'
    .byte 0x88              ;ae92  88          DATA 0x88
    .byte 0x9a              ;ae93  9a          DATA 0x9a
    .byte 0xaa              ;ae94  aa          DATA 0xaa
    .byte 0xbc              ;ae95  bc          DATA 0xbc
    .byte 0xcc              ;ae96  cc          DATA 0xcc
    .byte 0xde              ;ae97  de          DATA 0xde
    .byte 0xee              ;ae98  ee          DATA 0xee
    .byte 0xff              ;ae99  ff          DATA 0xff

mem_ae9a:
    .byte 0x10              ;ae9a  10          DATA 0x10      16 entries below:
    .byte 0x08              ;ae9b  08          DATA 0x08
    .byte 0x12              ;ae9c  12          DATA 0x12
    .byte 0x22              ;ae9d  22          DATA 0x22 '"'
    .byte 0x34              ;ae9e  34          DATA 0x34 '4'
    .byte 0x44              ;ae9f  44          DATA 0x44 'D'
    .byte 0x56              ;aea0  56          DATA 0x56 'V'
    .byte 0x66              ;aea1  66          DATA 0x66 'f'
    .byte 0x78              ;aea2  78          DATA 0x78 'x'
    .byte 0x88              ;aea3  88          DATA 0x88
    .byte 0x9a              ;aea4  9a          DATA 0x9a
    .byte 0xaa              ;aea5  aa          DATA 0xaa
    .byte 0xbc              ;aea6  bc          DATA 0xbc
    .byte 0xcc              ;aea7  cc          DATA 0xcc
    .byte 0xde              ;aea8  de          DATA 0xde
    .byte 0xee              ;aea9  ee          DATA 0xee
    .byte 0xff              ;aeaa  ff          DATA 0xff

mem_aeab:
    .byte 0x10              ;aeab  10          DATA 0x10      16 entries below:
    .byte 0x08              ;aeac  08          DATA 0x08
    .byte 0x12              ;aead  12          DATA 0x12
    .byte 0x1a              ;aeae  1a          DATA 0x1a
    .byte 0x22              ;aeaf  22          DATA 0x22 '"'
    .byte 0x2a              ;aeb0  2a          DATA 0x2a '*'
    .byte 0x34              ;aeb1  34          DATA 0x34 '4'
    .byte 0x3c              ;aeb2  3c          DATA 0x3c '<'
    .byte 0x44              ;aeb3  44          DATA 0x44 'D'
    .byte 0x56              ;aeb4  56          DATA 0x56 'V'
    .byte 0x66              ;aeb5  66          DATA 0x66 'f'
    .byte 0x78              ;aeb6  78          DATA 0x78 'x'
    .byte 0x88              ;aeb7  88          DATA 0x88
    .byte 0x9a              ;aeb8  9a          DATA 0x9a
    .byte 0xaa              ;aeb9  aa          DATA 0xaa
    .byte 0xbc              ;aeba  bc          DATA 0xbc
    .byte 0xff              ;aebb  ff          DATA 0xff

mem_aebc:
;table of words used with table_get_word
    .byte 0x0b              ;aebc  0b          DATA 0x0b        11 entries below:
    .word lab_1e0e
    .word lab_1e12
    .word lab_1fe9
    .word lab_1fef
    .word lab_1e2f
    .word lab_1e54
    .word lab_1e77
    .word lab_1e8a
    .word lab_1f4c
    .word lab_1e0f
    .word lab_1faa

mem_aed3:
;table of bytes used with table_get_byte
    .byte 0x09              ;aed3  09          DATA 0x09    9 entries below:
    .byte 0x1e              ;aed4  1e          DATA 0x1e
    .byte 0x01              ;aed5  01          DATA 0x01
    .byte 0x1e              ;aed6  1e          DATA 0x1e
    .byte 0x1e              ;aed7  1e          DATA 0x1e
    .byte 0x1e              ;aed8  1e          DATA 0x1e
    .byte 0x1e              ;aed9  1e          DATA 0x1e
    .byte 0x1e              ;aeda  1e          DATA 0x1e
    .byte 0xc8              ;aedb  c8          DATA 0xc8
    .byte 0x0a              ;aedc  0a          DATA 0x0a

mem_aedd:
;table of bytes used with table_get_byte
    .byte 0x09              ;aedd  09          DATA 0x09    9 entries below:
    .byte 0x00              ;aede  00          DATA 0x00
    .byte 0x07              ;aedf  07          DATA 0x07
    .byte 0x02              ;aee0  02          DATA 0x02
    .byte 0x03              ;aee1  03          DATA 0x03
    .byte 0x00              ;aee2  00          DATA 0x00
    .byte 0x05              ;aee3  05          DATA 0x05
    .byte 0x06              ;aee4  06          DATA 0x06
    .byte 0x03              ;aee5  03          DATA 0x03
    .byte 0x08              ;aee6  08          DATA 0x08

mem_aee7:
;table of bytes used with table_get_byte
    .byte 0x09              ;aee7  09          DATA 0x09    9 entries below:
    .byte 0x01              ;aee8  01          DATA 0x01
    .byte 0x07              ;aee9  07          DATA 0x07
    .byte 0x01              ;aeea  01          DATA 0x01
    .byte 0x03              ;aeeb  03          DATA 0x03
    .byte 0x04              ;aeec  04          DATA 0x04
    .byte 0x05              ;aeed  05          DATA 0x05
    .byte 0x06              ;aeee  06          DATA 0x06
    .byte 0x00              ;aeef  00          DATA 0x00
    .byte 0x08              ;aef0  08          DATA 0x08

mem_aef1:
;table of bytes used with table_get_byte
    .byte 0x09              ;aef1  09          DATA 0x09    9 entries below:
    .byte 0x00              ;aef2  00          DATA 0x00
    .byte 0x03              ;aef3  03          DATA 0x03
    .byte 0x02              ;aef4  02          DATA 0x02
    .byte 0xff              ;aef5  ff          DATA 0xff
    .byte 0xff              ;aef6  ff          DATA 0xff
    .byte 0x02              ;aef7  02          DATA 0x02
    .byte 0xff              ;aef8  ff          DATA 0xff
    .byte 0x03              ;aef9  03          DATA 0x03
    .byte 0x01              ;aefa  01          DATA 0x01

mem_aefb:
    .byte 0x0e              ;aefb  0e          DATA 0x0e
    .byte 0x28              ;aefc  28          DATA 0x28 '('
    .byte 0xaf              ;aefd  af          DATA 0xaf
    .byte 0x29              ;aefe  29          DATA 0x29 ')'
    .byte 0xff              ;aeff  ff          DATA 0xff
    .byte 0x0b              ;af00  0b          DATA 0x0b
    .byte 0x2a              ;af01  2a          DATA 0x2a '*'
    .byte 0xff              ;af02  ff          DATA 0xff
    .byte 0x0b              ;af03  0b          DATA 0x0b
    .byte 0x28              ;af04  28          DATA 0x28 '('
    .byte 0xff              ;af05  ff          DATA 0xff
    .byte 0x0b              ;af06  0b          DATA 0x0b
    .byte 0x23              ;af07  23          DATA 0x23 '#'
    .byte 0x3f              ;af08  3f          DATA 0x3f '?'
    .byte 0x0b              ;af09  0b          DATA 0x0b
    .byte 0x24              ;af0a  24          DATA 0x24 '$'
    .byte 0xff              ;af0b  ff          DATA 0xff
    .byte 0x08              ;af0c  08          DATA 0x08
    .byte 0x26              ;af0d  26          DATA 0x26 '&'
    .byte 0xff              ;af0e  ff          DATA 0xff
    .byte 0x08              ;af0f  08          DATA 0x08
    .byte 0x08              ;af10  08          DATA 0x08
    .byte 0x80              ;af11  80          DATA 0x80
    .byte 0x81              ;af12  81          DATA 0x81
    .byte 0x1c              ;af13  1c          DATA 0x1c
    .byte 0x80              ;af14  80          DATA 0x80
    .byte 0x81              ;af15  81          DATA 0x81
    .byte 0x0a              ;af16  0a          DATA 0x0a
    .byte 0x80              ;af17  80          DATA 0x80
    .byte 0x81              ;af18  81          DATA 0x81
    .byte 0x41              ;af19  41          DATA 0x41 'A'
    .byte 0xff              ;af1a  ff          DATA 0xff
    .byte 0x07              ;af1b  07          DATA 0x07
    .byte 0x01              ;af1c  01          DATA 0x01
    .byte 0x86              ;af1d  86          DATA 0x86
    .byte 0x86              ;af1e  86          DATA 0x86
    .byte 0x02              ;af1f  02          DATA 0x02
    .byte 0x86              ;af20  86          DATA 0x86
    .byte 0x8b              ;af21  8b          DATA 0x8b
    .byte 0x03              ;af22  03          DATA 0x03
    .byte 0x86              ;af23  86          DATA 0x86
    .byte 0x90              ;af24  90          DATA 0x90
    .byte 0x04              ;af25  04          DATA 0x04
    .byte 0x86              ;af26  86          DATA 0x86
    .byte 0x95              ;af27  95          DATA 0x95
    .byte 0x18              ;af28  18          DATA 0x18
    .byte 0x60              ;af29  60          DATA 0x60 '`'
    .byte 0x00              ;af2a  00          DATA 0x00
    .byte 0x26              ;af2b  26          DATA 0x26 '&'
    .byte 0x89              ;af2c  89          DATA 0x89
    .byte 0x29              ;af2d  29          DATA 0x29 ')'
    .byte 0x0b              ;af2e  0b          DATA 0x0b
    .byte 0x60              ;af2f  60          DATA 0x60 '`'
    .byte 0x0a              ;af30  0a          DATA 0x0a
    .byte 0x7f              ;af31  7f          DATA 0x7f
    .byte 0x07              ;af32  07          DATA 0x07
    .byte 0x60              ;af33  60          DATA 0x60 '`'
    .byte 0x03              ;af34  03          DATA 0x03
    .byte 0xcf              ;af35  cf          DATA 0xcf
    .byte 0x03              ;af36  03          DATA 0x03
    .byte 0xa4              ;af37  a4          DATA 0xa4
    .byte 0x03              ;af38  03          DATA 0x03
    .byte 0x60              ;af39  60          DATA 0x60 '`'
    .byte 0x0a              ;af3a  0a          DATA 0x0a
    .byte 0x7f              ;af3b  7f          DATA 0x7f
    .byte 0x0c              ;af3c  0c          DATA 0x0c
    .byte 0x60              ;af3d  60          DATA 0x60 '`'
    .byte 0x04              ;af3e  04          DATA 0x04
    .byte 0xcf              ;af3f  cf          DATA 0xcf
    .byte 0x04              ;af40  04          DATA 0x04
    .byte 0xa4              ;af41  a4          DATA 0xa4
    .byte 0x04              ;af42  04          DATA 0x04
    .byte 0x60              ;af43  60          DATA 0x60 '`'
    .byte 0x0a              ;af44  0a          DATA 0x0a
    .byte 0x7f              ;af45  7f          DATA 0x7f
    .byte 0x11              ;af46  11          DATA 0x11
    .byte 0x60              ;af47  60          DATA 0x60 '`'
    .byte 0x05              ;af48  05          DATA 0x05
    .byte 0xcf              ;af49  cf          DATA 0xcf
    .byte 0x05              ;af4a  05          DATA 0x05
    .byte 0xa4              ;af4b  a4          DATA 0xa4
    .byte 0x05              ;af4c  05          DATA 0x05
    .byte 0x60              ;af4d  60          DATA 0x60 '`'
    .byte 0x0a              ;af4e  0a          DATA 0x0a
    .byte 0x7f              ;af4f  7f          DATA 0x7f
    .byte 0x16              ;af50  16          DATA 0x16
    .byte 0x60              ;af51  60          DATA 0x60 '`'
    .byte 0x06              ;af52  06          DATA 0x06
    .byte 0xcf              ;af53  cf          DATA 0xcf
    .byte 0x06              ;af54  06          DATA 0x06
    .byte 0xa4              ;af55  a4          DATA 0xa4
    .byte 0x06              ;af56  06          DATA 0x06

mem_af57:
;SAFE code entry related
    .byte 0x0c              ;af57  0c          DATA 0x0c    12 entries follow:
    .word sub_214e          ;af58   DATA
    .word sub_2201          ;af5a   DATA
    .word lab_2213          ;af5c   DATA
    .word lab_234c_thous    ;af5e   DATA  Increment Entered SAFE code thousands place
    .word lab_2355_hunds    ;af60   DATA  Increment Entered SAFE code hundreds place
    .word lab_2374_tens     ;af62   DATA  Increment Entered SAFE code tens place
    .word lab_237d_ones     ;af64   DATA  Increment Entered SAFE code ones place
    .word lab_22c8          ;af66   DATA
    .word sub_2296          ;af68   DATA
    .word lab_23a7          ;af6a   DATA
    .word safe_code_1000    ;af6c   DATA  Set entered SAFE code to default of 1000
    .word sub_223a          ;af6e   DATA

mem_af70_a99cz23:
;See also lab_72e9_vers_a99
    .byte 0x41              ;af70  41          DATA 0x41 'A'
    .byte 0x99              ;af71  99          DATA 0x99
    .byte 0x43              ;af72  43          DATA 0x43 'C'
    .byte 0x5a              ;af73  5a          DATA 0x5a 'Z'
    .byte 0x23              ;af74  23          DATA 0x23 '#'

mem_af75_patterns:
;Table of bit patterns
    .byte 0b00000001        ;af75  01          DATA 0x01
    .byte 0b00000010        ;af76  02          DATA 0x02
    .byte 0b00000100        ;af77  04          DATA 0x04
    .byte 0b00001000        ;af78  08          DATA 0x08
    .byte 0b00010000        ;af79  10          DATA 0x10
    .byte 0b00100000        ;af7a  20          DATA 0x20 ' '
    .byte 0b01000000        ;af7b  40          DATA 0x40 '@'
    .byte 0b10000000        ;af7c  80          DATA 0x80

    .byte 0b11111110        ;af7d  fe          DATA 0xfe
    .byte 0b11111101        ;af7e  fd          DATA 0xfd
    .byte 0b11111011        ;af7f  fb          DATA 0xfb
    .byte 0b11110111        ;af80  f7          DATA 0xf7
    .byte 0b11101111        ;af81  ef          DATA 0xef
    .byte 0b11011111        ;af82  df          DATA 0xdf
    .byte 0b10111111        ;af83  bf          DATA 0xbf
    .byte 0b01111111        ;af84  7f          DATA 0x7f

    .byte 0b00000001        ;af85  01          DATA 0x01
    .byte 0b00000011        ;af86  03          DATA 0x03
    .byte 0b00000111        ;af87  07          DATA 0x07
    .byte 0b00001111        ;af88  0f          DATA 0x0f
    .byte 0b00011111        ;af89  1f          DATA 0x1f
    .byte 0b00111111        ;af8a  3f          DATA 0x3f '?'
    .byte 0b01111111        ;af8b  7f          DATA 0x7f
    .byte 0b11111111        ;af8c  ff          DATA 0xff

group_numbers:
;group reading related
;valid group numbers
;used with table_find_byte
    .byte 0x08              ;af8d  08          DATA 0x08    8 entries below:
    .byte kwp_group_01      ;af8e  01          DATA 0x01    Group 1 (General)
    .byte kwp_group_02      ;af8f  02          DATA 0x02    Group 2 (Speakers)
    .byte kwp_group_03      ;af90  03          DATA 0x03    Group 3 (Antenna)
    .byte kwp_group_04      ;af91  04          DATA 0x04    Group 4 (Amplifier)
    .byte kwp_group_05      ;af92  05          DATA 0x05    Group 5 (CD Changer)
    .byte kwp_group_06      ;af93  06          DATA 0x06    Group 6 (External Display)
    .byte kwp_group_07      ;af94  07          DATA 0x07    Group 7 (Steering Wheel Control)
    .byte kwp_group_19      ;af95  19          DATA 0x19    Group 25 (Protection)

group_data_pointers:
;group reading related
;pointer to data table for each group, same order as group_numbers
;used with table_get_word
    .byte 0x07              ;af96  07          DATA 0x07        7 entries below:
    .word group_1_data+1    ;af97              POINTER          Group 1 (General)
    .word group_2_data+1    ;af99              POINTER          Group 2 (Speakers)
    .word group_3_data+1    ;af9b              POINTER          Group 3 (Antenna)
    .word group_4_data+1    ;af9d              POINTER          Group 4 (Amplifier)
    .word group_5_data+1    ;af9f              POINTER          Group 5 (CD Changer)
    .word group_6_data+1    ;afa1              POINTER          Group 6 (External Display)
    .word group_7_data+1    ;afa3              POINTER          Group 7 (Steering Wheel Control)

group_1_data:
;Group 1 (General)
    .byte 0x0c              ;12 entries below:

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   GALA-Signal
    .byte meas_id_gala      ;E meas_id        /

    .byte kwp_formula_06    ;A formula        \
    .byte 0x5f              ;X unknown_value   Supply Voltage
    .byte meas_id_t30       ;E meas_id        /       (Terminal 30)

    .byte kwp_formula_17    ;A formula        \
    .byte 0x64              ;X unknown_value   Illumination %
    .byte meas_id_t58b      ;E meas_id        /       (Terminal 58d)

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   S-Contact Status
    .byte meas_id_scon      ;E meas_id        /

group_2_data:
;Group 2 (Speakers)
    .byte 0x0c              ;12 entries below:

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Location/Type (Front)
    .byte meas_id_fsp_typ   ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Status
    .byte meas_id_fsp_st    ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Location/Type (Rear)
    .byte meas_id_rsp_typ   ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Status
    .byte meas_id_rsp_st    ;E meas_id        /

group_3_data:
;Group 3 (Antenna)
    .byte 0x09              ;9 entries below:

    .byte kwp_formula_25    ;A formula        \
    .byte 0x01              ;X unknown_value   Antenna Type
    .byte meas_id_ant_typ   ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Antenna
    .byte meas_id_ant_ant   ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Status
    .byte meas_id_ant_st    ;E meas_id        /

group_4_data:
;Group 4 (Amplifier)
    .byte 0x03              ;3 entries below:

    .byte kwp_formula_10    ;A formula        \
    .byte 0x01              ;X unknown_value   Amplifier Output
    .byte meas_id_amp_out   ;E meas_id        /

group_5_data:
;Group 5 (CD Changer)
    .byte 0x06              ;6 entries below:

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Component
    .byte meas_id_cdc_cmp   ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Status
    .byte meas_id_cdc_st    ;E meas_id        /

group_6_data:
;Group 6 (External Display)
    .byte 0x06              ;6 entries below:

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Component
    .byte meas_id_fis_cmp   ;E meas_id        /

    .byte kwp_formula_25    ;A formula        \
    .byte 0x00              ;X unknown_value   Status
    .byte meas_id_fis_st    ;E meas_id        /

group_7_data:
;Group 7 (Steering Wheel Control)
    .byte 0x03              ;3 entries below:

    .byte kwp_formula_11    ;A formula        \
    .byte 0x25              ;X unknown_value   Steering Wheel buttons
    .byte meas_id_mfsw      ;E meas_id        /

cars_1:
;Table of car models used by lab_2d9a_cars_1 to check coding
    .byte 0x04              ;afdf  04          DATA 0x04        4 entries below:
    .byte 0x00              ;afe0  00          DATA 0x00        All models without MFSW
    .byte 0x01              ;afe1  01          DATA 0x01        Golf/GTI
    .byte 0x02              ;afe2  02          DATA 0x02        Jetta
    .byte 0x04              ;afe3  04          DATA 0x04        All models with MFSW

cars_2:
;Table of car models used by lab_2daf_cars_2 to check coding
    .byte 0x03              ;afe4  03          DATA 0x03        3 entries below:
    .byte 0x00              ;afe5  00          DATA 0x00        All models without MFSW
    .byte 0x01              ;afe6  01          DATA 0x01        Golf/GTI
    .byte 0x06              ;afe7  06          DATA 0x06        New Beetle

fault_codes:
;Table of KWP1281 fault codes used by read_next_fault
;Same order as mem_f20d faults buffer
    .byte 0x0c              ;afe8  0c          DATA 0x0c        12 entries below:
    .word 0x029c            ;00668 - Supply Voltage Terminal 30                       mem_f20d  mem_fc1a
    .word 0x0351            ;00849 - S-Contact at Ignition/Starter Switch             mem_f20e  mem_fc1b
    .word 0x0352            ;00850 - Control Output Active; Radio Amplifier           mem_f20f  mem_fc1c
    .word 0x0353            ;00851 - Loudspeaker(s)                                   mem_f210  mem_fc1d
    .word 0x0354            ;00852 - Loudspeaker(s); Front                            mem_f211  mem_fc1e
    .word 0x0355            ;00853 - Loudspeaker(s); Rear                             mem_f212  mem_fc1f
    .word 0x0356            ;00854 - Radio Display Output in Dash Panel Insert        mem_f213  mem_fc20
    .word 0x0357            ;00855 - Connection to CD changer                         mem_f214  mem_fc21
    .word 0x0358            ;00856 - Radio Antenna                                    mem_f215  mem_fc22
    .word 0x0414            ;01044 - Control Module Incorrectly Coded                 mem_f216
    .word 0x04ab            ;01195 - End                                              mem_f217
    .word 0xffff            ;65535 - Internal Control Module Memory Error             mem_f218

output_tests:
;Table of KWP1281 output tests codes used by perform_next_test
;This table is indexed by kwp_test_idx and controls the sequence of the output tests.
;As each test is performed, one of these codes is returned in the output tests
;response block.  These codes are the same as the fault codes.
    .byte 0x03              ;b001  03          DATA 0x03        3 entries below:
    .word 0x0353            ;00851 - Loudspeaker(s)
    .word 0x0356            ;00854 - Radio Display Output in Dash Panel Insert
    .word 0x04ab            ;01195 - End

mem_b008:
;unknown table used with sub_2f0a
    .byte 0x09              ;b008  09          DATA 0x09        9 entries below:
    .byte 0x02              ;b009  02          DATA 0x02
    .byte 0x03              ;b00a  03          DATA 0x03
    .byte 0x04              ;b00b  04          DATA 0x04
    .byte 0x15              ;b00c  15          DATA 0x15
    .byte 0x16              ;b00d  16          DATA 0x16
    .byte 0x17              ;b00e  17          DATA 0x17
    .byte 0x28              ;b00f  28          DATA 0x28 '('
    .byte 0x29              ;b010  29          DATA 0x29 ')'
    .byte 0x2a              ;b011  2a          DATA 0x2a '*'

mem_b012:
;table of words used with table_get_word
    .byte 0x03              ;b012  03          DATA 0x03        3 entries below:
    .word lab_2f39          ;b013   DATA
    .word lab_2f3e          ;b015   DATA
    .word lab_2f43          ;b017   DATA

mem_b019_fis:
;fis-related
;table of words used with table_get_word
    .byte 0x04              ;b019  04          DATA 0x04        4 entries below:
    .word lab_2f61_fis      ;b01a   DATA
    .word lab_2faa_fis      ;b01c   DATA
    .word lab_302e_fis      ;b01e   DATA
    .word lab_3066_fis      ;b020   DATA

kwp_addresses:
;kwp1281 address bytes received during 5 baud init
    .byte 0x04              ;b022  04          DATA 0x04        4 entries below:
    .byte 0x00              ;b023  00          DATA 0x00          <not found>
    .byte 0x7c              ;b024  7c          DATA 0x7c '|'      DELCO manufacturing address (0x7C)
    .byte 0xd6              ;b025  d6          DATA 0xd6          Normal radio address (0xD6)
    .byte 0xbf              ;b026  bf          DATA 0xbf          Cluster security address (0x3F)

kwp_modes:
;specifies whether an address is for normal mode or "radio as tester" mode
;indexed by kwp_addr_idx
    .byte 0x04              ;b027  04          DATA 0x04        4 entries below:
    .byte 0x00              ;b028  00          DATA 0x00          Normal (<address not found>)
    .byte 0x00              ;b029  00          DATA 0x00          Normal (DELCO manufacturing address)
    .byte 0x00              ;b02a  00          DATA 0x00          Normal (Normal radio address)
    .byte 0x01              ;b02b  01          DATA 0x01          Radio as Tester (Cluster security address)

kwp_brgc0_b02c:
;values to be stored in BRGC0
;indexed by kwp_addr_idx
    .byte 0x04              ;b02c  04          DATA 0x04        4 entries below:
    .byte brgc0_value       ;b02d  39          DATA 0x39 '9'      0x39 = 10400 baud (<address not found>)
    .byte brgc0_value       ;b02e  39          DATA 0x39 '9'      0x39 = 10400 baud (DELCO manufacturing address)
    .byte brgc0_value       ;b02f  39          DATA 0x39 '9'      0x39 = 10400 baud (Normal radio address)
    .byte brgc0_value       ;b030  39          DATA 0x39 '9'      0x39 = 10400 baud (Cluster security address)

kwp_asim0_b031:
;values to be stored in ASIM0
;indexed by kwp_addr_idx
    .byte 0x04              ;b031  04          DATA 0x04        4 entries below:
    .byte 0x00              ;b032  00          DATA 0x00          0x00 = UART fully disabled (<address not found>)
    .byte 0xca              ;b033  ca          DATA 0xca          0xCA = UART TX & RX enabled, N81 (DELCO manufacturing address)
    .byte 0xca              ;b034  ca          DATA 0xca          0xCA = UART TX & RX enabled, N81 (Normal radio address)
    .byte 0xca              ;b035  ca          DATA 0xca          0xCA = UART TX & RX enabled, N81 (Cluster security address)

kwp_f06f_values:
;unknown values to be stored in mem_f06f
;indexed by kwp_addr_idx
    .byte 0x04              ;b036  04          DATA 0x04        4 entries below:
    .byte 0x08              ;b037  08          DATA 0x08          Unknown; maybe 80ms (<address not found>)
    .byte 0x08              ;b038  08          DATA 0x08          Unknown; maybe 80ms (DELCO manufacturing address)
    .byte 0x08              ;b039  08          DATA 0x08          Unknown; maybe 80ms (Normal radio address)
    .byte 0x08              ;b03a  08          DATA 0x08          Unknown; maybe 80ms (Cluster security address)

kwp_idle_ms_values:
;KWP1281 connection timeout for no activity, to be stored in kwp_idle_ms
;indexed by kwp_addr_idx
    .byte 0x04              ;b03b  04          DATA 0x04        4 entries below:
    .byte 0x25              ;b03c  25          DATA 0x25 '%'      Unknown; maybe 370ms? (<address not found>)
    .byte 0xff              ;b03d  ff          DATA 0xff          Unknown; maybe 2550ms? (DELCO manufacturing address)
    .byte 0x25              ;b03e  25          DATA 0x25 '%'      Unknown; maybe 370ms? (Normal radio address)
    .byte 0x25              ;b03f  25          DATA 0x25 '%'      Unknown; maybe 370ms? (Cluster security address)

mem_b040:
;unknown table
;indexed by mem_fe2a
    .byte 0x0f              ;b040  0f          DATA 0x0f        15 entries below:
    .word sub_3781
    .word sub_3786
    .word lab_37a7
    .word lab_37b4
    .word lab_37c5
    .word lab_37e2
    .word lab_380b
    .word lab_3836
    .word lab_3868
    .word lab_38b7
    .word lab_388d
    .word lab_389a
    .word lab_38ec
    .word lab_3952
    .word lab_3979_ei_halt          ;Enable interrupts then halt

mem_b05f:
    .byte 0x15              ;b05f  15          DATA 0x15
    .byte 0x00              ;b060  00          DATA 0x00
    .byte 0x00              ;b061  00          DATA 0x00
    .byte 0x19              ;b062  19          DATA 0x19
    .byte 0x80              ;b063  80          DATA 0x80
    .byte 0x05              ;b064  05          DATA 0x05
    .byte 0x28              ;b065  28          DATA 0x28 '('
    .byte 0x80              ;b066  80          DATA 0x80
    .byte 0x05              ;b067  05          DATA 0x05
    .byte 0x29              ;b068  29          DATA 0x29 ')'
    .byte 0x80              ;b069  80          DATA 0x80
    .byte 0x05              ;b06a  05          DATA 0x05
    .byte 0x25              ;b06b  25          DATA 0x25 '%'
    .byte 0x08              ;b06c  08          DATA 0x08
    .byte 0x04              ;b06d  04          DATA 0x04
    .byte 0x3e              ;b06e  3e          DATA 0x3e '>'
    .byte 0xff              ;b06f  ff          DATA 0xff
    .byte 0x02              ;b070  02          DATA 0x02
    .byte 0x3f              ;b071  3f          DATA 0x3f '?'
    .byte 0x20              ;b072  20          DATA 0x20 ' '
    .byte 0x08              ;b073  08          DATA 0x08
    .byte 0x24              ;b074  24          DATA 0x24 '$'
    .byte 0x68              ;b075  68          DATA 0x68 'h'
    .byte 0x07              ;b076  07          DATA 0x07
    .byte 0x2a              ;b077  2a          DATA 0x2a '*'
    .byte 0x28              ;b078  28          DATA 0x28 '('
    .byte 0x08              ;b079  08          DATA 0x08
    .byte 0x19              ;b07a  19          DATA 0x19
    .byte 0x20              ;b07b  20          DATA 0x20 ' '
    .byte 0x08              ;b07c  08          DATA 0x08
    .byte 0x28              ;b07d  28          DATA 0x28 '('
    .byte 0x28              ;b07e  28          DATA 0x28 '('
    .byte 0x08              ;b07f  08          DATA 0x08
    .byte 0x43              ;b080  43          DATA 0x43 'C'
    .byte 0x20              ;b081  20          DATA 0x20 ' '
    .byte 0x09              ;b082  09          DATA 0x09
    .byte 0x19              ;b083  19          DATA 0x19
    .byte 0x40              ;b084  40          DATA 0x40 '@'
    .byte 0x03              ;b085  03          DATA 0x03
    .byte 0x28              ;b086  28          DATA 0x28 '('
    .byte 0x40              ;b087  40          DATA 0x40 '@'
    .byte 0x03              ;b088  03          DATA 0x03
    .byte 0x29              ;b089  29          DATA 0x29 ')'
    .byte 0x40              ;b08a  40          DATA 0x40 '@'
    .byte 0x03              ;b08b  03          DATA 0x03
    .byte 0x33              ;b08c  33          DATA 0x33 '3'
    .byte 0x40              ;b08d  40          DATA 0x40 '@'
    .byte 0x04              ;b08e  04          DATA 0x04
    .byte 0x37              ;b08f  37          DATA 0x37 '7'
    .byte 0x40              ;b090  40          DATA 0x40 '@'
    .byte 0x04              ;b091  04          DATA 0x04
    .byte 0x23              ;b092  23          DATA 0x23 '#'
    .byte 0xe0              ;b093  e0          DATA 0xe0
    .byte 0x06              ;b094  06          DATA 0x06
    .byte 0x23              ;b095  23          DATA 0x23 '#'
    .byte 0x08              ;b096  08          DATA 0x08
    .byte 0x06              ;b097  06          DATA 0x06
    .byte 0x33              ;b098  33          DATA 0x33 '3'
    .byte 0x80              ;b099  80          DATA 0x80
    .byte 0x01              ;b09a  01          DATA 0x01
    .byte 0x27              ;b09b  27          DATA 0x27 '''
    .byte 0x80              ;b09c  80          DATA 0x80
    .byte 0x01              ;b09d  01          DATA 0x01
    .byte 0x27              ;b09e  27          DATA 0x27 '''
    .byte 0x80              ;b09f  80          DATA 0x80
    .byte 0x01              ;b0a0  01          DATA 0x01

mem_b0a1:
;table of words used with table_get_word
    .byte 0x0a              ;b0a1  0a          DATA 0x0a        10 entries below:
    .word lab_3c02
    .word lab_3c03
    .word lab_3d58
    .word lab_3c08
    .word lab_3c08
    .word lab_3c59
    .word lab_3c85
    .word lab_3cf3
    .word lab_3c60
    .word lab_3c64

mem_b0b6:
;table of words used with table_get_word
    .byte 0x0b              ;b0b6  0b          DATA 0x0b        11 words below:
    .word lab_7d5c          ;b0b7
    .word lab_2037          ;b0b9
    .word lab_2e17          ;b0bb
    .word lab_a474          ;b0bd
    .word lab_7f77          ;b0bf
    .word lab_89c3          ;b0c1
    .word lab_d0f6          ;b0c3
    .word lab_1636          ;b0c5
    .word lab_3ee2          ;b0c7
    .word lab_3715          ;b0c9
    .word lab_4d7f          ;b0cb

mem_b0cd:
;unknown table used with lab_119b
    .byte 0x03              ;b0cd  03          DATA 0x03        3 entries below:
    .byte 0x0a              ;b0ce  0a          DATA 0x0a
    .byte 0x05              ;b0cf  05          DATA 0x05
    .byte 0x02              ;b0d0  02          DATA 0x02

mem_b0d1:
;table of words used with table_get_word
;TODO routines that seem to be called regularly by a timer?
    .byte 0x09              ;b0d1  09          DATA 0x09        9 entries below:
    .word lab_12d7
    .word lab_15a2
    .word lab_1537
    .word lab_150f
    .word lab_14c2
    .word lab_14ae
    .word lab_147c
    .word lab_12e3          ;Sends 5 baud address in radio-as-tester mode and ???
    .word lab_129b          ;Decrements mem_f06f, kwp_idle_ms and ???

mem_b0e4:
;unknown table used with lab_3ecf
    .byte 0x01              ;b0e4  01          DATA 0x01
    .byte 0x00              ;b0e5  00          DATA 0x00
    .byte 0x00              ;b0e6  00          DATA 0x00
    .byte 0x30              ;b0e7  30          DATA 0x30 '0'
    .byte 0xff              ;b0e8  ff          DATA 0xff
    .byte 0x01              ;b0e9  01          DATA 0x01
    .byte 0x02              ;b0ea  02          DATA 0x02

mem_b0eb:
;unknown table used with lab_3edd
    .byte 0x20              ;b0eb  20          DATA 0x20 ' '
    .byte 0x40              ;b0ec  40          DATA 0x40 '@'
    .byte 0x20              ;b0ed  20          DATA 0x20 ' '
    .byte 0x40              ;b0ee  40          DATA 0x40 '@'

mem_b0ef:
;table of words used with table_get_word
    .byte 0x02              ;b0ef  02          DATA 0x02        2 entries below:
    .word lab_3f76          ;b0f0   DATA
    .word lab_3f56          ;b0f2   DATA

mem_b0f4:
;unknown table used with sub_442f
    .byte 0x03              ;b0f4  03          DATA 0x03        3 entries below:
    .byte 0x01              ;b0f5  01          DATA 0x01
    .byte 0x02              ;b0f6  02          DATA 0x02
    .byte 0x03              ;b0f7  03          DATA 0x03

mem_b0f8:
;unknown table used with sub_43b1
    .byte 0x03              ;b0f8  03          DATA 0x03        3 entries below:
    .byte 0x00              ;b0f9  00          DATA 0x00
    .byte 0x00              ;b0fa  00          DATA 0x00
    .byte 0x4c              ;b0fb  4c          DATA 0x4c 'L'

    .byte 0xfe              ;b0fc  fe          DATA 0xfe
    .byte 0x44              ;b0fd  44          DATA 0x44 'D'
    .byte 0xfe              ;b0fe  fe          DATA 0xfe

mem_b0ff:
;unknown table used with lab_4243
    .byte 0x1a              ;b0ff  1a          DATA 0x1a
    .byte 0x00              ;b100  00          DATA 0x00
    .byte 0x00              ;b101  00          DATA 0x00
    .byte 0x32              ;b102  32          DATA 0x32 '2'
    .byte 0xff              ;b103  ff          DATA 0xff
    .byte 0x0e              ;b104  0e          DATA 0x0e
    .byte 0x28              ;b105  28          DATA 0x28 '('
    .byte 0xff              ;b106  ff          DATA 0xff
    .byte 0x0d              ;b107  0d          DATA 0x0d
    .byte 0x24              ;b108  24          DATA 0x24 '$'
    .byte 0xff              ;b109  ff          DATA 0xff
    .byte 0x0d              ;b10a  0d          DATA 0x0d
    .byte 0x29              ;b10b  29          DATA 0x29 ')'
    .byte 0xff              ;b10c  ff          DATA 0xff
    .byte 0x0d              ;b10d  0d          DATA 0x0d
    .byte 0x2a              ;b10e  2a          DATA 0x2a '*'
    .byte 0xff              ;b10f  ff          DATA 0xff
    .byte 0x0d              ;b110  0d          DATA 0x0d
    .byte 0x48              ;b111  48          DATA 0x48 'H'
    .byte 0x01              ;b112  01          DATA 0x01
    .byte 0x05              ;b113  05          DATA 0x05
    .byte 0x49              ;b114  49          DATA 0x49 'I'
    .byte 0x01              ;b115  01          DATA 0x01
    .byte 0x07              ;b116  07          DATA 0x07
    .byte 0x48              ;b117  48          DATA 0x48 'H'
    .byte 0x0c              ;b118  0c          DATA 0x0c
    .byte 0x41              ;b119  41          DATA 0x41 'A'
    .byte 0x49              ;b11a  49          DATA 0x49 'I'
    .byte 0x0e              ;b11b  0e          DATA 0x0e
    .byte 0x02              ;b11c  02          DATA 0x02
    .byte 0x16              ;b11d  16          DATA 0x16
    .byte 0x01              ;b11e  01          DATA 0x01
    .byte 0x05              ;b11f  05          DATA 0x05
    .byte 0x17              ;b120  17          DATA 0x17
    .byte 0x01              ;b121  01          DATA 0x01
    .byte 0x05              ;b122  05          DATA 0x05
    .byte 0x16              ;b123  16          DATA 0x16
    .byte 0x0c              ;b124  0c          DATA 0x0c
    .byte 0x41              ;b125  41          DATA 0x41 'A'
    .byte 0x17              ;b126  17          DATA 0x17
    .byte 0x0c              ;b127  0c          DATA 0x0c
    .byte 0x41              ;b128  41          DATA 0x41 'A'
    .byte 0x15              ;b129  15          DATA 0x15
    .byte 0x01              ;b12a  01          DATA 0x01
    .byte 0x07              ;b12b  07          DATA 0x07
    .byte 0x15              ;b12c  15          DATA 0x15
    .byte 0x0a              ;b12d  0a          DATA 0x0a
    .byte 0x06              ;b12e  06          DATA 0x06
    .byte 0x33              ;b12f  33          DATA 0x33 '3'
    .byte 0x01              ;b130  01          DATA 0x01
    .byte 0x04              ;b131  04          DATA 0x04
    .byte 0x33              ;b132  33          DATA 0x33 '3'
    .byte 0x0a              ;b133  0a          DATA 0x0a
    .byte 0x03              ;b134  03          DATA 0x03
    .byte 0x34              ;b135  34          DATA 0x34 '4'
    .byte 0xff              ;b136  ff          DATA 0xff
    .byte 0x0b              ;b137  0b          DATA 0x0b
    .byte 0x35              ;b138  35          DATA 0x35 '5'
    .byte 0x00              ;b139  00          DATA 0x00
    .byte 0x42              ;b13a  42          DATA 0x42 'B'
    .byte 0x27              ;b13b  27          DATA 0x27 '''
    .byte 0xff              ;b13c  ff          DATA 0xff
    .byte 0x0a              ;b13d  0a          DATA 0x0a
    .byte 0x27              ;b13e  27          DATA 0x27 '''
    .byte 0xff              ;b13f  ff          DATA 0xff
    .byte 0x0a              ;b140  0a          DATA 0x0a
    .byte 0x14              ;b141  14          DATA 0x14
    .byte 0x01              ;b142  01          DATA 0x01
    .byte 0x09              ;b143  09          DATA 0x09
    .byte 0x14              ;b144  14          DATA 0x14
    .byte 0x06              ;b145  06          DATA 0x06
    .byte 0x08              ;b146  08          DATA 0x08
    .byte 0x3d              ;b147  3d          DATA 0x3d '='
    .byte 0xff              ;b148  ff          DATA 0xff
    .byte 0x0c              ;b149  0c          DATA 0x0c
    .byte 0x3c              ;b14a  3c          DATA 0x3c '<'
    .byte 0xff              ;b14b  ff          DATA 0xff
    .byte 0x0c              ;b14c  0c          DATA 0x0c
    .byte 0x26              ;b14d  26          DATA 0x26 '&'
    .byte 0xff              ;b14e  ff          DATA 0xff
    .byte 0x01              ;b14f  01          DATA 0x01

mem_b150:
    .byte 0x09              ;b150  09          DATA 0x09
    .byte 0x00              ;b151  00          DATA 0x00
    .byte 0x00              ;b152  00          DATA 0x00
    .byte 0x32              ;b153  32          DATA 0x32 '2'
    .byte 0xff              ;b154  ff          DATA 0xff
    .byte 0x0e              ;b155  0e          DATA 0x0e
    .byte 0x34              ;b156  34          DATA 0x34 '4'
    .byte 0xff              ;b157  ff          DATA 0xff
    .byte 0x0a              ;b158  0a          DATA 0x0a
    .byte 0x33              ;b159  33          DATA 0x33 '3'
    .byte 0xff              ;b15a  ff          DATA 0xff
    .byte 0x03              ;b15b  03          DATA 0x03
    .byte 0x27              ;b15c  27          DATA 0x27 '''
    .byte 0xff              ;b15d  ff          DATA 0xff
    .byte 0x0a              ;b15e  0a          DATA 0x0a
    .byte 0x27              ;b15f  27          DATA 0x27 '''
    .byte 0xff              ;b160  ff          DATA 0xff
    .byte 0x41              ;b161  41          DATA 0x41 'A'
    .byte 0x27              ;b162  27          DATA 0x27 '''
    .byte 0xff              ;b163  ff          DATA 0xff
    .byte 0x41              ;b164  41          DATA 0x41 'A'
    .byte 0x3d              ;b165  3d          DATA 0x3d '='
    .byte 0xff              ;b166  ff          DATA 0xff
    .byte 0x0c              ;b167  0c          DATA 0x0c
    .byte 0x3c              ;b168  3c          DATA 0x3c '<'
    .byte 0xff              ;b169  ff          DATA 0xff
    .byte 0x0c              ;b16a  0c          DATA 0x0c
    .byte 0x25              ;b16b  25          DATA 0x25 '%'
    .byte 0xff              ;b16c  ff          DATA 0xff
    .byte 0x00              ;b16d  00          DATA 0x00
    .byte 0x01              ;b16e  01          DATA 0x01
    .byte 0x00              ;b16f  00          DATA 0x00

mem_b170:
;table of words used with table_get_word
    .byte 0x0f              ;b170  0f          DATA 0x0f
    .word lab_4307
    .word sub_432d
    .word lab_4370
    .word lab_4339
    .word lab_45f7
    .word lab_45d3
    .word lab_435a
    .word lab_45df
    .word lab_4365
    .word lab_45eb
    .word lab_44b5
    .word lab_4502
    .word lab_454f
    .word lab_4603
    .word lab_4438

mem_b18f:
;table of words used with table_get_word
    .byte 0x12              ;b18f  12          DATA 0x12        18 entries below:
    .word .                 ;DATA  b190
    .word mem_b1b4+1        ;DATA
    .word mem_af70_a99cz23  ;DATA
    .word mem_af70_a99cz23  ;DATA
    .word mem_fe30          ;DATA
    .word mem_af70_a99cz23  ;DATA
    .word freq_idx          ;DATA
    .word mem_f225          ;DATA
    .word mem_fe57          ;DATA
    .word mem_f257_fade     ;DATA
    .word mem_fe43_key          ;DATA
    .word mem_fbac          ;DATA
    .word mem_f1b3          ;DATA
    .word mem_af70_a99cz23  ;DATA
    .word mem_f1b9          ;DATA
    .word mem_fe4c          ;DATA
    .word mem_fe44          ;DATA
    .word mem_fc75_cd_num1  ;DATA

;unknown table
mem_b1b4:
    .byte 0x12              ;b1b4  12          DATA 0x12        18 entries below:
    .byte 0x4b              ;b1b5  4b          DATA 0x4b 'K'
    .byte 0x00              ;b1b6  00          DATA 0x00
    .byte 0x02              ;b1b7  02          DATA 0x02
    .byte 0xff              ;b1b8  ff          DATA 0xff
    .byte 0x18              ;b1b9  18          DATA 0x18
    .byte 0xff              ;b1ba  ff          DATA 0xff
    .byte 0x0f              ;b1bb  0f          DATA 0x0f
    .byte 0x0b              ;b1bc  0b          DATA 0x0b
    .byte 0x15              ;b1bd  15          DATA 0x15
    .byte 0x0d              ;b1be  0d          DATA 0x0d
    .byte 0x00              ;b1bf  00          DATA 0x00
    .byte 0x03              ;b1c0  03          DATA 0x03
    .byte 0x01              ;b1c1  01          DATA 0x01
    .byte 0xff              ;b1c2  ff          DATA 0xff
    .byte 0x02              ;b1c3  02          DATA 0x02
    .byte 0x09              ;b1c4  09          DATA 0x09
    .byte 0x0c              ;b1c5  0c          DATA 0x0c
    .byte 0x07              ;b1c6  07          DATA 0x07

mem_b1c7:
;table of bytes used with table_get_byte
    .byte 0x0b              ;b1c7  0b          DATA 0x0b        11 entries below:
    .byte 0x00              ;b1c8  00          DATA 0x00
    .byte 0x08              ;b1c9  08          DATA 0x08
    .byte 0x09              ;b1ca  09          DATA 0x09
    .byte 0x48              ;b1cb  48          DATA 0x48 'H'
    .byte 0x49              ;b1cc  49          DATA 0x49 'I'
    .byte 0x1c              ;b1cd  1c          DATA 0x1c
    .byte 0x27              ;b1ce  27          DATA 0x27 '''
    .byte 0x00              ;b1cf  00          DATA 0x00
    .byte 0x2a              ;b1d0  2a          DATA 0x2a '*'
    .byte 0x29              ;b1d1  29          DATA 0x29 ')'
    .byte 0x13              ;b1d2  13          DATA 0x13

mem_b1d3:
;table of bytes used with table_get_byte
    .byte 0x0b              ;b1d3  0b          DATA 0x0b        11 entries below:
    .byte 0x00              ;b1d4  00          DATA 0x00
    .byte 0x08              ;b1d5  08          DATA 0x08
    .byte 0x09              ;b1d6  09          DATA 0x09
    .byte 0x48              ;b1d7  48          DATA 0x48 'H'
    .byte 0x49              ;b1d8  49          DATA 0x49 'I'
    .byte 0x1c              ;b1d9  1c          DATA 0x1c
    .byte 0x27              ;b1da  27          DATA 0x27 '''
    .byte 0x00              ;b1db  00          DATA 0x00
    .byte 0x2a              ;b1dc  2a          DATA 0x2a '*'
    .byte 0x29              ;b1dd  29          DATA 0x29 ')'
    .byte 0x13              ;b1de  13          DATA 0x13

mem_b1df:
;table of bytes used with table_get_byte
    .byte 0x0b              ;b1df  0b          DATA 0x0b        11 entries below:
    .byte 0x00              ;b1e0  00          DATA 0x00
    .byte 0x1c              ;b1e1  1c          DATA 0x1c
    .byte 0x1d              ;b1e2  1d          DATA 0x1d
    .byte 0x48              ;b1e3  48          DATA 0x48 'H'
    .byte 0x49              ;b1e4  49          DATA 0x49 'I'
    .byte 0x00              ;b1e5  00          DATA 0x00
    .byte 0x27              ;b1e6  27          DATA 0x27 '''
    .byte 0x00              ;b1e7  00          DATA 0x00
    .byte 0x2a              ;b1e8  2a          DATA 0x2a '*'
    .byte 0x29              ;b1e9  29          DATA 0x29 ')'
    .byte 0x13              ;b1ea  13          DATA 0x13

kwp_login_b1eb:
    .ascii "OCLED"    ;"DELCO" backwards

mem_b1f0:
    .byte 0x03              ;b1f0  03          DATA 0x03        3 entries below:
    .byte 0x00              ;b1f1  00          DATA 0x00
    .byte 0x4c              ;b1f2  4c          DATA 0x4c 'L'
    .byte 0xe5              ;b1f3  e5          DATA 0xe5

mem_b1f4:
    .byte 0x00              ;b1f4  00          DATA 0x00
    .byte 0x00              ;b1f5  00          DATA 0x00
    .byte 0x00              ;b1f6  00          DATA 0x00
    .byte 0x20              ;b1f7  20          DATA 0x20 ' '
    .byte 0x00              ;b1f8  00          DATA 0x00
    .byte 0xf8              ;b1f9  f8          DATA 0xf8

mem_b1fa:
;TODO investigate this unknown table of kwp1281 procedures
;indexed by mem_fbc8
    .byte 0x26                  ;b1fa  26          DATA 0x26 '&'      38 entries below:
    .word lab_4dd2              ;0x00
    .word lab_532a_ack          ;0x01 Send ACK
    .word lab_5337_disconnect   ;0x02 Send Disconnect request to instrument cluster
    .word lab_5344_nak_resend   ;0x03 Send NAK response asking for the last block to be sent again
    .word lab_5355_nak_fail     ;0x04 Send NAK response for general failure
    .word lab_5365              ;0x05 index 0x08 read identification
    .word lab_52ea_id_part_num  ;0x06 Send id block 1/4 with "1J0035180B" (Block length=0x0F)
    .word lab_52e0_id_radio     ;0x07 Send id block 2/4 with "Radio DE2"  (Block length=0x0F)
    .word lab_52d5_id_0001      ;0x08 Send id block 3/4 with "0001"       (Block length=0x0E)
    .word lab_52b1_id_coding    ;0x09 Send id block 4/4 with coding       (Block length=0x08)
    .word lab_5370              ;0x0a index 0x09 read faults
    .word lab_537b              ;0x0b Send index 0x0a response to read/clear faults
    .word lab_53b9              ;0x0c index 0x0b clear faults
    .word lab_53c4              ;0x0d index 0x0c output tests
    .word lab_53cf              ;0x0e Send index 0x0d response to output tests
    .word lab_53ef              ;0x0f index 0x0e ? TODO
    .word lab_5405              ;0x10 Send NAK response for general failure
    .word lab_53fa              ;0x11 index 0x0f ? TODO
    .word lab_5408              ;0x12 index 0x10 basic setting
    .word lab_5422              ;0x13 Send index 0x12 response to group reading
    .word lab_5415              ;0x14 index 0x11 group reading
    .word lab_545b              ;0x15 index 013 recoding
    .word lab_5476              ;0x16 index 0x14 adaptation
    .word lab_5483              ;0x17 index 0x15 ? TODO
    .word lab_5495              ;0x18 index 0x16 ? TODO
    .word lab_54b7              ;0x19 Send NAK response for general failure
    .word lab_54ba              ;0x1a index 0x17 single reading
    .word lab_54c7              ;0x1b Send NAK response for general failure
    .word lab_54ca              ;0x1c index 0x18 login
    .word lab_54ea              ;0x1d index 0x19 read eeprom
    .word lab_54fb              ;0x1e Send response to title 0x1b custom usage with data
    .word lab_5514              ;0x1f index 0x1b read ram
    .word lab_552a_read_ram     ;0x20 Send 0x1c response to read ram or send nak
    .word lab_556b              ;0x21 index 0x1d read rom or eeprom
    .word lab_5581_read_eeprom  ;0x22 Send read EEPROM response
    .word lab_55c5              ;0x23 Send EEPROM write response
    .word lab_55de_secure_req   ;0x24 Send Security Access Request (title 0xD7)
    .word lab_55f7              ;0x25 Send NAK response for general failure

mem_b247:
;indexed by mem_fbc9
    .byte 0x0a                        ;b247   DATA 0x0a   10 entries below:
    .word lab_4df4_mem_fbc9_eq_0x00   ;b248   VECTOR      B=0x00  Sets mem_fbc9=0, does nothing
    .word lab_51ca_mem_fbc9_eq_0x01   ;b24a   VECTOR      B=0x01  Sets UART baud and mode
    .word lab_51e2_mem_fbc9_eq_0x02   ;b24c   VECTOR      B=0x02  Sets UART baud and mode
    .word lab_51fa_mem_fbc9_eq_0x03   ;b24e   VECTOR      B=0x03  Radio-as-tester only: start connection if address sent is cluster
    .word lab_4dfa_mem_fbc9_eq_0x04   ;b250   VECTOR      B=0x04  Block received and it fit in RX buffer; dispatch it
    .word lab_5231_mem_fbc9_eq_0x05   ;b252   VECTOR      B=0x05  Unknown; dispatches to various routines
    .word lab_5150_mem_fbc9_eq_0x06   ;b254   VECTOR      B=0x06  Unknown; seems to be Read RAM / EEPROM related
    .word lab_5186_mem_fbc9_eq_0x07   ;b256   VECTOR      B=0x07  Block received but it exceeded RX buffer length
    .word lab_51b8_mem_fbc9_eq_0x08   ;b258   VECTOR      B=0x08  Bad block end byte received
    .word lab_5167_mem_fbc9_eq_0x09   ;b25a   VECTOR      B=0x09  Send Read RAM / EEPROM response

kwp_titles:
;table of all block titles
;used with all addresses
    .byte 0x23              ;b25c  23          DATA 0x23 '#'    35 entries below:
    .byte 0xff              ;b25d  ff          DATA 0xff        B=0x00
    .byte 0x09              ;b25e  09          DATA 0x09        B=0x01 ack
    .byte 0x06              ;b25f  06          DATA 0x06        B=0x02 disconnect
    .byte 0x0a              ;b260  0a          DATA 0x0a        B=0x03 nak (bad title)
    .byte 0x0a              ;b261  0a          DATA 0x0a        B=0x04 nak
    .byte 0xf6              ;b262  f6          DATA 0xf6        B=0x05 response with ascii/data (id block 4/4 with coding)
    .byte 0xf6              ;b263  f6          DATA 0xf6        B=0x06 response with ascii/data (id block 3/4 with "0001")
    .byte 0xf6              ;b264  f6          DATA 0xf6        B=0x07 response with ascii/data (id block 1/4 "1J0035180B", 2/4 with "Radio DE2")
    .byte 0x00              ;b265  00          DATA 0x00        B=0x08 read identification
    .byte 0x07              ;b266  07          DATA 0x07        B=0x09 read faults
    .byte 0xfc              ;b267  fc          DATA 0xfc        B=0x0a response to read/clear faults
    .byte 0x05              ;b268  05          DATA 0x05        B=0x0b clear faults
    .byte 0x04              ;b269  04          DATA 0x04        B=0x0c output tests
    .byte 0xf5              ;b26a  f5          DATA 0xf5        B=0x0d response to output tests
    .byte 0x11              ;b26b  11          DATA 0x11        B=0x0e ?
    .byte 0x12              ;b26c  12          DATA 0x12        B=0x0f ?
    .byte 0x28              ;b26d  28          DATA 0x28 '('    B=0x10 basic setting
    .byte 0x29              ;b26e  29          DATA 0x29 ')'    B=0x11 group reading
    .byte 0xe7              ;b26f  e7          DATA 0xe7        B=0x12 response to group reading
    .byte 0x10              ;b270  10          DATA 0x10        B=0x13 recoding
    .byte 0x21              ;b271  21          DATA 0x21 '!'    B=0x14 adaptation
    .byte 0x22              ;b272  22          DATA 0x22 '"'    B=0x15 ?
    .byte 0x2a              ;b273  2a          DATA 0x2a '*'    B=0x16 ?
    .byte 0x08              ;b274  08          DATA 0x08        B=0x17 single reading
    .byte 0x2b              ;b275  2b          DATA 0x2b '+'    B=0x18 login
    .byte 0x1b              ;b276  1b          DATA 0x1b        B=0x19 read eeprom
    .byte 0x1b              ;b277  1b          DATA 0x1b        B=0x1a ?
    .byte 0x01              ;b278  01          DATA 0x01        B=0x1b read ram
    .byte 0xfe              ;b279  fe          DATA 0xfe        B=0x1c response to read ram
    .byte 0x03              ;b27a  03          DATA 0x03        B=0x1d read rom or eeprom
    .byte 0xfd              ;b27b  fd          DATA 0xfd        B=0x1e response to read rom, eeprom
    .byte 0x0c              ;b27c  0c          DATA 0x0c        B=0x1f write eeprom
    .byte 0xf9              ;b27d  f9          DATA 0xf9        B=0x20 response to write eeprom
    .byte 0xd7              ;b27e  d7          DATA 0xd7        B=0x21 Security Access Request (Radio->Cluster)
    .byte 0x3d              ;b27f  3d          DATA 0x3d '='    D=0x22 Security Access Response (Cluster->Radio)

kwp_lengths:
;table of block lengths; same order as kwp_titles
;used with all addresses
;ff means variable length
    .byte 0x23              ;b280  23          DATA 0x23 '#'    35 entries below:
    .byte 0x00              ;b281  00          DATA 0x00        B=0x00
    .byte 0x03              ;b282  03          DATA 0x03        B=0x01 ack
    .byte 0x03              ;b283  03          DATA 0x03        B=0x02 disconnect
    .byte 0x04              ;b284  04          DATA 0x04        B=0x03 nak (bad title)
    .byte 0x04              ;b285  04          DATA 0x04        B=0x04 nak
    .byte 0x08              ;b286  08          DATA 0x08        B=0x05 response with ascii/data (id block 4/4 with coding)
    .byte 0x0e              ;b287  0e          DATA 0x0e        B=0x06 response with ascii/data (id block 3/4 with "0001")
    .byte 0x0f              ;b288  0f          DATA 0x0f        B=0x07 response with ascii/data (id block 1/4 "1J0035180B", 2/4 with "Radio DE2")
    .byte 0x03              ;b289  03          DATA 0x03        B=0x08 read identification
    .byte 0x03              ;b28a  03          DATA 0x03        B=0x09 read faults
    .byte 0xff              ;b28b  ff          DATA 0xff        B=0x0a response to read/clear faults
    .byte 0x03              ;b28c  03          DATA 0x03        B=0x0b clear faults
    .byte 0x04              ;b28d  04          DATA 0x04        B=0x0c output tests
    .byte 0x05              ;b28e  05          DATA 0x05        B=0x0d response to output tests
    .byte 0x03              ;b28f  03          DATA 0x03        B=0x0e ?
    .byte 0x03              ;b290  03          DATA 0x03        B=0x0f ?
    .byte 0x04              ;b291  04          DATA 0x04        B=0x10 basic setting
    .byte 0x04              ;b292  04          DATA 0x04        B=0x11 group reading
    .byte 0xff              ;b293  ff          DATA 0xff        B=0x12 response to group reading
    .byte 0x07              ;b294  07          DATA 0x07        B=0x13 recoding
    .byte 0x04              ;b295  04          DATA 0x04        B=0x14 adaptation
    .byte 0x06              ;b296  06          DATA 0x06        B=0x15 ?
    .byte 0x09              ;b297  09          DATA 0x09        B=0x16 ?
    .byte 0x04              ;b298  04          DATA 0x04        B=0x17 single reading
    .byte 0x08              ;b299  08          DATA 0x08        B=0x18 login
    .byte 0xff              ;b29a  ff          DATA 0xff        B=0x19 read eeprom
    .byte 0xff              ;b29b  ff          DATA 0xff        B=0x1a ?
    .byte 0x06              ;b29c  06          DATA 0x06        B=0x1b read ram
    .byte 0xff              ;b29d  ff          DATA 0xff        B=0x1c response to read ram
    .byte 0x06              ;b29e  06          DATA 0x06        B=0x1d read rom or eeprom
    .byte 0xff              ;b29f  ff          DATA 0xff        B=0x1e response to read rom, eeprom
    .byte 0xff              ;b2a0  ff          DATA 0xff        B=0x1f write eeprom
    .byte 0x07              ;b2a1  07          DATA 0x07        B=0x20 response to write eeprom
    .byte 0x07              ;b2a2  07          DATA 0x07        B=0x21 Security Access Request (Radio->Cluster)
    .byte 0x07              ;b2a3  07          DATA 0x07        B=0x22 Security Access Response (Cluster->Radio)

kwp_7c_titles:
;block titles accepted on address 0x7c
;used if kwp_addr_idx = 0x01
    .byte 0x09              ;b2a4  09          DATA 0x09        9 entries below:
    .byte 0xff              ;b2a5  ff          DATA 0xff        B=0 <bad title>
    .byte 0x09              ;b2a6  09          DATA 0x09        B=1 ack
    .byte 0x06              ;b2a7  06          DATA 0x06        B=2 disconnect
    .byte 0x0a              ;b2a8  0a          DATA 0x0a        B=3 nak
    .byte 0x2b              ;b2a9  2b          DATA 0x2b '+'    B=4 login
    .byte 0x1b              ;b2aa  1b          DATA 0x1b        B=5 ? custom usage
    .byte 0x01              ;b2ab  01          DATA 0x01        B=6 read ram
    .byte 0x03              ;b2ac  03          DATA 0x03        B=7 read rom or eeprom (24c04)
    .byte 0x0c              ;b2ad  0c          DATA 0x0c        B=8 write eeprom

kwp_7c_handlers:
;handlers for block titles on address 0x56
;same order as kwp_7c_titles
    .byte 0x09                    ;b2ae  09          DATA 0x09        9 entries below:
    ;XXX misleading: the B=0 handler is not actually used by the code.  even more confusing, the
    ;XXX   code calls lab_5355_nak_fail for a bad title (not lab_5344_nak_resend as here).
    .word lab_5344_nak_resend     ;b2af  44 53       VECTOR           B=0 <bad title> XXX
    .word kwp_7c_09_ack           ;b2b1  ad 4e       VECTOR           B=1 ack
    .word kwp_7c_06_disconnect    ;b2b3  b3 4e       VECTOR           B=2 disconnect
    .word kwp_7c_0a_nak           ;b2b5  c1 4e       VECTOR           B=3 nak
    .word kwp_7c_2b_login         ;b2b7  e1 4e       VECTOR           B=4 login
    .word kwp_7c_1b_custom        ;b2b9  4f 4f       VECTOR           B=5 ? custom usage
    .word kwp_7c_01_read_ram      ;b2bb  f6 4e       VECTOR           B=6 read ram
    .word kwp_7c_03_read_eeprom   ;b2bd  12 4f       VECTOR           B=7 read rom or eeprom (24c04)
    .word kwp_7c_0c_write_eeprom  ;b2bf  2e 4f       VECTOR           B=8 write eeprom

kwp_56_titles:
;block titles accepted on address 0x56
;used if kwp_addr_idx = 0x02
    .byte 0x0f              ;b2c1  0f          DATA 0x0f        15 entries below:
    .byte 0xff              ;b2c2  ff          DATA 0xff        B= 0 <bad title>
    .byte 0x09              ;b2c3  09          DATA 0x09        B= 1 ack
    .byte 0x06              ;b2c4  06          DATA 0x06        B= 2 disconnect
    .byte 0x0a              ;b2c5  0a          DATA 0x0a        B= 3 nak
    .byte 0x00              ;b2c6  00          DATA 0x00        B= 4 read identification
    .byte 0x07              ;b2c7  07          DATA 0x07        B= 5 read faults
    .byte 0x05              ;b2c8  05          DATA 0x05        B= 6 clear faults
    .byte 0x04              ;b2c9  04          DATA 0x04        B= 7 output tests
    .byte 0x28              ;b2ca  28          DATA 0x28 '('    B= 8 basic setting
    .byte 0x29              ;b2cb  29          DATA 0x29 ')'    B= 9 group reading
    .byte 0x10              ;b2cc  10          DATA 0x10        B=10 recoding
    .byte 0x2b              ;b2cd  2b          DATA 0x2b '+'    B=11 login
    .byte 0x01              ;b2ce  01          DATA 0x01        B=12 read ram
    .byte 0x03              ;b2cf  03          DATA 0x03        B=13 read rom or eeprom (24c04)
    .byte 0x0c              ;b2d0  0c          DATA 0x0c        B=14 write eeprom

kwp_56_handlers:
;handlers for block titles on address 0x56
;same order as kwp_56_titles
    .byte 0x0f                    ;b2d1  0f          DATA 0x0f        15 entries below:
    ;XXX misleading: the B=0 handler is not actually used by the code.  even more confusing, the
    ;XXX   code calls lab_5355_nak_fail for a bad title (not lab_5344_nak_resend as here).
    .word lab_5344_nak_resend     ;b2d2  44 53       VECTOR           B= 0 <bad title> XXX
    .word kwp_56_09_ack           ;b2d4  d7 4f       VECTOR           B= 1 ack
    .word kwp_56_06_disconnect    ;b2d6  1e 50       VECTOR           B= 2 disconnect
    .word kwp_56_0a_nak           ;b2d8  2e 50       VECTOR           B= 3 nak
    .word kwp_56_00_read_id       ;b2da  4e 50       VECTOR           B= 4 read identification
    .word kwp_56_07_read_faults   ;b2dc  58 50       VECTOR           B= 5 read faults
    .word kwp_56_05_clear_faults  ;b2de  60 50       VECTOR           B= 6 clear faults
    .word kwp_56_04_output_tests  ;b2e0  65 50       VECTOR           B= 7 output tests
    .word kwp_56_28_basic_setting ;b2e2  6d 50       VECTOR           B= 8 basic setting
    .word kwp_56_29_group_reading ;b2e4  75 50       VECTOR           B= 9 group reading
    .word kwp_56_10_recoding      ;b2e6  7d 50       VECTOR           B=10 recoding
    .word kwp_56_2b_login         ;b2e8  8a 50       VECTOR           B=11 login
    .word kwp_56_01_read_ram      ;b2ea  9e 50       VECTOR           B=12 read ram
    .word kwp_56_03_read_eeprom   ;b2ec  b9 50       VECTOR           B=13 read rom or eeprom (24c04)
    .word kwp_56_0c_write_eeprom  ;b2ee  d4 50       VECTOR           B=14 write eeprom

kwp_3f_titles:
;block titles accepted on address 0x3f
;used if kwp_addr_idx = 0x03
    .byte 0x05              ;b2f0  05          DATA 0x05        5 entries below:
    .byte 0xff              ;b2f1  ff          DATA 0xff        B=0 <bad title>
    .byte 0x09              ;b2f2  09          DATA 0x09        B=1 ack
    .byte 0x06              ;b2f3  06          DATA 0x06        B=2 disconnect
    .byte 0x0a              ;b2f4  0a          DATA 0x0a        B=3 nak
    .byte 0x3d              ;b2f5  3d          DATA 0x3d '='    B=4 Security Access Response (Cluster->Radio)

kwp_3f_handlers:
;handlers for block titles on address 0x3f
;same order as kwp_3f_titles
    .byte 0x05                      ;b2f6  05          DATA 0x05        5 entries below:
    ;XXX misleading: the B=0 handler is not actually used by the code.  even more confusing, the
    ;XXX   code calls lab_5355_nak_fail for a bad title (not lab_5344_nak_resend as here).
    .word lab_5344_nak_resend       ;b2f7  44 53       VECTOR           B=0 <bad title> XXX
    .word kwp_3f_09_ack             ;b2f9  f4 50       VECTOR           B=1 ack
    .word kwp_3f_06_disconnect      ;b2fb  06 51       VECTOR           B=2 disconnect
    .word kwp_3f_0a_nak             ;b2fd  1c 51       VECTOR           B=3 nak
    .word kwp_3f_3d_secure_access   ;b2ff  3a 51       VECTOR           B=4 Security Access Response (Cluster->Radio)

kwp_7c_1b_subtitles:
;subtitles accepted by block title 0x1b on address 0x7c
    .byte 0x0b              ;b301  0b          DATA 0x0b        11 entries below:
    .byte 0xff              ;b302  ff          DATA 0xff        B=0x00
    .byte 0x26              ;b303  26          DATA 0x26 '&'    B=0x01  Title=0x1b  Subtitle=0x26
    .byte 0x27              ;b304  27          DATA 0x27 '''    B=0x02  Title=0x1b  Subtitle=0x27
    .byte 0x28              ;b305  28          DATA 0x28 '('    B=0x03  Title=0x1b  Subtitle=0x28
    .byte 0x2a              ;b306  2a          DATA 0x2a '*'    B=0x04  Title=0x1b  Subtitle=0x2a
    .byte 0x2d              ;b307  2d          DATA 0x2d '-'    B=0x05  Title=0x1b  Subtitle=0x2d
    .byte 0x2e              ;b308  2e          DATA 0x2e '.'    B=0x06  Title=0x1b  Subtitle=0x2e
    .byte 0x2f              ;b309  2f          DATA 0x2f '/'    B=0x07  Title=0x1b  Subtitle=0x2f
    .byte 0x30              ;b30a  30          DATA 0x30 '0'    B=0x08  Title=0x1b  Subtitle=0x30
    .byte 0x31              ;b30b  31          DATA 0x31 '1'    B=0x09  Title=0x1b  Subtitle=0x31
    .byte 0x32              ;b30c  32          DATA 0x32 '2'    B=0x0A  Title=0x1b  Subtitle=0x32

kwp_7c_1b_lengths:
;block lengths for subtitles of block title 0x1b on address 0x7c
;same order as kwp_7c_1b_subtitles
    .byte 0x0b              ;b30d  0b          DATA 0x0b        11 entries below:
    .byte 0x00              ;b30e  00          DATA 0x00        B=0x00
    .byte 0x06              ;b30f  06          DATA 0x06        B=0x01  Title=0x1b  Subtitle=0x26
    .byte 0x07              ;b310  07          DATA 0x07        B=0x02  Title=0x1b  Subtitle=0x27
    .byte 0x05              ;b311  05          DATA 0x05        B=0x03  Title=0x1b  Subtitle=0x28
    .byte 0x07              ;b312  07          DATA 0x07        B=0x04  Title=0x1b  Subtitle=0x2a
    .byte 0x0b              ;b313  0b          DATA 0x0b        B=0x05  Title=0x1b  Subtitle=0x2d
    .byte 0x0b              ;b314  0b          DATA 0x0b        B=0x06  Title=0x1b  Subtitle=0x2e
    .byte 0x05              ;b315  05          DATA 0x05        B=0x07  Title=0x1b  Subtitle=0x2f
    .byte 0x05              ;b316  05          DATA 0x05        B=0x08  Title=0x1b  Subtitle=0x30
    .byte 0x05              ;b317  05          DATA 0x05        B=0x09  Title=0x1b  Subtitle=0x31
    .byte 0x05              ;b318  05          DATA 0x05        B=0x0A  Title=0x1b  Subtitle=0x32

kwp_7c_1b_handlers:
;handlers for subtitles of block title 0x1b on address 0x7c
;same order as kwp_7c_1b_subtitles
    .byte 0x0b                  ;b319  0b          DATA 0x0b        11 entries below:
    ;XXX misleading: the B=0 handler is not actually used by the code.  even more confusing, the
    ;XXX   code calls lab_5355_nak_fail for a bad subtitle (not lab_5344_nak_resend as here).
    .word lab_5344_nak_resend   ;b31a  44 53       VECTOR           B=0x00  <bad title> XXX
    .word kwp_7c_1b_26          ;b31c  9e 4f       VECTOR           B=0x01  Title=0x1b  Subtitle=0x26
    .word kwp_7c_1b_27          ;b31e  a4 4f       VECTOR           B=0x02  Title=0x1b  Subtitle=0x27
    .word kwp_7c_1b_28          ;b320  aa 4f       VECTOR           B=0x03  Title=0x1b  Subtitle=0x28
    .word kwp_7c_1b_2a          ;b322  b0 4f       VECTOR           B=0x04  Title=0x1b  Subtitle=0x2a
    .word kwp_7c_1b_2d          ;b324  b6 4f       VECTOR           B=0x05  Title=0x1b  Subtitle=0x2d
    .word kwp_7c_1b_2e          ;b326  bc 4f       VECTOR           B=0x06  Title=0x1b  Subtitle=0x2e
    .word kwp_7c_1b_2f          ;b328  c2 4f       VECTOR           B=0x07  Title=0x1b  Subtitle=0x2f
    .word kwp_7c_1b_30          ;b32a  c5 4f       VECTOR           B=0x08  Title=0x1b  Subtitle=0x30
    .word kwp_7c_1b_31          ;b32c  cb 4f       VECTOR           B=0x09  Title=0x1b  Subtitle=0x31
    .word kwp_7c_1b_32          ;b32e  d1 4f       VECTOR           B=0x0A  Title=0x1b  Subtitle=0x32

key_matrix:
;b330
;On each line, the first byte is an arbitrary number.  The four bytes
;are uPD16432B key scan codes (only 1 bit is set in all 4 bytes).
;
;   <key code>    <uPD16432B key data bytes>
    .byte 0x01,   0x00, 0x00, 0x04, 0x00    ;PRESET_1
    .byte 0x02,   0x00, 0x00, 0x02, 0x00    ;PRESET_2
    .byte 0x03,   0x00, 0x00, 0x01, 0x00    ;PRESET_3
    .byte 0x04,   0x00, 0x00, 0x00, 0x10    ;PRESET_4
    .byte 0x05,   0x00, 0x00, 0x00, 0x20    ;PRESET_5
    .byte 0x06,   0x00, 0x00, 0x00, 0x40    ;PRESET_6
    .byte 0x07,   0x00, 0x00, 0x00, 0x08    ;SCAN
    .byte 0x08,   0x00, 0x00, 0x40, 0x00    ;SEEK_UP
    .byte 0x09,   0x00, 0x00, 0x20, 0x00    ;SEEK_DOWN
    .byte 0x0A,   0x00, 0x00, 0x00, 0x02    ;TUNE_UP
    .byte 0x0B,   0x00, 0x00, 0x00, 0x04    ;TUNE_DOWN
    .byte 0x0C,   0x00, 0x10, 0x00, 0x00    ;SOUND_FB
    .byte 0x0D,   0x00, 0x20, 0x00, 0x00    ;SOUND_BASS
    .byte 0x0E,   0x00, 0x40, 0x00, 0x00    ;SOUND_MID
    .byte 0x0F,   0x00, 0x80, 0x00, 0x00    ;SOUND_TREB
    .byte 0x10,   0x00, 0x00, 0x00, 0x01    ;MIX_DOLBY
    .byte 0x11,   0x00, 0x02, 0x00, 0x00    ; ???
    .byte 0x12,   0x00, 0x04, 0x00, 0x00    ; ???
    .byte 0x13,   0x00, 0x01, 0x00, 0x00    ;TAPE_SIDE
    .byte 0x14,   0x00, 0x00, 0x08, 0x00    ;MODE_CD
    .byte 0x15,   0x00, 0x08, 0x00, 0x00    ;MODE_TAPE
    .byte 0x16,   0x00, 0x00, 0x00, 0x80    ;MODE_AM
    .byte 0x17,   0x00, 0x00, 0x80, 0x00    ;MODE_FM
key_matrix_0x18:
    .byte 0x18,   0x00, 0x00, 0x10, 0x00    ; ???

key_mask:
;Mask bytes that are AND'ed with the key data buffer (upd_keys) to
;remove unused key bits.  Byte 0 is not used by the faceplate.
    .byte 0x00, 0xFF, 0xFF, 0xFF

mfsw_codes:
;MFSW key codes supported by the radio
;table used with table_find_byte
;value comes from mfsw_key
    .byte 0x04              ;b3ac  04          DATA 0x04        4 entries below:
    .byte 0x00  ;MFSW Key Code: Volume Down
    .byte 0x01  ;MFSW Key Code: Volume Up
    .byte 0x0a  ;MFSW Key Code: Up
    .byte 0x0b  ;MFSW Key Code: Down

mfsw_equivs:
;table used with table_get_byte
;indexed by a value from mfsw_codes table above
;value | 0x80 is stored in mem_fc26
    .byte 0x04              ;b3b1  04          DATA 0x04        4 entries below:
    .byte 0x1f  ;Volume Down
    .byte 0x1e  ;Volume Up
    .byte 0x21  ;Up
    .byte 0x20  ;Down

mem_b3b6:
;unknown table
    .byte 0x0c              ;b3b6  0c          DATA 0x0c        12 entries below:
    .byte 0xff              ;b3b7  ff          DATA 0xff
    .byte 0xfd              ;b3b8  fd          DATA 0xfd
    .byte 0xfc              ;b3b9  fc          DATA 0xfc
    .byte 0xfa              ;b3ba  fa          DATA 0xfa
    .byte 0xf5              ;b3bb  f5          DATA 0xf5
    .byte 0xf0              ;b3bc  f0          DATA 0xf0
    .byte 0xeb              ;b3bd  eb          DATA 0xeb
    .byte 0xe1              ;b3be  e1          DATA 0xe1
    .byte 0xd7              ;b3bf  d7          DATA 0xd7
    .byte 0xcd              ;b3c0  cd          DATA 0xcd
    .byte 0x9b              ;b3c1  9b          DATA 0x9b
    .byte 0x00              ;b3c2  00          DATA 0x00

mem_b3c3:
;unknown table
    .byte 0x08              ;b3c3  08          DATA 0x08        8 entries below
    .byte 0x05              ;b3c4  05          DATA 0x05
    .byte 0x07              ;b3c5  07          DATA 0x07
    .byte 0x0a              ;b3c6  0a          DATA 0x0a
    .byte 0x11              ;b3c7  11          DATA 0x11
    .byte 0x19              ;b3c8  19          DATA 0x19
    .byte 0x21              ;b3c9  21          DATA 0x21 '!'
    .byte 0x32              ;b3ca  32          DATA 0x32 '2'
    .byte 0x64              ;b3cb  64          DATA 0x64 'd'

mem_b3cc:
;unknown table
    .byte 0x05              ;b3cc  05          DATA 0x05        5 entries below
    .byte 0x01              ;b3cd  01          DATA 0x01
    .byte 0x02              ;b3ce  02          DATA 0x02
    .byte 0x03              ;b3cf  03          DATA 0x03
    .byte 0x08              ;b3d0  08          DATA 0x08
    .byte 0xff              ;b3d1  ff          DATA 0xff

mem_b3d2:
;unknown table
    .byte 0x06              ;b3d2  06          DATA 0x06        6 entries below:
    .byte 0x01              ;b3d3  01          DATA 0x01
    .byte 0x21              ;b3d4  21          DATA 0x21 '!'
    .byte 0x41              ;b3d5  41          DATA 0x41 'A'
    .byte 0x61              ;b3d6  61          DATA 0x61 'a'
    .byte 0x81              ;b3d7  81          DATA 0x81
    .byte 0xa2              ;b3d8  a2          DATA 0xa2

mem_b3d9:
;table of words used with table_get_word
    .byte 0x08              ;b3d9  08          DATA 0x08        8 entries below:
    .word mem_b3ea+1  ;Region 0: FM 87.7 - 107.9, AM 530 - 1710
    .word mem_b3f9+1  ;Region 1: FM 76.0 -  90.0, AM 522 - 1584
    .word mem_b3f6+1  ;Region 2: FM 87.5 - 108.0, AM 531 - 1629
    .word mem_b3f6+1  ;Region 3: FM 87.5 - 108.0, AM 531 - 1620
    .word mem_b3ea+1  ;Region 4: FM 87.7 - 107.9, AM 530 - 1710
    .word mem_b3ea+1  ;Region 5: FM 87.7 - 107.9, AM 530 - 1710
    .word mem_b3ea+1  ;Region 6: FM 87.7 - 107.9, AM 530 - 1710
    .word mem_b3fc+1  ;Region 7: FM 75.9 - 108.1, AM 520 - 1710

mem_b3ea:
;unknown table
    .byte 0x0b              ;b3ea  0b          DATA 0x0b        11 entries below:
    .byte 0x01              ;b3eb  01          DATA 0x01
    .byte 0x0a              ;b3ec  0a          DATA 0x0a
    .byte 0x17              ;b3ed  17          DATA 0x17
    .byte 0x21              ;b3ee  21          DATA 0x21 '!'
    .byte 0x2b              ;b3ef  2b          DATA 0x2b '+'
    .byte 0x3b              ;b3f0  3b          DATA 0x3b ';'
    .byte 0x62              ;b3f1  62          DATA 0x62 'b'
    .byte 0x63              ;b3f2  63          DATA 0x63 'c'
    .byte 0x69              ;b3f3  69          DATA 0x69 'i'
    .byte 0x6f              ;b3f4  6f          DATA 0x6f 'o'
    .byte 0x75              ;b3f5  75          DATA 0x75 'u'

mem_b3f6:
;unknown table
    .byte 0x02              ;b3f6  02          DATA 0x02        2 entries below:
    .byte 0x0d              ;b3f7  0d          DATA 0x0d
    .byte 0x56              ;b3f8  56          DATA 0x56 'V'

mem_b3f9:
;unknown table
    .byte 0x02              ;b3f9  02          DATA 0x02        2 entries below:
    .byte 0x0e              ;b3fa  0e          DATA 0x0e
    .byte 0x57              ;b3fb  57          DATA 0x57 'W'

mem_b3fc:
;unknown table
    .byte 0x0b              ;b3fc  0b          DATA 0x0b        11 entries below:
    .byte 0x02              ;b3fd  02          DATA 0x02
    .byte 0x0b              ;b3fe  0b          DATA 0x0b
    .byte 0x18              ;b3ff  18          DATA 0x18
    .byte 0x22              ;b400  22          DATA 0x22 '"'
    .byte 0x2c              ;b401  2c          DATA 0x2c ','
    .byte 0x3c              ;b402  3c          DATA 0x3c '<'
    .byte 0x63              ;b403  63          DATA 0x63 'c'
    .byte 0x64              ;b404  64          DATA 0x64 'd'
    .byte 0x6a              ;b405  6a          DATA 0x6a 'j'
    .byte 0x70              ;b406  70          DATA 0x70 'p'
    .byte 0x76              ;b407  76          DATA 0x76 'v'

mem_b408:
;unknown table indexed by mem_f253 mode
    .byte 0x02              ;b408  02          DATA 0x02        2 entries below:
    .byte 0x02              ;b409  02          DATA 0x02        mem_f253=0x00 (FM1)
    .byte 0x05              ;b40a  05          DATA 0x05        mem_f253=0x01 (FM2)

mem_b40b:
;unknown table indexed by mem_f253 mode
    .byte 0x02              ;b40b  02          DATA 0x02        2 entries below:
    .byte 0x5f              ;b40c  5f          DATA 0x5f '_'    mem_f253=0x00 (FM1)
    .byte 0x2b              ;b40d  2b          DATA 0x2b '+'    mem_f253=0x01 (FM2)

mem_b40e:
;unknown table indexed by mem_f253 mode
    .byte 0x02              ;b40e  02          DATA 0x02        2 entries below:
    .byte 0x59              ;b40f  59          DATA 0x59 'Y'    mem_f253=0x00 (FM1)
    .byte 0x25              ;b410  25          DATA 0x25 '%'    mem_f253=0x01 (FM2)

;XXX appears unused
;unknown table; identical to mfsw_codes table
    .byte 0x04              ;b411  04          DATA 0x04        4 entries below:
    .byte 0x00              ;b412  00          DATA 0x00
    .byte 0x01              ;b413  01          DATA 0x01
    .byte 0x0a              ;b414  0a          DATA 0x0a
    .byte 0x0b              ;b415  0b          DATA 0x0b

;XXX appears unused
;unknown table; identical to mfsw_equivs table
    .byte 0x04              ;b416  04          DATA 0x04        4 entries below:
    .byte 0x1f              ;b417  1f          DATA 0x1f
    .byte 0x1e              ;b418  1e          DATA 0x1e
    .byte 0x21              ;b419  21          DATA 0x21 '!'
    .byte 0x20              ;b41a  20          DATA 0x20 ' '

mem_b41b:
;unknown table used by lab_7041
;indexed by msg_countdown & 0x0f
    .byte 0x05              ;b41b  05          DATA 0x05        5 entries below:
    .word lab_708f
    .word lab_70ba
    .word lab_70d4
    .word lab_7142
    .word lab_7151

mem_b426_sound_msgs:
;unknown table used by lab_70a7
;indexed by snd_msg_idx & 0x7f
    .byte 0x07                  ;b426  07          DATA 0x07        7 entries below:
    .word lab_7612_fade         ;                  0 Writes "FADE"
    .word lab_75c5_bal          ;                  1 Writes "BAL"
    .word lab_74e3_bass         ;                  2 Writes "BASS"
    .word lab_752f_mid          ;                  3 Writes "MID"
    .word lab_7579_treb         ;                  4 Writes "TREB"
    .word lab_765f_flat         ;                  5 Writes "FLAT"
    .word lab_766a_select_eq    ;                  6 Writes "SELECT EQ #"

mem_b435_tmp_msgs:
;unknown table used by lab_70c5
;indexed by tmp_msg_idx & 0x0f
    .byte 0x10                  ;b435  10          DATA 0x10        16 entries below:
    .word lab_6a10_monsoon      ;b436              0 Writes "    MONSOON"
    .word lab_6c9a_hl           ;                  1 Writes [HL]
    .word lab_6c6a_track_scan   ;                  2 Writes "TRACK SCAN   "
    .word lab_6c76_disc_scan    ;                  3 Writes "DISC SCAN    "
    .word lab_71cf_no_disc      ;                  4 Writes "    NO DISC"
    .word lab_71c6_no_magazin   ;                  5 Writes "NO  MAGAZIN"
    .word lab_71a7_no_changer   ;                  6 Writes "NO  CHANGER"
    .word lab_71b0_cd_cd_rom    ;                  7 Writes "CD  CD ROM "
    .word lab_6b9d_cd_no_cd     ;                  8 Writes "CD   NO CD "
    .word lab_6b73_cd_cd_err    ;                  9 Writes "CD  CD ERR "
    .word lab_717f_tape_error   ;                  a Writes "TAPE ERROR "
    .word lab_7176_no_tape      ;                  b Writes "    NO TAPE"
    .word lab_6b00_tape_metal   ;                  c Writes "TAPE METAL"
    .word lab_73bf_cut_tape     ;                  d Writes "CUT TAPE"
    .word lab_73cd_min_or_max   ;                  e Writes "  MIN  " or "  MAX  "
    .word lab_74d5_diag         ;                  f Writes " DIAG  "

mem_b456_safe_msgs:
;unknown table used by lab_7142
;indexed by mem_f1a8 & 0x7f
    .byte 0x04              ;b456  04          DATA 0x04        4 entries below:
    .word lab_71e3_safe_1_of_4  ;b457              0 Writes "     SAFE  "
    .word lab_71f2_safe_2_of_4  ;b459              1 Writes "     SAFE  "
    .word lab_7224_safe_3_of_4  ;b45b              2 Writes "     SAFE  "
    .word lab_7294_safe_4_of_4  ;b45d              3 Writes "     SAFE  "

mem_b459_hold_fb_msgs:
;messages shown when F/B button is held down
;unknown table used by lab_715c
;indexed by mem_f1a9 & 0x7f
    .byte 0x07              ;b45f  07          DATA 0x07        7 entries below:
    .word lab_72de_rad_de2      ;b460              0 Writes "RAD   DE2  "
    .word lab_72e9_vers_a99     ;b462              1 Writes "VersA99CZnn"
    .word lab_7303_blank        ;b464              2 Writes "           "
    .word lab_733e_fern         ;b466              3 Writes "FERN   ON  " or "FERN   OFF "
    .word lab_7351_set_onvol    ;b468              4 Writes "SET ONVOL  "
    .word lab_7387_set_cdmix    ;b46a              5 Writes "SET CD MIX "
    .word lab_73a3_tape_skip    ;b46c              6 Writes "TAPE SKIP  "

mem_b46e_blank_amfm_tape_cd:
;table used at lab_6f81 with table_get_word
;indexed by mem_fe30
    .byte 0x04                  ;b46e  04          DATA 0x04        4 entries below:
    .word lab_694d_b_hl_de_blank ;b46f               0 Sets DE = mem_b471_blank_msgs
    .word lab_695e_b_hl_de_amfm  ;b471               1 Sets DE = mem_b480_amfm_msgs
    .word lab_696f_b_hl_de_tape  ;b473               2 Sets DE = mem_b4b0_tape_msgs
    .word lab_6980_b_hl_de_cd    ;b475               3 Sets DE = mem_b4de_cd_msgs

;TODO unknown table
mem_b471_blank_msgs:
    .byte 0x01              ;b477  01          DATA 0x01        1 entry below:
    .word lab_6a2f          ;b478             Writes "           "


;TODO XXX these tables are probably wrong
    .byte 0x00              ;b47a  00          DATA 0x00
mem_b47b:
    .byte 0x01              ;b47b  01          DATA 0x01
mem_b47c_blank:
    .byte 0xff              ;b47c  ff          DATA 0xff
    .byte 0x01              ;b47d  01          DATA 0x01
mem_b47e_blank:
    .word mem_b47b        ;b47e


mem_b480_amfm_msgs:
;table of words used with table_get_word
    .byte 0x0a              ;b480  0a          DATA 0x0a        10 entries below:
    .word lab_6a5c          ;b481
    .word lab_6a64          ;b483
    .word lab_6aca          ;b485     Writes [HL]
    .word lab_6a7a          ;b487     Writes "SCAN"
    .word lab_6a8d          ;b489     Writes "SCAN"
    .word lab_6a9c          ;b48b     Writes "PSCAN"
    .word lab_6ab7          ;b48d     Writes "PRESET SCAN"
    .word lab_69df          ;b48f
    .word lab_69f6          ;b491
    .word lab_7405          ;b493     Writes AM/kHz or FM/MHz to display buf

;TODO unknown table
mem_b495_amfm:
    .byte 0x0a              ;b495  0a          DATA 0x0a    10 entries below:
    .byte 0x02              ;b496  02          DATA 0x02
    .byte 0xff              ;b497  ff          DATA 0xff
    .byte 0xff              ;b498  ff          DATA 0xff
    .byte 0xff              ;b499  ff          DATA 0xff
    .byte 0xff              ;b49a  ff          DATA 0xff
    .byte 0xff              ;b49b  ff          DATA 0xff
    .byte 0xff              ;b49c  ff          DATA 0xff
    .byte 0xff              ;b49d  ff          DATA 0xff
    .byte 0xff              ;b49e  ff          DATA 0xff
    .byte 0x01              ;b49f  01          DATA 0x00

mem_b4a0_amfm:
    .byte 0x03              ;b4a0  03          DATA 0x03    3 entries below:
    .word mem_b4a8+1        ;b4a1
    .word mem_b4aa+1        ;b4a3
    .word mem_b4ae+1        ;b4a5

mem_b4a8:
    .byte 0x02              ;b4a7  02          DATA 0x02    2 entries below:
    .byte 0x50              ;b4a8  50          DATA 0x50
    .byte 0x09              ;b4a9  09          DATA 0x09

mem_b4aa:
    .byte 0x02              ;b4aa  02          DATA 0x02    2 entries below:
    .byte 0x33              ;b4ab  33          DATA 0x33
    .byte 0x09              ;b4ac  09          DATA 0x09

mem_b4ae:
    .byte 0x02              ;b4ad  02          DATA 0x02    2 entries below:
    .byte 0x20              ;b4ae  20          DATA 0x20
    .byte 0x09              ;b4af  09          DATA 0x09

mem_b4b0_tape_msgs:
    .byte 0x0a                  ;b4b0  0a          DATA 0x0a        10 entries below:
    .word lab_6b00_tape_metal   ;b4b1
    .word lab_6b0f_tape_play    ;b4b3
    .word lab_6b3e_tape_mss_ff  ;b4b5
    .word lab_6b48_tapemss_rew  ;b4b7
    .word lab_6b2a_tape_scan    ;b4b9
    .word lab_6b18_tape_ff      ;b4bb
    .word lab_6b21_tape_rew     ;b4bd
    .word lab_744c_tape_ab      ;b4bf
    .word lab_6af5_tape_load    ;b4c1
    .word lab_6b33_skip_blank   ;b4c3

mem_b4c5_hl_tape:
    .byte 0x0a              ;b4c5  0a          DATA 0x0a        10 entries below:
    .byte 0x02              ;b4c6  02          DATA 0x02
    .byte 0xff              ;b4c7  ff          DATA 0xff
    .byte 0xff              ;b4c8  ff          DATA 0xff
    .byte 0xff              ;b4c9  ff          DATA 0xff
    .byte 0x00              ;b4ca  00          DATA 0x00
    .byte 0xff              ;b4cb  ff          DATA 0xff
    .byte 0xff              ;b4cc  ff          DATA 0xff
    .byte 0x01              ;b4cd  01          DATA 0x01
    .byte 0xff              ;b4ce  ff          DATA 0xff
    .byte 0xff              ;b4cf  ff          DATA 0xff

mem_b4d0_tape:
    .byte 0x02              ;b4d0  02          DATA 0x02        2 entries below:
    .word mem_b4d5+1        ;bd41
    .word mem_b4d8+1        ;b4d3

mem_b4d5:
    .byte 0x02              ;b4d5  02          DATA 0x02        2 entries below:
    .byte 0x14              ;b4d6  14          DATA 0x14
    .byte 0x07              ;b4d7  07          DATA 0x07

mem_b4d8:
    .byte 0x02              ;b4d8  02          DATA 0x02        2 entries below:
    .byte 0x31              ;b4d9  31          DATA 0x31 '1'
    .byte 0x07              ;b4da  07          DATA 0x07

;XXX appears unused
mem_b4db:
    .byte 0x02              ;b4db  02          DATA 0x02        2 entries below:
    .byte 0x50              ;b4dc  50          DATA 0x50 'P'
    .byte 0x01              ;b4dd  01          DATA 0x01

mem_b4de_cd_msgs:
;table of words used with table_get_word
    .byte 0x0d                  ;b4de  0d          DATA 0x0d        13 entries below:
    .word lab_6c58_cd_and_track ;b4df   DATA      "CD   TR    " with CD number, track
    .word lab_6c82_hl_msg_time  ;b4e1   DATA      Message in [HL] with minutes, seconds
    .word lab_6c8e_hl_msg_cdnum ;b4e3   DATA      Message in [HL] with CD number
    .word lab_6c58_cd_and_track ;b4e5   DATA      "CD   TR    " with CD number, track
    .word lab_6bcb              ;b4e7   DATA      Message from this table if upd_tick.1=1
    .word lab_6bde              ;b4e9   DATA      Message from this table
    .word lab_6bf9_cue          ;b4eb   DATA      "CUE        " with minutes, seconds
    .word lab_6c29_rev          ;b4ed   DATA      "REV        " with minutes, seconds
    .word lab_6c10_cd_mins_secs ;b4ef   DATA      "CD         " with CD number, minutes, seconds
    .word lab_6c3f_cd_mins_secs ;b4f1   DATA      "CD         " with CD number, minutes, seconds
    .word lab_6bf0_scan_tr      ;b4f3   DATA      "SCANCD TR  " with CD number, track
    .word lab_6b66_chk_magazin  ;b4f5   DATA      "CHK MAGAZIN"
    .word lab_749d_cd_tr        ;b4f7   DATA      "CD   TR    "

;XXX appears unused
mem_b4f9:
    .byte 0x03              ;b4f9  03          DATA 0x03        13 entries below:
    .byte 0x01              ;b4fa  01          DATA 0x01
    .byte 0x00              ;b4fb  00          DATA 0x00
    .byte 0x02              ;b4fc  02          DATA 0x02

mem_b4fd_cd:
    .byte 0x0d              ;b4fd  0d          DATA 0x0d        13 entries below:
    .byte 0x01              ;b4fe  01          DATA 0x01
    .byte 0x02              ;b4ff  02          DATA 0x02
    .byte 0x00              ;b500  00          DATA 0x00
    .byte 0x03              ;b501  03          DATA 0x03
    .byte 0xff              ;b502  ff          DATA 0xff
    .byte 0xff              ;b503  ff          DATA 0xff
    .byte 0xff              ;b504  ff          DATA 0xff
    .byte 0xff              ;b505  ff          DATA 0xff
    .byte 0x04              ;b506  04          DATA 0x04
    .byte 0x05              ;b507  05          DATA 0x05
    .byte 0x06              ;b508  06          DATA 0x06
    .byte 0xff              ;b509  ff          DATA 0xff
    .byte 0xff              ;b50a  ff          DATA 0xff

mem_b50b_cd:
;table used with table_get_word
    .byte 0x07              ;b50b  07          DATA 0x07
    .word mem_b51a+1
    .word mem_b51d+1
    .word mem_b520+1
    .word mem_b523+1
    .word mem_b527+1
    .word mem_b52a+1
    .word mem_b52d+1

mem_b51a:
    .byte 0x02              ;b51a  02          DATA 0x02      2 entries below:
    .byte 0x52              ;b51b  52          DATA 0x52 'R'
    .byte 0x05              ;b51c  05          DATA 0x05

mem_b51d:
    .byte 0x02              ;b51d  02          DATA 0x02      2 entries below:
    .byte 0x20              ;b51e  20          DATA 0x20 ' '
    .byte 0x0c              ;b51f  0c          DATA 0x0c

mem_b520:
    .byte 0x02              ;b520  02          DATA 0x02      2 entries below:
    .byte 0x51              ;b521  51          DATA 0x51 'Q'
    .byte 0x05              ;b522  05          DATA 0x05

mem_b523:
    .byte 0x03              ;b523  03          DATA 0x03      3 entries below:
    .byte 0x50              ;b524  50          DATA 0x50 'P'
    .byte 0x51              ;b525  51          DATA 0x51 'Q'
    .byte 0x05              ;b526  05          DATA 0x05

mem_b527:
    .byte 0x02              ;b527  02          DATA 0x02      2 entries below:
    .byte 0x58              ;b528  58          DATA 0x58 'X'
    .byte 0x00              ;b529  00          DATA 0x00

mem_b52a:
    .byte 0x02              ;b52a  02          DATA 0x02      2 entries below:
    .byte 0x59              ;b52b  59          DATA 0x59 'Y'
    .byte 0x00              ;b52c  00          DATA 0x00

mem_b52d:
    .byte 0x02              ;b52d  02          DATA 0x02      2 entries below:
    .byte 0x3a              ;b52e  3a          DATA 0x3a ':'
    .byte 0x0c              ;b52f  0c          DATA 0x0c

mem_b530:
    .byte 0x04              ;b530  04          DATA 0x04      4 entries below:
    .byte 0x01              ;b531  01          DATA 0x01
    .byte 0x0a              ;b532  0a          DATA 0x0a
    .byte 0x0a              ;b533  0a          DATA 0x0a
    .byte 0x0d              ;b534  0d          DATA 0x0d

mem_b535:
;table of words used with table_get_word
    .byte 0x0d              ;b535  0d          DATA 0x0d    13 entries below:
    .word 0x0580
    .word 0x0581
    .word 0x0582
    .word 0x0583
    .word 0x0a84
    .word 0x0a85
    .word 0x0a86
    .word 0x0a87
    .word 0x0488
    .word 0x0489
    .word 0x048a
    .word 0x038b
    .word 0x038c

mem_b550:
;table of words used with table_get_word
    .byte 0x0d              ;b550  0d          DATA 0x0d        13 entries below:
    .word lab_716b_comm_error
    .word lab_717f_tape_error
    .word lab_7188_tight_tape
    .word lab_7191_wrapped_tape
    .word lab_719a
    .word lab_719c
    .word lab_719e_player_error
    .word lab_71da_changer_error
    .word lab_71c6_no_magazin
    .word lab_71cf_no_disc
    .word lab_71a7_no_changer
    .word lab_71b0_cd_cd_rom
    .word lab_6b9d_cd_no_cd

mem_b56b:
    .byte 0x1b              ;b56b  1b          DATA 0x1b
    .byte 0xbf              ;b56c  bf          DATA 0xbf
    .byte 0xb5              ;b56d  b5          DATA 0xb5
    .byte 0x15              ;b56e  15          DATA 0x15
    .byte 0x04              ;b56f  04          DATA 0x04
    .byte 0x01              ;b570  01          DATA 0x01
    .byte 0x14              ;b571  14          DATA 0x14
    .byte 0x08              ;b572  08          DATA 0x08
    .byte 0x01              ;b573  01          DATA 0x01
    .byte 0x17              ;b574  17          DATA 0x17
    .byte 0x02              ;b575  02          DATA 0x02
    .byte 0x01              ;b576  01          DATA 0x01
    .byte 0x16              ;b577  16          DATA 0x16
    .byte 0x02              ;b578  02          DATA 0x02
    .byte 0x01              ;b579  01          DATA 0x01
    .byte 0x48              ;b57a  48          DATA 0x48 'H'
    .byte 0x0e              ;b57b  0e          DATA 0x0e
    .byte 0x01              ;b57c  01          DATA 0x01
    .byte 0x49              ;b57d  49          DATA 0x49 'I'
    .byte 0x0e              ;b57e  0e          DATA 0x0e
    .byte 0x01              ;b57f  01          DATA 0x01
    .byte 0x08              ;b580  08          DATA 0x08
    .byte 0x0e              ;b581  0e          DATA 0x0e
    .byte 0x01              ;b582  01          DATA 0x01
    .byte 0x09              ;b583  09          DATA 0x09
    .byte 0x0e              ;b584  0e          DATA 0x0e
    .byte 0x01              ;b585  01          DATA 0x01
    .byte 0x20              ;b586  20          DATA 0x20 ' '
    .byte 0x0e              ;b587  0e          DATA 0x0e
    .byte 0x01              ;b588  01          DATA 0x01
    .byte 0x21              ;b589  21          DATA 0x21 '!'
    .byte 0x0e              ;b58a  0e          DATA 0x0e
    .byte 0x01              ;b58b  01          DATA 0x01
    .byte 0x0a              ;b58c  0a          DATA 0x0a
    .byte 0x0e              ;b58d  0e          DATA 0x0e
    .byte 0x01              ;b58e  01          DATA 0x01
    .byte 0x0b              ;b58f  0b          DATA 0x0b
    .byte 0x0e              ;b590  0e          DATA 0x0e
    .byte 0x01              ;b591  01          DATA 0x01
    .byte 0x1c              ;b592  1c          DATA 0x1c
    .byte 0x0e              ;b593  0e          DATA 0x0e
    .byte 0x01              ;b594  01          DATA 0x01
    .byte 0x1d              ;b595  1d          DATA 0x1d
    .byte 0x0e              ;b596  0e          DATA 0x0e
    .byte 0x01              ;b597  01          DATA 0x01
    .byte 0x01              ;b598  01          DATA 0x01
    .byte 0x02              ;b599  02          DATA 0x02
    .byte 0x01              ;b59a  01          DATA 0x01
    .byte 0x02              ;b59b  02          DATA 0x02
    .byte 0x02              ;b59c  02          DATA 0x02
    .byte 0x01              ;b59d  01          DATA 0x01
    .byte 0x03              ;b59e  03          DATA 0x03
    .byte 0x02              ;b59f  02          DATA 0x02
    .byte 0x01              ;b5a0  01          DATA 0x01
    .byte 0x04              ;b5a1  04          DATA 0x04
    .byte 0x02              ;b5a2  02          DATA 0x02
    .byte 0x01              ;b5a3  01          DATA 0x01
    .byte 0x05              ;b5a4  05          DATA 0x05
    .byte 0x02              ;b5a5  02          DATA 0x02
    .byte 0x01              ;b5a6  01          DATA 0x01
    .byte 0x06              ;b5a7  06          DATA 0x06
    .byte 0x02              ;b5a8  02          DATA 0x02
    .byte 0x01              ;b5a9  01          DATA 0x01
    .byte 0x13              ;b5aa  13          DATA 0x13
    .byte 0x04              ;b5ab  04          DATA 0x04
    .byte 0x01              ;b5ac  01          DATA 0x01
    .byte 0x12              ;b5ad  12          DATA 0x12
    .byte 0x04              ;b5ae  04          DATA 0x04
    .byte 0x01              ;b5af  01          DATA 0x01
    .byte 0x10              ;b5b0  10          DATA 0x10
    .byte 0x0c              ;b5b1  0c          DATA 0x0c
    .byte 0x01              ;b5b2  01          DATA 0x01
    .byte 0x1b              ;b5b3  1b          DATA 0x1b
    .byte 0x08              ;b5b4  08          DATA 0x08
    .byte 0x01              ;b5b5  01          DATA 0x01
    .byte 0x26              ;b5b6  26          DATA 0x26 '&'
    .byte 0xff              ;b5b7  ff          DATA 0xff
    .byte 0x01              ;b5b8  01          DATA 0x01
    .byte 0x29              ;b5b9  29          DATA 0x29 ')'
    .byte 0xff              ;b5ba  ff          DATA 0xff
    .byte 0x01              ;b5bb  01          DATA 0x01
    .byte 0x2a              ;b5bc  2a          DATA 0x2a '*'
    .byte 0xff              ;b5bd  ff          DATA 0xff
    .byte 0x01              ;b5be  01          DATA 0x01
    .byte 0x01              ;b5bf  01          DATA 0x01

mem_b5c0:
;table of words used with table_get_word
    .byte 0x02              ;b5c0  02          DATA 0x02        2 entries below:
    .word lab_6933
    .word sub_7697_snd_cd

mem_b5c5:
;table of words used with table_get_word
    .byte 0x08              ;b5c5  08          DATA 0x08        8 entries below:
    .word lab_7bbb
    .word lab_7b83
    .word lab_7b41
    .word lab_7b07
    .word lab_795b
    .word lab_7987
    .word lab_783e
    .word lab_7808

mem_b5d6:
;related somehow to mem_fe43_key
;table of words used with table_get_word
    .byte 0x4a              ;b5d6  4a          DATA 0x4a 'J'    74 entries below:
    .word 0x0000
    .word 0xb098
    .word 0xb098
    .word 0xb098
    .word 0xb098
    .word 0xb090
    .word 0xb090
    .word 0xb192
    .word 0xb19a
    .word 0xb192
    .word 0xb11a
    .word 0xb112
    .word 0x4002
    .word 0x4000
    .word 0x4000
    .word 0x4000
    .word 0x1180
    .word 0x8100
    .word 0x1100
    .word 0x9180
    .word 0xb192
    .word 0xb992
    .word 0xb990
    .word 0xb990
    .word 0x8100
    .word 0x4802
    .word 0x0808
    .word 0x1080
    .word 0xb19a
    .word 0xb192
    .word 0xc000
    .word 0xc000
    .word 0x3190
    .word 0x3190
    .word 0x0000
    .word 0xc888
    .word 0x8888
    .word 0x8800
    .word 0xd102
    .word 0xa980
    .word 0xd89a
    .word 0x989a
    .word 0x989a
    .word 0x4002
    .word 0x4002
    .word 0x0010
    .word 0x0010
    .word 0x4000
    .word 0xa9e8
    .word 0x0200
    .word 0xa9c8
    .word 0x8b88
    .word 0x8108
    .word 0x8108
    .word 0x8108
    .word 0x8880
    .word 0x0c80
    .word 0x0080
    .word 0x0080
    .word 0x8080
    .word 0x8880
    .word 0x8080
    .word 0x8808
    .word 0x8808
    .word 0x80c8
    .word 0x0808
    .word 0x0000
    .word 0x0800
    .word 0x2182
    .word 0x2180
    .word 0x2180
    .word 0x2180
    .word 0xb080
    .word 0x9180

mem_b66b:
;table of bytes used with table_get_byte
    .byte 0x0f              ;b66b  0f          DATA 0x0f        15 entries below:
    .byte 0xff              ;b66c  ff          DATA 0xff
    .byte 0x03              ;b66d  03          DATA 0x03
    .byte 0x07              ;b66e  07          DATA 0x07
    .byte 0xff              ;b66f  ff          DATA 0xff
    .byte 0xff              ;b670  ff          DATA 0xff
    .byte 0xff              ;b671  ff          DATA 0xff
    .byte 0xff              ;b672  ff          DATA 0xff
    .byte 0x05              ;b673  05          DATA 0x05
    .byte 0x06              ;b674  06          DATA 0x06
    .byte 0xff              ;b675  ff          DATA 0xff
    .byte 0xff              ;b676  ff          DATA 0xff
    .byte 0x04              ;b677  04          DATA 0x04
    .byte 0x01              ;b678  01          DATA 0x01
    .byte 0xff              ;b679  ff          DATA 0xff
    .byte 0xff              ;b67a  ff          DATA 0xff

mem_b67b:
;table of words used with table_get_word
    .byte 0x0f              ;b67b  0f          DATA 0x0f          15 entries below:
    .word lab_4243
    .word lab_a4d7
    .word lab_15b7
    .word lab_6832
    .word lab_3bb3
    .word 0x0000
    .word 0x0000
    .word lab_894f
    .word lab_d121
    .word 0x0000
    .word 0x0000
    .word lab_7f5a
    .word lab_20d5
    .word 0x0000
    .word lab_1deb

mem_b69a:
;table of words used with table_get_word
    .byte 0x04              ;b69a  04          DATA 0x04
    .word lab_7da6
    .word lab_7e2d
    .word lab_7ed2
    .word lab_7f17

mem_b6a3:
    .byte 0x03              ;b6a3  03          DATA 0x03
    .byte 0xaf              ;b6a4  af          DATA 0xaf
    .byte 0xb6              ;b6a5  b6          DATA 0xb6
    .byte 0x2d              ;b6a6  2d          DATA 0x2d '-'
    .byte 0xff              ;b6a7  ff          DATA 0xff
    .byte 0x01              ;b6a8  01          DATA 0x01
    .byte 0x2e              ;b6a9  2e          DATA 0x2e '.'
    .byte 0xff              ;b6aa  ff          DATA 0xff
    .byte 0x02              ;b6ab  02          DATA 0x02
    .byte 0x28              ;b6ac  28          DATA 0x28 '('
    .byte 0xff              ;b6ad  ff          DATA 0xff
    .byte 0x03              ;b6ae  03          DATA 0x03
    .byte 0x01              ;b6af  01          DATA 0x01
    .byte 0x04              ;b6b0  04          DATA 0x04

mem_b6b1:
;table used with table_get_word
    .word lab_7fc7
    .word lab_7fd0
    .word lab_7fc8
    .word lab_7fd8

mem_b6b9:
;table of words used with table_get_word
    .byte 0x04              ;b6b9  04          DATA 0x04
    .word lab_7ff6
    .word lab_801f
    .word lab_804a
    .word lab_8065

mem_b6c2:
    .byte 0x21              ;b6c2  21          DATA 0x21 '!'
    .byte 0x28              ;b6c3  28          DATA 0x28 '('
    .byte 0xb7              ;b6c4  b7          DATA 0xb7
    .byte 0x01              ;b6c5  01          DATA 0x01
    .byte 0x60              ;b6c6  60          DATA 0x60 '`'
    .byte 0x01              ;b6c7  01          DATA 0x01
    .byte 0x02              ;b6c8  02          DATA 0x02
    .byte 0x60              ;b6c9  60          DATA 0x60 '`'
    .byte 0x02              ;b6ca  02          DATA 0x02
    .byte 0x03              ;b6cb  03          DATA 0x03
    .byte 0x60              ;b6cc  60          DATA 0x60 '`'
    .byte 0x03              ;b6cd  03          DATA 0x03
    .byte 0x04              ;b6ce  04          DATA 0x04
    .byte 0x60              ;b6cf  60          DATA 0x60 '`'
    .byte 0x04              ;b6d0  04          DATA 0x04
    .byte 0x05              ;b6d1  05          DATA 0x05
    .byte 0x60              ;b6d2  60          DATA 0x60 '`'
    .byte 0x05              ;b6d3  05          DATA 0x05
    .byte 0x06              ;b6d4  06          DATA 0x06
    .byte 0x60              ;b6d5  60          DATA 0x60 '`'
    .byte 0x06              ;b6d6  06          DATA 0x06
    .byte 0x1c              ;b6d7  1c          DATA 0x1c
    .byte 0xc0              ;b6d8  c0          DATA 0xc0
    .byte 0x81              ;b6d9  81          DATA 0x81
    .byte 0x1d              ;b6da  1d          DATA 0x1d
    .byte 0xc0              ;b6db  c0          DATA 0xc0
    .byte 0x83              ;b6dc  83          DATA 0x83
    .byte 0x08              ;b6dd  08          DATA 0x08
    .byte 0xc0              ;b6de  c0          DATA 0xc0
    .byte 0x85              ;b6df  85          DATA 0x85
    .byte 0x09              ;b6e0  09          DATA 0x09
    .byte 0xc0              ;b6e1  c0          DATA 0xc0
    .byte 0x89              ;b6e2  89          DATA 0x89
    .byte 0x20              ;b6e3  20          DATA 0x20 ' '
    .byte 0xc0              ;b6e4  c0          DATA 0xc0
    .byte 0x8d              ;b6e5  8d          DATA 0x8d
    .byte 0x21              ;b6e6  21          DATA 0x21 '!'
    .byte 0xc0              ;b6e7  c0          DATA 0xc0
    .byte 0x90              ;b6e8  90          DATA 0x90
    .byte 0x1b              ;b6e9  1b          DATA 0x1b
    .byte 0xc0              ;b6ea  c0          DATA 0xc0
    .byte 0x15              ;b6eb  15          DATA 0x15
    .byte 0x10              ;b6ec  10          DATA 0x10
    .byte 0xc0              ;b6ed  c0          DATA 0xc0
    .byte 0x15              ;b6ee  15          DATA 0x15
    .byte 0x07              ;b6ef  07          DATA 0x07
    .byte 0xc0              ;b6f0  c0          DATA 0xc0
    .byte 0x95              ;b6f1  95          DATA 0x95
    .byte 0x44              ;b6f2  44          DATA 0x44 'D'
    .byte 0xc0              ;b6f3  c0          DATA 0xc0
    .byte 0x17              ;b6f4  17          DATA 0x17
    .byte 0x45              ;b6f5  45          DATA 0x45 'E'
    .byte 0xc0              ;b6f6  c0          DATA 0xc0
    .byte 0x17              ;b6f7  17          DATA 0x17
    .byte 0x46              ;b6f8  46          DATA 0x46 'F'
    .byte 0xc0              ;b6f9  c0          DATA 0xc0
    .byte 0x17              ;b6fa  17          DATA 0x17
    .byte 0x47              ;b6fb  47          DATA 0x47 'G'
    .byte 0xc0              ;b6fc  c0          DATA 0xc0
    .byte 0x17              ;b6fd  17          DATA 0x17
    .byte 0x14              ;b6fe  14          DATA 0x14
    .byte 0xff              ;b6ff  ff          DATA 0xff
    .byte 0x1b              ;b700  1b          DATA 0x1b
    .byte 0x33              ;b701  33          DATA 0x33 '3'
    .byte 0xc0              ;b702  c0          DATA 0xc0
    .byte 0x17              ;b703  17          DATA 0x17
    .byte 0x32              ;b704  32          DATA 0x32 '2'
    .byte 0xff              ;b705  ff          DATA 0xff
    .byte 0x19              ;b706  19          DATA 0x19
    .byte 0x15              ;b707  15          DATA 0x15
    .byte 0x0d              ;b708  0d          DATA 0x0d
    .byte 0x1a              ;b709  1a          DATA 0x1a
    .byte 0x16              ;b70a  16          DATA 0x16
    .byte 0x0d              ;b70b  0d          DATA 0x0d
    .byte 0x1a              ;b70c  1a          DATA 0x1a
    .byte 0x17              ;b70d  17          DATA 0x17
    .byte 0x0d              ;b70e  0d          DATA 0x0d
    .byte 0x1a              ;b70f  1a          DATA 0x1a
    .byte 0x33              ;b710  33          DATA 0x33 '3'
    .byte 0x0d              ;b711  0d          DATA 0x0d
    .byte 0x1a              ;b712  1a          DATA 0x1a
    .byte 0x48              ;b713  48          DATA 0x48 'H'
    .byte 0x0d              ;b714  0d          DATA 0x0d
    .byte 0x1a              ;b715  1a          DATA 0x1a
    .byte 0x49              ;b716  49          DATA 0x49 'I'
    .byte 0x0d              ;b717  0d          DATA 0x0d
    .byte 0x1a              ;b718  1a          DATA 0x1a
    .byte 0x29              ;b719  29          DATA 0x29 ')'
    .byte 0xff              ;b71a  ff          DATA 0xff
    .byte 0x1c              ;b71b  1c          DATA 0x1c
    .byte 0x2a              ;b71c  2a          DATA 0x2a '*'
    .byte 0xff              ;b71d  ff          DATA 0xff
    .byte 0x1c              ;b71e  1c          DATA 0x1c
    .byte 0x28              ;b71f  28          DATA 0x28 '('
    .byte 0xff              ;b720  ff          DATA 0xff
    .byte 0x1c              ;b721  1c          DATA 0x1c
    .byte 0x23              ;b722  23          DATA 0x23 '#'
    .byte 0xff              ;b723  ff          DATA 0xff
    .byte 0x1c              ;b724  1c          DATA 0x1c
    .byte 0x24              ;b725  24          DATA 0x24 '$'
    .byte 0xff              ;b726  ff          DATA 0xff
    .byte 0x1c              ;b727  1c          DATA 0x1c
    .byte 0x17              ;b728  17          DATA 0x17
    .byte 0x60              ;b729  60          DATA 0x60 '`'
    .byte 0x0b              ;b72a  0b          DATA 0x0b
    .byte 0x0b              ;b72b  0b          DATA 0x0b
    .byte 0x00              ;b72c  00          DATA 0x00
    .byte 0x60              ;b72d  60          DATA 0x60 '`'
    .byte 0x0c              ;b72e  0c          DATA 0x0c
    .byte 0x0b              ;b72f  0b          DATA 0x0b
    .byte 0x00              ;b730  00          DATA 0x00
    .byte 0x60              ;b731  60          DATA 0x60 '`'
    .byte 0x0d              ;b732  0d          DATA 0x0d
    .byte 0x44              ;b733  44          DATA 0x44 'D'
    .byte 0x13              ;b734  13          DATA 0x13
    .byte 0x64              ;b735  64          DATA 0x64 'd'
    .byte 0x0f              ;b736  0f          DATA 0x0f
    .byte 0x0b              ;b737  0b          DATA 0x0b
    .byte 0x11              ;b738  11          DATA 0x11
    .byte 0x60              ;b739  60          DATA 0x60 '`'
    .byte 0x0e              ;b73a  0e          DATA 0x0e
    .byte 0x44              ;b73b  44          DATA 0x44 'D'
    .byte 0x14              ;b73c  14          DATA 0x14
    .byte 0x64              ;b73d  64          DATA 0x64 'd'
    .byte 0x10              ;b73e  10          DATA 0x10
    .byte 0x0b              ;b73f  0b          DATA 0x0b
    .byte 0x12              ;b740  12          DATA 0x12
    .byte 0x44              ;b741  44          DATA 0x44 'D'
    .byte 0x07              ;b742  07          DATA 0x07
    .byte 0x64              ;b743  64          DATA 0x64 'd'
    .byte 0x09              ;b744  09          DATA 0x09
    .byte 0x0b              ;b745  0b          DATA 0x0b
    .byte 0x11              ;b746  11          DATA 0x11
    .byte 0x44              ;b747  44          DATA 0x44 'D'
    .byte 0x08              ;b748  08          DATA 0x08
    .byte 0x64              ;b749  64          DATA 0x64 'd'
    .byte 0x0a              ;b74a  0a          DATA 0x0a
    .byte 0x0b              ;b74b  0b          DATA 0x0b
    .byte 0x12              ;b74c  12          DATA 0x12
    .byte 0x60              ;b74d  60          DATA 0x60 '`'
    .byte 0x18              ;b74e  18          DATA 0x18
    .byte 0x0b              ;b74f  0b          DATA 0x0b
    .byte 0x00              ;b750  00          DATA 0x00
    .byte 0x46              ;b751  46          DATA 0x46 'F'
    .byte 0x16              ;b752  16          DATA 0x16
    .byte 0x0b              ;b753  0b          DATA 0x0b
    .byte 0x00              ;b754  00          DATA 0x00

mem_b755:
;table of words used with table_get_word
    .byte 0x1d              ;b755  1d          DATA 0x1d    29 entries below:
    .word lab_d1cd_ret
    .word lab_d1ce_cd1 ;CD 1
    .word lab_d1d4_cd2 ;CD 2
    .word lab_d1da_cd3 ;CD 3
    .word lab_d1e0_cd4 ;CD 4
    .word lab_d1e6_cd5 ;CD 5
    .word lab_d1ec_cd6 ;CD 6
    .word lab_d27b
    .word lab_d296
    .word lab_d2b8
    .word lab_d2d6
    .word lab_d274
    .word lab_d28f
    .word lab_d2aa
    .word lab_d2c8
    .word lab_d2b1
    .word lab_d2cf
    .word lab_d2ee
    .word lab_d309
    .word lab_d2e6
    .word lab_d301
    .word sub_d321
    .word sub_d34f
    .word sub_d345
    .word lab_d376_cdcenable_2
    .word lab_d37b
    .word lab_d39c
    .word lab_d3a3
    .word lab_d3b1

mem_b790:
;table appears to be cdc tx related
;indexed by mem_fe45
    .byte 0x05              ;b790  05          DATA 0x05
    .word lab_d1b7_ret
    .word lab_d1b1
    .word lab_d1b1
    .word lab_d1a5 ;CDC TX related
    .word lab_d18a ;CDC TX related

mem_b79b:
;table of words used with table_get_word
    .byte 0x06              ;b79b  06          DATA 0x06        6 entries below:
    .word mem_b7b9+1
    .word mem_b7c6+1
    .word mem_b7d3+1
    .word mem_b7e0+1
    .word mem_b7ed+1
    .word mem_b7fa+1

mem_b7a8:
;unknown table
    .byte 0x08              ;b7a8  08          DATA 0x08        8 entries follow:
    .word lab_80f6
    .word lab_80f6
    .word lab_80f6
    .word lab_80f6
    .word lab_8108
    .word lab_810f
    .word lab_8120
    .word lab_812c

mem_b7b9:
;unknown table
    .byte 0x06              ;b7b9  06          DATA 0x06        6 entries follow:
    .word lab_878c
    .word lab_8243
    .word lab_8243
    .word lab_8243
    .word lab_8243
    .word lab_8243

mem_b7c6:
;unknown table
    .byte 0x06              ;b7c6  06          DATA 0x06        6 entries follow:
    .word lab_83b1
    .word lab_878c
    .word lab_83c4
    .word lab_83c4
    .word lab_83c4
    .word lab_83c4

mem_b7d3:
;unknown table
    .byte 0x06              ;b7d3  06          DATA 0x06        6 entries follow:
    .word lab_86f5
    .word lab_86f5
    .word lab_878c
    .word lab_86f5
    .word lab_86f5
    .word lab_86f5

mem_b7e0:
;unknown table
    .byte 0x06              ;b7e0  06          DATA 0x06        6 entries follow:
    .word lab_86f5
    .word lab_86f5
    .word lab_86f5
    .word lab_878c
    .word lab_86f5
    .word lab_86f5

mem_b7ed:
;unknown table
    .byte 0x06              ;b7ed  06          DATA 0x06        6 entries follow:
    .word lab_858e
    .word lab_858e
    .word lab_858e
    .word lab_858e
    .word lab_878c
    .word lab_858e

mem_b7fa:
;unknown table
    .byte 0x06              ;b7fa  06          DATA 0x06        6 entries follow:
    .word lab_858e
    .word lab_858e
    .word lab_858e
    .word lab_858e
    .word lab_858e
    .word lab_878c

mem_b807:
;table used with table_get_word
    .byte 0x2d              ;b807  2d          DATA 0x2d '-'    45 entries follow:
    .word lab_878c
    .word lab_87f9
    .word lab_81c9
    .word lab_8230
    .word lab_824e
    .word lab_827e
    .word lab_8294
    .word lab_82e3
    .word lab_82f6
    .word lab_8320
    .word lab_8333
    .word lab_837b
    .word lab_8394
    .word lab_83ce
    .word lab_83e1
    .word lab_842a
    .word lab_843d
    .word lab_845b
    .word lab_849b
    .word lab_8538
    .word lab_8548
    .word lab_8576
    .word lab_858e
    .word lab_85a8
    .word lab_85b6
    .word lab_85ec
    .word lab_85ff
    .word lab_8610
    .word lab_8645
    .word lab_8650
    .word lab_867f
    .word lab_869b
    .word lab_86ac
    .word lab_86d2
    .word lab_86e2
    .word lab_870e
    .word lab_8721
    .word lab_8758
    .word lab_81f9
    .word lab_820e
    .word lab_8220
    .word lab_8507
    .word lab_8514
    .word lab_8522
    .word lab_852a

mem_b862:
    .byte 0x39              ;b862  39          DATA 0x39 '9'
    .byte 0x85              ;b863  85          DATA 0x85
    .byte 0xb9              ;b864  b9          DATA 0xb9
    .byte 0x34              ;b865  34          DATA 0x34 '4'
    .byte 0xff              ;b866  ff          DATA 0xff
    .byte 0x01              ;b867  01          DATA 0x01
    .byte 0x26              ;b868  26          DATA 0x26 '&'
    .byte 0xff              ;b869  ff          DATA 0xff
    .byte 0x03              ;b86a  03          DATA 0x03
    .byte 0x33              ;b86b  33          DATA 0x33 '3'
    .byte 0x01              ;b86c  01          DATA 0x01
    .byte 0x06              ;b86d  06          DATA 0x06
    .byte 0x27              ;b86e  27          DATA 0x27 '''
    .byte 0x04              ;b86f  04          DATA 0x04
    .byte 0x02              ;b870  02          DATA 0x02
    .byte 0x27              ;b871  27          DATA 0x27 '''
    .byte 0x03              ;b872  03          DATA 0x03
    .byte 0x01              ;b873  01          DATA 0x01
    .byte 0x27              ;b874  27          DATA 0x27 '''
    .byte 0x60              ;b875  60          DATA 0x60 '`'
    .byte 0x04              ;b876  04          DATA 0x04
    .byte 0x27              ;b877  27          DATA 0x27 '''
    .byte 0x98              ;b878  98          DATA 0x98
    .byte 0x09              ;b879  09          DATA 0x09
    .byte 0x15              ;b87a  15          DATA 0x15
    .byte 0x18              ;b87b  18          DATA 0x18
    .byte 0x09              ;b87c  09          DATA 0x09
    .byte 0x15              ;b87d  15          DATA 0x15
    .byte 0x60              ;b87e  60          DATA 0x60 '`'
    .byte 0x05              ;b87f  05          DATA 0x05
    .byte 0x1d              ;b880  1d          DATA 0x1d
    .byte 0x04              ;b881  04          DATA 0x04
    .byte 0x11              ;b882  11          DATA 0x11
    .byte 0x1d              ;b883  1d          DATA 0x1d
    .byte 0xe0              ;b884  e0          DATA 0xe0
    .byte 0x0c              ;b885  0c          DATA 0x0c
    .byte 0x1d              ;b886  1d          DATA 0x1d
    .byte 0x18              ;b887  18          DATA 0x18
    .byte 0x09              ;b888  09          DATA 0x09
    .byte 0x09              ;b889  09          DATA 0x09
    .byte 0x04              ;b88a  04          DATA 0x04
    .byte 0x11              ;b88b  11          DATA 0x11
    .byte 0x09              ;b88c  09          DATA 0x09
    .byte 0xe0              ;b88d  e0          DATA 0xe0
    .byte 0x0c              ;b88e  0c          DATA 0x0c
    .byte 0x09              ;b88f  09          DATA 0x09
    .byte 0x18              ;b890  18          DATA 0x18
    .byte 0x09              ;b891  09          DATA 0x09
    .byte 0x0b              ;b892  0b          DATA 0x0b
    .byte 0x04              ;b893  04          DATA 0x04
    .byte 0x13              ;b894  13          DATA 0x13
    .byte 0x0b              ;b895  0b          DATA 0x0b
    .byte 0xb8              ;b896  b8          DATA 0xb8
    .byte 0x0b              ;b897  0b          DATA 0x0b
    .byte 0x0b              ;b898  0b          DATA 0x0b
    .byte 0x40              ;b899  40          DATA 0x40 '@'
    .byte 0x09              ;b89a  09          DATA 0x09
    .byte 0x21              ;b89b  21          DATA 0x21 '!'
    .byte 0x04              ;b89c  04          DATA 0x04
    .byte 0x11              ;b89d  11          DATA 0x11
    .byte 0x21              ;b89e  21          DATA 0x21 '!'
    .byte 0xe0              ;b89f  e0          DATA 0xe0
    .byte 0x0c              ;b8a0  0c          DATA 0x0c
    .byte 0x21              ;b8a1  21          DATA 0x21 '!'
    .byte 0x18              ;b8a2  18          DATA 0x18
    .byte 0x09              ;b8a3  09          DATA 0x09
    .byte 0x1c              ;b8a4  1c          DATA 0x1c
    .byte 0x04              ;b8a5  04          DATA 0x04
    .byte 0x12              ;b8a6  12          DATA 0x12
    .byte 0x1c              ;b8a7  1c          DATA 0x1c
    .byte 0xe0              ;b8a8  e0          DATA 0xe0
    .byte 0x0d              ;b8a9  0d          DATA 0x0d
    .byte 0x1c              ;b8aa  1c          DATA 0x1c
    .byte 0x18              ;b8ab  18          DATA 0x18
    .byte 0x09              ;b8ac  09          DATA 0x09
    .byte 0x08              ;b8ad  08          DATA 0x08
    .byte 0x04              ;b8ae  04          DATA 0x04
    .byte 0x12              ;b8af  12          DATA 0x12
    .byte 0x08              ;b8b0  08          DATA 0x08
    .byte 0xe0              ;b8b1  e0          DATA 0xe0
    .byte 0x0d              ;b8b2  0d          DATA 0x0d
    .byte 0x08              ;b8b3  08          DATA 0x08
    .byte 0x18              ;b8b4  18          DATA 0x18
    .byte 0x09              ;b8b5  09          DATA 0x09
    .byte 0x0a              ;b8b6  0a          DATA 0x0a
    .byte 0x04              ;b8b7  04          DATA 0x04
    .byte 0x14              ;b8b8  14          DATA 0x14
    .byte 0x0a              ;b8b9  0a          DATA 0x0a
    .byte 0xd8              ;b8ba  d8          DATA 0xd8
    .byte 0x0e              ;b8bb  0e          DATA 0x0e
    .byte 0x0a              ;b8bc  0a          DATA 0x0a
    .byte 0x20              ;b8bd  20          DATA 0x20 ' '
    .byte 0x09              ;b8be  09          DATA 0x09
    .byte 0x20              ;b8bf  20          DATA 0x20 ' '
    .byte 0x04              ;b8c0  04          DATA 0x04
    .byte 0x12              ;b8c1  12          DATA 0x12
    .byte 0x20              ;b8c2  20          DATA 0x20 ' '
    .byte 0xe0              ;b8c3  e0          DATA 0xe0
    .byte 0x0d              ;b8c4  0d          DATA 0x0d
    .byte 0x20              ;b8c5  20          DATA 0x20 ' '
    .byte 0x18              ;b8c6  18          DATA 0x18
    .byte 0x09              ;b8c7  09          DATA 0x09
    .byte 0x18              ;b8c8  18          DATA 0x18
    .byte 0x04              ;b8c9  04          DATA 0x04
    .byte 0x13              ;b8ca  13          DATA 0x13
    .byte 0x18              ;b8cb  18          DATA 0x18
    .byte 0xb8              ;b8cc  b8          DATA 0xb8
    .byte 0x0b              ;b8cd  0b          DATA 0x0b
    .byte 0x18              ;b8ce  18          DATA 0x18
    .byte 0x40              ;b8cf  40          DATA 0x40 '@'
    .byte 0x09              ;b8d0  09          DATA 0x09
    .byte 0x11              ;b8d1  11          DATA 0x11
    .byte 0x04              ;b8d2  04          DATA 0x04
    .byte 0x14              ;b8d3  14          DATA 0x14
    .byte 0x11              ;b8d4  11          DATA 0x11
    .byte 0xd8              ;b8d5  d8          DATA 0xd8
    .byte 0x0e              ;b8d6  0e          DATA 0x0e
    .byte 0x11              ;b8d7  11          DATA 0x11
    .byte 0x20              ;b8d8  20          DATA 0x20 ' '
    .byte 0x09              ;b8d9  09          DATA 0x09
    .byte 0x44              ;b8da  44          DATA 0x44 'D'
    .byte 0xf8              ;b8db  f8          DATA 0xf8
    .byte 0x09              ;b8dc  09          DATA 0x09
    .byte 0x45              ;b8dd  45          DATA 0x45 'E'
    .byte 0xf8              ;b8de  f8          DATA 0xf8
    .byte 0x09              ;b8df  09          DATA 0x09
    .byte 0x46              ;b8e0  46          DATA 0x46 'F'
    .byte 0xf8              ;b8e1  f8          DATA 0xf8
    .byte 0x09              ;b8e2  09          DATA 0x09
    .byte 0x47              ;b8e3  47          DATA 0x47 'G'
    .byte 0xf8              ;b8e4  f8          DATA 0xf8
    .byte 0x09              ;b8e5  09          DATA 0x09
    .byte 0x13              ;b8e6  13          DATA 0x13
    .byte 0x04              ;b8e7  04          DATA 0x04
    .byte 0x07              ;b8e8  07          DATA 0x07
    .byte 0x13              ;b8e9  13          DATA 0x13
    .byte 0xf8              ;b8ea  f8          DATA 0xf8
    .byte 0x08              ;b8eb  08          DATA 0x08
    .byte 0x10              ;b8ec  10          DATA 0x10
    .byte 0xfc              ;b8ed  fc          DATA 0xfc
    .byte 0x15              ;b8ee  15          DATA 0x15
    .byte 0x12              ;b8ef  12          DATA 0x12
    .byte 0xfc              ;b8f0  fc          DATA 0xfc
    .byte 0x15              ;b8f1  15          DATA 0x15
    .byte 0x44              ;b8f2  44          DATA 0x44 'D'
    .byte 0x80              ;b8f3  80          DATA 0x80
    .byte 0x09              ;b8f4  09          DATA 0x09
    .byte 0x45              ;b8f5  45          DATA 0x45 'E'
    .byte 0x80              ;b8f6  80          DATA 0x80
    .byte 0x09              ;b8f7  09          DATA 0x09
    .byte 0x46              ;b8f8  46          DATA 0x46 'F'
    .byte 0x80              ;b8f9  80          DATA 0x80
    .byte 0x09              ;b8fa  09          DATA 0x09
    .byte 0x47              ;b8fb  47          DATA 0x47 'G'
    .byte 0x80              ;b8fc  80          DATA 0x80
    .byte 0x09              ;b8fd  09          DATA 0x09
    .byte 0x07              ;b8fe  07          DATA 0x07
    .byte 0x80              ;b8ff  80          DATA 0x80
    .byte 0x09              ;b900  09          DATA 0x09
    .byte 0x15              ;b901  15          DATA 0x15
    .byte 0x80              ;b902  80          DATA 0x80
    .byte 0x09              ;b903  09          DATA 0x09
    .byte 0x07              ;b904  07          DATA 0x07
    .byte 0x04              ;b905  04          DATA 0x04
    .byte 0x81              ;b906  81          DATA 0x81
    .byte 0x07              ;b907  07          DATA 0x07
    .byte 0x78              ;b908  78          DATA 0x78 'x'
    .byte 0x83              ;b909  83          DATA 0x83
    .byte 0x07              ;b90a  07          DATA 0x07
    .byte 0x80              ;b90b  80          DATA 0x80
    .byte 0x09              ;b90c  09          DATA 0x09
    .byte 0x32              ;b90d  32          DATA 0x32 '2'
    .byte 0xff              ;b90e  ff          DATA 0xff
    .byte 0x16              ;b90f  16          DATA 0x16

mem_b910:
    .byte 0x26              ;b910  26          DATA 0x26 '&'
    .byte 0x85              ;b911  85          DATA 0x85
    .byte 0xb9              ;b912  b9          DATA 0xb9
    .byte 0x32              ;b913  32          DATA 0x32 '2'
    .byte 0xff              ;b914  ff          DATA 0xff
    .byte 0x16              ;b915  16          DATA 0x16
    .byte 0x27              ;b916  27          DATA 0x27 '''
    .byte 0x01              ;b917  01          DATA 0x01
    .byte 0x0a              ;b918  0a          DATA 0x0a
    .byte 0x44              ;b919  44          DATA 0x44 'D'
    .byte 0x01              ;b91a  01          DATA 0x01
    .byte 0x0a              ;b91b  0a          DATA 0x0a
    .byte 0x45              ;b91c  45          DATA 0x45 'E'
    .byte 0x01              ;b91d  01          DATA 0x01
    .byte 0x0a              ;b91e  0a          DATA 0x0a
    .byte 0x46              ;b91f  46          DATA 0x46 'F'
    .byte 0x01              ;b920  01          DATA 0x01
    .byte 0x0a              ;b921  0a          DATA 0x0a
    .byte 0x47              ;b922  47          DATA 0x47 'G'
    .byte 0x01              ;b923  01          DATA 0x01
    .byte 0x0a              ;b924  0a          DATA 0x0a
    .byte 0x07              ;b925  07          DATA 0x07
    .byte 0x01              ;b926  01          DATA 0x01
    .byte 0x0a              ;b927  0a          DATA 0x0a
    .byte 0x15              ;b928  15          DATA 0x15
    .byte 0x01              ;b929  01          DATA 0x01
    .byte 0x0a              ;b92a  0a          DATA 0x0a
    .byte 0x0a              ;b92b  0a          DATA 0x0a
    .byte 0x01              ;b92c  01          DATA 0x01
    .byte 0x14              ;b92d  14          DATA 0x14
    .byte 0x11              ;b92e  11          DATA 0x11
    .byte 0x01              ;b92f  01          DATA 0x01
    .byte 0x14              ;b930  14          DATA 0x14
    .byte 0x13              ;b931  13          DATA 0x13
    .byte 0x01              ;b932  01          DATA 0x01
    .byte 0x07              ;b933  07          DATA 0x07
    .byte 0x0b              ;b934  0b          DATA 0x0b
    .byte 0x01              ;b935  01          DATA 0x01
    .byte 0x13              ;b936  13          DATA 0x13
    .byte 0x18              ;b937  18          DATA 0x18
    .byte 0x01              ;b938  01          DATA 0x01
    .byte 0x13              ;b939  13          DATA 0x13
    .byte 0x09              ;b93a  09          DATA 0x09
    .byte 0x01              ;b93b  01          DATA 0x01
    .byte 0x11              ;b93c  11          DATA 0x11
    .byte 0x08              ;b93d  08          DATA 0x08
    .byte 0x01              ;b93e  01          DATA 0x01
    .byte 0x12              ;b93f  12          DATA 0x12
    .byte 0x1d              ;b940  1d          DATA 0x1d
    .byte 0x01              ;b941  01          DATA 0x01
    .byte 0x11              ;b942  11          DATA 0x11
    .byte 0x1c              ;b943  1c          DATA 0x1c
    .byte 0x01              ;b944  01          DATA 0x01
    .byte 0x12              ;b945  12          DATA 0x12
    .byte 0x10              ;b946  10          DATA 0x10
    .byte 0x01              ;b947  01          DATA 0x01
    .byte 0x15              ;b948  15          DATA 0x15
    .byte 0x12              ;b949  12          DATA 0x12
    .byte 0x01              ;b94a  01          DATA 0x01
    .byte 0x15              ;b94b  15          DATA 0x15
    .byte 0x27              ;b94c  27          DATA 0x27 '''
    .byte 0x02              ;b94d  02          DATA 0x02
    .byte 0x09              ;b94e  09          DATA 0x09
    .byte 0x15              ;b94f  15          DATA 0x15
    .byte 0x02              ;b950  02          DATA 0x02
    .byte 0x09              ;b951  09          DATA 0x09
    .byte 0x07              ;b952  07          DATA 0x07
    .byte 0x02              ;b953  02          DATA 0x02
    .byte 0x09              ;b954  09          DATA 0x09
    .byte 0x0b              ;b955  0b          DATA 0x0b
    .byte 0x02              ;b956  02          DATA 0x02
    .byte 0x09              ;b957  09          DATA 0x09
    .byte 0x0a              ;b958  0a          DATA 0x0a
    .byte 0x02              ;b959  02          DATA 0x02
    .byte 0x09              ;b95a  09          DATA 0x09
    .byte 0x18              ;b95b  18          DATA 0x18
    .byte 0x02              ;b95c  02          DATA 0x02
    .byte 0x09              ;b95d  09          DATA 0x09
    .byte 0x11              ;b95e  11          DATA 0x11
    .byte 0x02              ;b95f  02          DATA 0x02
    .byte 0x09              ;b960  09          DATA 0x09
    .byte 0x44              ;b961  44          DATA 0x44 'D'
    .byte 0x02              ;b962  02          DATA 0x02
    .byte 0x09              ;b963  09          DATA 0x09
    .byte 0x45              ;b964  45          DATA 0x45 'E'
    .byte 0x02              ;b965  02          DATA 0x02
    .byte 0x09              ;b966  09          DATA 0x09
    .byte 0x46              ;b967  46          DATA 0x46 'F'
    .byte 0x02              ;b968  02          DATA 0x02
    .byte 0x09              ;b969  09          DATA 0x09
    .byte 0x47              ;b96a  47          DATA 0x47 'G'
    .byte 0x02              ;b96b  02          DATA 0x02
    .byte 0x09              ;b96c  09          DATA 0x09
    .byte 0x13              ;b96d  13          DATA 0x13
    .byte 0x02              ;b96e  02          DATA 0x02
    .byte 0x08              ;b96f  08          DATA 0x08
    .byte 0x12              ;b970  12          DATA 0x12
    .byte 0x02              ;b971  02          DATA 0x02
    .byte 0x15              ;b972  15          DATA 0x15
    .byte 0x10              ;b973  10          DATA 0x10
    .byte 0x02              ;b974  02          DATA 0x02
    .byte 0x15              ;b975  15          DATA 0x15
    .byte 0x09              ;b976  09          DATA 0x09
    .byte 0x02              ;b977  02          DATA 0x02
    .byte 0x0c              ;b978  0c          DATA 0x0c
    .byte 0x08              ;b979  08          DATA 0x08
    .byte 0x02              ;b97a  02          DATA 0x02
    .byte 0x0d              ;b97b  0d          DATA 0x0d
    .byte 0x1d              ;b97c  1d          DATA 0x1d
    .byte 0x02              ;b97d  02          DATA 0x02
    .byte 0x0c              ;b97e  0c          DATA 0x0c
    .byte 0x1c              ;b97f  1c          DATA 0x1c
    .byte 0x02              ;b980  02          DATA 0x02
    .byte 0x0d              ;b981  0d          DATA 0x0d
    .byte 0x32              ;b982  32          DATA 0x32 '2'
    .byte 0xff              ;b983  ff          DATA 0xff
    .byte 0x16              ;b984  16          DATA 0x16
    .byte 0x05              ;b985  05          DATA 0x05
    .byte 0x46              ;b986  46          DATA 0x46 'F'
    .byte 0x10              ;b987  10          DATA 0x10
    .byte 0x2b              ;b988  2b          DATA 0x2b '+'
    .byte 0x00              ;b989  00          DATA 0x00
    .byte 0x46              ;b98a  46          DATA 0x46 'F'
    .byte 0x0f              ;b98b  0f          DATA 0x0f
    .byte 0x26              ;b98c  26          DATA 0x26 '&'
    .byte 0x09              ;b98d  09          DATA 0x09
    .byte 0x9e              ;b98e  9e          DATA 0x9e
    .byte 0xa6              ;b98f  a6          DATA 0xa6
    .byte 0xf1              ;b990  f1          DATA 0xf1
    .byte 0xa1              ;b991  a1          DATA 0xa1
    .byte 0x32              ;b992  32          DATA 0x32 '2'
    .byte 0x9e              ;b993  9e          DATA 0x9e
    .byte 0x2e              ;b994  2e          DATA 0x2e '.'
    .byte 0xfb              ;b995  fb          DATA 0xfb
    .byte 0xaf              ;b996  af          DATA 0xaf

mem_b997:
;table of words used with table_get_word
    .byte 0x20              ;b997  20          DATA 0x20 ' '    32 entries below:
    .word lab_8c7a
    .word lab_8c7f
    .word lab_8c90
    .word lab_8ca4
    .word lab_8ce4
    .word lab_8cfc
    .word lab_8d05
    .word lab_8d18
    .word lab_8d2b
    .word lab_8d34
    .word lab_8d45
    .word lab_8d5c
    .word lab_8d6a
    .word lab_8da2
    .word lab_8dfa
    .word lab_8e26
    .word lab_8e3e
    .word lab_8e4e
    .word lab_8e6e
    .word lab_8ef5
    .word lab_8efe
    .word lab_8f11
    .word lab_8f1f
    .word lab_8f33
    .word lab_8f43
    .word lab_8e9b
    .word lab_8ea4
    .word lab_8eb7
    .word lab_8ec5
    .word lab_8edc
    .word lab_8ee7
    .word lab_8157

mem_b9d8:
;table of words used with table_get_word
    .byte 0x17              ;b9d8  17          DATA 0x17      23 entries below:
    .word lab_8afa
    .word lab_8b12
    .word lab_8afc
    .word lab_8b22
    .word lab_8c2f
    .word lab_8c3a
    .word lab_8b38
    .word lab_8b73
    .word lab_8b73
    .word lab_8b84
    .word lab_8b68
    .word lab_8b9f
    .word lab_8b8f
    .word lab_8baf
    .word lab_8bbf
    .word lab_8bcf
    .word lab_8bdf
    .word lab_8bef
    .word lab_8bff
    .word lab_8c0f
    .word lab_8c1f
    .word lab_8c43
    .word lab_8fa5

mem_ba07:
;table of bytes used with table_get_byte
    .byte 0x25              ;ba07  25          DATA 0x25 '%'    37 entries below:
    .byte 0x23              ;ba08  23          DATA 0x23 '#'
    .byte 0x24              ;ba09  24          DATA 0x24 '$'
    .byte 0x32              ;ba0a  32          DATA 0x32 '2'
    .byte 0x25              ;ba0b  25          DATA 0x25 '%'
    .byte 0x26              ;ba0c  26          DATA 0x26 '&'
    .byte 0x41              ;ba0d  41          DATA 0x41 'A'
    .byte 0x28              ;ba0e  28          DATA 0x28 '('
    .byte 0x27              ;ba0f  27          DATA 0x27 '''
    .byte 0x42              ;ba10  42          DATA 0x42 'B'
    .byte 0x29              ;ba11  29          DATA 0x29 ')'
    .byte 0x2a              ;ba12  2a          DATA 0x2a '*'
    .byte 0x3e              ;ba13  3e          DATA 0x3e '>'
    .byte 0x30              ;ba14  30          DATA 0x30 '0'
    .byte 0x33              ;ba15  33          DATA 0x33 '3'
    .byte 0x34              ;ba16  34          DATA 0x34 '4'
    .byte 0x35              ;ba17  35          DATA 0x35 '5'
    .byte 0x36              ;ba18  36          DATA 0x36 '6'
    .byte 0x37              ;ba19  37          DATA 0x37 '7'
    .byte 0x38              ;ba1a  38          DATA 0x38 '8'
    .byte 0x3b              ;ba1b  3b          DATA 0x3b ';'
    .byte 0x39              ;ba1c  39          DATA 0x39 '9'
    .byte 0x3a              ;ba1d  3a          DATA 0x3a ':'
    .byte 0x3c              ;ba1e  3c          DATA 0x3c '<'
    .byte 0x3d              ;ba1f  3d          DATA 0x3d '='
    .byte 0x2d              ;ba20  2d          DATA 0x2d '-'
    .byte 0x2e              ;ba21  2e          DATA 0x2e '.'
    .byte 0x2c              ;ba22  2c          DATA 0x2c ','
    .byte 0x2b              ;ba23  2b          DATA 0x2b '+'
    .byte 0x2f              ;ba24  2f          DATA 0x2f '/'
    .byte 0x22              ;ba25  22          DATA 0x22 '"'
    .byte 0x31              ;ba26  31          DATA 0x31 '1'
    .byte 0x3f              ;ba27  3f          DATA 0x3f '?'
    .byte 0x44              ;ba28  44          DATA 0x44 'D'
    .byte 0x45              ;ba29  45          DATA 0x45 'E'
    .byte 0x46              ;ba2a  46          DATA 0x46 'F'
    .byte 0x47              ;ba2b  47          DATA 0x47 'G'
    .byte 0x43              ;ba2c  43          DATA 0x43 'C'

    .byte 0x00              ;ba2d  00          DATA 0x00
    .byte 0x08              ;ba2e  08          DATA 0x08
    .byte 0x01              ;ba2f  01          DATA 0x01

mem_ba30:
    .byte 0x04              ;ba30  04          DATA 0x04
    .byte 0xec              ;ba31  ec          DATA 0xec
    .byte 0xfb              ;ba32  fb          DATA 0xfb
    .byte 0x0f              ;ba33  0f          DATA 0x0f
    .byte 0x02              ;ba34  02          DATA 0x02

mem_ba35:
    .byte 0x0b              ;ba35  0b          DATA 0x0b
    .byte 0xb5              ;ba36  b5          DATA 0xb5
    .byte 0x00              ;ba37  00          DATA 0x00
    .byte 0x00              ;ba38  00          DATA 0x00
    .byte 0xfb              ;ba39  fb          DATA 0xfb
    .byte 0x0f              ;ba3a  0f          DATA 0x0f
    .byte 0x02              ;ba3b  02          DATA 0x02
    .byte 0x0b              ;ba3c  0b          DATA 0x0b
    .byte 0xb5              ;ba3d  b5          DATA 0xb5
    .byte 0x00              ;ba3e  00          DATA 0x00
    .byte 0x40              ;ba3f  40          DATA 0x40 '@'
    .byte 0xfe              ;ba40  fe          DATA 0xfe
    .byte 0x0f              ;ba41  0f          DATA 0x0f
    .byte 0x02              ;ba42  02          DATA 0x02

mem_ba43:
;unknown table
    .byte 0x28              ;ba43  28          DATA 0x28 '('
    .byte 0xed              ;ba44  ed          DATA 0xed
    .byte 0xd2              ;ba45  d2          DATA 0xd2
    .byte 0x23              ;ba46  23          DATA 0x23 '#'
    .byte 0xfe              ;ba47  fe          DATA 0xfe
    .byte 0x0f              ;ba48  0f          DATA 0x0f
    .byte 0x02              ;ba49  02          DATA 0x02

mem_ba4a:
    .byte 0x28              ;ba4a  28          DATA 0x28 '('
    .byte 0xed              ;ba4b  ed          DATA 0xed
    .byte 0x53              ;ba4c  53          DATA 0x53 'S'
    .byte 0x23              ;ba4d  23          DATA 0x23 '#'
    .byte 0xf9              ;ba4e  f9          DATA 0xf9
    .byte 0x0f              ;ba4f  0f          DATA 0x0f
    .byte 0x02              ;ba50  02          DATA 0x02

mem_ba51:
;unknown table
    .byte 0x00              ;ba51  00          DATA 0x00
    .byte 0x00              ;ba52  00          DATA 0x00
    .byte 0x10              ;ba53  10          DATA 0x10
    .byte 0x40              ;ba54  40          DATA 0x40 '@'
    .byte 0xf9              ;ba55  f9          DATA 0xf9
    .byte 0x0f              ;ba56  0f          DATA 0x0f
    .byte 0x02              ;ba57  02          DATA 0x02

mem_ba58:
    .byte 0x00              ;ba58  00          DATA 0x00
    .byte 0x20              ;ba59  20          DATA 0x20 ' '
    .byte 0x10              ;ba5a  10          DATA 0x10
    .byte 0x48              ;ba5b  48          DATA 0x48 'H'
    .byte 0xf9              ;ba5c  f9          DATA 0xf9
    .byte 0x0f              ;ba5d  0f          DATA 0x0f
    .byte 0x02              ;ba5e  02          DATA 0x02

mem_ba5f:
;unknown table
    .byte 0x00              ;ba5f  00          DATA 0x00
    .byte 0x00              ;ba60  00          DATA 0x00
    .byte 0x10              ;ba61  10          DATA 0x10
    .byte 0x44              ;ba62  44          DATA 0x44 'D'
    .byte 0xf9              ;ba63  f9          DATA 0xf9
    .byte 0x0f              ;ba64  0f          DATA 0x0f
    .byte 0x02              ;ba65  02          DATA 0x02

mem_ba66:
;unknown table
    .byte 0x00              ;ba66  00          DATA 0x00
    .byte 0x00              ;ba67  00          DATA 0x00
    .byte 0x90              ;ba68  90          DATA 0x90
    .byte 0x4a              ;ba69  4a          DATA 0x4a 'J'
    .byte 0xfd              ;ba6a  fd          DATA 0xfd
    .byte 0x0f              ;ba6b  0f          DATA 0x0f
    .byte 0x01              ;ba6c  01          DATA 0x01

mem_ba6d:
    .byte 0x00              ;ba6d  00          DATA 0x00
    .byte 0x6c              ;ba6e  6c          DATA 0x6c 'l'
    .byte 0xb0              ;ba6f  b0          DATA 0xb0
    .byte 0x08              ;ba70  08          DATA 0x08
    .byte 0x07              ;ba71  07          DATA 0x07

mem_ba72:
    .byte 0x01              ;ba72  01          DATA 0x01
    .byte 0xa7              ;ba73  a7          DATA 0xa7
    .byte 0x03              ;ba74  03          DATA 0x03
    .byte 0xef              ;ba75  ef          DATA 0xef
    .byte 0x00              ;ba76  00          DATA 0x00
    .byte 0x00              ;ba77  00          DATA 0x00
    .byte 0x00              ;ba78  00          DATA 0x00
    .byte 0x00              ;ba79  00          DATA 0x00
    .byte 0x00              ;ba7a  00          DATA 0x00
    .byte 0x08              ;ba7b  08          DATA 0x08
    .byte 0x00              ;ba7c  00          DATA 0x00
    .byte 0x08              ;ba7d  08          DATA 0x08
    .byte 0x00              ;ba7e  00          DATA 0x00
    .byte 0x00              ;ba7f  00          DATA 0x00
    .byte 0xbe              ;ba80  be          DATA 0xbe
    .byte 0x08              ;ba81  08          DATA 0x08
    .byte 0x07              ;ba82  07          DATA 0x07

mem_ba83:
    .byte 0x01              ;ba83  01          DATA 0x01
    .byte 0xa7              ;ba84  a7          DATA 0xa7
    .byte 0x03              ;ba85  03          DATA 0x03
    .byte 0xef              ;ba86  ef          DATA 0xef
    .byte 0x00              ;ba87  00          DATA 0x00
    .byte 0x00              ;ba88  00          DATA 0x00
    .byte 0x00              ;ba89  00          DATA 0x00
    .byte 0x00              ;ba8a  00          DATA 0x00
    .byte 0x00              ;ba8b  00          DATA 0x00
    .byte 0x08              ;ba8c  08          DATA 0x08
    .byte 0x00              ;ba8d  00          DATA 0x00
    .byte 0x08              ;ba8e  08          DATA 0x08
    .byte 0x00              ;ba8f  00          DATA 0x00
    .byte 0x00              ;ba90  00          DATA 0x00
    .byte 0x6a              ;ba91  6a          DATA 0x6a 'j'
    .byte 0x00              ;ba92  00          DATA 0x00
    .byte 0x01              ;ba93  01          DATA 0x01

mem_ba94:
    .byte 0x00              ;ba94  00          DATA 0x00
    .byte 0x2c              ;ba95  2c          DATA 0x2c ','
    .byte 0x00              ;ba96  00          DATA 0x00
    .byte 0x6a              ;ba97  6a          DATA 0x6a 'j'
    .byte 0x00              ;ba98  00          DATA 0x00
    .byte 0x01              ;ba99  01          DATA 0x01

mem_ba9a:
    .byte 0x00              ;ba9a  00          DATA 0x00
    .byte 0x2f              ;ba9b  2f          DATA 0x2f '/'
    .byte 0x80              ;ba9c  80          DATA 0x80
    .byte 0xf4              ;ba9d  f4          DATA 0xf4
    .byte 0x08              ;ba9e  08          DATA 0x08
    .byte 0x04              ;ba9f  04          DATA 0x04

mem_baa0:
    .byte 0x05              ;baa0  05          DATA 0x05
    .byte 0x18              ;baa1  18          DATA 0x18
    .byte 0x07              ;baa2  07          DATA 0x07
    .byte 0xfe              ;baa3  fe          DATA 0xfe
    .byte 0x00              ;baa4  00          DATA 0x00
    .byte 0x7d              ;baa5  7d          DATA 0x7d '}'
    .byte 0x00              ;baa6  00          DATA 0x00
    .byte 0x00              ;baa7  00          DATA 0x00
    .byte 0xf4              ;baa8  f4          DATA 0xf4
    .byte 0x08              ;baa9  08          DATA 0x08
    .byte 0x04              ;baaa  04          DATA 0x04

mem_baab:
    .byte 0x05              ;baab  05          DATA 0x05
    .byte 0xdd              ;baac  dd          DATA 0xdd
    .byte 0x07              ;baad  07          DATA 0x07
    .byte 0xf6              ;baae  f6          DATA 0xf6
    .byte 0x00              ;baaf  00          DATA 0x00
    .byte 0x7d              ;bab0  7d          DATA 0x7d '}'
    .byte 0x00              ;bab1  00          DATA 0x00
    .byte 0x98              ;bab2  98          DATA 0x98
    .byte 0xf4              ;bab3  f4          DATA 0xf4
    .byte 0x08              ;bab4  08          DATA 0x08
    .byte 0x04              ;bab5  04          DATA 0x04

mem_bab6:
    .byte 0x06              ;bab6  06          DATA 0x06
    .byte 0x89              ;bab7  89          DATA 0x89
    .byte 0x07              ;bab8  07          DATA 0x07
    .byte 0xff              ;bab9  ff          DATA 0xff
    .byte 0x00              ;baba  00          DATA 0x00
    .byte 0x7d              ;babb  7d          DATA 0x7d '}'
    .byte 0x00              ;babc  00          DATA 0x00
    .byte 0x03              ;babd  03          DATA 0x03
    .byte 0xf4              ;babe  f4          DATA 0xf4
    .byte 0x08              ;babf  08          DATA 0x08
    .byte 0x04              ;bac0  04          DATA 0x04

mem_bac1:
    .byte 0x05              ;bac1  05          DATA 0x05
    .byte 0x74              ;bac2  74          DATA 0x74 't'
    .byte 0x07              ;bac3  07          DATA 0x07
    .byte 0xf9              ;bac4  f9          DATA 0xf9
    .byte 0x00              ;bac5  00          DATA 0x00
    .byte 0x7d              ;bac6  7d          DATA 0x7d '}'
    .byte 0x00              ;bac7  00          DATA 0x00
    .byte 0x00              ;bac8  00          DATA 0x00
    .byte 0xe1              ;bac9  e1          DATA 0xe1
    .byte 0x08              ;baca  08          DATA 0x08
    .byte 0x08              ;bacb  08          DATA 0x08

mem_bacc:
    .byte 0x02              ;bacc  02          DATA 0x02
    .byte 0x22              ;bacd  22          DATA 0x22 '"'
    .byte 0x03              ;bace  03          DATA 0x03
    .byte 0xe5              ;bacf  e5          DATA 0xe5
    .byte 0x00              ;bad0  00          DATA 0x00
    .byte 0x00              ;bad1  00          DATA 0x00
    .byte 0x00              ;bad2  00          DATA 0x00
    .byte 0x00              ;bad3  00          DATA 0x00
    .byte 0x05              ;bad4  05          DATA 0x05
    .byte 0xdd              ;bad5  dd          DATA 0xdd
    .byte 0x00              ;bad6  00          DATA 0x00
    .byte 0x1a              ;bad7  1a          DATA 0x1a
    .byte 0x00              ;bad8  00          DATA 0x00
    .byte 0x00              ;bad9  00          DATA 0x00
    .byte 0x00              ;bada  00          DATA 0x00
    .byte 0x00              ;badb  00          DATA 0x00
    .byte 0xeb              ;badc  eb          DATA 0xeb
    .byte 0x08              ;badd  08          DATA 0x08
    .byte 0x01              ;bade  01          DATA 0x01

mem_badf:
    .byte 0x02              ;badf  02          DATA 0x02
    .byte 0x00              ;bae0  00          DATA 0x00
    .byte 0xf9              ;bae1  f9          DATA 0xf9
    .byte 0x08              ;bae2  08          DATA 0x08
    .byte 0x07              ;bae3  07          DATA 0x07

mem_bae4:
    .byte 0x09              ;bae4  09          DATA 0x09
    .byte 0x0d              ;bae5  0d          DATA 0x0d
    .byte 0x02              ;bae6  02          DATA 0x02
    .byte 0x9b              ;bae7  9b          DATA 0x9b
    .byte 0x05              ;bae8  05          DATA 0x05
    .byte 0x00              ;bae9  00          DATA 0x00
    .byte 0x08              ;baea  08          DATA 0x08
    .byte 0x19              ;baeb  19          DATA 0x19
    .byte 0x00              ;baec  00          DATA 0x00
    .byte 0x23              ;baed  23          DATA 0x23 '#'
    .byte 0x04              ;baee  04          DATA 0x04
    .byte 0x03              ;baef  03          DATA 0x03
    .byte 0x00              ;baf0  00          DATA 0x00
    .byte 0xaa              ;baf1  aa          DATA 0xaa
    .byte 0xf9              ;baf2  f9          DATA 0xf9
    .byte 0x08              ;baf3  08          DATA 0x08
    .byte 0x07              ;baf4  07          DATA 0x07

mem_baf5:
    .byte 0x09              ;baf5  09          DATA 0x09
    .byte 0x0d              ;baf6  0d          DATA 0x0d
    .byte 0x02              ;baf7  02          DATA 0x02
    .byte 0x9b              ;baf8  9b          DATA 0x9b
    .byte 0x05              ;baf9  05          DATA 0x05
    .byte 0x00              ;bafa  00          DATA 0x00
    .byte 0x08              ;bafb  08          DATA 0x08
    .byte 0x19              ;bafc  19          DATA 0x19
    .byte 0x00              ;bafd  00          DATA 0x00
    .byte 0x23              ;bafe  23          DATA 0x23 '#'
    .byte 0x04              ;baff  04          DATA 0x04
    .byte 0x03              ;bb00  03          DATA 0x03
    .byte 0x00              ;bb01  00          DATA 0x00
    .byte 0x00              ;bb02  00          DATA 0x00
    .byte 0xe1              ;bb03  e1          DATA 0xe1
    .byte 0x08              ;bb04  08          DATA 0x08
    .byte 0x08              ;bb05  08          DATA 0x08

mem_bb06:
    .byte 0x02              ;bb06  02          DATA 0x02
    .byte 0x22              ;bb07  22          DATA 0x22 '"'
    .byte 0x03              ;bb08  03          DATA 0x03
    .byte 0xe5              ;bb09  e5          DATA 0xe5
    .byte 0x00              ;bb0a  00          DATA 0x00
    .byte 0x00              ;bb0b  00          DATA 0x00
    .byte 0x00              ;bb0c  00          DATA 0x00
    .byte 0x00              ;bb0d  00          DATA 0x00
    .byte 0x05              ;bb0e  05          DATA 0x05
    .byte 0xdd              ;bb0f  dd          DATA 0xdd
    .byte 0x00              ;bb10  00          DATA 0x00
    .byte 0x1a              ;bb11  1a          DATA 0x1a
    .byte 0x00              ;bb12  00          DATA 0x00
    .byte 0x00              ;bb13  00          DATA 0x00
    .byte 0x00              ;bb14  00          DATA 0x00
    .byte 0x00              ;bb15  00          DATA 0x00
    .byte 0xeb              ;bb16  eb          DATA 0xeb
    .byte 0x08              ;bb17  08          DATA 0x08
    .byte 0x01              ;bb18  01          DATA 0x01
    .byte 0x02              ;bb19  02          DATA 0x02
    .byte 0x00              ;bb1a  00          DATA 0x00
    .byte 0xf9              ;bb1b  f9          DATA 0xf9
    .byte 0x08              ;bb1c  08          DATA 0x08
    .byte 0x07              ;bb1d  07          DATA 0x07
    .byte 0x09              ;bb1e  09          DATA 0x09
    .byte 0x0d              ;bb1f  0d          DATA 0x0d
    .byte 0x02              ;bb20  02          DATA 0x02
    .byte 0x9b              ;bb21  9b          DATA 0x9b
    .byte 0x05              ;bb22  05          DATA 0x05
    .byte 0x00              ;bb23  00          DATA 0x00
    .byte 0x08              ;bb24  08          DATA 0x08
    .byte 0x19              ;bb25  19          DATA 0x19
    .byte 0x00              ;bb26  00          DATA 0x00
    .byte 0x23              ;bb27  23          DATA 0x23 '#'
    .byte 0x40              ;bb28  40          DATA 0x40 '@'
    .byte 0x03              ;bb29  03          DATA 0x03
    .byte 0x00              ;bb2a  00          DATA 0x00
    .byte 0xaa              ;bb2b  aa          DATA 0xaa
    .byte 0xe1              ;bb2c  e1          DATA 0xe1
    .byte 0x08              ;bb2d  08          DATA 0x08
    .byte 0x08              ;bb2e  08          DATA 0x08

mem_bb2f:
    .byte 0x07              ;bb2f  07          DATA 0x07
    .byte 0x11              ;bb30  11          DATA 0x11
    .byte 0x03              ;bb31  03          DATA 0x03
    .byte 0xeb              ;bb32  eb          DATA 0xeb
    .byte 0x00              ;bb33  00          DATA 0x00
    .byte 0x00              ;bb34  00          DATA 0x00
    .byte 0x00              ;bb35  00          DATA 0x00
    .byte 0x00              ;bb36  00          DATA 0x00
    .byte 0x00              ;bb37  00          DATA 0x00
    .byte 0xee              ;bb38  ee          DATA 0xee
    .byte 0x00              ;bb39  00          DATA 0x00
    .byte 0x14              ;bb3a  14          DATA 0x14
    .byte 0x00              ;bb3b  00          DATA 0x00
    .byte 0x00              ;bb3c  00          DATA 0x00
    .byte 0x00              ;bb3d  00          DATA 0x00
    .byte 0x00              ;bb3e  00          DATA 0x00
    .byte 0xe1              ;bb3f  e1          DATA 0xe1
    .byte 0x08              ;bb40  08          DATA 0x08
    .byte 0x08              ;bb41  08          DATA 0x08

mem_bb42:
    .byte 0x05              ;bb42  05          DATA 0x05
    .byte 0x25              ;bb43  25          DATA 0x25 '%'
    .byte 0x03              ;bb44  03          DATA 0x03
    .byte 0xee              ;bb45  ee          DATA 0xee
    .byte 0x00              ;bb46  00          DATA 0x00
    .byte 0x00              ;bb47  00          DATA 0x00
    .byte 0x00              ;bb48  00          DATA 0x00
    .byte 0x00              ;bb49  00          DATA 0x00
    .byte 0x02              ;bb4a  02          DATA 0x02
    .byte 0xdc              ;bb4b  dc          DATA 0xdc
    .byte 0x00              ;bb4c  00          DATA 0x00
    .byte 0x11              ;bb4d  11          DATA 0x11
    .byte 0x00              ;bb4e  00          DATA 0x00
    .byte 0x00              ;bb4f  00          DATA 0x00
    .byte 0x00              ;bb50  00          DATA 0x00
    .byte 0x00              ;bb51  00          DATA 0x00
    .byte 0x27              ;bb52  27          DATA 0x27 '''
    .byte 0x09              ;bb53  09          DATA 0x09
    .byte 0x06              ;bb54  06          DATA 0x06

mem_bb55:
    .byte 0x07              ;bb55  07          DATA 0x07
    .byte 0xff              ;bb56  ff          DATA 0xff
    .byte 0x07              ;bb57  07          DATA 0x07
    .byte 0xff              ;bb58  ff          DATA 0xff
    .byte 0x07              ;bb59  07          DATA 0x07
    .byte 0xff              ;bb5a  ff          DATA 0xff
    .byte 0x08              ;bb5b  08          DATA 0x08
    .byte 0xf9              ;bb5c  f9          DATA 0xf9
    .byte 0x08              ;bb5d  08          DATA 0x08
    .byte 0xfb              ;bb5e  fb          DATA 0xfb
    .byte 0x08              ;bb5f  08          DATA 0x08
    .byte 0xfb              ;bb60  fb          DATA 0xfb
    .byte 0x31              ;bb61  31          DATA 0x31 '1'
    .byte 0x09              ;bb62  09          DATA 0x09
    .byte 0x0a              ;bb63  0a          DATA 0x0a

mem_bb64:
    .byte 0x00              ;bb64  00          DATA 0x00
    .byte 0x00              ;bb65  00          DATA 0x00
    .byte 0x00              ;bb66  00          DATA 0x00
    .byte 0x00              ;bb67  00          DATA 0x00
    .byte 0x07              ;bb68  07          DATA 0x07
    .byte 0xff              ;bb69  ff          DATA 0xff
    .byte 0x07              ;bb6a  07          DATA 0x07
    .byte 0xff              ;bb6b  ff          DATA 0xff
    .byte 0x00              ;bb6c  00          DATA 0x00
    .byte 0x80              ;bb6d  80          DATA 0x80
    .byte 0x00              ;bb6e  00          DATA 0x00
    .byte 0x80              ;bb6f  80          DATA 0x80
    .byte 0x00              ;bb70  00          DATA 0x00
    .byte 0x0b              ;bb71  0b          DATA 0x0b
    .byte 0x07              ;bb72  07          DATA 0x07
    .byte 0xf9              ;bb73  f9          DATA 0xf9
    .byte 0x00              ;bb74  00          DATA 0x00
    .byte 0x80              ;bb75  80          DATA 0x80
    .byte 0x00              ;bb76  00          DATA 0x00
    .byte 0x80              ;bb77  80          DATA 0x80
    .byte 0x3b              ;bb78  3b          DATA 0x3b ';'
    .byte 0x09              ;bb79  09          DATA 0x09
    .byte 0x0a              ;bb7a  0a          DATA 0x0a

mem_bb7b:
    .byte 0x00              ;bb7b  00          DATA 0x00
    .byte 0x0b              ;bb7c  0b          DATA 0x0b
    .byte 0x07              ;bb7d  07          DATA 0x07
    .byte 0xf9              ;bb7e  f9          DATA 0xf9
    .byte 0x04              ;bb7f  04          DATA 0x04
    .byte 0xd3              ;bb80  d3          DATA 0xd3
    .byte 0x07              ;bb81  07          DATA 0x07
    .byte 0xe0              ;bb82  e0          DATA 0xe0
    .byte 0x00              ;bb83  00          DATA 0x00
    .byte 0x59              ;bb84  59          DATA 0x59 'Y'
    .byte 0x00              ;bb85  00          DATA 0x00
    .byte 0x00              ;bb86  00          DATA 0x00
    .byte 0x04              ;bb87  04          DATA 0x04
    .byte 0xd3              ;bb88  d3          DATA 0xd3
    .byte 0x07              ;bb89  07          DATA 0x07
    .byte 0xe0              ;bb8a  e0          DATA 0xe0
    .byte 0x00              ;bb8b  00          DATA 0x00
    .byte 0x59              ;bb8c  59          DATA 0x59 'Y'
    .byte 0x02              ;bb8d  02          DATA 0x02
    .byte 0xda              ;bb8e  da          DATA 0xda
    .byte 0x48              ;bb8f  48          DATA 0x48 'H'
    .byte 0x09              ;bb90  09          DATA 0x09
    .byte 0x04              ;bb91  04          DATA 0x04

mem_bb92:
;unknown table
    .byte 0x00              ;bb92  00          DATA 0x00
    .byte 0x40              ;bb93  40          DATA 0x40 '@'
    .byte 0x00              ;bb94  00          DATA 0x00
    .byte 0x40              ;bb95  40          DATA 0x40 '@'
    .byte 0x00              ;bb96  00          DATA 0x00
    .byte 0x00              ;bb97  00          DATA 0x00
    .byte 0x00              ;bb98  00          DATA 0x00
    .byte 0x00              ;bb99  00          DATA 0x00
    .byte 0x48              ;bb9a  48          DATA 0x48 'H'
    .byte 0x09              ;bb9b  09          DATA 0x09
    .byte 0x02              ;bb9c  02          DATA 0x02

mem_bb9d:
;unknown table
    .byte 0x00              ;bb9d  00          DATA 0x00
    .byte 0x80              ;bb9e  80          DATA 0x80
    .byte 0x00              ;bb9f  00          DATA 0x00
    .byte 0x80              ;bba0  80          DATA 0x80
    .byte 0x48              ;bba1  48          DATA 0x48 'H'
    .byte 0x09              ;bba2  09          DATA 0x09
    .byte 0x02              ;bba3  02          DATA 0x02

mem_bba4:
;unknown table
    .byte 0x00              ;bba4  00          DATA 0x00
    .byte 0xc0              ;bba5  c0          DATA 0xc0
    .byte 0x00              ;bba6  00          DATA 0x00
    .byte 0xc0              ;bba7  c0          DATA 0xc0
    .byte 0x48              ;bba8  48          DATA 0x48 'H'
    .byte 0x09              ;bba9  09          DATA 0x09
    .byte 0x02              ;bbaa  02          DATA 0x02

mem_bbab:
;unknown table
    .byte 0x01              ;bbab  01          DATA 0x01
    .byte 0x40              ;bbac  40          DATA 0x40 '@'
    .byte 0x01              ;bbad  01          DATA 0x01
    .byte 0x40              ;bbae  40          DATA 0x40 '@'
    .byte 0x48              ;bbaf  48          DATA 0x48 'H'
    .byte 0x09              ;bbb0  09          DATA 0x09
    .byte 0x02              ;bbb1  02          DATA 0x02

mem_bbb2:
;unknown table
    .byte 0x01              ;bbb2  01          DATA 0x01
    .byte 0x80              ;bbb3  80          DATA 0x80
    .byte 0x01              ;bbb4  01          DATA 0x01
    .byte 0x80              ;bbb5  80          DATA 0x80
    .byte 0x48              ;bbb6  48          DATA 0x48 'H'
    .byte 0x09              ;bbb7  09          DATA 0x09
    .byte 0x04              ;bbb8  04          DATA 0x04

mem_bbb9:
;unknown table
    .byte 0x00              ;bbb9  00          DATA 0x00
    .byte 0x00              ;bbba  00          DATA 0x00
    .byte 0x00              ;bbbb  00          DATA 0x00
    .byte 0x00              ;bbbc  00          DATA 0x00
    .byte 0x00              ;bbbd  00          DATA 0x00
    .byte 0x00              ;bbbe  00          DATA 0x00
    .byte 0x00              ;bbbf  00          DATA 0x00
    .byte 0x00              ;bbc0  00          DATA 0x00
    .byte 0x48              ;bbc1  48          DATA 0x48 'H'
    .byte 0x09              ;bbc2  09          DATA 0x09
    .byte 0x04              ;bbc3  04          DATA 0x04

mem_bbc4:
;unknown table
    .byte 0x00              ;bbc4  00          DATA 0x00
    .byte 0x14              ;bbc5  14          DATA 0x14
    .byte 0x00              ;bbc6  00          DATA 0x00
    .byte 0x14              ;bbc7  14          DATA 0x14
    .byte 0x00              ;bbc8  00          DATA 0x00
    .byte 0x00              ;bbc9  00          DATA 0x00
    .byte 0x00              ;bbca  00          DATA 0x00
    .byte 0x00              ;bbcb  00          DATA 0x00
    .byte 0x48              ;bbcc  48          DATA 0x48 'H'
    .byte 0x09              ;bbcd  09          DATA 0x09
    .byte 0x02              ;bbce  02          DATA 0x02

mem_bbcf:
;unknown table
    .byte 0x00              ;bbcf  00          DATA 0x00
    .byte 0x28              ;bbd0  28          DATA 0x28 '('
    .byte 0x00              ;bbd1  00          DATA 0x00
    .byte 0x28              ;bbd2  28          DATA 0x28 '('
    .byte 0x48              ;bbd3  48          DATA 0x48 'H'
    .byte 0x09              ;bbd4  09          DATA 0x09
    .byte 0x02              ;bbd5  02          DATA 0x02

mem_bbd6:
;unknown table
    .byte 0x00              ;bbd6  00          DATA 0x00
    .byte 0x40              ;bbd7  40          DATA 0x40 '@'
    .byte 0x00              ;bbd8  00          DATA 0x00
    .byte 0x40              ;bbd9  40          DATA 0x40 '@'
    .byte 0x48              ;bbda  48          DATA 0x48 'H'
    .byte 0x09              ;bbdb  09          DATA 0x09
    .byte 0x02              ;bbdc  02          DATA 0x02

mem_bbdd:
;unknown table
    .byte 0x00              ;bbdd  00          DATA 0x00
    .byte 0x66              ;bbde  66          DATA 0x66 'f'
    .byte 0x00              ;bbdf  00          DATA 0x00
    .byte 0x66              ;bbe0  66          DATA 0x66 'f'
    .byte 0x48              ;bbe1  48          DATA 0x48 'H'
    .byte 0x09              ;bbe2  09          DATA 0x09
    .byte 0x02              ;bbe3  02          DATA 0x02

mem_bbe4:
;unknown table
    .byte 0x00              ;bbe4  00          DATA 0x00
    .byte 0x80              ;bbe5  80          DATA 0x80
    .byte 0x00              ;bbe6  00          DATA 0x00
    .byte 0x80              ;bbe7  80          DATA 0x80
    .byte 0x27              ;bbe8  27          DATA 0x27 '''
    .byte 0x09              ;bbe9  09          DATA 0x09
    .byte 0x06              ;bbea  06          DATA 0x06

mem_bbeb:
    .byte 0x07              ;bbeb  07          DATA 0x07
    .byte 0xff              ;bbec  ff          DATA 0xff
    .byte 0x07              ;bbed  07          DATA 0x07
    .byte 0xff              ;bbee  ff          DATA 0xff
    .byte 0x07              ;bbef  07          DATA 0x07
    .byte 0xff              ;bbf0  ff          DATA 0xff
    .byte 0x08              ;bbf1  08          DATA 0x08
    .byte 0xf9              ;bbf2  f9          DATA 0xf9
    .byte 0x08              ;bbf3  08          DATA 0x08
    .byte 0xfb              ;bbf4  fb          DATA 0xfb
    .byte 0x08              ;bbf5  08          DATA 0x08
    .byte 0xfb              ;bbf6  fb          DATA 0xfb
    .byte 0x31              ;bbf7  31          DATA 0x31 '1'
    .byte 0x09              ;bbf8  09          DATA 0x09
    .byte 0x0a              ;bbf9  0a          DATA 0x0a

mem_bbfa:
    .byte 0x00              ;bbfa  00          DATA 0x00
    .byte 0x00              ;bbfb  00          DATA 0x00
    .byte 0x00              ;bbfc  00          DATA 0x00
    .byte 0x00              ;bbfd  00          DATA 0x00
    .byte 0x07              ;bbfe  07          DATA 0x07
    .byte 0xff              ;bbff  ff          DATA 0xff
    .byte 0x07              ;bc00  07          DATA 0x07
    .byte 0xff              ;bc01  ff          DATA 0xff
    .byte 0x00              ;bc02  00          DATA 0x00
    .byte 0x80              ;bc03  80          DATA 0x80
    .byte 0x00              ;bc04  00          DATA 0x00
    .byte 0x80              ;bc05  80          DATA 0x80
    .byte 0x06              ;bc06  06          DATA 0x06
    .byte 0x72              ;bc07  72          DATA 0x72 'r'
    .byte 0x07              ;bc08  07          DATA 0x07
    .byte 0xfa              ;bc09  fa          DATA 0xfa
    .byte 0x00              ;bc0a  00          DATA 0x00
    .byte 0x80              ;bc0b  80          DATA 0x80
    .byte 0x00              ;bc0c  00          DATA 0x00
    .byte 0x80              ;bc0d  80          DATA 0x80
    .byte 0x3b              ;bc0e  3b          DATA 0x3b ';'
    .byte 0x09              ;bc0f  09          DATA 0x09
    .byte 0x0a              ;bc10  0a          DATA 0x0a

mem_bc11:
    .byte 0x06              ;bc11  06          DATA 0x06
    .byte 0x72              ;bc12  72          DATA 0x72 'r'
    .byte 0x07              ;bc13  07          DATA 0x07
    .byte 0xfa              ;bc14  fa          DATA 0xfa
    .byte 0x04              ;bc15  04          DATA 0x04
    .byte 0xd3              ;bc16  d3          DATA 0xd3
    .byte 0x07              ;bc17  07          DATA 0x07
    .byte 0xe0              ;bc18  e0          DATA 0xe0
    .byte 0x00              ;bc19  00          DATA 0x00
    .byte 0x59              ;bc1a  59          DATA 0x59 'Y'
    .byte 0x00              ;bc1b  00          DATA 0x00
    .byte 0x00              ;bc1c  00          DATA 0x00
    .byte 0x04              ;bc1d  04          DATA 0x04
    .byte 0xd3              ;bc1e  d3          DATA 0xd3
    .byte 0x07              ;bc1f  07          DATA 0x07
    .byte 0xe0              ;bc20  e0          DATA 0xe0
    .byte 0x00              ;bc21  00          DATA 0x00
    .byte 0x59              ;bc22  59          DATA 0x59 'Y'
    .byte 0x02              ;bc23  02          DATA 0x02
    .byte 0xda              ;bc24  da          DATA 0xda
    .byte 0x47              ;bc25  47          DATA 0x47 'G'
    .byte 0x09              ;bc26  09          DATA 0x09
    .byte 0x01              ;bc27  01          DATA 0x01

mem_bc28:
;unknown table
    .byte 0x08              ;bc28  08          DATA 0x08
    .byte 0x9a              ;bc29  9a          DATA 0x9a
    .byte 0x20              ;bc2a  20          DATA 0x20 ' '
    .byte 0x01              ;bc2b  01          DATA 0x01
    .byte 0x04              ;bc2c  04          DATA 0x04

mem_bc2d:
    .byte 0x00              ;bc2d  00          DATA 0x00
    .byte 0x00              ;bc2e  00          DATA 0x00
    .byte 0x00              ;bc2f  00          DATA 0x00
    .byte 0x00              ;bc30  00          DATA 0x00
    .byte 0x12              ;bc31  12          DATA 0x12
    .byte 0x5f              ;bc32  5f          DATA 0x5f '_'
    .byte 0x00              ;bc33  00          DATA 0x00
    .byte 0x12              ;bc34  12          DATA 0x12
    .byte 0x8e              ;bc35  8e          DATA 0x8e
    .byte 0x03              ;bc36  03          DATA 0x03
    .byte 0xfa              ;bc37  fa          DATA 0xfa
    .byte 0x6f              ;bc38  6f          DATA 0x6f 'o'
    .byte 0x20              ;bc39  20          DATA 0x20 ' '
    .byte 0x01              ;bc3a  01          DATA 0x01
    .byte 0x04              ;bc3b  04          DATA 0x04

mem_bc3c:
    .byte 0x00              ;bc3c  00          DATA 0x00
    .byte 0x00              ;bc3d  00          DATA 0x00
    .byte 0x00              ;bc3e  00          DATA 0x00
    .byte 0x00              ;bc3f  00          DATA 0x00
    .byte 0x15              ;bc40  15          DATA 0x15
    .byte 0x52              ;bc41  52          DATA 0x52 'R'
    .byte 0x00              ;bc42  00          DATA 0x00
    .byte 0x15              ;bc43  15          DATA 0x15
    .byte 0x89              ;bc44  89          DATA 0x89
    .byte 0x03              ;bc45  03          DATA 0x03
    .byte 0xf9              ;bc46  f9          DATA 0xf9
    .byte 0x8a              ;bc47  8a          DATA 0x8a
    .byte 0x20              ;bc48  20          DATA 0x20 ' '
    .byte 0x01              ;bc49  01          DATA 0x01
    .byte 0x02              ;bc4a  02          DATA 0x02

mem_bc4b:
;unknown table
    .byte 0x00              ;bc4b  00          DATA 0x00
    .byte 0x00              ;bc4c  00          DATA 0x00
    .byte 0x00              ;bc4d  00          DATA 0x00
    .byte 0x00              ;bc4e  00          DATA 0x00
    .byte 0x00              ;bc4f  00          DATA 0x00
    .byte 0x00              ;bc50  00          DATA 0x00
    .byte 0x20              ;bc51  20          DATA 0x20 ' '
    .byte 0x01              ;bc52  01          DATA 0x01
    .byte 0x04              ;bc53  04          DATA 0x04

mem_bc54:
;unknown table
    .byte 0x00              ;bc54  00          DATA 0x00
    .byte 0x00              ;bc55  00          DATA 0x00
    .byte 0x01              ;bc56  01          DATA 0x01
    .byte 0x00              ;bc57  00          DATA 0x00
    .byte 0x12              ;bc58  12          DATA 0x12
    .byte 0x5f              ;bc59  5f          DATA 0x5f '_'
    .byte 0x00              ;bc5a  00          DATA 0x00
    .byte 0x12              ;bc5b  12          DATA 0x12
    .byte 0x8e              ;bc5c  8e          DATA 0x8e
    .byte 0x03              ;bc5d  03          DATA 0x03
    .byte 0xfa              ;bc5e  fa          DATA 0xfa
    .byte 0x6f              ;bc5f  6f          DATA 0x6f 'o'
    .byte 0x20              ;bc60  20          DATA 0x20 ' '
    .byte 0x01              ;bc61  01          DATA 0x01
    .byte 0x04              ;bc62  04          DATA 0x04

mem_bc63:
;unknown table
    .byte 0x00              ;bc63  00          DATA 0x00
    .byte 0x00              ;bc64  00          DATA 0x00
    .byte 0x01              ;bc65  01          DATA 0x01
    .byte 0x00              ;bc66  00          DATA 0x00
    .byte 0x15              ;bc67  15          DATA 0x15
    .byte 0x52              ;bc68  52          DATA 0x52 'R'
    .byte 0x00              ;bc69  00          DATA 0x00
    .byte 0x15              ;bc6a  15          DATA 0x15
    .byte 0x89              ;bc6b  89          DATA 0x89
    .byte 0x03              ;bc6c  03          DATA 0x03
    .byte 0xf9              ;bc6d  f9          DATA 0xf9
    .byte 0x8a              ;bc6e  8a          DATA 0x8a
    .byte 0x46              ;bc6f  46          DATA 0x46 'F'
    .byte 0x09              ;bc70  09          DATA 0x09
    .byte 0x02              ;bc71  02          DATA 0x02

mem_bc72:
;unknown table
    .byte 0x08              ;bc72  08          DATA 0x08
    .byte 0x2a              ;bc73  2a          DATA 0x2a '*'
    .byte 0x08              ;bc74  08          DATA 0x08
    .byte 0x8d              ;bc75  8d          DATA 0x8d
    .byte 0x28              ;bc76  28          DATA 0x28 '('
    .byte 0x00              ;bc77  00          DATA 0x00
    .byte 0x01              ;bc78  01          DATA 0x01

mem_bc79:
    .byte 0x01              ;bc79  01          DATA 0x01
    .byte 0xff              ;bc7a  ff          DATA 0xff
    .byte 0xff              ;bc7b  ff          DATA 0xff
    .byte 0x00              ;bc7c  00          DATA 0x00
    .byte 0x00              ;bc7d  00          DATA 0x00
    .byte 0x01              ;bc7e  01          DATA 0x01

mem_bc7f:
    .byte 0x00              ;bc7f  00          DATA 0x00
    .byte 0x06              ;bc80  06          DATA 0x06
    .byte 0x00              ;bc81  00          DATA 0x00
    .byte 0x00              ;bc82  00          DATA 0x00
    .byte 0x00              ;bc83  00          DATA 0x00
    .byte 0x01              ;bc84  01          DATA 0x01

mem_bc85:
;unknown table
    .byte 0x00              ;bc85  00          DATA 0x00
    .byte 0x06              ;bc86  06          DATA 0x06
    .byte 0x40              ;bc87  40          DATA 0x40 '@'
    .byte 0x00              ;bc88  00          DATA 0x00
    .byte 0x00              ;bc89  00          DATA 0x00
    .byte 0x01              ;bc8a  01          DATA 0x01

mem_bc8b:
;unknown table
    .byte 0x00              ;bc8b  00          DATA 0x00
    .byte 0x05              ;bc8c  05          DATA 0x05
    .byte 0x80              ;bc8d  80          DATA 0x80
    .byte 0x00              ;bc8e  00          DATA 0x00
    .byte 0x00              ;bc8f  00          DATA 0x00
    .byte 0x01              ;bc90  01          DATA 0x01

mem_bc91:
;unknown table
    .byte 0x00              ;bc91  00          DATA 0x00
    .byte 0x05              ;bc92  05          DATA 0x05
    .byte 0x80              ;bc93  80          DATA 0x80
    .byte 0x00              ;bc94  00          DATA 0x00
    .byte 0x00              ;bc95  00          DATA 0x00
    .byte 0x01              ;bc96  01          DATA 0x01

mem_bc97:
;unknown table
    .byte 0x00              ;bc97  00          DATA 0x00
    .byte 0x05              ;bc98  05          DATA 0x05
    .byte 0xc0              ;bc99  c0          DATA 0xc0
    .byte 0x00              ;bc9a  00          DATA 0x00
    .byte 0x00              ;bc9b  00          DATA 0x00
    .byte 0x01              ;bc9c  01          DATA 0x01

mem_bc9d:
    .byte 0x00              ;bc9d  00          DATA 0x00
    .byte 0x00              ;bc9e  00          DATA 0x00
    .byte 0x80              ;bc9f  80          DATA 0x80
    .byte 0x00              ;bca0  00          DATA 0x00
    .byte 0x00              ;bca1  00          DATA 0x00
    .byte 0x01              ;bca2  01          DATA 0x01

mem_bca3:
;unknown table
    .byte 0x00              ;bca3  00          DATA 0x00
    .byte 0x01              ;bca4  01          DATA 0x01
    .byte 0x00              ;bca5  00          DATA 0x00
    .byte 0x00              ;bca6  00          DATA 0x00
    .byte 0x00              ;bca7  00          DATA 0x00
    .byte 0x01              ;bca8  01          DATA 0x01

mem_bca9:
;unknown table
    .byte 0x00              ;bca9  00          DATA 0x00
    .byte 0x01              ;bcaa  01          DATA 0x01
    .byte 0x40              ;bcab  40          DATA 0x40 '@'
    .byte 0x00              ;bcac  00          DATA 0x00
    .byte 0x00              ;bcad  00          DATA 0x00
    .byte 0x01              ;bcae  01          DATA 0x01

mem_bcaf:
;unknown table
    .byte 0x00              ;bcaf  00          DATA 0x00
    .byte 0x05              ;bcb0  05          DATA 0x05
    .byte 0x00              ;bcb1  00          DATA 0x00
    .byte 0x00              ;bcb2  00          DATA 0x00
    .byte 0x00              ;bcb3  00          DATA 0x00
    .byte 0x01              ;bcb4  01          DATA 0x01

mem_bcb5:
;unknown table
    .byte 0x00              ;bcb5  00          DATA 0x00
    .byte 0x02              ;bcb6  02          DATA 0x02
    .byte 0x00              ;bcb7  00          DATA 0x00
    .byte 0x1e              ;bcb8  1e          DATA 0x1e
    .byte 0x00              ;bcb9  00          DATA 0x00
    .byte 0x01              ;bcba  01          DATA 0x01

mem_bcbb:
;unknown table
    .byte 0x00              ;bcbb  00          DATA 0x00
    .byte 0x00              ;bcbc  00          DATA 0x00
    .byte 0x00              ;bcbd  00          DATA 0x00
    .byte 0x20              ;bcbe  20          DATA 0x20 ' '
    .byte 0x00              ;bcbf  00          DATA 0x00
    .byte 0x01              ;bcc0  01          DATA 0x01

mem_bcc1:
;unknown table
    .byte 0x00              ;bcc1  00          DATA 0x00
    .byte 0x00              ;bcc2  00          DATA 0x00
    .byte 0x00              ;bcc3  00          DATA 0x00
    .byte 0x27              ;bcc4  27          DATA 0x27 '''
    .byte 0x00              ;bcc5  00          DATA 0x00
    .byte 0x01              ;bcc6  01          DATA 0x01

mem_bcc7:
;unknown table
    .byte 0x00              ;bcc7  00          DATA 0x00
    .byte 0x00              ;bcc8  00          DATA 0x00
    .byte 0x00              ;bcc9  00          DATA 0x00
    .byte 0x29              ;bcca  29          DATA 0x29 ')'
    .byte 0x00              ;bccb  00          DATA 0x00
    .byte 0x01              ;bccc  01          DATA 0x01

mem_bccd:
;unknown table
    .byte 0x00              ;bccd  00          DATA 0x00
    .byte 0x00              ;bcce  00          DATA 0x00
    .byte 0x00              ;bccf  00          DATA 0x00
    .byte 0x76              ;bcd0  76          DATA 0x76 'v'
    .byte 0x08              ;bcd1  08          DATA 0x08
    .byte 0x04              ;bcd2  04          DATA 0x04

mem_bcd3:
    .byte 0x01              ;bcd3  01          DATA 0x01
    .byte 0x39              ;bcd4  39          DATA 0x39 '9'
    .byte 0x01              ;bcd5  01          DATA 0x01
    .byte 0x26              ;bcd6  26          DATA 0x26 '&'
    .byte 0x03              ;bcd7  03          DATA 0x03
    .byte 0x0e              ;bcd8  0e          DATA 0x0e
    .byte 0x02              ;bcd9  02          DATA 0x02
    .byte 0xf2              ;bcda  f2          DATA 0xf2
    .byte 0x76              ;bcdb  76          DATA 0x76 'v'
    .byte 0x08              ;bcdc  08          DATA 0x08
    .byte 0x02              ;bcdd  02          DATA 0x02

mem_bcde:
    .byte 0x01              ;bcde  01          DATA 0x01
    .byte 0x1e              ;bcdf  1e          DATA 0x1e
    .byte 0x02              ;bce0  02          DATA 0x02
    .byte 0x28              ;bce1  28          DATA 0x28 '('
    .byte 0x27              ;bce2  27          DATA 0x27 '''
    .byte 0x08              ;bce3  08          DATA 0x08
    .byte 0x03              ;bce4  03          DATA 0x03
    .byte 0x00              ;bce5  00          DATA 0x00
    .byte 0x0a              ;bce6  0a          DATA 0x0a
    .byte 0x01              ;bce7  01          DATA 0x01
    .byte 0x08              ;bce8  08          DATA 0x08
    .byte 0x02              ;bce9  02          DATA 0x02
    .byte 0x10              ;bcea  10          DATA 0x10
    .byte 0x4d              ;bceb  4d          DATA 0x4d 'M'
    .byte 0x08              ;bcec  08          DATA 0x08
    .byte 0x02              ;bced  02          DATA 0x02
    .byte 0x00              ;bcee  00          DATA 0x00
    .byte 0x00              ;bcef  00          DATA 0x00
    .byte 0x07              ;bcf0  07          DATA 0x07
    .byte 0xff              ;bcf1  ff          DATA 0xff
    .byte 0x61              ;bcf2  61          DATA 0x61 'a'
    .byte 0x08              ;bcf3  08          DATA 0x08
    .byte 0x02              ;bcf4  02          DATA 0x02
    .byte 0x00              ;bcf5  00          DATA 0x00
    .byte 0x00              ;bcf6  00          DATA 0x00
    .byte 0x07              ;bcf7  07          DATA 0x07
    .byte 0xff              ;bcf8  ff          DATA 0xff
    .byte 0x6d              ;bcf9  6d          DATA 0x6d 'm'
    .byte 0x08              ;bcfa  08          DATA 0x08
    .byte 0x02              ;bcfb  02          DATA 0x02
    .byte 0x00              ;bcfc  00          DATA 0x00
    .byte 0x00              ;bcfd  00          DATA 0x00
    .byte 0x07              ;bcfe  07          DATA 0x07
    .byte 0xff              ;bcff  ff          DATA 0xff
    .byte 0x40              ;bd00  40          DATA 0x40 '@'
    .byte 0x08              ;bd01  08          DATA 0x08
    .byte 0x02              ;bd02  02          DATA 0x02

mem_bd03:
    .byte 0x0a              ;bd03  0a          DATA 0x0a
    .byte 0xf6              ;bd04  f6          DATA 0xf6
    .byte 0x01              ;bd05  01          DATA 0x01
    .byte 0x5c              ;bd06  5c          DATA 0x5c '\'
    .byte 0x40              ;bd07  40          DATA 0x40 '@'
    .byte 0x08              ;bd08  08          DATA 0x08
    .byte 0x02              ;bd09  02          DATA 0x02
    .byte 0x00              ;bd0a  00          DATA 0x00
    .byte 0x00              ;bd0b  00          DATA 0x00
    .byte 0x07              ;bd0c  07          DATA 0x07
    .byte 0xff              ;bd0d  ff          DATA 0xff
    .byte 0x73              ;bd0e  73          DATA 0x73 's'
    .byte 0x08              ;bd0f  08          DATA 0x08
    .byte 0x01              ;bd10  01          DATA 0x01
    .byte 0x07              ;bd11  07          DATA 0x07
    .byte 0xff              ;bd12  ff          DATA 0xff
    .byte 0x67              ;bd13  67          DATA 0x67 'g'
    .byte 0x08              ;bd14  08          DATA 0x08
    .byte 0x02              ;bd15  02          DATA 0x02

mem_bd16:
    .byte 0x00              ;bd16  00          DATA 0x00
    .byte 0x00              ;bd17  00          DATA 0x00
    .byte 0x00              ;bd18  00          DATA 0x00
    .byte 0x00              ;bd19  00          DATA 0x00
    .byte 0x67              ;bd1a  67          DATA 0x67 'g'
    .byte 0x08              ;bd1b  08          DATA 0x08
    .byte 0x02              ;bd1c  02          DATA 0x02
    .byte 0x07              ;bd1d  07          DATA 0x07
    .byte 0xff              ;bd1e  ff          DATA 0xff
    .byte 0x07              ;bd1f  07          DATA 0x07
    .byte 0xff              ;bd20  ff          DATA 0xff
    .byte 0x72              ;bd21  72          DATA 0x72 'r'
    .byte 0x08              ;bd22  08          DATA 0x08
    .byte 0x01              ;bd23  01          DATA 0x01
    .byte 0x00              ;bd24  00          DATA 0x00
    .byte 0x00              ;bd25  00          DATA 0x00
    .byte 0x12              ;bd26  12          DATA 0x12
    .byte 0x09              ;bd27  09          DATA 0x09
    .byte 0x03              ;bd28  03          DATA 0x03

mem_bd29:
    .byte 0x07              ;bd29  07          DATA 0x07
    .byte 0xff              ;bd2a  ff          DATA 0xff
    .byte 0x00              ;bd2b  00          DATA 0x00
    .byte 0x00              ;bd2c  00          DATA 0x00
    .byte 0x00              ;bd2d  00          DATA 0x00
    .byte 0x00              ;bd2e  00          DATA 0x00
    .byte 0x74              ;bd2f  74          DATA 0x74 't'
    .byte 0x08              ;bd30  08          DATA 0x08
    .byte 0x01              ;bd31  01          DATA 0x01

mem_bd32:
    .byte 0x07              ;bd32  07          DATA 0x07
    .byte 0xff              ;bd33  ff          DATA 0xff
    .byte 0x7d              ;bd34  7d          DATA 0x7d '}'
    .byte 0x08              ;bd35  08          DATA 0x08
    .byte 0x01              ;bd36  01          DATA 0x01

mem_bd37:
    .byte 0x05              ;bd37  05          DATA 0x05
    .byte 0x9e              ;bd38  9e          DATA 0x9e
    .byte 0x7b              ;bd39  7b          DATA 0x7b '{'
    .byte 0x08              ;bd3a  08          DATA 0x08
    .byte 0x01              ;bd3b  01          DATA 0x01

mem_bd3c:
    .byte 0x02              ;bd3c  02          DATA 0x02
    .byte 0x60              ;bd3d  60          DATA 0x60 '`'
    .byte 0x51              ;bd3e  51          DATA 0x51 'Q'
    .byte 0x08              ;bd3f  08          DATA 0x08
    .byte 0x01              ;bd40  01          DATA 0x01

mem_bd41:
    .byte 0x00              ;bd41  00          DATA 0x00
    .byte 0x14              ;bd42  14          DATA 0x14
    .byte 0x4c              ;bd43  4c          DATA 0x4c 'L'
    .byte 0x08              ;bd44  08          DATA 0x08
    .byte 0x01              ;bd45  01          DATA 0x01

mem_bd46:
    .byte 0x01              ;bd46  01          DATA 0x01
    .byte 0xf0              ;bd47  f0          DATA 0xf0
    .byte 0x64              ;bd48  64          DATA 0x64 'd'
    .byte 0x08              ;bd49  08          DATA 0x08
    .byte 0x02              ;bd4a  02          DATA 0x02

mem_bd4b:
    .byte 0x00              ;bd4b  00          DATA 0x00
    .byte 0x05              ;bd4c  05          DATA 0x05
    .byte 0x00              ;bd4d  00          DATA 0x00
    .byte 0x20              ;bd4e  20          DATA 0x20 ' '
    .byte 0x6f              ;bd4f  6f          DATA 0x6f 'o'
    .byte 0x08              ;bd50  08          DATA 0x08
    .byte 0x03              ;bd51  03          DATA 0x03

mem_bd52:
    .byte 0x00              ;bd52  00          DATA 0x00
    .byte 0x05              ;bd53  05          DATA 0x05
    .byte 0x00              ;bd54  00          DATA 0x00
    .byte 0x20              ;bd55  20          DATA 0x20 ' '
    .byte 0x0f              ;bd56  0f          DATA 0x0f
    .byte 0xff              ;bd57  ff          DATA 0xff
    .byte 0x39              ;bd58  39          DATA 0x39 '9'
    .byte 0x08              ;bd59  08          DATA 0x08
    .byte 0x01              ;bd5a  01          DATA 0x01

mem_bd5b:
    .byte 0x01              ;bd5b  01          DATA 0x01
    .byte 0x1f              ;bd5c  1f          DATA 0x1f
    .byte 0x3b              ;bd5d  3b          DATA 0x3b ';'
    .byte 0x08              ;bd5e  08          DATA 0x08
    .byte 0x02              ;bd5f  02          DATA 0x02

mem_bd60:
    .byte 0x00              ;bd60  00          DATA 0x00
    .byte 0x22              ;bd61  22          DATA 0x22 '"'
    .byte 0x01              ;bd62  01          DATA 0x01
    .byte 0x51              ;bd63  51          DATA 0x51 'Q'
    .byte 0x3f              ;bd64  3f          DATA 0x3f '?'
    .byte 0x08              ;bd65  08          DATA 0x08
    .byte 0x02              ;bd66  02          DATA 0x02

mem_bd67:
    .byte 0x00              ;bd67  00          DATA 0x00
    .byte 0x07              ;bd68  07          DATA 0x07
    .byte 0x00              ;bd69  00          DATA 0x00
    .byte 0x45              ;bd6a  45          DATA 0x45 'E'
    .byte 0x6a              ;bd6b  6a          DATA 0x6a 'j'
    .byte 0x08              ;bd6c  08          DATA 0x08
    .byte 0x05              ;bd6d  05          DATA 0x05

mem_bd6e:
    .byte 0x00              ;bd6e  00          DATA 0x00
    .byte 0x4b              ;bd6f  4b          DATA 0x4b 'K'
    .byte 0x0e              ;bd70  0e          DATA 0x0e
    .byte 0x6e              ;bd71  6e          DATA 0x6e 'n'
    .byte 0x00              ;bd72  00          DATA 0x00
    .byte 0x4b              ;bd73  4b          DATA 0x4b 'K'
    .byte 0x00              ;bd74  00          DATA 0x00
    .byte 0x97              ;bd75  97          DATA 0x97
    .byte 0x04              ;bd76  04          DATA 0x04
    .byte 0x64              ;bd77  64          DATA 0x64 'd'
    .byte 0x45              ;bd78  45          DATA 0x45 'E'
    .byte 0x08              ;bd79  08          DATA 0x08
    .byte 0x0f              ;bd7a  0f          DATA 0x0f
    .byte 0x00              ;bd7b  00          DATA 0x00
    .byte 0x00              ;bd7c  00          DATA 0x00
    .byte 0x00              ;bd7d  00          DATA 0x00
    .byte 0x00              ;bd7e  00          DATA 0x00
    .byte 0x00              ;bd7f  00          DATA 0x00
    .byte 0x00              ;bd80  00          DATA 0x00
    .byte 0x00              ;bd81  00          DATA 0x00
    .byte 0x00              ;bd82  00          DATA 0x00
    .byte 0x00              ;bd83  00          DATA 0x00
    .byte 0x00              ;bd84  00          DATA 0x00
    .byte 0x00              ;bd85  00          DATA 0x00
    .byte 0x00              ;bd86  00          DATA 0x00
    .byte 0x04              ;bd87  04          DATA 0x04
    .byte 0x00              ;bd88  00          DATA 0x00
    .byte 0x00              ;bd89  00          DATA 0x00
    .byte 0x00              ;bd8a  00          DATA 0x00
    .byte 0x00              ;bd8b  00          DATA 0x00
    .byte 0x00              ;bd8c  00          DATA 0x00
    .byte 0x00              ;bd8d  00          DATA 0x00
    .byte 0x00              ;bd8e  00          DATA 0x00
    .byte 0x00              ;bd8f  00          DATA 0x00
    .byte 0x00              ;bd90  00          DATA 0x00
    .byte 0x04              ;bd91  04          DATA 0x04
    .byte 0x00              ;bd92  00          DATA 0x00
    .byte 0x00              ;bd93  00          DATA 0x00
    .byte 0x00              ;bd94  00          DATA 0x00
    .byte 0x00              ;bd95  00          DATA 0x00
    .byte 0x00              ;bd96  00          DATA 0x00
    .byte 0x00              ;bd97  00          DATA 0x00
    .byte 0x00              ;bd98  00          DATA 0x00
    .byte 0x45              ;bd99  45          DATA 0x45 'E'
    .byte 0x08              ;bd9a  08          DATA 0x08
    .byte 0x0f              ;bd9b  0f          DATA 0x0f

mem_bd9c:
    .byte 0x00              ;bd9c  00          DATA 0x00
    .byte 0x51              ;bd9d  51          DATA 0x51 'Q'
    .byte 0x00              ;bd9e  00          DATA 0x00
    .byte 0x2f              ;bd9f  2f          DATA 0x2f '/'
    .byte 0x00              ;bda0  00          DATA 0x00
    .byte 0x51              ;bda1  51          DATA 0x51 'Q'
    .byte 0x0e              ;bda2  0e          DATA 0x0e
    .byte 0x4d              ;bda3  4d          DATA 0x4d 'M'
    .byte 0x04              ;bda4  04          DATA 0x04
    .byte 0xe1              ;bda5  e1          DATA 0xe1
    .byte 0x01              ;bda6  01          DATA 0x01
    .byte 0xb4              ;bda7  b4          DATA 0xb4
    .byte 0x0e              ;bda8  0e          DATA 0x0e
    .byte 0x3f              ;bda9  3f          DATA 0x3f '?'
    .byte 0x01              ;bdaa  01          DATA 0x01
    .byte 0xb4              ;bdab  b4          DATA 0xb4
    .byte 0x0d              ;bdac  0d          DATA 0x0d
    .byte 0x15              ;bdad  15          DATA 0x15
    .byte 0x05              ;bdae  05          DATA 0x05
    .byte 0x43              ;bdaf  43          DATA 0x43 'C'
    .byte 0x03              ;bdb0  03          DATA 0x03
    .byte 0x07              ;bdb1  07          DATA 0x07
    .byte 0x0c              ;bdb2  0c          DATA 0x0c
    .byte 0x1d              ;bdb3  1d          DATA 0x1d
    .byte 0x03              ;bdb4  03          DATA 0x03
    .byte 0x07              ;bdb5  07          DATA 0x07
    .byte 0x0c              ;bdb6  0c          DATA 0x0c
    .byte 0x44              ;bdb7  44          DATA 0x44 'D'
    .byte 0x05              ;bdb8  05          DATA 0x05
    .byte 0x92              ;bdb9  92          DATA 0x92
    .byte 0x45              ;bdba  45          DATA 0x45 'E'
    .byte 0x08              ;bdbb  08          DATA 0x08
    .byte 0x03              ;bdbc  03          DATA 0x03
    .byte 0x00              ;bdbd  00          DATA 0x00
    .byte 0x00              ;bdbe  00          DATA 0x00
    .byte 0x04              ;bdbf  04          DATA 0x04
    .byte 0x00              ;bdc0  00          DATA 0x00
    .byte 0x00              ;bdc1  00          DATA 0x00
    .byte 0x00              ;bdc2  00          DATA 0x00
    .byte 0x77              ;bdc3  77          DATA 0x77 'w'
    .byte 0x00              ;bdc4  00          DATA 0x00
    .byte 0x01              ;bdc5  01          DATA 0x01

mem_bdc6:
;unknown table
    .byte 0x00              ;bdc6  00          DATA 0x00
    .byte 0x38              ;bdc7  38          DATA 0x38 '8'
    .byte 0xc0              ;bdc8  c0          DATA 0xc0
    .byte 0x7f              ;bdc9  7f          DATA 0x7f
    .byte 0x00              ;bdca  00          DATA 0x00
    .byte 0x01              ;bdcb  01          DATA 0x01

mem_bdcc:
    .byte 0x00              ;bdcc  00          DATA 0x00
    .byte 0x39              ;bdcd  39          DATA 0x39 '9'
    .byte 0x00              ;bdce  00          DATA 0x00
    .byte 0xcc              ;bdcf  cc          DATA 0xcc
    .byte 0x08              ;bdd0  08          DATA 0x08
    .byte 0x04              ;bdd1  04          DATA 0x04

mem_bdd2:
;unknown table
    .byte 0x00              ;bdd2  00          DATA 0x00
    .byte 0xcb              ;bdd3  cb          DATA 0xcb
    .byte 0x06              ;bdd4  06          DATA 0x06
    .byte 0x0a              ;bdd5  0a          DATA 0x0a
    .byte 0x08              ;bdd6  08          DATA 0x08
    .byte 0x66              ;bdd7  66          DATA 0x66 'f'
    .byte 0x05              ;bdd8  05          DATA 0x05
    .byte 0xf2              ;bdd9  f2          DATA 0xf2
    .byte 0xf7              ;bdda  f7          DATA 0xf7
    .byte 0x00              ;bddb  00          DATA 0x00
    .byte 0x01              ;bddc  01          DATA 0x01

mem_bddd:
;unknown table
    .byte 0x00              ;bddd  00          DATA 0x00
    .byte 0x38              ;bdde  38          DATA 0x38 '8'
    .byte 0xc0              ;bddf  c0          DATA 0xc0
    .byte 0xff              ;bde0  ff          DATA 0xff
    .byte 0x00              ;bde1  00          DATA 0x00
    .byte 0x01              ;bde2  01          DATA 0x01

mem_bde3:
;unknown table
    .byte 0x00              ;bde3  00          DATA 0x00
    .byte 0x39              ;bde4  39          DATA 0x39 '9'
    .byte 0x00              ;bde5  00          DATA 0x00
    .byte 0xac              ;bde6  ac          DATA 0xac
    .byte 0x08              ;bde7  08          DATA 0x08
    .byte 0x04              ;bde8  04          DATA 0x04

mem_bde9:
;unknown table
    .byte 0x0e              ;bde9  0e          DATA 0x0e
    .byte 0xa5              ;bdea  a5          DATA 0xa5
    .byte 0x0d              ;bdeb  0d          DATA 0x0d
    .byte 0xe3              ;bdec  e3          DATA 0xe3
    .byte 0x08              ;bded  08          DATA 0x08
    .byte 0xd7              ;bdee  d7          DATA 0xd7
    .byte 0x0b              ;bdef  0b          DATA 0x0b
    .byte 0xb2              ;bdf0  b2          DATA 0xb2
    .byte 0x46              ;bdf1  46          DATA 0x46 'F'
    .byte 0x08              ;bdf2  08          DATA 0x08
    .byte 0x01              ;bdf3  01          DATA 0x01
    .byte 0x02              ;bdf4  02          DATA 0x02
    .byte 0x6c              ;bdf5  6c          DATA 0x6c 'l'
    .byte 0x46              ;bdf6  46          DATA 0x46 'F'
    .byte 0x08              ;bdf7  08          DATA 0x08
    .byte 0x01              ;bdf8  01          DATA 0x01
    .byte 0x00              ;bdf9  00          DATA 0x00
    .byte 0x00              ;bdfa  00          DATA 0x00
    .byte 0x4f              ;bdfb  4f          DATA 0x4f 'O'
    .byte 0x00              ;bdfc  00          DATA 0x00
    .byte 0x01              ;bdfd  01          DATA 0x01

mem_bdfe:
;unknown table
    .byte 0x00              ;bdfe  00          DATA 0x00
    .byte 0x03              ;bdff  03          DATA 0x03
    .byte 0x9f              ;be00  9f          DATA 0x9f
    .byte 0x53              ;be01  53          DATA 0x53 'S'
    .byte 0x00              ;be02  00          DATA 0x00
    .byte 0x01              ;be03  01          DATA 0x01

mem_be04:
;unknown table
    .byte 0x00              ;be04  00          DATA 0x00
    .byte 0x00              ;be05  00          DATA 0x00
    .byte 0x46              ;be06  46          DATA 0x46 'F'
    .byte 0x56              ;be07  56          DATA 0x56 'V'
    .byte 0x08              ;be08  08          DATA 0x08
    .byte 0x01              ;be09  01          DATA 0x01
    .byte 0x07              ;be0a  07          DATA 0x07
    .byte 0xab              ;be0b  ab          DATA 0xab
    .byte 0x56              ;be0c  56          DATA 0x56 'V'
    .byte 0x08              ;be0d  08          DATA 0x08
    .byte 0x01              ;be0e  01          DATA 0x01

mem_be0f:
;unknown table
    .byte 0x00              ;be0f  00          DATA 0x00
    .byte 0x5a              ;be10  5a          DATA 0x5a 'Z'
    .byte 0xf9              ;be11  f9          DATA 0xf9
    .byte 0x08              ;be12  08          DATA 0x08
    .byte 0x01              ;be13  01          DATA 0x01
    .byte 0x09              ;be14  09          DATA 0x09
    .byte 0x0d              ;be15  0d          DATA 0x0d
    .byte 0xf9              ;be16  f9          DATA 0xf9
    .byte 0x08              ;be17  08          DATA 0x08
    .byte 0x01              ;be18  01          DATA 0x01
    .byte 0x09              ;be19  09          DATA 0x09
    .byte 0x0d              ;be1a  0d          DATA 0x0d

mem_be1b:
;table of bytes used with table_get_byte
    .byte 0x0f              ;be1b  0f          DATA 0x0f        15 entries below:
    .byte 0x00              ;be1c  00          DATA 0x00
    .byte 0x02              ;be1d  02          DATA 0x02
    .byte 0x04              ;be1e  04          DATA 0x04
    .byte 0x06              ;be1f  06          DATA 0x06
    .byte 0x08              ;be20  08          DATA 0x08
    .byte 0x09              ;be21  09          DATA 0x09
    .byte 0x0c              ;be22  0c          DATA 0x0c
    .byte 0x0d              ;be23  0d          DATA 0x0d
    .byte 0x0e              ;be24  0e          DATA 0x0e
    .byte 0x0f              ;be25  0f          DATA 0x0f
    .byte 0x10              ;be26  10          DATA 0x10
    .byte 0x11              ;be27  11          DATA 0x11
    .byte 0x12              ;be28  12          DATA 0x12
    .byte 0x13              ;be29  13          DATA 0x13
    .byte 0x14              ;be2a  14          DATA 0x14

mem_be2b:
;table of words used with table_get_word
    .byte 0x3e              ;be2b  3e          DATA 0x3e '>'    62 entries below:
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f71
    .word 0x0f5f
    .word 0x0f4c
    .word 0x0f36
    .word 0x0f1d
    .word 0x0f01
    .word 0x0ee2
    .word 0x0ebf
    .word 0x0e98
    .word 0x0e6c
    .word 0x0e3a
    .word 0x0e03
    .word 0x0dc5
    .word 0x0d7f

mem_bea8:
;table of words used with table_get_word
    .byte 0x3e              ;bea8  3e          DATA 0x3e '>'    62 entries below:
    .word 0x0fff
    .word 0x0ffb
    .word 0x0ff9
    .word 0x0ff7
    .word 0x0ff5
    .word 0x0ff2
    .word 0x0fee
    .word 0x0fec
    .word 0x0fea
    .word 0x0fe7
    .word 0x0fe4
    .word 0x0fe0
    .word 0x0fdc
    .word 0x0fd8
    .word 0x0fd3
    .word 0x0fcd
    .word 0x0fc7
    .word 0x0fc0
    .word 0x0fb8
    .word 0x0faf
    .word 0x0fa5
    .word 0x0f9a
    .word 0x0f8d
    .word 0x0f7f
    .word 0x0f70
    .word 0x0f5e
    .word 0x0f4a
    .word 0x0f34
    .word 0x0f1b
    .word 0x0eff
    .word 0x0edf
    .word 0x0ebc
    .word 0x0e94
    .word 0x0e68
    .word 0x0e36
    .word 0x0dfe
    .word 0x0dbf
    .word 0x0d79
    .word 0x0d2a
    .word 0x0cd1
    .word 0x0c6e
    .word 0x0bfe
    .word 0x0b81
    .word 0x0af4
    .word 0x0a57
    .word 0x09a6
    .word 0x08df
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800

mem_bf25:
;table of words used with table_get_word
    .byte 0x3e              ;bf25  3e          DATA 0x3e '>'    62 entries below:
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f71
    .word 0x0f5f
    .word 0x0f4c
    .word 0x0f36
    .word 0x0f1d
    .word 0x0f01
    .word 0x0ee2
    .word 0x0ebf
    .word 0x0e98
    .word 0x0e6c
    .word 0x0e3a
    .word 0x0e03
    .word 0x0dc5
    .word 0x0d7f
    .word 0x0d31
    .word 0x0cd9
    .word 0x0c76
    .word 0x0c08
    .word 0x0b8c
    .word 0x0b00

mem_bfa2:
;table of words used with table_get_word
    .byte 0x3e              ;bfa2  3e          DATA 0x3e '>'  62 entries below:
    .word 0x0fff
    .word 0x0ff6
    .word 0x0ff2
    .word 0x0fee
    .word 0x0fea
    .word 0x0fe4
    .word 0x0fdc
    .word 0x0fd8
    .word 0x0fd3
    .word 0x0fcd
    .word 0x0fc7
    .word 0x0fc0
    .word 0x0fb8
    .word 0x0faf
    .word 0x0fa5
    .word 0x0f9a
    .word 0x0f8d
    .word 0x0f7f
    .word 0x0f70
    .word 0x0f5e
    .word 0x0f4a
    .word 0x0f34
    .word 0x0f1b
    .word 0x0eff
    .word 0x0edf
    .word 0x0ebc
    .word 0x0e94
    .word 0x0e68
    .word 0x0e36
    .word 0x0dfe
    .word 0x0dbf
    .word 0x0d79
    .word 0x0d2a
    .word 0x0cd1
    .word 0x0c6e
    .word 0x0bfe
    .word 0x0b81
    .word 0x0af4
    .word 0x0a57
    .word 0x09a6
    .word 0x08df
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800

mem_c019:
;table of words used with table_get_word
    .byte 0x3e              ;c01f  3e          DATA 0x3e '>'  62 entries below:
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x008d
    .word 0x0117
    .word 0x019d
    .word 0x021e
    .word 0x029b
    .word 0x0314
    .word 0x0350
    .word 0x038c
    .word 0x03c7
    .word 0x0402
    .word 0x043d
    .word 0x0478
    .word 0x04b4
    .word 0x04f0
    .word 0x052e
    .word 0x056e
    .word 0x05b0
    .word 0x05f6
    .word 0x0643
    .word 0x069a
    .word 0x0706
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff

mem_c09c:
;table of words used with table_get_word
    .byte 0x2e              ;c09c  2e          DATA 0x2e '.'    46 entries below:
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f71
    .word 0x0f5f
    .word 0x0f4c
    .word 0x0f36
    .word 0x0f1d
    .word 0x0f01
    .word 0x0ee2
    .word 0x0ebf
    .word 0x0e98
    .word 0x0e6c

mem_c0f9:
;table of words used with table_get_word
    .byte 0x2e              ;c0f9  2e          DATA 0x2e '.'    46 entries below:
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f80
    .word 0x0f71
    .word 0x0f5f
    .word 0x0f4c
    .word 0x0f36

mem_c156:
;table of words used with table_get_word
    .byte 0x2e              ;c156  2e          DATA 0x2e '.'    46 entries below:
    .word 0x0fff
    .word 0x0ff5
    .word 0x0ff2
    .word 0x0fee
    .word 0x0fea
    .word 0x0fe4
    .word 0x0fdc
    .word 0x0fd3
    .word 0x0fc7
    .word 0x0fb8
    .word 0x0fa5
    .word 0x0f8d
    .word 0x0f70
    .word 0x0f5e
    .word 0x0f4a
    .word 0x0f34
    .word 0x0f1b
    .word 0x0eff
    .word 0x0edf
    .word 0x0ebc
    .word 0x0e94
    .word 0x0e68
    .word 0x0e36
    .word 0x0dfe
    .word 0x0dbf
    .word 0x0d79
    .word 0x0d2a
    .word 0x0cd1
    .word 0x0c6e
    .word 0x0bfe
    .word 0x0b81
    .word 0x0af4
    .word 0x0a57
    .word 0x09a6
    .word 0x08df
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800

mem_c1b3:
;table of words used with table_get_word
    .byte 0x2e              ;c1b3  2e          DATA 0x2e '.'    46 entries below:
    .word 0x0fff
    .word 0x0ffb
    .word 0x0ff9
    .word 0x0ff7
    .word 0x0ff5
    .word 0x0ff2
    .word 0x0fee
    .word 0x0fea
    .word 0x0fe4
    .word 0x0fdc
    .word 0x0fd3
    .word 0x0fc7
    .word 0x0fb8
    .word 0x0faf
    .word 0x0fa5
    .word 0x0f9a
    .word 0x0f8d
    .word 0x0f7f
    .word 0x0f70
    .word 0x0f5e
    .word 0x0f4a
    .word 0x0f34
    .word 0x0f1b
    .word 0x0eff
    .word 0x0edf
    .word 0x0ebc
    .word 0x0e94
    .word 0x0e68
    .word 0x0e36
    .word 0x0dfe
    .word 0x0dbf
    .word 0x0d79
    .word 0x0d2a
    .word 0x0cd1
    .word 0x0c6e
    .word 0x0bfe
    .word 0x0b81
    .word 0x0af4
    .word 0x0a57
    .word 0x09a6
    .word 0x08df
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800

mem_c210:
;table of words used with table_get_word
    .byte 0x2e              ;c210  2e          DATA 0x2e '.'    46 entries follow:
    .word 0x0000
    .word 0x001a
    .word 0x0070
    .word 0x00c5
    .word 0x0117
    .word 0x0168
    .word 0x01b7
    .word 0x0204
    .word 0x0250
    .word 0x029b
    .word 0x02cc
    .word 0x02fc
    .word 0x032c
    .word 0x035c
    .word 0x038c
    .word 0x03bb
    .word 0x03ea
    .word 0x041a
    .word 0x0449
    .word 0x0478
    .word 0x04a8
    .word 0x04d8
    .word 0x0509
    .word 0x053b
    .word 0x056e
    .word 0x05a3
    .word 0x05be
    .word 0x05da
    .word 0x05f6
    .word 0x0614
    .word 0x0633
    .word 0x0653
    .word 0x0675
    .word 0x069a
    .word 0x06c1
    .word 0x06ee
    .word 0x0721
    .word 0x0763
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff
    .word 0x07ff

mem_c26d:
;table of words used with table_get_word
    .byte 0x2f              ;c26d  2f          DATA 0x2f '/'    47 entries below:
    .word 0x000a
    .word 0x000b
    .word 0x000d
    .word 0x000e
    .word 0x0010
    .word 0x0012
    .word 0x0014
    .word 0x0017
    .word 0x001a
    .word 0x001d
    .word 0x0020
    .word 0x0024
    .word 0x0029
    .word 0x002e
    .word 0x0033
    .word 0x003a
    .word 0x0041
    .word 0x0048
    .word 0x0051
    .word 0x005b
    .word 0x0066
    .word 0x0073
    .word 0x0081
    .word 0x0091
    .word 0x00a2
    .word 0x00b6
    .word 0x00cc
    .word 0x00e5
    .word 0x0101
    .word 0x0121
    .word 0x0144
    .word 0x016b
    .word 0x0198
    .word 0x01c9
    .word 0x0201
    .word 0x0240
    .word 0x0286
    .word 0x02d5
    .word 0x032d
    .word 0x0391
    .word 0x0400
    .word 0x047d
    .word 0x0509
    .word 0x05a6
    .word 0x0657
    .word 0x071d
    .word 0x07fb

mem_c2cc:
;table of bytes used with table_get_byte
    .byte 0x04              ;c2cc  04          DATA 0x04        4 entries below:
    .byte 0xf6              ;c2cd  f6          DATA 0xf6
    .byte 0x06              ;c2ce  06          DATA 0x06
    .byte 0x04              ;c2cf  04          DATA 0x04
    .byte 0xfc              ;c2d0  fc          DATA 0xfc

mem_c2d1:
;table of words used with table_get_word
    .byte 0x15              ;c2d1  15          DATA 0x15        21 entries below:
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069

mem_c2fc:
;table of words used with table_get_word
    .byte 0x15              ;c2fc  15          DATA 0x15        21 entries below:
    .word 0x7510
    .word 0x7510
    .word 0x6512
    .word 0x4d14
    .word 0x6e16
    .word 0x561c
    .word 0x6720
    .word 0x4f28
    .word 0x472e
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32
    .word 0x2f32

mem_c327:
;table of words used with table_get_word
    .byte 0x15              ;c327  15          DATA 0x15        21 entries below:
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00f7
    .word 0x00f7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00f7
    .word 0x0107
    .word 0x0127
    .word 0x0147
    .word 0x0147
    .word 0x0177
    .word 0x0126
    .word 0x0186

mem_c352:
;table of words used with table_get_word
    .byte 0x15              ;c352  15          DATA 0x15        21 entries below:
    .word 0x6d28
    .word 0x5d32
    .word 0x5e3a
    .word 0x5e3a
    .word 0x5640
    .word 0x564c
    .word 0x7f50
    .word 0x7f5a
    .word 0x4660
    .word 0x566c
    .word 0x566c
    .word 0x566c
    .word 0x5678
    .word 0x5e88
    .word 0x5e90
    .word 0x66a0
    .word 0x6eaa
    .word 0x6ec0
    .word 0x6eca
    .word 0x55e4
    .word 0x75fe

mem_c37d:
;table of words used with table_get_word
    .byte 0x15              ;c37d  15          DATA 0x15        21 entries below:
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069
    .word 0x0069

mem_c3a8:
;table of words used with table_get_word
    .byte 0x15              ;c3a8  15          DATA 0x15        21 entries below:
    .word 0x7510
    .word 0x7510
    .word 0x6512
    .word 0x5512
    .word 0x4d14
    .word 0x7616
    .word 0x5e1a
    .word 0x7f1c
    .word 0x7f1e
    .word 0x6720
    .word 0x6720
    .word 0x6720
    .word 0x5724
    .word 0x4f28
    .word 0x4f28
    .word 0x4f28
    .word 0x4f28
    .word 0x4f28
    .word 0x4f28
    .word 0x4f28
    .word 0x4f28

mem_c3d3:
;table of words used with table_get_word
    .byte 0x15              ;c3d3  15          DATA 0x15        21 entries below:
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00d7
    .word 0x00f7
    .word 0x0107
    .word 0x0127
    .word 0x0147
    .word 0x0147
    .word 0x0177
    .word 0x0126
    .word 0x0186

mem_c3fe:
;table of words used with table_get_word
    .byte 0x15              ;c3fe  15          DATA 0x15        21 entries below:
    .word 0x6d28
    .word 0x652e
    .word 0x652e
    .word 0x4d2e
    .word 0x4532
    .word 0x4532
    .word 0x6e32
    .word 0x6e32
    .word 0x5e3a
    .word 0x5e3c
    .word 0x5e3c
    .word 0x5e3c
    .word 0x5640
    .word 0x5e48
    .word 0x5e50
    .word 0x665a
    .word 0x6e60
    .word 0x6e6c
    .word 0x7e78
    .word 0x5580
    .word 0x7590

mem_c429:
;table of words used with table_get_word
    .byte 0x15              ;c429  15          DATA 0x15        21 entries below:
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0146
    .word 0x0186
    .word 0x01c6
    .word 0x0216
    .word 0x0266
    .word 0x02b6

mem_c454:
;table of words used with table_get_word
    .byte 0x15              ;c454  15          DATA 0x15        21 entries below:
    .word 0x7c10
    .word 0x7412
    .word 0x5c16
    .word 0x541a
    .word 0x441e
    .word 0x7d22
    .word 0x6d28
    .word 0x5d30
    .word 0x4d38
    .word 0x7e40
    .word 0x7e40
    .word 0x7e40
    .word 0x7e48
    .word 0x7e50
    .word 0x7e5a
    .word 0x4d60
    .word 0x5566
    .word 0x6d6c
    .word 0x7572
    .word 0x7d80
    .word 0x4488

mem_c47f:
;table of words used with table_get_word
    .byte 0x15              ;c47f  15          DATA 0x15        21 entries below:
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0106
    .word 0x0146
    .word 0x0186
    .word 0x01c6
    .word 0x0216
    .word 0x0266
    .word 0x02b6

mem_c4aa:
;table of words used with table_get_word
    .byte 0x15              ;c4aa  15          DATA 0x15        21 entries below:
    .word 0x7c10
    .word 0x7412
    .word 0x6414
    .word 0x5c16
    .word 0x5418
    .word 0x541a
    .word 0x4c1c
    .word 0x441e
    .word 0x7d22
    .word 0x7524
    .word 0x7524
    .word 0x7524
    .word 0x6d28
    .word 0x652a
    .word 0x5d2e
    .word 0x5d32
    .word 0x5d36
    .word 0x753c
    .word 0x7540
    .word 0x7d46
    .word 0x444c

mem_c4d5:
;table of words used with table_get_word
    .byte 0x15              ;c4d5  15          DATA 0x15        21 entries below:
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x0187
    .word 0x01d7
    .word 0x0126
    .word 0x0156
    .word 0x0186
    .word 0x01c6
    .word 0x0206

mem_c500:
;table of words used with table_get_word
    .byte 0x15              ;c500  15          DATA 0x15        21 entries below:
    .word 0x6c10
    .word 0x6412
    .word 0x5416
    .word 0x441a
    .word 0x7d1e
    .word 0x6d22
    .word 0x5d28
    .word 0x4d30
    .word 0x7e38
    .word 0x7640
    .word 0x7640
    .word 0x7640
    .word 0x7648
    .word 0x7650
    .word 0x765a
    .word 0x7e60
    .word 0x4566
    .word 0x5d6c
    .word 0x6572
    .word 0x6d80
    .word 0x7588

mem_c52b:
;table of words used with table_get_word
    .byte 0x15              ;c52b  15          DATA 0x15        21 entries below:
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049
    .word 0x0049

mem_c556:
;table of words used with table_get_word
    .byte 0x15              ;c556  15          DATA 0x15        21 entries below:
    .word 0x5d10
    .word 0x5d10
    .word 0x5512
    .word 0x7e14
    .word 0x5616
    .word 0x461c
    .word 0x4f20
    .word 0x4728
    .word 0x3f2e
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732
    .word 0x2732

mem_c581:
;table of words used with table_get_word
    .byte 0x15              ;c581  15          DATA 0x15        21 entries below:
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00b7
    .word 0x00b7
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00a7
    .word 0x00b7
    .word 0x00c7
    .word 0x00d7
    .word 0x00f7
    .word 0x00f7
    .word 0x0117
    .word 0x01b7
    .word 0x0126

mem_c5ac:
;table of words used with table_get_word
    .byte 0x15              ;c5ac  15          DATA 0x15        21 entries below:
    .word 0x6528
    .word 0x4d32
    .word 0x563a
    .word 0x563a
    .word 0x4e40
    .word 0x4e4c
    .word 0x6f50
    .word 0x6f5a
    .word 0x7f60
    .word 0x4e6c
    .word 0x4e6c
    .word 0x4e6c
    .word 0x4e78
    .word 0x4e88
    .word 0x5690
    .word 0x56a0
    .word 0x5eaa
    .word 0x5ec0
    .word 0x66ca
    .word 0x4de4
    .word 0x65fe

mem_c5d7:
;table of words used with table_get_word
    .byte 0x15              ;c5d7  15          DATA 0x15        21 entries below:
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3
    .word 0x0df3

mem_c602:
;table of words used with table_get_word
    .byte 0x15              ;c602  15          DATA 0x15        21 entries below:
    .word 0x401e
    .word 0x6922
    .word 0x6128
    .word 0x592a
    .word 0x412e
    .word 0x7a32
    .word 0x7236
    .word 0x6a3a
    .word 0x6a3c
    .word 0x6240
    .word 0x6240
    .word 0x6240
    .word 0x6244
    .word 0x6248
    .word 0x624c
    .word 0x6250
    .word 0x625a
    .word 0x7a60
    .word 0x7a66
    .word 0x7a72
    .word 0x4980

mem_c62d:
;table of words used with table_get_word
    .byte 0x15              ;c62d  15          DATA 0x15        21 entries below:
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63
    .word 0x0a63

mem_c658:
;table of words used with table_get_word
    .byte 0x15              ;c658  15          DATA 0x15        21 entries below:
    .word 0x791e
    .word 0x6122
    .word 0x5128
    .word 0x512a
    .word 0x722e
    .word 0x6a32
    .word 0x6236
    .word 0x5a3a
    .word 0x5a3c
    .word 0x5240
    .word 0x5240
    .word 0x5240
    .word 0x5244
    .word 0x5248
    .word 0x524c
    .word 0x5250
    .word 0x525a
    .word 0x7260
    .word 0x7266
    .word 0x7272
    .word 0x7a80

mem_c683:
;table of words used with table_get_word
    .byte 0x15              ;c683  15          DATA 0x15        21 entries below:
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53
    .word 0x1f53

mem_c6ae:
;table of words used with table_get_word
    .byte 0x15              ;c6ae  15          DATA 0x15        21 entries below:
    .word 0x6010
    .word 0x5812
    .word 0x5016
    .word 0x481a
    .word 0x791e
    .word 0x7122
    .word 0x6928
    .word 0x5930
    .word 0x5138
    .word 0x4940
    .word 0x4940
    .word 0x4940
    .word 0x4944
    .word 0x4948
    .word 0x494c
    .word 0x4950
    .word 0x495a
    .word 0x5960
    .word 0x5966
    .word 0x5972
    .word 0x6980

mem_c6d9:
;table of words used with table_get_word
    .byte 0x15              ;c6d9  15          DATA 0x15        21 entries below:
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753
    .word 0x1753

mem_c704:
;table of words used with table_get_word
    .byte 0x15              ;c704  15          DATA 0x15        21 entries below:
    .word 0x5810
    .word 0x5012
    .word 0x4816
    .word 0x791a
    .word 0x711e
    .word 0x6922
    .word 0x5928
    .word 0x5130
    .word 0x4138
    .word 0x7a40
    .word 0x7a40
    .word 0x7a40
    .word 0x7a44
    .word 0x7a48
    .word 0x7a4c
    .word 0x7a50
    .word 0x7a5a
    .word 0x5160
    .word 0x5166
    .word 0x5172
    .word 0x5980

mem_c72f:
;table of words used with table_get_word
    .byte 0x15              ;c72f  15          DATA 0x15        21 entries below:
    .word 0x03fa
    .word 0x64fa
    .word 0xd7fa
    .word 0x60fb
    .word 0x03fc
    .word 0xc4fc
    .word 0xaafd
    .word 0xbcfe
    .word 0x0000
    .word 0xde00
    .word 0xde00
    .word 0xde00
    .word 0xa501
    .word 0x5602
    .word 0xa702
    .word 0x8003
    .word 0xfd03
    .word 0x8204
    .word 0xfe04
    .word 0x5105
    .word 0x8705

mem_c75a:
;table of words used with table_get_word
    .byte 0x15              ;c75a  15          DATA 0x15        21 entries below:
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0x2107
    .word 0x2107
    .word 0x2107
    .word 0x5a06
    .word 0xa905
    .word 0x5805
    .word 0x7f04
    .word 0x0204
    .word 0x7d03
    .word 0x0103
    .word 0xae02
    .word 0x7802

mem_c785:
;table of words used with table_get_word
    .byte 0x15              ;c785  15          DATA 0x15        21 entries below:
    .word 0xb305
    .word 0x5505
    .word 0xe904
    .word 0x7004
    .word 0xe703
    .word 0x4d03
    .word 0xa002
    .word 0xdd01
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00
    .word 0xff00

mem_c7b0:
;table of words used with table_get_word
    .byte 0x15              ;c7b0  15          DATA 0x15        21 entries below:
    .word 0xd906
    .word 0xaa06
    .word 0x7406
    .word 0x3806
    .word 0xf305
    .word 0xa605
    .word 0x5005
    .word 0xee04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04
    .word 0x7f04

mem_c7db:
;table of words used with table_get_word
    .byte 0x15              ;c7db  15          DATA 0x15        21 entries below:
    .word 0xfb05
    .word 0xa705
    .word 0x4705
    .word 0xd904
    .word 0x5e04
    .word 0xd303
    .word 0x3603
    .word 0x8602
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001
    .word 0xc001

mem_c806:
;table of words used with table_get_word
    .byte 0x15              ;c806  15          DATA 0x15        21 entries below:
    .word 0xfd06
    .word 0xd306
    .word 0xa306
    .word 0x6c06
    .word 0x2f06
    .word 0xe905
    .word 0x9b05
    .word 0x4305
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004
    .word 0xe004

mem_c831:
;table of words used with table_get_word
    .byte 0x15              ;c831  15          DATA 0x15        21 entries below:
    .word 0xb6f9
    .word 0x08fa
    .word 0x62fa
    .word 0xcefa
    .word 0x58fb
    .word 0xf3fb
    .word 0xadfc
    .word 0xa0fd
    .word 0xb3fe
    .word 0x0000
    .word 0x0000
    .word 0x0000
    .word 0x8a00
    .word 0x1001
    .word 0x9001
    .word 0x0a02
    .word 0x8002
    .word 0xf002
    .word 0xc203
    .word 0x8204
    .word 0xdb04

mem_c85c:
;table of words used with table_get_word
    .byte 0x15              ;c85c  15          DATA 0x15        21 entries below:
    .word 0x7d06
    .word 0x4006
    .word 0x0006
    .word 0xb805
    .word 0x6105
    .word 0x0605
    .word 0xa104
    .word 0x2704
    .word 0xaa03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03
    .word 0x1f03

mem_c887:
;table of words used with table_get_word
    .byte 0x15              ;c887  15          DATA 0x15        21 entries below:
    .word 0x3e07
    .word 0x2007
    .word 0x0007
    .word 0xdc06
    .word 0xb006
    .word 0x8306
    .word 0x5006
    .word 0x1306
    .word 0xd505
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05
    .word 0x8f05

mem_c8b2:
;table of words used with table_get_word
    .byte 0x15              ;c8b2  15          DATA 0x15        21 entries below:
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0xff07
    .word 0x8d07
    .word 0x2107
    .word 0xbb06
    .word 0x5a06
    .word 0xff05
    .word 0xa905
    .word 0x0c05
    .word 0x7f04
    .word 0x3f04

mem_c8dd:
;table of words used with table_get_word
    .byte 0x15              ;c8dd  15          DATA 0x15        21 entries below:
    .word 0xae06
    .word 0x7906
    .word 0x4006
    .word 0x0006
    .word 0xb205
    .word 0x6005
    .word 0x0505
    .word 0x9804
    .word 0x2604
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903
    .word 0xa903

mem_c908:
;table of words used with table_get_word
    .byte 0x15              ;c908  15          DATA 0x15        21 entries below:
    .word 0x5707
    .word 0x3c07
    .word 0x2007
    .word 0x0007
    .word 0xd906
    .word 0xb006
    .word 0x8206
    .word 0x4c06
    .word 0x1306
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405
    .word 0xd405

mem_c933:
;table of words used with table_get_word
    .byte 0x0a              ;c933  0a          DATA 0x0a        10 entries below:
    .word 0x0177
    .word 0x0286
    .word 0x0286
    .word 0x0177
    .word 0x1bc2
    .word 0x01c6
    .word 0x00e7
    .word 0x1bc2
    .word 0x0177
    .word 0x00e7

mem_c948:
;table of words used with table_get_word
    .byte 0x0a              ;c948  0a          DATA 0x0a        10 entries below:
    .word 0x5540
    .word 0x4c24
    .word 0x541a
    .word 0x5540
    .word 0x6a5a
    .word 0x4d1a
    .word 0x5f80
    .word 0x612e
    .word 0x5540
    .word 0x7766

mem_c95d:
;table of words used with table_get_word
    .byte 0x0a              ;c95d  0a          DATA 0x0a        10 entries below:
    .word 0x0177
    .word 0x01e6
    .word 0x01e6
    .word 0x0177
    .word 0x14a2
    .word 0x0156
    .word 0x00b7
    .word 0x14a2
    .word 0x0177
    .word 0x00b7

mem_c972:
;table of words used with table_get_word
    .byte 0x0a              ;c972  0a          DATA 0x0a        10 entries below:
    .word 0x4540
    .word 0x7d24
    .word 0x4c1a
    .word 0x4540
    .word 0x5a5a
    .word 0x7e1a
    .word 0x4f80
    .word 0x512e
    .word 0x4540
    .word 0x6766
    .word 0x08ee

    .byte 0x01              ;c989  01          DATA 0x01

mem_c98a:
;unknown table
    .byte 0x0a              ;c98a  0a          DATA 0x0a
    .byte 0x85              ;c98b  85          DATA 0x85

mem_c98c:
;table of words used with table_get_word
    .byte 0x0b              ;c98c  0b          DATA 0x0b        11 entries below:
    .word 0x0000
    .word 0x0f4a
    .word 0x0e94
    .word 0x0dfe
    .word 0x0d79
    .word 0x0cd1
    .word 0x0bfe
    .word 0x0af4
    .word 0x09a6
    .word 0x0800
    .word 0x0800

mem_c9a3:
;table of words used with table_get_word
    .byte 0x0b              ;c9a3  0b          DATA 0x0b        11 entries below:
    .word 0x0510
    .word 0x0660
    .word 0x0808
    .word 0x0a1c
    .word 0x0cbc
    .word 0x1008
    .word 0x1430
    .word 0x1968
    .word 0x1c84
    .word 0x2000
    .word 0x2000

mem_c9ba:
;table of words used with table_get_word
    .byte 0x0b              ;c9ba  0b          DATA 0x0b        11 entries below:
    .word 0x0000
    .word 0x02d9
    .word 0x05b0
    .word 0x0a1c
    .word 0x0cbc
    .word 0x1008
    .word 0x1430
    .word 0x1968
    .word 0x1c84
    .word 0x2000
    .word 0x2000

mem_c9d1:
;table of words used with table_get_word
    .byte 0x15              ;c9d1  15          DATA 0x15        21 entries below:
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x08f8
    .word 0x08f8
    .word 0x08f8
    .word 0x0a10
    .word 0x0b48
    .word 0x0bf8
    .word 0x0e38
    .word 0x0ff0
    .word 0x1250
    .word 0x1548
    .word 0x17e0
    .word 0x19e0

mem_c9fc:
;table of words used with table_get_word
    .byte 0x15              ;c9fc  15          DATA 0x15        21 entries below:
    .word 0x0860
    .word 0x0858
    .word 0x0848
    .word 0x0840
    .word 0x0830
    .word 0x0820
    .word 0x0818
    .word 0x0808
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0800
    .word 0x0878
    .word 0x08f8
    .word 0x0980
    .word 0x0a18
    .word 0x0ab8
    .word 0x0b60
    .word 0x0cd0
    .word 0x0e70
    .word 0x0f58

mem_ca27:
;unknown table used with sub_0adf
    .byte 0x24              ;ca27  24          DATA 0x24 '$'    36 entries below:
    .byte 0xb0              ;ca28  b0          DATA 0xb0
    .byte 0x02              ;ca29  02          DATA 0x02
    .byte 0x05              ;ca2a  05          DATA 0x05
    .byte 0x03              ;ca2b  03          DATA 0x03
    .byte 0x65              ;ca2c  65          DATA 0x65 'e'
    .byte 0x03              ;ca2d  03          DATA 0x03
    .byte 0xd1              ;ca2e  d1          DATA 0xd1
    .byte 0x03              ;ca2f  03          DATA 0x03
    .byte 0x48              ;ca30  48          DATA 0x48 'H'
    .byte 0x04              ;ca31  04          DATA 0x04
    .byte 0xd0              ;ca32  d0          DATA 0xd0
    .byte 0x04              ;ca33  04          DATA 0x04
    .byte 0x63              ;ca34  63          DATA 0x63 'c'
    .byte 0x05              ;ca35  05          DATA 0x05
    .byte 0x0e              ;ca36  0e          DATA 0x0e
    .byte 0x06              ;ca37  06          DATA 0x06
    .byte 0xcf              ;ca38  cf          DATA 0xcf
    .byte 0x06              ;ca39  06          DATA 0x06
    .byte 0xa5              ;ca3a  a5          DATA 0xa5
    .byte 0x07              ;ca3b  07          DATA 0x07
    .byte 0x92              ;ca3c  92          DATA 0x92
    .byte 0x08              ;ca3d  08          DATA 0x08
    .byte 0x9d              ;ca3e  9d          DATA 0x9d
    .byte 0x09              ;ca3f  09          DATA 0x09
    .byte 0xc3              ;ca40  c3          DATA 0xc3
    .byte 0x0a              ;ca41  0a          DATA 0x0a
    .byte 0x09              ;ca42  09          DATA 0x09
    .byte 0x0c              ;ca43  0c          DATA 0x0c
    .byte 0x8b              ;ca44  8b          DATA 0x8b
    .byte 0x0d              ;ca45  0d          DATA 0x0d
    .byte 0x3b              ;ca46  3b          DATA 0x3b ';'
    .byte 0x0f              ;ca47  0f          DATA 0x0f
    .byte 0x0d              ;ca48  0d          DATA 0x0d
    .byte 0x11              ;ca49  11          DATA 0x11
    .byte 0x31              ;ca4a  31          DATA 0x31 '1'
    .byte 0x13              ;ca4b  13          DATA 0x13

;unknown table or code
    .byte 0x70              ;ca4c  70          DATA 0x70 'p'
    .byte 0x15              ;ca4d  15          DATA 0x15
    .byte 0x1b              ;ca4e  1b          DATA 0x1b
    .byte 0x18              ;ca4f  18          DATA 0x18
    .byte 0xfb              ;ca50  fb          DATA 0xfb
    .byte 0x1a              ;ca51  1a          DATA 0x1a
    .byte 0x31              ;ca52  31          DATA 0x31 '1'
    .byte 0x1e              ;ca53  1e          DATA 0x1e
    .byte 0xf3              ;ca54  f3          DATA 0xf3
    .byte 0x21              ;ca55  21          DATA 0x21 '!'
    .byte 0x14              ;ca56  14          DATA 0x14
    .byte 0x26              ;ca57  26          DATA 0x26 '&'
    .byte 0xaf              ;ca58  af          DATA 0xaf
    .byte 0x2a              ;ca59  2a          DATA 0x2a '*'
    .byte 0x03              ;ca5a  03          DATA 0x03
    .byte 0x30              ;ca5b  30          DATA 0x30 '0'
    .byte 0xe0              ;ca5c  e0          DATA 0xe0
    .byte 0x35              ;ca5d  35          DATA 0x35 '5'
    .byte 0x95              ;ca5e  95          DATA 0x95
    .byte 0x3c              ;ca5f  3c          DATA 0x3c '<'
    .byte 0x1f              ;ca60  1f          DATA 0x1f
    .byte 0x44              ;ca61  44          DATA 0x44 'D'
    .byte 0x9f              ;ca62  9f          DATA 0x9f
    .byte 0x4c              ;ca63  4c          DATA 0x4c 'L'
    .byte 0x11              ;ca64  11          DATA 0x11
    .byte 0x56              ;ca65  56          DATA 0x56 'V'
    .byte 0x00              ;ca66  00          DATA 0x00
    .byte 0x5e              ;ca67  5e          DATA 0x5e '^'
    .byte 0x00              ;ca68  00          DATA 0x00
    .byte 0x66              ;ca69  66          DATA 0x66 'f'
    .byte 0x00              ;ca6a  00          DATA 0x00
    .byte 0x6e              ;ca6b  6e          DATA 0x6e 'n'
    .byte 0x00              ;ca6c  00          DATA 0x00
    .byte 0x76              ;ca6d  76          DATA 0x76 'v'
    .byte 0x00              ;ca6e  00          DATA 0x00
    .byte 0x7e              ;ca6f  7e          DATA 0x7e '~'
    .byte 0x80              ;ca70  80          DATA 0x80
    .byte 0x0f              ;ca71  0f          DATA 0x0f
    .byte 0x04              ;ca72  04          DATA 0x04

mem_ca73:
    .byte 0x30              ;ca73  30          DATA 0x30 '0'
    .byte 0xb1              ;ca74  b1          DATA 0xb1
    .byte 0x36              ;ca75  36          DATA 0x36 '6'
    .byte 0x01              ;ca76  01          DATA 0x01
    .byte 0x36              ;ca77  36          DATA 0x36 '6'
    .byte 0x01              ;ca78  01          DATA 0x01
    .byte 0x3a              ;ca79  3a          DATA 0x3a ':'
    .byte 0xf1              ;ca7a  f1          DATA 0xf1
    .byte 0x8c              ;ca7b  8c          DATA 0x8c
    .byte 0x0f              ;ca7c  0f          DATA 0x0f
    .byte 0x0c              ;ca7d  0c          DATA 0x0c

mem_ca7e:
    .byte 0x21              ;ca7e  21          DATA 0x21 '!'
    .byte 0x22              ;ca7f  22          DATA 0x22 '"'
    .byte 0x1e              ;ca80  1e          DATA 0x1e
    .byte 0x22              ;ca81  22          DATA 0x22 '"'
    .byte 0x1f              ;ca82  1f          DATA 0x1f
    .byte 0x82              ;ca83  82          DATA 0x82
    .byte 0x24              ;ca84  24          DATA 0x24 '$'
    .byte 0x72              ;ca85  72          DATA 0x72 'r'
    .byte 0x0c              ;ca86  0c          DATA 0x0c
    .byte 0xd3              ;ca87  d3          DATA 0xd3
    .byte 0x0d              ;ca88  0d          DATA 0x0d
    .byte 0x23              ;ca89  23          DATA 0x23 '#'
    .byte 0x12              ;ca8a  12          DATA 0x12
    .byte 0xd2              ;ca8b  d2          DATA 0xd2
    .byte 0x1c              ;ca8c  1c          DATA 0x1c
    .byte 0x93              ;ca8d  93          DATA 0x93
    .byte 0x41              ;ca8e  41          DATA 0x41 'A'
    .byte 0x24              ;ca8f  24          DATA 0x24 '$'
    .byte 0x7b              ;ca90  7b          DATA 0x7b '{'
    .byte 0x40              ;ca91  40          DATA 0x40 '@'
    .byte 0x5a              ;ca92  5a          DATA 0x5a 'Z'
    .byte 0x26              ;ca93  26          DATA 0x26 '&'
    .byte 0x4a              ;ca94  4a          DATA 0x4a 'J'
    .byte 0x2e              ;ca95  2e          DATA 0x2e '.'
    .byte 0xa0              ;ca96  a0          DATA 0xa0
    .byte 0x0f              ;ca97  0f          DATA 0x0f
    .byte 0x08              ;ca98  08          DATA 0x08

mem_ca99:
    .byte 0x72              ;ca99  72          DATA 0x72 'r'
    .byte 0x1c              ;ca9a  1c          DATA 0x1c
    .byte 0x7a              ;ca9b  7a          DATA 0x7a 'z'
    .byte 0x1a              ;ca9c  1a          DATA 0x1a
    .byte 0x5a              ;ca9d  5a          DATA 0x5a 'Z'
    .byte 0x18              ;ca9e  18          DATA 0x18
    .byte 0x62              ;ca9f  62          DATA 0x62 'b'
    .byte 0x1e              ;caa0  1e          DATA 0x1e
    .byte 0x7c              ;caa1  7c          DATA 0x7c '|'
    .byte 0x1c              ;caa2  1c          DATA 0x1c
    .byte 0x74              ;caa3  74          DATA 0x74 't'
    .byte 0x1a              ;caa4  1a          DATA 0x1a
    .byte 0x7a              ;caa5  7a          DATA 0x7a 'z'
    .byte 0x60              ;caa6  60          DATA 0x60 '`'
    .byte 0x6a              ;caa7  6a          DATA 0x6a 'j'
    .byte 0x6c              ;caa8  6c          DATA 0x6c 'l'
    .byte 0x80              ;caa9  80          DATA 0x80
    .byte 0x0f              ;caaa  0f          DATA 0x0f
    .byte 0x04              ;caab  04          DATA 0x04

mem_caac:
    .byte 0x24              ;caac  24          DATA 0x24 '$'
    .byte 0x81              ;caad  81          DATA 0x81
    .byte 0x28              ;caae  28          DATA 0x28 '('
    .byte 0x71              ;caaf  71          DATA 0x71 'q'
    .byte 0x28              ;cab0  28          DATA 0x28 '('
    .byte 0x71              ;cab1  71          DATA 0x71 'q'
    .byte 0x2c              ;cab2  2c          DATA 0x2c ','
    .byte 0x41              ;cab3  41          DATA 0x41 'A'
    .byte 0x8c              ;cab4  8c          DATA 0x8c
    .byte 0x0f              ;cab5  0f          DATA 0x0f
    .byte 0x0c              ;cab6  0c          DATA 0x0c

mem_cab7:
    .byte 0x18              ;cab7  18          DATA 0x18
    .byte 0xa2              ;cab8  a2          DATA 0xa2
    .byte 0x16              ;cab9  16          DATA 0x16
    .byte 0x62              ;caba  62          DATA 0x62 'b'
    .byte 0x17              ;cabb  17          DATA 0x17
    .byte 0x72              ;cabc  72          DATA 0x72 'r'
    .byte 0x1b              ;cabd  1b          DATA 0x1b
    .byte 0x22              ;cabe  22          DATA 0x22 '"'
    .byte 0x09              ;cabf  09          DATA 0x09
    .byte 0x83              ;cac0  83          DATA 0x83
    .byte 0x09              ;cac1  09          DATA 0x09
    .byte 0xc3              ;cac2  c3          DATA 0xc3
    .byte 0x1b              ;cac3  1b          DATA 0x1b
    .byte 0xf3              ;cac4  f3          DATA 0xf3
    .byte 0x15              ;cac5  15          DATA 0x15
    .byte 0x43              ;cac6  43          DATA 0x43 'C'
    .byte 0x72              ;cac7  72          DATA 0x72 'r'
    .byte 0x24              ;cac8  24          DATA 0x24 '$'
    .byte 0x6b              ;cac9  6b          DATA 0x6b 'k'
    .byte 0x40              ;caca  40          DATA 0x40 '@'
    .byte 0x52              ;cacb  52          DATA 0x52 'R'
    .byte 0x26              ;cacc  26          DATA 0x26 '&'
    .byte 0x7b              ;cacd  7b          DATA 0x7b '{'
    .byte 0x2e              ;cace  2e          DATA 0x2e '.'
    .byte 0xa0              ;cacf  a0          DATA 0xa0
    .byte 0x0f              ;cad0  0f          DATA 0x0f
    .byte 0x08              ;cad1  08          DATA 0x08

mem_cad2:
    .byte 0x6a              ;cad2  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cad3  1c          DATA 0x1c
    .byte 0x72              ;cad4  72          DATA 0x72 'r'
    .byte 0x1a              ;cad5  1a          DATA 0x1a
    .byte 0x4a              ;cad6  4a          DATA 0x4a 'J'
    .byte 0x18              ;cad7  18          DATA 0x18
    .byte 0x52              ;cad8  52          DATA 0x52 'R'
    .byte 0x1e              ;cad9  1e          DATA 0x1e
    .byte 0x6c              ;cada  6c          DATA 0x6c 'l'
    .byte 0x1c              ;cadb  1c          DATA 0x1c
    .byte 0x64              ;cadc  64          DATA 0x64 'd'
    .byte 0x1a              ;cadd  1a          DATA 0x1a
    .byte 0x6a              ;cade  6a          DATA 0x6a 'j'
    .byte 0x60              ;cadf  60          DATA 0x60 '`'
    .byte 0x62              ;cae0  62          DATA 0x62 'b'
    .byte 0x6c              ;cae1  6c          DATA 0x6c 'l'
    .byte 0x80              ;cae2  80          DATA 0x80
    .byte 0x0f              ;cae3  0f          DATA 0x0f
    .byte 0x04              ;cae4  04          DATA 0x04

mem_cae5:
    .byte 0x09              ;cae5  09          DATA 0x09
    .byte 0x53              ;cae6  53          DATA 0x53 'S'
    .byte 0x0b              ;cae7  0b          DATA 0x0b
    .byte 0xb3              ;cae8  b3          DATA 0xb3
    .byte 0x1f              ;cae9  1f          DATA 0x1f
    .byte 0x73              ;caea  73          DATA 0x73 's'
    .byte 0x1c              ;caeb  1c          DATA 0x1c
    .byte 0x53              ;caec  53          DATA 0x53 'S'
    .byte 0x8c              ;caed  8c          DATA 0x8c
    .byte 0x0f              ;caee  0f          DATA 0x0f
    .byte 0x0c              ;caef  0c          DATA 0x0c

mem_caf0:
    .byte 0x18              ;caf0  18          DATA 0x18
    .byte 0x73              ;caf1  73          DATA 0x73 's'
    .byte 0x19              ;caf2  19          DATA 0x19
    .byte 0x83              ;caf3  83          DATA 0x83
    .byte 0x23              ;caf4  23          DATA 0x23 '#'
    .byte 0x72              ;caf5  72          DATA 0x72 'r'
    .byte 0x25              ;caf6  25          DATA 0x25 '%'
    .byte 0x22              ;caf7  22          DATA 0x22 '"'
    .byte 0x41              ;caf8  41          DATA 0x41 'A'
    .byte 0x41              ;caf9  41          DATA 0x41 'A'
    .byte 0x41              ;cafa  41          DATA 0x41 'A'
    .byte 0x41              ;cafb  41          DATA 0x41 'A'
    .byte 0x24              ;cafc  24          DATA 0x24 '$'
    .byte 0xf1              ;cafd  f1          DATA 0xf1
    .byte 0x24              ;cafe  24          DATA 0x24 '$'
    .byte 0xf1              ;caff  f1          DATA 0xf1
    .byte 0x6c              ;cb00  6c          DATA 0x6c 'l'
    .byte 0x20              ;cb01  20          DATA 0x20 ' '
    .byte 0x5b              ;cb02  5b          DATA 0x5b '['
    .byte 0x20              ;cb03  20          DATA 0x20 ' '
    .byte 0x73              ;cb04  73          DATA 0x73 's'
    .byte 0x16              ;cb05  16          DATA 0x16
    .byte 0x63              ;cb06  63          DATA 0x63 'c'
    .byte 0x1e              ;cb07  1e          DATA 0x1e
    .byte 0xa0              ;cb08  a0          DATA 0xa0
    .byte 0x0f              ;cb09  0f          DATA 0x0f
    .byte 0x08              ;cb0a  08          DATA 0x08

mem_cb0b:
    .byte 0x5a              ;cb0b  5a          DATA 0x5a 'Z'
    .byte 0x14              ;cb0c  14          DATA 0x14
    .byte 0x4a              ;cb0d  4a          DATA 0x4a 'J'
    .byte 0x18              ;cb0e  18          DATA 0x18
    .byte 0x51              ;cb0f  51          DATA 0x51 'Q'
    .byte 0x76              ;cb10  76          DATA 0x76 'v'
    .byte 0x59              ;cb11  59          DATA 0x59 'Y'
    .byte 0x76              ;cb12  76          DATA 0x76 'v'
    .byte 0x58              ;cb13  58          DATA 0x58 'X'
    .byte 0x72              ;cb14  72          DATA 0x72 'r'
    .byte 0x58              ;cb15  58          DATA 0x58 'X'
    .byte 0x72              ;cb16  72          DATA 0x72 'r'
    .byte 0x49              ;cb17  49          DATA 0x49 'I'
    .byte 0x1a              ;cb18  1a          DATA 0x1a
    .byte 0x49              ;cb19  49          DATA 0x49 'I'
    .byte 0x1a              ;cb1a  1a          DATA 0x1a
    .byte 0x80              ;cb1b  80          DATA 0x80
    .byte 0x0f              ;cb1c  0f          DATA 0x0f
    .byte 0x04              ;cb1d  04          DATA 0x04

mem_cb1e:
    .byte 0x0d              ;cb1e  0d          DATA 0x0d
    .byte 0xe4              ;cb1f  e4          DATA 0xe4
    .byte 0x08              ;cb20  08          DATA 0x08
    .byte 0xb3              ;cb21  b3          DATA 0xb3
    .byte 0x17              ;cb22  17          DATA 0x17
    .byte 0x63              ;cb23  63          DATA 0x63 'c'
    .byte 0x15              ;cb24  15          DATA 0x15
    .byte 0x13              ;cb25  13          DATA 0x13
    .byte 0x8c              ;cb26  8c          DATA 0x8c
    .byte 0x0f              ;cb27  0f          DATA 0x0f
    .byte 0x0c              ;cb28  0c          DATA 0x0c

mem_cb29:
    .byte 0x12              ;cb29  12          DATA 0x12
    .byte 0x33              ;cb2a  33          DATA 0x33 '3'
    .byte 0x12              ;cb2b  12          DATA 0x12
    .byte 0xf3              ;cb2c  f3          DATA 0xf3
    .byte 0x1a              ;cb2d  1a          DATA 0x1a
    .byte 0x62              ;cb2e  62          DATA 0x62 'b'
    .byte 0x1b              ;cb2f  1b          DATA 0x1b
    .byte 0xa2              ;cb30  a2          DATA 0xa2
    .byte 0x31              ;cb31  31          DATA 0x31 '1'
    .byte 0x01              ;cb32  01          DATA 0x01
    .byte 0x31              ;cb33  31          DATA 0x31 '1'
    .byte 0x01              ;cb34  01          DATA 0x01
    .byte 0x37              ;cb35  37          DATA 0x37 '7'
    .byte 0x32              ;cb36  32          DATA 0x32 '2'
    .byte 0x37              ;cb37  37          DATA 0x37 '7'
    .byte 0x32              ;cb38  32          DATA 0x32 '2'
    .byte 0x64              ;cb39  64          DATA 0x64 'd'
    .byte 0x20              ;cb3a  20          DATA 0x20 ' '
    .byte 0x4b              ;cb3b  4b          DATA 0x4b 'K'
    .byte 0x20              ;cb3c  20          DATA 0x20 ' '
    .byte 0x6b              ;cb3d  6b          DATA 0x6b 'k'
    .byte 0x16              ;cb3e  16          DATA 0x16
    .byte 0x5b              ;cb3f  5b          DATA 0x5b '['
    .byte 0x1e              ;cb40  1e          DATA 0x1e
    .byte 0xa0              ;cb41  a0          DATA 0xa0
    .byte 0x0f              ;cb42  0f          DATA 0x0f
    .byte 0x08              ;cb43  08          DATA 0x08

mem_cb44:
    .byte 0x4a              ;cb44  4a          DATA 0x4a 'J'
    .byte 0x14              ;cb45  14          DATA 0x14
    .byte 0x7b              ;cb46  7b          DATA 0x7b '{'
    .byte 0x18              ;cb47  18          DATA 0x18
    .byte 0x49              ;cb48  49          DATA 0x49 'I'
    .byte 0x76              ;cb49  76          DATA 0x76 'v'
    .byte 0x49              ;cb4a  49          DATA 0x49 'I'
    .byte 0x76              ;cb4b  76          DATA 0x76 'v'
    .byte 0x50              ;cb4c  50          DATA 0x50 'P'
    .byte 0x72              ;cb4d  72          DATA 0x72 'r'
    .byte 0x50              ;cb4e  50          DATA 0x50 'P'
    .byte 0x72              ;cb4f  72          DATA 0x72 'r'
    .byte 0x7a              ;cb50  7a          DATA 0x7a 'z'
    .byte 0x1a              ;cb51  1a          DATA 0x1a
    .byte 0x7a              ;cb52  7a          DATA 0x7a 'z'
    .byte 0x1a              ;cb53  1a          DATA 0x1a
    .byte 0x80              ;cb54  80          DATA 0x80
    .byte 0x0f              ;cb55  0f          DATA 0x0f
    .byte 0x04              ;cb56  04          DATA 0x04

mem_cb57:
    .byte 0x13              ;cb57  13          DATA 0x13
    .byte 0x72              ;cb58  72          DATA 0x72 'r'
    .byte 0x1a              ;cb59  1a          DATA 0x1a
    .byte 0xa2              ;cb5a  a2          DATA 0xa2
    .byte 0x08              ;cb5b  08          DATA 0x08
    .byte 0x83              ;cb5c  83          DATA 0x83
    .byte 0x05              ;cb5d  05          DATA 0x05
    .byte 0x54              ;cb5e  54          DATA 0x54 'T'
    .byte 0x8c              ;cb5f  8c          DATA 0x8c
    .byte 0x0f              ;cb60  0f          DATA 0x0f
    .byte 0x0c              ;cb61  0c          DATA 0x0c

mem_cb62:
    .byte 0x34              ;cb62  34          DATA 0x34 '4'
    .byte 0xe2              ;cb63  e2          DATA 0xe2
    .byte 0x3e              ;cb64  3e          DATA 0x3e '>'
    .byte 0xd2              ;cb65  d2          DATA 0xd2
    .byte 0x10              ;cb66  10          DATA 0x10
    .byte 0xc2              ;cb67  c2          DATA 0xc2
    .byte 0x14              ;cb68  14          DATA 0x14
    .byte 0x43              ;cb69  43          DATA 0x43 'C'
    .byte 0x2e              ;cb6a  2e          DATA 0x2e '.'
    .byte 0xd1              ;cb6b  d1          DATA 0xd1
    .byte 0x38              ;cb6c  38          DATA 0x38 '8'
    .byte 0xe1              ;cb6d  e1          DATA 0xe1
    .byte 0x34              ;cb6e  34          DATA 0x34 '4'
    .byte 0xb2              ;cb6f  b2          DATA 0xb2
    .byte 0x34              ;cb70  34          DATA 0x34 '4'
    .byte 0xb2              ;cb71  b2          DATA 0xb2
    .byte 0x41              ;cb72  41          DATA 0x41 'A'
    .byte 0x14              ;cb73  14          DATA 0x14
    .byte 0x51              ;cb74  51          DATA 0x51 'Q'
    .byte 0x10              ;cb75  10          DATA 0x10
    .byte 0x7b              ;cb76  7b          DATA 0x7b '{'
    .byte 0x10              ;cb77  10          DATA 0x10
    .byte 0x64              ;cb78  64          DATA 0x64 'd'
    .byte 0x18              ;cb79  18          DATA 0x18
    .byte 0xa0              ;cb7a  a0          DATA 0xa0
    .byte 0x0f              ;cb7b  0f          DATA 0x0f
    .byte 0x08              ;cb7c  08          DATA 0x08

mem_cb7d:
    .byte 0x49              ;cb7d  49          DATA 0x49 'I'
    .byte 0x66              ;cb7e  66          DATA 0x66 'f'
    .byte 0x71              ;cb7f  71          DATA 0x71 'q'
    .byte 0x72              ;cb80  72          DATA 0x72 'r'
    .byte 0x61              ;cb81  61          DATA 0x61 'a'
    .byte 0x0c              ;cb82  0c          DATA 0x0c
    .byte 0x51              ;cb83  51          DATA 0x51 'Q'
    .byte 0x0a              ;cb84  0a          DATA 0x0a
    .byte 0x41              ;cb85  41          DATA 0x41 'A'
    .byte 0x26              ;cb86  26          DATA 0x26 '&'
    .byte 0x72              ;cb87  72          DATA 0x72 'r'
    .byte 0x20              ;cb88  20          DATA 0x20 ' '
    .byte 0x71              ;cb89  71          DATA 0x71 'q'
    .byte 0x5e              ;cb8a  5e          DATA 0x5e '^'
    .byte 0x71              ;cb8b  71          DATA 0x71 'q'
    .byte 0x5e              ;cb8c  5e          DATA 0x5e '^'
    .byte 0x80              ;cb8d  80          DATA 0x80
    .byte 0x0f              ;cb8e  0f          DATA 0x0f
    .byte 0x04              ;cb8f  04          DATA 0x04

mem_cb90:
    .byte 0x1c              ;cb90  1c          DATA 0x1c
    .byte 0xe3              ;cb91  e3          DATA 0xe3
    .byte 0x13              ;cb92  13          DATA 0x13
    .byte 0xd2              ;cb93  d2          DATA 0xd2
    .byte 0x0c              ;cb94  0c          DATA 0x0c
    .byte 0xa4              ;cb95  a4          DATA 0xa4
    .byte 0x07              ;cb96  07          DATA 0x07
    .byte 0xf5              ;cb97  f5          DATA 0xf5
    .byte 0x8c              ;cb98  8c          DATA 0x8c
    .byte 0x0f              ;cb99  0f          DATA 0x0f
    .byte 0x0c              ;cb9a  0c          DATA 0x0c

mem_cb9b:
    .byte 0x27              ;cb9b  27          DATA 0x27 '''
    .byte 0x72              ;cb9c  72          DATA 0x72 'r'
    .byte 0x2e              ;cb9d  2e          DATA 0x2e '.'
    .byte 0xe2              ;cb9e  e2          DATA 0xe2
    .byte 0x18              ;cb9f  18          DATA 0x18
    .byte 0xf3              ;cba0  f3          DATA 0xf3
    .byte 0x0f              ;cba1  0f          DATA 0x0f
    .byte 0x13              ;cba2  13          DATA 0x13
    .byte 0x23              ;cba3  23          DATA 0x23 '#'
    .byte 0x01              ;cba4  01          DATA 0x01
    .byte 0x2a              ;cba5  2a          DATA 0x2a '*'
    .byte 0xb1              ;cba6  b1          DATA 0xb1
    .byte 0x27              ;cba7  27          DATA 0x27 '''
    .byte 0x42              ;cba8  42          DATA 0x42 'B'
    .byte 0x27              ;cba9  27          DATA 0x27 '''
    .byte 0x42              ;cbaa  42          DATA 0x42 'B'
    .byte 0x72              ;cbab  72          DATA 0x72 'r'
    .byte 0x14              ;cbac  14          DATA 0x14
    .byte 0x41              ;cbad  41          DATA 0x41 'A'
    .byte 0x10              ;cbae  10          DATA 0x10
    .byte 0x6b              ;cbaf  6b          DATA 0x6b 'k'
    .byte 0x10              ;cbb0  10          DATA 0x10
    .byte 0x54              ;cbb1  54          DATA 0x54 'T'
    .byte 0x18              ;cbb2  18          DATA 0x18
    .byte 0xa0              ;cbb3  a0          DATA 0xa0
    .byte 0x0f              ;cbb4  0f          DATA 0x0f
    .byte 0x08              ;cbb5  08          DATA 0x08

mem_cbb6:
    .byte 0x41              ;cbb6  41          DATA 0x41 'A'
    .byte 0x66              ;cbb7  66          DATA 0x66 'f'
    .byte 0x69              ;cbb8  69          DATA 0x69 'i'
    .byte 0x72              ;cbb9  72          DATA 0x72 'r'
    .byte 0x59              ;cbba  59          DATA 0x59 'Y'
    .byte 0x0c              ;cbbb  0c          DATA 0x0c
    .byte 0x49              ;cbbc  49          DATA 0x49 'I'
    .byte 0x0a              ;cbbd  0a          DATA 0x0a
    .byte 0x72              ;cbbe  72          DATA 0x72 'r'
    .byte 0x26              ;cbbf  26          DATA 0x26 '&'
    .byte 0x6a              ;cbc0  6a          DATA 0x6a 'j'
    .byte 0x20              ;cbc1  20          DATA 0x20 ' '
    .byte 0x69              ;cbc2  69          DATA 0x69 'i'
    .byte 0x5e              ;cbc3  5e          DATA 0x5e '^'
    .byte 0x69              ;cbc4  69          DATA 0x69 'i'
    .byte 0x5e              ;cbc5  5e          DATA 0x5e '^'
    .byte 0x80              ;cbc6  80          DATA 0x80
    .byte 0x0f              ;cbc7  0f          DATA 0x0f
    .byte 0x04              ;cbc8  04          DATA 0x04

mem_cbc9:
    .byte 0x08              ;cbc9  08          DATA 0x08
    .byte 0x23              ;cbca  23          DATA 0x23 '#'
    .byte 0x08              ;cbcb  08          DATA 0x08
    .byte 0xe3              ;cbcc  e3          DATA 0xe3
    .byte 0x04              ;cbcd  04          DATA 0x04
    .byte 0x74              ;cbce  74          DATA 0x74 't'
    .byte 0x07              ;cbcf  07          DATA 0x07
    .byte 0x34              ;cbd0  34          DATA 0x34 '4'
    .byte 0x8c              ;cbd1  8c          DATA 0x8c
    .byte 0x0f              ;cbd2  0f          DATA 0x0f
    .byte 0x0c              ;cbd3  0c          DATA 0x0c

mem_cbd4:
    .byte 0x1c              ;cbd4  1c          DATA 0x1c
    .byte 0xb3              ;cbd5  b3          DATA 0xb3
    .byte 0x16              ;cbd6  16          DATA 0x16
    .byte 0x72              ;cbd7  72          DATA 0x72 'r'
    .byte 0x22              ;cbd8  22          DATA 0x22 '"'
    .byte 0xb1              ;cbd9  b1          DATA 0xb1
    .byte 0x28              ;cbda  28          DATA 0x28 '('
    .byte 0x91              ;cbdb  91          DATA 0x91
    .byte 0x41              ;cbdc  41          DATA 0x41 'A'
    .byte 0x41              ;cbdd  41          DATA 0x41 'A'
    .byte 0x41              ;cbde  41          DATA 0x41 'A'
    .byte 0x41              ;cbdf  41          DATA 0x41 'A'
    .byte 0x34              ;cbe0  34          DATA 0x34 '4'
    .byte 0x51              ;cbe1  51          DATA 0x51 'Q'
    .byte 0x32              ;cbe2  32          DATA 0x32 '2'
    .byte 0x11              ;cbe3  11          DATA 0x11
    .byte 0x42              ;cbe4  42          DATA 0x42 'B'
    .byte 0x12              ;cbe5  12          DATA 0x12
    .byte 0x4b              ;cbe6  4b          DATA 0x4b 'K'
    .byte 0x18              ;cbe7  18          DATA 0x18
    .byte 0x4a              ;cbe8  4a          DATA 0x4a 'J'
    .byte 0x08              ;cbe9  08          DATA 0x08
    .byte 0x73              ;cbea  73          DATA 0x73 's'
    .byte 0x0a              ;cbeb  0a          DATA 0x0a
    .byte 0xa0              ;cbec  a0          DATA 0xa0
    .byte 0x0f              ;cbed  0f          DATA 0x0f
    .byte 0x08              ;cbee  08          DATA 0x08

mem_cbef:
    .byte 0x52              ;cbef  52          DATA 0x52 'R'
    .byte 0x14              ;cbf0  14          DATA 0x14
    .byte 0x6a              ;cbf1  6a          DATA 0x6a 'j'
    .byte 0x16              ;cbf2  16          DATA 0x16
    .byte 0x5a              ;cbf3  5a          DATA 0x5a 'Z'
    .byte 0x26              ;cbf4  26          DATA 0x26 '&'
    .byte 0x7a              ;cbf5  7a          DATA 0x7a 'z'
    .byte 0x1e              ;cbf6  1e          DATA 0x1e
    .byte 0x58              ;cbf7  58          DATA 0x58 'X'
    .byte 0x66              ;cbf8  66          DATA 0x66 'f'
    .byte 0x58              ;cbf9  58          DATA 0x58 'X'
    .byte 0x66              ;cbfa  66          DATA 0x66 'f'
    .byte 0x58              ;cbfb  58          DATA 0x58 'X'
    .byte 0x90              ;cbfc  90          DATA 0x90
    .byte 0x58              ;cbfd  58          DATA 0x58 'X'
    .byte 0x90              ;cbfe  90          DATA 0x90
    .byte 0x80              ;cbff  80          DATA 0x80
    .byte 0x0f              ;cc00  0f          DATA 0x0f
    .byte 0x04              ;cc01  04          DATA 0x04

mem_cc02:
    .byte 0x0c              ;cc02  0c          DATA 0x0c
    .byte 0x24              ;cc03  24          DATA 0x24 '$'
    .byte 0x0d              ;cc04  0d          DATA 0x0d
    .byte 0x34              ;cc05  34          DATA 0x34 '4'
    .byte 0x06              ;cc06  06          DATA 0x06
    .byte 0x95              ;cc07  95          DATA 0x95
    .byte 0x05              ;cc08  05          DATA 0x05
    .byte 0x54              ;cc09  54          DATA 0x54 'T'
    .byte 0x8c              ;cc0a  8c          DATA 0x8c
    .byte 0x0f              ;cc0b  0f          DATA 0x0f
    .byte 0x0c              ;cc0c  0c          DATA 0x0c

mem_cc0d:
    .byte 0x15              ;cc0d  15          DATA 0x15
    .byte 0x53              ;cc0e  53          DATA 0x53 'S'
    .byte 0x10              ;cc0f  10          DATA 0x10
    .byte 0xb2              ;cc10  b2          DATA 0xb2
    .byte 0x33              ;cc11  33          DATA 0x33 '3'
    .byte 0xd2              ;cc12  d2          DATA 0xd2
    .byte 0x3c              ;cc13  3c          DATA 0x3c '<'
    .byte 0xa2              ;cc14  a2          DATA 0xa2
    .byte 0x31              ;cc15  31          DATA 0x31 '1'
    .byte 0x01              ;cc16  01          DATA 0x01
    .byte 0x31              ;cc17  31          DATA 0x31 '1'
    .byte 0x01              ;cc18  01          DATA 0x01
    .byte 0x27              ;cc19  27          DATA 0x27 '''
    .byte 0x31              ;cc1a  31          DATA 0x31 '1'
    .byte 0x25              ;cc1b  25          DATA 0x25 '%'
    .byte 0x81              ;cc1c  81          DATA 0x81
    .byte 0x73              ;cc1d  73          DATA 0x73 's'
    .byte 0x12              ;cc1e  12          DATA 0x12
    .byte 0x7c              ;cc1f  7c          DATA 0x7c '|'
    .byte 0x18              ;cc20  18          DATA 0x18
    .byte 0x7b              ;cc21  7b          DATA 0x7b '{'
    .byte 0x08              ;cc22  08          DATA 0x08
    .byte 0x63              ;cc23  63          DATA 0x63 'c'
    .byte 0x0a              ;cc24  0a          DATA 0x0a
    .byte 0xa0              ;cc25  a0          DATA 0xa0
    .byte 0x0f              ;cc26  0f          DATA 0x0f
    .byte 0x08              ;cc27  08          DATA 0x08

mem_cc28:
    .byte 0x4a              ;cc28  4a          DATA 0x4a 'J'
    .byte 0x1a              ;cc29  1a          DATA 0x1a
    .byte 0x5a              ;cc2a  5a          DATA 0x5a 'Z'
    .byte 0x16              ;cc2b  16          DATA 0x16
    .byte 0x52              ;cc2c  52          DATA 0x52 'R'
    .byte 0x26              ;cc2d  26          DATA 0x26 '&'
    .byte 0x6a              ;cc2e  6a          DATA 0x6a 'j'
    .byte 0x1e              ;cc2f  1e          DATA 0x1e
    .byte 0x50              ;cc30  50          DATA 0x50 'P'
    .byte 0x66              ;cc31  66          DATA 0x66 'f'
    .byte 0x50              ;cc32  50          DATA 0x50 'P'
    .byte 0x66              ;cc33  66          DATA 0x66 'f'
    .byte 0x50              ;cc34  50          DATA 0x50 'P'
    .byte 0x90              ;cc35  90          DATA 0x90
    .byte 0x50              ;cc36  50          DATA 0x50 'P'
    .byte 0x90              ;cc37  90          DATA 0x90
    .byte 0x80              ;cc38  80          DATA 0x80
    .byte 0x0f              ;cc39  0f          DATA 0x0f
    .byte 0x04              ;cc3a  04          DATA 0x04

mem_cc3b:
    .byte 0x36              ;cc3b  36          DATA 0x36 '6'
    .byte 0x01              ;cc3c  01          DATA 0x01
    .byte 0x36              ;cc3d  36          DATA 0x36 '6'
    .byte 0x01              ;cc3e  01          DATA 0x01
    .byte 0x36              ;cc3f  36          DATA 0x36 '6'
    .byte 0x01              ;cc40  01          DATA 0x01
    .byte 0x36              ;cc41  36          DATA 0x36 '6'
    .byte 0x01              ;cc42  01          DATA 0x01
    .byte 0x8c              ;cc43  8c          DATA 0x8c
    .byte 0x0f              ;cc44  0f          DATA 0x0f
    .byte 0x0c              ;cc45  0c          DATA 0x0c

mem_cc46:
    .byte 0x20              ;cc46  20          DATA 0x20 ' '
    .byte 0xb2              ;cc47  b2          DATA 0xb2
    .byte 0x20              ;cc48  20          DATA 0x20 ' '
    .byte 0xb2              ;cc49  b2          DATA 0xb2
    .byte 0x1d              ;cc4a  1d          DATA 0x1d
    .byte 0xb2              ;cc4b  b2          DATA 0xb2
    .byte 0x20              ;cc4c  20          DATA 0x20 ' '
    .byte 0x42              ;cc4d  42          DATA 0x42 'B'
    .byte 0x0d              ;cc4e  0d          DATA 0x0d
    .byte 0xf3              ;cc4f  f3          DATA 0xf3
    .byte 0x09              ;cc50  09          DATA 0x09
    .byte 0xd3              ;cc51  d3          DATA 0xd3
    .byte 0x13              ;cc52  13          DATA 0x13
    .byte 0x72              ;cc53  72          DATA 0x72 'r'
    .byte 0x12              ;cc54  12          DATA 0x12
    .byte 0xa2              ;cc55  a2          DATA 0xa2
    .byte 0x7a              ;cc56  7a          DATA 0x7a 'z'
    .byte 0x20              ;cc57  20          DATA 0x20 ' '
    .byte 0x51              ;cc58  51          DATA 0x51 'Q'
    .byte 0x1c              ;cc59  1c          DATA 0x1c
    .byte 0x51              ;cc5a  51          DATA 0x51 'Q'
    .byte 0x16              ;cc5b  16          DATA 0x16
    .byte 0x51              ;cc5c  51          DATA 0x51 'Q'
    .byte 0x16              ;cc5d  16          DATA 0x16
    .byte 0xa0              ;cc5e  a0          DATA 0xa0
    .byte 0x0f              ;cc5f  0f          DATA 0x0f
    .byte 0x08              ;cc60  08          DATA 0x08

mem_cc61:
    .byte 0x62              ;cc61  62          DATA 0x62 'b'
    .byte 0x12              ;cc62  12          DATA 0x12
    .byte 0x62              ;cc63  62          DATA 0x62 'b'
    .byte 0x12              ;cc64  12          DATA 0x12
    .byte 0x7a              ;cc65  7a          DATA 0x7a 'z'
    .byte 0x0e              ;cc66  0e          DATA 0x0e
    .byte 0x72              ;cc67  72          DATA 0x72 'r'
    .byte 0x0e              ;cc68  0e          DATA 0x0e
    .byte 0x63              ;cc69  63          DATA 0x63 'c'
    .byte 0x1a              ;cc6a  1a          DATA 0x1a
    .byte 0x52              ;cc6b  52          DATA 0x52 'R'
    .byte 0x0c              ;cc6c  0c          DATA 0x0c
    .byte 0x6b              ;cc6d  6b          DATA 0x6b 'k'
    .byte 0x80              ;cc6e  80          DATA 0x80
    .byte 0x6b              ;cc6f  6b          DATA 0x6b 'k'
    .byte 0x80              ;cc70  80          DATA 0x80
    .byte 0x80              ;cc71  80          DATA 0x80
    .byte 0x0f              ;cc72  0f          DATA 0x0f
    .byte 0x04              ;cc73  04          DATA 0x04

mem_cc74:
    .byte 0x28              ;cc74  28          DATA 0x28 '('
    .byte 0x71              ;cc75  71          DATA 0x71 'q'
    .byte 0x28              ;cc76  28          DATA 0x28 '('
    .byte 0x71              ;cc77  71          DATA 0x71 'q'
    .byte 0x28              ;cc78  28          DATA 0x28 '('
    .byte 0x71              ;cc79  71          DATA 0x71 'q'
    .byte 0x28              ;cc7a  28          DATA 0x28 '('
    .byte 0x71              ;cc7b  71          DATA 0x71 'q'
    .byte 0x8c              ;cc7c  8c          DATA 0x8c
    .byte 0x0f              ;cc7d  0f          DATA 0x0f
    .byte 0x0c              ;cc7e  0c          DATA 0x0c

mem_cc7f:
    .byte 0x18              ;cc7f  18          DATA 0x18
    .byte 0x52              ;cc80  52          DATA 0x52 'R'
    .byte 0x18              ;cc81  18          DATA 0x18
    .byte 0x52              ;cc82  52          DATA 0x52 'R'
    .byte 0x16              ;cc83  16          DATA 0x16
    .byte 0x22              ;cc84  22          DATA 0x22 '"'
    .byte 0x18              ;cc85  18          DATA 0x18
    .byte 0x02              ;cc86  02          DATA 0x02
    .byte 0x0a              ;cc87  0a          DATA 0x0a
    .byte 0x63              ;cc88  63          DATA 0x63 'c'
    .byte 0x0e              ;cc89  0e          DATA 0x0e
    .byte 0x94              ;cc8a  94          DATA 0x94
    .byte 0x1c              ;cc8b  1c          DATA 0x1c
    .byte 0xe3              ;cc8c  e3          DATA 0xe3
    .byte 0x1b              ;cc8d  1b          DATA 0x1b
    .byte 0xb3              ;cc8e  b3          DATA 0xb3
    .byte 0x72              ;cc8f  72          DATA 0x72 'r'
    .byte 0x20              ;cc90  20          DATA 0x20 ' '
    .byte 0x49              ;cc91  49          DATA 0x49 'I'
    .byte 0x1c              ;cc92  1c          DATA 0x1c
    .byte 0x49              ;cc93  49          DATA 0x49 'I'
    .byte 0x16              ;cc94  16          DATA 0x16
    .byte 0x49              ;cc95  49          DATA 0x49 'I'
    .byte 0x16              ;cc96  16          DATA 0x16
    .byte 0xa0              ;cc97  a0          DATA 0xa0
    .byte 0x0f              ;cc98  0f          DATA 0x0f
    .byte 0x08              ;cc99  08          DATA 0x08

mem_cc9a:
    .byte 0x5a              ;cc9a  5a          DATA 0x5a 'Z'
    .byte 0x12              ;cc9b  12          DATA 0x12
    .byte 0x5a              ;cc9c  5a          DATA 0x5a 'Z'
    .byte 0x12              ;cc9d  12          DATA 0x12
    .byte 0x6a              ;cc9e  6a          DATA 0x6a 'j'
    .byte 0x0e              ;cc9f  0e          DATA 0x0e
    .byte 0x62              ;cca0  62          DATA 0x62 'b'
    .byte 0x0e              ;cca1  0e          DATA 0x0e
    .byte 0x53              ;cca2  53          DATA 0x53 'S'
    .byte 0x1a              ;cca3  1a          DATA 0x1a
    .byte 0x42              ;cca4  42          DATA 0x42 'B'
    .byte 0x0c              ;cca5  0c          DATA 0x0c
    .byte 0x5b              ;cca6  5b          DATA 0x5b '['
    .byte 0x80              ;cca7  80          DATA 0x80
    .byte 0x5b              ;cca8  5b          DATA 0x5b '['
    .byte 0x80              ;cca9  80          DATA 0x80
    .byte 0x80              ;ccaa  80          DATA 0x80
    .byte 0x0f              ;ccab  0f          DATA 0x0f
    .byte 0x04              ;ccac  04          DATA 0x04

mem_ccad:
    .byte 0x3a              ;ccad  3a          DATA 0x3a ':'
    .byte 0xb1              ;ccae  b1          DATA 0xb1
    .byte 0x3a              ;ccaf  3a          DATA 0x3a ':'
    .byte 0xb1              ;ccb0  b1          DATA 0xb1
    .byte 0x36              ;ccb1  36          DATA 0x36 '6'
    .byte 0x01              ;ccb2  01          DATA 0x01
    .byte 0x36              ;ccb3  36          DATA 0x36 '6'
    .byte 0x01              ;ccb4  01          DATA 0x01
    .byte 0x8c              ;ccb5  8c          DATA 0x8c
    .byte 0x0f              ;ccb6  0f          DATA 0x0f
    .byte 0x0c              ;ccb7  0c          DATA 0x0c

mem_ccb8:
    .byte 0x20              ;ccb8  20          DATA 0x20 ' '
    .byte 0xb2              ;ccb9  b2          DATA 0xb2
    .byte 0x20              ;ccba  20          DATA 0x20 ' '
    .byte 0xb2              ;ccbb  b2          DATA 0xb2
    .byte 0x1d              ;ccbc  1d          DATA 0x1d
    .byte 0xd2              ;ccbd  d2          DATA 0xd2
    .byte 0x20              ;ccbe  20          DATA 0x20 ' '
    .byte 0x42              ;ccbf  42          DATA 0x42 'B'
    .byte 0x0d              ;ccc0  0d          DATA 0x0d
    .byte 0xf3              ;ccc1  f3          DATA 0xf3
    .byte 0x08              ;ccc2  08          DATA 0x08
    .byte 0xf3              ;ccc3  f3          DATA 0xf3
    .byte 0x13              ;ccc4  13          DATA 0x13
    .byte 0x82              ;ccc5  82          DATA 0x82
    .byte 0x12              ;ccc6  12          DATA 0x12
    .byte 0xa2              ;ccc7  a2          DATA 0xa2
    .byte 0x49              ;ccc8  49          DATA 0x49 'I'
    .byte 0x20              ;ccc9  20          DATA 0x20 ' '
    .byte 0x6a              ;ccca  6a          DATA 0x6a 'j'
    .byte 0x24              ;cccb  24          DATA 0x24 '$'
    .byte 0x72              ;cccc  72          DATA 0x72 'r'
    .byte 0x1c              ;cccd  1c          DATA 0x1c
    .byte 0x72              ;ccce  72          DATA 0x72 'r'
    .byte 0x1c              ;cccf  1c          DATA 0x1c
    .byte 0xa0              ;ccd0  a0          DATA 0xa0
    .byte 0x0f              ;ccd1  0f          DATA 0x0f
    .byte 0x08              ;ccd2  08          DATA 0x08

mem_ccd3:
    .byte 0x52              ;ccd3  52          DATA 0x52 'R'
    .byte 0x16              ;ccd4  16          DATA 0x16
    .byte 0x5a              ;ccd5  5a          DATA 0x5a 'Z'
    .byte 0x12              ;ccd6  12          DATA 0x12
    .byte 0x5a              ;ccd7  5a          DATA 0x5a 'Z'
    .byte 0x14              ;ccd8  14          DATA 0x14
    .byte 0x5a              ;ccd9  5a          DATA 0x5a 'Z'
    .byte 0x10              ;ccda  10          DATA 0x10
    .byte 0x7b              ;ccdb  7b          DATA 0x7b '{'
    .byte 0x0c              ;ccdc  0c          DATA 0x0c
    .byte 0x6a              ;ccdd  6a          DATA 0x6a 'j'
    .byte 0x08              ;ccde  08          DATA 0x08
    .byte 0x4b              ;ccdf  4b          DATA 0x4b 'K'
    .byte 0xa6              ;cce0  a6          DATA 0xa6
    .byte 0x4b              ;cce1  4b          DATA 0x4b 'K'
    .byte 0xa0              ;cce2  a0          DATA 0xa0
    .byte 0x80              ;cce3  80          DATA 0x80
    .byte 0x0f              ;cce4  0f          DATA 0x0f
    .byte 0x04              ;cce5  04          DATA 0x04

mem_cce6:
    .byte 0x2c              ;cce6  2c          DATA 0x2c ','
    .byte 0x11              ;cce7  11          DATA 0x11
    .byte 0x2c              ;cce8  2c          DATA 0x2c ','
    .byte 0x11              ;cce9  11          DATA 0x11
    .byte 0x28              ;ccea  28          DATA 0x28 '('
    .byte 0x71              ;cceb  71          DATA 0x71 'q'
    .byte 0x28              ;ccec  28          DATA 0x28 '('
    .byte 0x71              ;cced  71          DATA 0x71 'q'
    .byte 0x8c              ;ccee  8c          DATA 0x8c
    .byte 0x0f              ;ccef  0f          DATA 0x0f
    .byte 0x0c              ;ccf0  0c          DATA 0x0c

mem_ccf1:
    .byte 0x18              ;ccf1  18          DATA 0x18
    .byte 0x52              ;ccf2  52          DATA 0x52 'R'
    .byte 0x18              ;ccf3  18          DATA 0x18
    .byte 0x52              ;ccf4  52          DATA 0x52 'R'
    .byte 0x16              ;ccf5  16          DATA 0x16
    .byte 0x32              ;ccf6  32          DATA 0x32 '2'
    .byte 0x18              ;ccf7  18          DATA 0x18
    .byte 0x02              ;ccf8  02          DATA 0x02
    .byte 0x0a              ;ccf9  0a          DATA 0x0a
    .byte 0x63              ;ccfa  63          DATA 0x63 'c'
    .byte 0x0d              ;ccfb  0d          DATA 0x0d
    .byte 0x54              ;ccfc  54          DATA 0x54 'T'
    .byte 0x1d              ;ccfd  1d          DATA 0x1d
    .byte 0x03              ;ccfe  03          DATA 0x03
    .byte 0x1b              ;ccff  1b          DATA 0x1b
    .byte 0xb3              ;cd00  b3          DATA 0xb3
    .byte 0x7a              ;cd01  7a          DATA 0x7a 'z'
    .byte 0x20              ;cd02  20          DATA 0x20 ' '
    .byte 0x62              ;cd03  62          DATA 0x62 'b'
    .byte 0x24              ;cd04  24          DATA 0x24 '$'
    .byte 0x6a              ;cd05  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cd06  1c          DATA 0x1c
    .byte 0x6a              ;cd07  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cd08  1c          DATA 0x1c
    .byte 0xa0              ;cd09  a0          DATA 0xa0
    .byte 0x0f              ;cd0a  0f          DATA 0x0f
    .byte 0x08              ;cd0b  08          DATA 0x08

mem_cd0c:
    .byte 0x4a              ;cd0c  4a          DATA 0x4a 'J'
    .byte 0x16              ;cd0d  16          DATA 0x16
    .byte 0x52              ;cd0e  52          DATA 0x52 'R'
    .byte 0x12              ;cd0f  12          DATA 0x12
    .byte 0x52              ;cd10  52          DATA 0x52 'R'
    .byte 0x14              ;cd11  14          DATA 0x14
    .byte 0x5a              ;cd12  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cd13  10          DATA 0x10
    .byte 0x73              ;cd14  73          DATA 0x73 's'
    .byte 0x0c              ;cd15  0c          DATA 0x0c
    .byte 0x62              ;cd16  62          DATA 0x62 'b'
    .byte 0x08              ;cd17  08          DATA 0x08
    .byte 0x7c              ;cd18  7c          DATA 0x7c '|'
    .byte 0xa6              ;cd19  a6          DATA 0xa6
    .byte 0x7c              ;cd1a  7c          DATA 0x7c '|'
    .byte 0xa0              ;cd1b  a0          DATA 0xa0
    .byte 0x80              ;cd1c  80          DATA 0x80
    .byte 0x0f              ;cd1d  0f          DATA 0x0f
    .byte 0x04              ;cd1e  04          DATA 0x04

mem_cd1f:
    .byte 0x3a              ;cd1f  3a          DATA 0x3a ':'
    .byte 0xb1              ;cd20  b1          DATA 0xb1
    .byte 0x3a              ;cd21  3a          DATA 0x3a ':'
    .byte 0xb1              ;cd22  b1          DATA 0xb1
    .byte 0x36              ;cd23  36          DATA 0x36 '6'
    .byte 0x01              ;cd24  01          DATA 0x01
    .byte 0x36              ;cd25  36          DATA 0x36 '6'
    .byte 0x01              ;cd26  01          DATA 0x01
    .byte 0x8c              ;cd27  8c          DATA 0x8c
    .byte 0x0f              ;cd28  0f          DATA 0x0f
    .byte 0x0c              ;cd29  0c          DATA 0x0c

mem_cd2a:
    .byte 0x20              ;cd2a  20          DATA 0x20 ' '
    .byte 0xb2              ;cd2b  b2          DATA 0xb2
    .byte 0x20              ;cd2c  20          DATA 0x20 ' '
    .byte 0xb2              ;cd2d  b2          DATA 0xb2
    .byte 0x1d              ;cd2e  1d          DATA 0x1d
    .byte 0xd2              ;cd2f  d2          DATA 0xd2
    .byte 0x20              ;cd30  20          DATA 0x20 ' '
    .byte 0x42              ;cd31  42          DATA 0x42 'B'
    .byte 0x0d              ;cd32  0d          DATA 0x0d
    .byte 0xf3              ;cd33  f3          DATA 0xf3
    .byte 0x08              ;cd34  08          DATA 0x08
    .byte 0xf3              ;cd35  f3          DATA 0xf3
    .byte 0x13              ;cd36  13          DATA 0x13
    .byte 0x82              ;cd37  82          DATA 0x82
    .byte 0x12              ;cd38  12          DATA 0x12
    .byte 0xa2              ;cd39  a2          DATA 0xa2
    .byte 0x49              ;cd3a  49          DATA 0x49 'I'
    .byte 0x20              ;cd3b  20          DATA 0x20 ' '
    .byte 0x6a              ;cd3c  6a          DATA 0x6a 'j'
    .byte 0x24              ;cd3d  24          DATA 0x24 '$'
    .byte 0x72              ;cd3e  72          DATA 0x72 'r'
    .byte 0x1c              ;cd3f  1c          DATA 0x1c
    .byte 0x72              ;cd40  72          DATA 0x72 'r'
    .byte 0x1c              ;cd41  1c          DATA 0x1c
    .byte 0xa0              ;cd42  a0          DATA 0xa0
    .byte 0x0f              ;cd43  0f          DATA 0x0f
    .byte 0x08              ;cd44  08          DATA 0x08

mem_cd45:
    .byte 0x52              ;cd45  52          DATA 0x52 'R'
    .byte 0x16              ;cd46  16          DATA 0x16
    .byte 0x5a              ;cd47  5a          DATA 0x5a 'Z'
    .byte 0x12              ;cd48  12          DATA 0x12
    .byte 0x5a              ;cd49  5a          DATA 0x5a 'Z'
    .byte 0x14              ;cd4a  14          DATA 0x14
    .byte 0x5a              ;cd4b  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cd4c  10          DATA 0x10
    .byte 0x7b              ;cd4d  7b          DATA 0x7b '{'
    .byte 0x0c              ;cd4e  0c          DATA 0x0c
    .byte 0x6a              ;cd4f  6a          DATA 0x6a 'j'
    .byte 0x08              ;cd50  08          DATA 0x08
    .byte 0x4b              ;cd51  4b          DATA 0x4b 'K'
    .byte 0xa6              ;cd52  a6          DATA 0xa6
    .byte 0x4b              ;cd53  4b          DATA 0x4b 'K'
    .byte 0xa0              ;cd54  a0          DATA 0xa0
    .byte 0x80              ;cd55  80          DATA 0x80
    .byte 0x0f              ;cd56  0f          DATA 0x0f
    .byte 0x04              ;cd57  04          DATA 0x04

mem_cd58:
    .byte 0x2c              ;cd58  2c          DATA 0x2c ','
    .byte 0x11              ;cd59  11          DATA 0x11
    .byte 0x2c              ;cd5a  2c          DATA 0x2c ','
    .byte 0x11              ;cd5b  11          DATA 0x11
    .byte 0x28              ;cd5c  28          DATA 0x28 '('
    .byte 0x71              ;cd5d  71          DATA 0x71 'q'
    .byte 0x28              ;cd5e  28          DATA 0x28 '('
    .byte 0x71              ;cd5f  71          DATA 0x71 'q'
    .byte 0x8c              ;cd60  8c          DATA 0x8c
    .byte 0x0f              ;cd61  0f          DATA 0x0f
    .byte 0x0c              ;cd62  0c          DATA 0x0c

mem_cd63:
    .byte 0x18              ;cd63  18          DATA 0x18
    .byte 0x52              ;cd64  52          DATA 0x52 'R'
    .byte 0x18              ;cd65  18          DATA 0x18
    .byte 0x52              ;cd66  52          DATA 0x52 'R'
    .byte 0x16              ;cd67  16          DATA 0x16
    .byte 0x32              ;cd68  32          DATA 0x32 '2'
    .byte 0x18              ;cd69  18          DATA 0x18
    .byte 0x02              ;cd6a  02          DATA 0x02
    .byte 0x0a              ;cd6b  0a          DATA 0x0a
    .byte 0x63              ;cd6c  63          DATA 0x63 'c'
    .byte 0x0d              ;cd6d  0d          DATA 0x0d
    .byte 0x54              ;cd6e  54          DATA 0x54 'T'
    .byte 0x1d              ;cd6f  1d          DATA 0x1d
    .byte 0x03              ;cd70  03          DATA 0x03
    .byte 0x1b              ;cd71  1b          DATA 0x1b
    .byte 0xb3              ;cd72  b3          DATA 0xb3
    .byte 0x7a              ;cd73  7a          DATA 0x7a 'z'
    .byte 0x20              ;cd74  20          DATA 0x20 ' '
    .byte 0x62              ;cd75  62          DATA 0x62 'b'
    .byte 0x24              ;cd76  24          DATA 0x24 '$'
    .byte 0x6a              ;cd77  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cd78  1c          DATA 0x1c
    .byte 0x6a              ;cd79  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cd7a  1c          DATA 0x1c
    .byte 0xa0              ;cd7b  a0          DATA 0xa0
    .byte 0x0f              ;cd7c  0f          DATA 0x0f
    .byte 0x08              ;cd7d  08          DATA 0x08

mem_cd7e:
    .byte 0x4a              ;cd7e  4a          DATA 0x4a 'J'
    .byte 0x16              ;cd7f  16          DATA 0x16
    .byte 0x52              ;cd80  52          DATA 0x52 'R'
    .byte 0x12              ;cd81  12          DATA 0x12
    .byte 0x52              ;cd82  52          DATA 0x52 'R'
    .byte 0x14              ;cd83  14          DATA 0x14
    .byte 0x5a              ;cd84  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cd85  10          DATA 0x10
    .byte 0x73              ;cd86  73          DATA 0x73 's'
    .byte 0x0c              ;cd87  0c          DATA 0x0c
    .byte 0x62              ;cd88  62          DATA 0x62 'b'
    .byte 0x08              ;cd89  08          DATA 0x08
    .byte 0x7c              ;cd8a  7c          DATA 0x7c '|'
    .byte 0xa6              ;cd8b  a6          DATA 0xa6
    .byte 0x7c              ;cd8c  7c          DATA 0x7c '|'
    .byte 0xa0              ;cd8d  a0          DATA 0xa0
    .byte 0x80              ;cd8e  80          DATA 0x80
    .byte 0x0f              ;cd8f  0f          DATA 0x0f
    .byte 0x04              ;cd90  04          DATA 0x04

mem_cd91:
    .byte 0x3a              ;cd91  3a          DATA 0x3a ':'
    .byte 0xb1              ;cd92  b1          DATA 0xb1
    .byte 0x3a              ;cd93  3a          DATA 0x3a ':'
    .byte 0xb1              ;cd94  b1          DATA 0xb1
    .byte 0x36              ;cd95  36          DATA 0x36 '6'
    .byte 0x01              ;cd96  01          DATA 0x01
    .byte 0x36              ;cd97  36          DATA 0x36 '6'
    .byte 0x01              ;cd98  01          DATA 0x01
    .byte 0x8c              ;cd99  8c          DATA 0x8c
    .byte 0x0f              ;cd9a  0f          DATA 0x0f
    .byte 0x0c              ;cd9b  0c          DATA 0x0c

mem_cd9c:
    .byte 0x20              ;cd9c  20          DATA 0x20 ' '
    .byte 0xb2              ;cd9d  b2          DATA 0xb2
    .byte 0x20              ;cd9e  20          DATA 0x20 ' '
    .byte 0xb2              ;cd9f  b2          DATA 0xb2
    .byte 0x1d              ;cda0  1d          DATA 0x1d
    .byte 0xd2              ;cda1  d2          DATA 0xd2
    .byte 0x20              ;cda2  20          DATA 0x20 ' '
    .byte 0x42              ;cda3  42          DATA 0x42 'B'
    .byte 0x0d              ;cda4  0d          DATA 0x0d
    .byte 0xf3              ;cda5  f3          DATA 0xf3
    .byte 0x08              ;cda6  08          DATA 0x08
    .byte 0xf3              ;cda7  f3          DATA 0xf3
    .byte 0x13              ;cda8  13          DATA 0x13
    .byte 0x82              ;cda9  82          DATA 0x82
    .byte 0x12              ;cdaa  12          DATA 0x12
    .byte 0xa2              ;cdab  a2          DATA 0xa2
    .byte 0x49              ;cdac  49          DATA 0x49 'I'
    .byte 0x20              ;cdad  20          DATA 0x20 ' '
    .byte 0x6a              ;cdae  6a          DATA 0x6a 'j'
    .byte 0x24              ;cdaf  24          DATA 0x24 '$'
    .byte 0x72              ;cdb0  72          DATA 0x72 'r'
    .byte 0x1c              ;cdb1  1c          DATA 0x1c
    .byte 0x72              ;cdb2  72          DATA 0x72 'r'
    .byte 0x1c              ;cdb3  1c          DATA 0x1c
    .byte 0xa0              ;cdb4  a0          DATA 0xa0
    .byte 0x0f              ;cdb5  0f          DATA 0x0f
    .byte 0x08              ;cdb6  08          DATA 0x08

mem_cdb7:
    .byte 0x52              ;cdb7  52          DATA 0x52 'R'
    .byte 0x16              ;cdb8  16          DATA 0x16
    .byte 0x5a              ;cdb9  5a          DATA 0x5a 'Z'
    .byte 0x12              ;cdba  12          DATA 0x12
    .byte 0x5a              ;cdbb  5a          DATA 0x5a 'Z'
    .byte 0x14              ;cdbc  14          DATA 0x14
    .byte 0x5a              ;cdbd  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cdbe  10          DATA 0x10
    .byte 0x7b              ;cdbf  7b          DATA 0x7b '{'
    .byte 0x0c              ;cdc0  0c          DATA 0x0c
    .byte 0x6a              ;cdc1  6a          DATA 0x6a 'j'
    .byte 0x08              ;cdc2  08          DATA 0x08
    .byte 0x4b              ;cdc3  4b          DATA 0x4b 'K'
    .byte 0xa6              ;cdc4  a6          DATA 0xa6
    .byte 0x4b              ;cdc5  4b          DATA 0x4b 'K'
    .byte 0xa0              ;cdc6  a0          DATA 0xa0
    .byte 0x80              ;cdc7  80          DATA 0x80
    .byte 0x0f              ;cdc8  0f          DATA 0x0f
    .byte 0x04              ;cdc9  04          DATA 0x04

mem_cdca:
    .byte 0x2c              ;cdca  2c          DATA 0x2c ','
    .byte 0x11              ;cdcb  11          DATA 0x11
    .byte 0x2c              ;cdcc  2c          DATA 0x2c ','
    .byte 0x11              ;cdcd  11          DATA 0x11
    .byte 0x28              ;cdce  28          DATA 0x28 '('
    .byte 0x71              ;cdcf  71          DATA 0x71 'q'
    .byte 0x28              ;cdd0  28          DATA 0x28 '('
    .byte 0x71              ;cdd1  71          DATA 0x71 'q'
    .byte 0x8c              ;cdd2  8c          DATA 0x8c
    .byte 0x0f              ;cdd3  0f          DATA 0x0f
    .byte 0x0c              ;cdd4  0c          DATA 0x0c

mem_cdd5:
    .byte 0x18              ;cdd5  18          DATA 0x18
    .byte 0x52              ;cdd6  52          DATA 0x52 'R'
    .byte 0x18              ;cdd7  18          DATA 0x18
    .byte 0x52              ;cdd8  52          DATA 0x52 'R'
    .byte 0x16              ;cdd9  16          DATA 0x16
    .byte 0x32              ;cdda  32          DATA 0x32 '2'
    .byte 0x18              ;cddb  18          DATA 0x18
    .byte 0x02              ;cddc  02          DATA 0x02
    .byte 0x0a              ;cddd  0a          DATA 0x0a
    .byte 0x63              ;cdde  63          DATA 0x63 'c'
    .byte 0x0d              ;cddf  0d          DATA 0x0d
    .byte 0x54              ;cde0  54          DATA 0x54 'T'
    .byte 0x1d              ;cde1  1d          DATA 0x1d
    .byte 0x03              ;cde2  03          DATA 0x03
    .byte 0x1b              ;cde3  1b          DATA 0x1b
    .byte 0xb3              ;cde4  b3          DATA 0xb3
    .byte 0x7a              ;cde5  7a          DATA 0x7a 'z'
    .byte 0x20              ;cde6  20          DATA 0x20 ' '
    .byte 0x62              ;cde7  62          DATA 0x62 'b'
    .byte 0x24              ;cde8  24          DATA 0x24 '$'
    .byte 0x6a              ;cde9  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cdea  1c          DATA 0x1c
    .byte 0x6a              ;cdeb  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cdec  1c          DATA 0x1c
    .byte 0xa0              ;cded  a0          DATA 0xa0
    .byte 0x0f              ;cdee  0f          DATA 0x0f
    .byte 0x08              ;cdef  08          DATA 0x08

mem_cdf0:
    .byte 0x4a              ;cdf0  4a          DATA 0x4a 'J'
    .byte 0x16              ;cdf1  16          DATA 0x16
    .byte 0x52              ;cdf2  52          DATA 0x52 'R'
    .byte 0x12              ;cdf3  12          DATA 0x12
    .byte 0x52              ;cdf4  52          DATA 0x52 'R'
    .byte 0x14              ;cdf5  14          DATA 0x14
    .byte 0x5a              ;cdf6  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cdf7  10          DATA 0x10
    .byte 0x73              ;cdf8  73          DATA 0x73 's'
    .byte 0x0c              ;cdf9  0c          DATA 0x0c
    .byte 0x62              ;cdfa  62          DATA 0x62 'b'
    .byte 0x08              ;cdfb  08          DATA 0x08
    .byte 0x7c              ;cdfc  7c          DATA 0x7c '|'
    .byte 0xa6              ;cdfd  a6          DATA 0xa6
    .byte 0x7c              ;cdfe  7c          DATA 0x7c '|'
    .byte 0xa0              ;cdff  a0          DATA 0xa0
    .byte 0x80              ;ce00  80          DATA 0x80
    .byte 0x0f              ;ce01  0f          DATA 0x0f
    .byte 0x04              ;ce02  04          DATA 0x04

mem_ce03:
    .byte 0x2a              ;ce03  2a          DATA 0x2a '*'
    .byte 0x41              ;ce04  41          DATA 0x41 'A'
    .byte 0x32              ;ce05  32          DATA 0x32 '2'
    .byte 0xe1              ;ce06  e1          DATA 0xe1
    .byte 0x06              ;ce07  06          DATA 0x06
    .byte 0x84              ;ce08  84          DATA 0x84
    .byte 0x06              ;ce09  06          DATA 0x06
    .byte 0x84              ;ce0a  84          DATA 0x84
    .byte 0x8c              ;ce0b  8c          DATA 0x8c
    .byte 0x0f              ;ce0c  0f          DATA 0x0f
    .byte 0x0c              ;ce0d  0c          DATA 0x0c

mem_ce0e:
    .byte 0x0f              ;ce0e  0f          DATA 0x0f
    .byte 0xa4              ;ce0f  a4          DATA 0xa4
    .byte 0x0f              ;ce10  0f          DATA 0x0f
    .byte 0x74              ;ce11  74          DATA 0x74 't'
    .byte 0x04              ;ce12  04          DATA 0x04
    .byte 0x55              ;ce13  55          DATA 0x55 'U'
    .byte 0x05              ;ce14  05          DATA 0x05
    .byte 0xf5              ;ce15  f5          DATA 0xf5
    .byte 0x05              ;ce16  05          DATA 0x05
    .byte 0xb4              ;ce17  b4          DATA 0xb4
    .byte 0x06              ;ce18  06          DATA 0x06
    .byte 0xe4              ;ce19  e4          DATA 0xe4
    .byte 0x0d              ;ce1a  0d          DATA 0x0d
    .byte 0xf3              ;ce1b  f3          DATA 0xf3
    .byte 0x01              ;ce1c  01          DATA 0x01
    .byte 0x86              ;ce1d  86          DATA 0x86
    .byte 0x7a              ;ce1e  7a          DATA 0x7a 'z'
    .byte 0x20              ;ce1f  20          DATA 0x20 ' '
    .byte 0x62              ;ce20  62          DATA 0x62 'b'
    .byte 0x22              ;ce21  22          DATA 0x22 '"'
    .byte 0x7d              ;ce22  7d          DATA 0x7d '}'
    .byte 0x2c              ;ce23  2c          DATA 0x2c ','
    .byte 0x75              ;ce24  75          DATA 0x75 'u'
    .byte 0x2a              ;ce25  2a          DATA 0x2a '*'
    .byte 0xa0              ;ce26  a0          DATA 0xa0
    .byte 0x0f              ;ce27  0f          DATA 0x0f
    .byte 0x08              ;ce28  08          DATA 0x08

mem_ce29:
    .byte 0x6b              ;ce29  6b          DATA 0x6b 'k'
    .byte 0x1c              ;ce2a  1c          DATA 0x1c
    .byte 0x5b              ;ce2b  5b          DATA 0x5b '['
    .byte 0x1e              ;ce2c  1e          DATA 0x1e
    .byte 0x45              ;ce2d  45          DATA 0x45 'E'
    .byte 0x2a              ;ce2e  2a          DATA 0x2a '*'
    .byte 0x7e              ;ce2f  7e          DATA 0x7e '~'
    .byte 0x2a              ;ce30  2a          DATA 0x2a '*'
    .byte 0x4c              ;ce31  4c          DATA 0x4c 'L'
    .byte 0x1e              ;ce32  1e          DATA 0x1e
    .byte 0x54              ;ce33  54          DATA 0x54 'T'
    .byte 0x1e              ;ce34  1e          DATA 0x1e
    .byte 0x54              ;ce35  54          DATA 0x54 'T'
    .byte 0x40              ;ce36  40          DATA 0x40 '@'
    .byte 0x67              ;ce37  67          DATA 0x67 'g'
    .byte 0x22              ;ce38  22          DATA 0x22 '"'
    .byte 0x80              ;ce39  80          DATA 0x80
    .byte 0x0f              ;ce3a  0f          DATA 0x0f
    .byte 0x04              ;ce3b  04          DATA 0x04

mem_ce3c:
    .byte 0x3f              ;ce3c  3f          DATA 0x3f '?'
    .byte 0x32              ;ce3d  32          DATA 0x32 '2'
    .byte 0x26              ;ce3e  26          DATA 0x26 '&'
    .byte 0x21              ;ce3f  21          DATA 0x21 '!'
    .byte 0x04              ;ce40  04          DATA 0x04
    .byte 0xd4              ;ce41  d4          DATA 0xd4
    .byte 0x04              ;ce42  04          DATA 0x04
    .byte 0xd4              ;ce43  d4          DATA 0xd4
    .byte 0x8c              ;ce44  8c          DATA 0x8c
    .byte 0x0f              ;ce45  0f          DATA 0x0f
    .byte 0x0c              ;ce46  0c          DATA 0x0c

mem_ce47:
    .byte 0x0b              ;ce47  0b          DATA 0x0b
    .byte 0xa4              ;ce48  a4          DATA 0xa4
    .byte 0x0b              ;ce49  0b          DATA 0x0b
    .byte 0x74              ;ce4a  74          DATA 0x74 't'
    .byte 0x03              ;ce4b  03          DATA 0x03
    .byte 0x35              ;ce4c  35          DATA 0x35 '5'
    .byte 0x04              ;ce4d  04          DATA 0x04
    .byte 0x65              ;ce4e  65          DATA 0x65 'e'
    .byte 0x04              ;ce4f  04          DATA 0x04
    .byte 0x34              ;ce50  34          DATA 0x34 '4'
    .byte 0x05              ;ce51  05          DATA 0x05
    .byte 0x14              ;ce52  14          DATA 0x14
    .byte 0x0a              ;ce53  0a          DATA 0x0a
    .byte 0x63              ;ce54  63          DATA 0x63 'c'
    .byte 0x01              ;ce55  01          DATA 0x01
    .byte 0x26              ;ce56  26          DATA 0x26 '&'
    .byte 0x72              ;ce57  72          DATA 0x72 'r'
    .byte 0x20              ;ce58  20          DATA 0x20 ' '
    .byte 0x5a              ;ce59  5a          DATA 0x5a 'Z'
    .byte 0x22              ;ce5a  22          DATA 0x22 '"'
    .byte 0x75              ;ce5b  75          DATA 0x75 'u'
    .byte 0x2c              ;ce5c  2c          DATA 0x2c ','
    .byte 0x65              ;ce5d  65          DATA 0x65 'e'
    .byte 0x2a              ;ce5e  2a          DATA 0x2a '*'
    .byte 0xa0              ;ce5f  a0          DATA 0xa0
    .byte 0x0f              ;ce60  0f          DATA 0x0f
    .byte 0x08              ;ce61  08          DATA 0x08

mem_ce62:
    .byte 0x5b              ;ce62  5b          DATA 0x5b '['
    .byte 0x1c              ;ce63  1c          DATA 0x1c
    .byte 0x4b              ;ce64  4b          DATA 0x4b 'K'
    .byte 0x1e              ;ce65  1e          DATA 0x1e
    .byte 0x76              ;ce66  76          DATA 0x76 'v'
    .byte 0x2a              ;ce67  2a          DATA 0x2a '*'
    .byte 0x6e              ;ce68  6e          DATA 0x6e 'n'
    .byte 0x2a              ;ce69  2a          DATA 0x2a '*'
    .byte 0x7d              ;ce6a  7d          DATA 0x7d '}'
    .byte 0x1e              ;ce6b  1e          DATA 0x1e
    .byte 0x44              ;ce6c  44          DATA 0x44 'D'
    .byte 0x1e              ;ce6d  1e          DATA 0x1e
    .byte 0x4c              ;ce6e  4c          DATA 0x4c 'L'
    .byte 0x40              ;ce6f  40          DATA 0x40 '@'
    .byte 0x5f              ;ce70  5f          DATA 0x5f '_'
    .byte 0x22              ;ce71  22          DATA 0x22 '"'
    .byte 0x80              ;ce72  80          DATA 0x80
    .byte 0x0f              ;ce73  0f          DATA 0x0f
    .byte 0x04              ;ce74  04          DATA 0x04

mem_ce75:
    .byte 0x3a              ;ce75  3a          DATA 0x3a ':'
    .byte 0xb1              ;ce76  b1          DATA 0xb1
    .byte 0x3a              ;ce77  3a          DATA 0x3a ':'
    .byte 0xb1              ;ce78  b1          DATA 0xb1
    .byte 0x36              ;ce79  36          DATA 0x36 '6'
    .byte 0x01              ;ce7a  01          DATA 0x01
    .byte 0x36              ;ce7b  36          DATA 0x36 '6'
    .byte 0x01              ;ce7c  01          DATA 0x01
    .byte 0x8c              ;ce7d  8c          DATA 0x8c
    .byte 0x0f              ;ce7e  0f          DATA 0x0f
    .byte 0x0c              ;ce7f  0c          DATA 0x0c

mem_ce80:
    .byte 0x20              ;ce80  20          DATA 0x20 ' '
    .byte 0xb2              ;ce81  b2          DATA 0xb2
    .byte 0x20              ;ce82  20          DATA 0x20 ' '
    .byte 0xb2              ;ce83  b2          DATA 0xb2
    .byte 0x1d              ;ce84  1d          DATA 0x1d
    .byte 0xd2              ;ce85  d2          DATA 0xd2
    .byte 0x20              ;ce86  20          DATA 0x20 ' '
    .byte 0x42              ;ce87  42          DATA 0x42 'B'
    .byte 0x0d              ;ce88  0d          DATA 0x0d
    .byte 0xf3              ;ce89  f3          DATA 0xf3
    .byte 0x08              ;ce8a  08          DATA 0x08
    .byte 0xf3              ;ce8b  f3          DATA 0xf3
    .byte 0x13              ;ce8c  13          DATA 0x13
    .byte 0x82              ;ce8d  82          DATA 0x82
    .byte 0x12              ;ce8e  12          DATA 0x12
    .byte 0xa2              ;ce8f  a2          DATA 0xa2
    .byte 0x49              ;ce90  49          DATA 0x49 'I'
    .byte 0x20              ;ce91  20          DATA 0x20 ' '
    .byte 0x6a              ;ce92  6a          DATA 0x6a 'j'
    .byte 0x24              ;ce93  24          DATA 0x24 '$'
    .byte 0x72              ;ce94  72          DATA 0x72 'r'
    .byte 0x1c              ;ce95  1c          DATA 0x1c
    .byte 0x72              ;ce96  72          DATA 0x72 'r'
    .byte 0x1c              ;ce97  1c          DATA 0x1c
    .byte 0xa0              ;ce98  a0          DATA 0xa0
    .byte 0x0f              ;ce99  0f          DATA 0x0f
    .byte 0x08              ;ce9a  08          DATA 0x08

mem_ce9b:
    .byte 0x52              ;ce9b  52          DATA 0x52 'R'
    .byte 0x16              ;ce9c  16          DATA 0x16
    .byte 0x5a              ;ce9d  5a          DATA 0x5a 'Z'
    .byte 0x12              ;ce9e  12          DATA 0x12
    .byte 0x5a              ;ce9f  5a          DATA 0x5a 'Z'
    .byte 0x14              ;cea0  14          DATA 0x14
    .byte 0x5a              ;cea1  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cea2  10          DATA 0x10
    .byte 0x7b              ;cea3  7b          DATA 0x7b '{'
    .byte 0x0c              ;cea4  0c          DATA 0x0c
    .byte 0x6a              ;cea5  6a          DATA 0x6a 'j'
    .byte 0x08              ;cea6  08          DATA 0x08
    .byte 0x4b              ;cea7  4b          DATA 0x4b 'K'
    .byte 0xa6              ;cea8  a6          DATA 0xa6
    .byte 0x4b              ;cea9  4b          DATA 0x4b 'K'
    .byte 0xa0              ;ceaa  a0          DATA 0xa0
    .byte 0x80              ;ceab  80          DATA 0x80
    .byte 0x0f              ;ceac  0f          DATA 0x0f
    .byte 0x04              ;cead  04          DATA 0x04

mem_ceae:
    .byte 0x2c              ;ceae  2c          DATA 0x2c ','
    .byte 0x11              ;ceaf  11          DATA 0x11
    .byte 0x2c              ;ceb0  2c          DATA 0x2c ','
    .byte 0x11              ;ceb1  11          DATA 0x11
    .byte 0x28              ;ceb2  28          DATA 0x28 '('
    .byte 0x71              ;ceb3  71          DATA 0x71 'q'
    .byte 0x28              ;ceb4  28          DATA 0x28 '('
    .byte 0x71              ;ceb5  71          DATA 0x71 'q'
    .byte 0x8c              ;ceb6  8c          DATA 0x8c
    .byte 0x0f              ;ceb7  0f          DATA 0x0f
    .byte 0x0c              ;ceb8  0c          DATA 0x0c

mem_ceb9:
    .byte 0x18              ;ceb9  18          DATA 0x18
    .byte 0x52              ;ceba  52          DATA 0x52 'R'
    .byte 0x18              ;cebb  18          DATA 0x18
    .byte 0x52              ;cebc  52          DATA 0x52 'R'
    .byte 0x16              ;cebd  16          DATA 0x16
    .byte 0x32              ;cebe  32          DATA 0x32 '2'
    .byte 0x18              ;cebf  18          DATA 0x18
    .byte 0x02              ;cec0  02          DATA 0x02
    .byte 0x0a              ;cec1  0a          DATA 0x0a
    .byte 0x63              ;cec2  63          DATA 0x63 'c'
    .byte 0x0d              ;cec3  0d          DATA 0x0d
    .byte 0x54              ;cec4  54          DATA 0x54 'T'
    .byte 0x1d              ;cec5  1d          DATA 0x1d
    .byte 0x03              ;cec6  03          DATA 0x03
    .byte 0x1b              ;cec7  1b          DATA 0x1b
    .byte 0xb3              ;cec8  b3          DATA 0xb3
    .byte 0x7a              ;cec9  7a          DATA 0x7a 'z'
    .byte 0x20              ;ceca  20          DATA 0x20 ' '
    .byte 0x62              ;cecb  62          DATA 0x62 'b'
    .byte 0x24              ;cecc  24          DATA 0x24 '$'
    .byte 0x6a              ;cecd  6a          DATA 0x6a 'j'
    .byte 0x1c              ;cece  1c          DATA 0x1c
    .byte 0x6a              ;cecf  6a          DATA 0x6a 'j'
    .byte 0x1c              ;ced0  1c          DATA 0x1c
    .byte 0xa0              ;ced1  a0          DATA 0xa0
    .byte 0x0f              ;ced2  0f          DATA 0x0f
    .byte 0x08              ;ced3  08          DATA 0x08

mem_ced4:
    .byte 0x4a              ;ced4  4a          DATA 0x4a 'J'
    .byte 0x16              ;ced5  16          DATA 0x16
    .byte 0x52              ;ced6  52          DATA 0x52 'R'
    .byte 0x12              ;ced7  12          DATA 0x12
    .byte 0x52              ;ced8  52          DATA 0x52 'R'
    .byte 0x14              ;ced9  14          DATA 0x14
    .byte 0x5a              ;ceda  5a          DATA 0x5a 'Z'
    .byte 0x10              ;cedb  10          DATA 0x10
    .byte 0x73              ;cedc  73          DATA 0x73 's'
    .byte 0x0c              ;cedd  0c          DATA 0x0c
    .byte 0x62              ;cede  62          DATA 0x62 'b'
    .byte 0x08              ;cedf  08          DATA 0x08
    .byte 0x7c              ;cee0  7c          DATA 0x7c '|'
    .byte 0xa6              ;cee1  a6          DATA 0xa6
    .byte 0x7c              ;cee2  7c          DATA 0x7c '|'
    .byte 0xa0              ;cee3  a0          DATA 0xa0

mem_cee4:
;table of words used with table_get_word
    .byte 0x3c              ;cee4  3c          DATA 0x3c '<'    60 entries below:
    .word mem_ca73
    .word mem_caac
    .word mem_ca7e
    .word mem_cab7
    .word mem_ca99
    .word mem_cad2
    .word mem_cae5
    .word mem_cb1e
    .word mem_caf0
    .word mem_cb29
    .word mem_cb0b
    .word mem_cb44
    .word mem_cb57
    .word mem_cb90
    .word mem_cb62
    .word mem_cb9b
    .word mem_cb7d
    .word mem_cbb6
    .word mem_cbc9
    .word mem_cc02
    .word mem_cbd4
    .word mem_cc0d
    .word mem_cbef
    .word mem_cc28
    .word mem_cc3b
    .word mem_cc74
    .word mem_cc46
    .word mem_cc7f
    .word mem_cc61
    .word mem_cc9a
    .word mem_ccad
    .word mem_cce6
    .word mem_ccb8
    .word mem_ccf1
    .word mem_ccd3
    .word mem_cd0c
    .word mem_cd1f
    .word mem_cd58
    .word mem_cd2a
    .word mem_cd63
    .word mem_cd45
    .word mem_cd7e
    .word mem_cd91
    .word mem_cdca
    .word mem_cd9c
    .word mem_cdd5
    .word mem_cdb7
    .word mem_cdf0
    .word mem_ce03
    .word mem_ce3c
    .word mem_ce0e
    .word mem_ce47
    .word mem_ce29
    .word mem_ce62
    .word mem_ce75
    .word mem_ceae
    .word mem_ce80
    .word mem_ceb9
    .word mem_ce9b
    .word mem_ced4

mem_cf5d:
;table of bytes used with table_get_byte
    .byte 0x0a              ;cf5d  0a          DATA 0x0a    10 entries below:
    .byte 0x00              ;cf5e  00          DATA 0x00
    .byte 0x00              ;cf5f  00          DATA 0x00
    .byte 0x00              ;cf60  00          DATA 0x00
    .byte 0x00              ;cf61  00          DATA 0x00
    .byte 0xff              ;cf62  ff          DATA 0xff
    .byte 0x00              ;cf63  00          DATA 0x00
    .byte 0xf0              ;cf64  f0          DATA 0xf0
    .byte 0x00              ;cf65  00          DATA 0x00
    .byte 0xf0              ;cf66  f0          DATA 0xf0
    .byte 0xf0              ;cf67  f0          DATA 0xf0

mem_cf68:
    .byte 0x0a              ;cf68  0a          DATA 0x0a    10 entries below:
    .byte 0x00              ;cf69  00          DATA 0x00
    .byte 0x00              ;cf6a  00          DATA 0x00
    .byte 0x03              ;cf6b  03          DATA 0x03
    .byte 0x01              ;cf6c  01          DATA 0x01
    .byte 0x00              ;cf6d  00          DATA 0x00
    .byte 0x02              ;cf6e  02          DATA 0x02
    .byte 0x00              ;cf6f  00          DATA 0x00
    .byte 0x00              ;cf70  00          DATA 0x00
    .byte 0x00              ;cf71  00          DATA 0x00
    .byte 0x04              ;cf72  04          DATA 0x04
    .byte 0x00              ;cf73  00          DATA 0x00
    .byte 0x00              ;cf74  00          DATA 0x00
    .byte 0x08              ;cf75  08          DATA 0x08
    .byte 0x00              ;cf76  00          DATA 0x00
    .byte 0x00              ;cf77  00          DATA 0x00
    .byte 0x00              ;cf78  00          DATA 0x00
    .byte 0x00              ;cf79  00          DATA 0x00
    .byte 0x00              ;cf7a  00          DATA 0x00
    .byte 0x00              ;cf7b  00          DATA 0x00
    .byte 0x00              ;cf7c  00          DATA 0x00

mem_cf7d:
;table used with table_get_word
    .byte 0x72              ;cf7d  72          DATA 0x72 'r'    114 entries below:
    .word lab_924d
    .word lab_9294
    .word lab_9289
    .word lab_929f
    .word lab_92aa
    .word lab_92b8
    .word lab_92d8
    .word lab_92e3
    .word lab_92f5
    .word lab_92fd
    .word lab_9305
    .word lab_93f1
    .word lab_9407
    .word lab_934f
    .word lab_9376
    .word lab_9411
    .word lab_941c
    .word lab_9427
    .word lab_9432
    .word lab_943d
    .word lab_9448
    .word lab_9453
    .word lab_945e
    .word lab_9493
    .word lab_94b0
    .word lab_94bb
    .word lab_94c6
    .word lab_94eb
    .word lab_94f6
    .word lab_94fd
    .word lab_9530
    .word lab_953b
    .word lab_9546
    .word lab_9568
    .word lab_9583
    .word lab_958e
    .word lab_9599
    .word lab_95a4
    .word lab_95af
    .word lab_95de
    .word lab_95e9
    .word lab_95f4
    .word lab_95ff
    .word lab_9624
    .word lab_9649
    .word lab_9654
    .word lab_965f
    .word lab_9684
    .word lab_968f
    .word lab_969a
    .word lab_96a5
    .word lab_96bc
    .word lab_96d3
    .word lab_96ea
    .word lab_96fb
    .word lab_9706
    .word lab_9711
    .word lab_971c
    .word lab_9743
    .word lab_975c
    .word lab_97a0
    .word lab_97c5
    .word lab_97ea
    .word lab_99d7
    .word lab_9801
    .word lab_9826
    .word lab_9847
    .word lab_986c
    .word lab_9889
    .word lab_98aa
    .word lab_98c1
    .word lab_98cc
    .word lab_98ed
    .word lab_9904
    .word lab_990f
    .word lab_991a
    .word lab_9925
    .word lab_9930
    .word lab_993b
    .word lab_9946
    .word lab_9951
    .word lab_9972
    .word lab_9993
    .word lab_99aa
    .word lab_99c1
    .word lab_99cc
    .word lab_9b93
    .word lab_9bb4
    .word lab_9be9
    .word lab_9c1e
    .word lab_9c47
    .word lab_9c70
    .word lab_93bd
    .word lab_93db
    .word lab_99e9
    .word lab_99fb
    .word lab_9a0d
    .word lab_9a1e
    .word lab_9c70
    .word lab_a283
    .word lab_a2a4
    .word lab_a2bf
    .word lab_a2e6
    .word lab_a307
    .word lab_a322
    .word lab_a368
    .word lab_a389
    .word lab_a3a4
    .word lab_a3c2
    .word lab_a3d8
    .word lab_a3f9
    .word lab_a41a
    .word lab_a435
    .word lab_a453

mem_d062:
    .byte 0x0e              ;d062  0e          DATA 0x0e
    .byte 0x8f              ;d063  8f          DATA 0x8f
    .byte 0xd0              ;d064  d0          DATA 0xd0
    .byte 0x28              ;d065  28          DATA 0x28 '('
    .byte 0xff              ;d066  ff          DATA 0xff
    .byte 0x0d              ;d067  0d          DATA 0x0d
    .byte 0x23              ;d068  23          DATA 0x23 '#'
    .byte 0xff              ;d069  ff          DATA 0xff
    .byte 0x0d              ;d06a  0d          DATA 0x0d
    .byte 0x22              ;d06b  22          DATA 0x22 '"'
    .byte 0xff              ;d06c  ff          DATA 0xff
    .byte 0x01              ;d06d  01          DATA 0x01
    .byte 0x1e              ;d06e  1e          DATA 0x1e
    .byte 0x0a              ;d06f  0a          DATA 0x0a
    .byte 0x83              ;d070  83          DATA 0x83
    .byte 0x1f              ;d071  1f          DATA 0x1f
    .byte 0x0a              ;d072  0a          DATA 0x0a
    .byte 0x86              ;d073  86          DATA 0x86
    .byte 0x2c              ;d074  2c          DATA 0x2c ','
    .byte 0xff              ;d075  ff          DATA 0xff
    .byte 0x02              ;d076  02          DATA 0x02
    .byte 0x0d              ;d077  0d          DATA 0x0d
    .byte 0xff              ;d078  ff          DATA 0xff
    .byte 0x89              ;d079  89          DATA 0x89
    .byte 0x0e              ;d07a  0e          DATA 0x0e
    .byte 0xff              ;d07b  ff          DATA 0xff
    .byte 0x8b              ;d07c  8b          DATA 0x8b
    .byte 0x0f              ;d07d  0f          DATA 0x0f
    .byte 0xff              ;d07e  ff          DATA 0xff
    .byte 0x8d              ;d07f  8d          DATA 0x8d
    .byte 0x0d              ;d080  0d          DATA 0x0d
    .byte 0xff              ;d081  ff          DATA 0xff
    .byte 0x0a              ;d082  0a          DATA 0x0a
    .byte 0x2b              ;d083  2b          DATA 0x2b '+'
    .byte 0x0a              ;d084  0a          DATA 0x0a
    .byte 0x0b              ;d085  0b          DATA 0x0b
    .byte 0x26              ;d086  26          DATA 0x26 '&'
    .byte 0xff              ;d087  ff          DATA 0xff
    .byte 0x05              ;d088  05          DATA 0x05
    .byte 0x2f              ;d089  2f          DATA 0x2f '/'
    .byte 0xff              ;d08a  ff          DATA 0xff
    .byte 0x06              ;d08b  06          DATA 0x06
    .byte 0x0c              ;d08c  0c          DATA 0x0c
    .byte 0x02              ;d08d  02          DATA 0x02
    .byte 0x81              ;d08e  81          DATA 0x81
    .byte 0x0f              ;d08f  0f          DATA 0x0f
    .byte 0x41              ;d090  41          DATA 0x41 'A'
    .byte 0x00              ;d091  00          DATA 0x00
    .byte 0x21              ;d092  21          DATA 0x21 '!'
    .byte 0x0c              ;d093  0c          DATA 0x0c
    .byte 0x60              ;d094  60          DATA 0x60 '`'
    .byte 0x03              ;d095  03          DATA 0x03
    .byte 0xc6              ;d096  c6          DATA 0xc6
    .byte 0x03              ;d097  03          DATA 0x03
    .byte 0xa2              ;d098  a2          DATA 0xa2
    .byte 0x03              ;d099  03          DATA 0x03
    .byte 0x60              ;d09a  60          DATA 0x60 '`'
    .byte 0x04              ;d09b  04          DATA 0x04
    .byte 0xc6              ;d09c  c6          DATA 0xc6
    .byte 0x04              ;d09d  04          DATA 0x04
    .byte 0xa2              ;d09e  a2          DATA 0xa2
    .byte 0x04              ;d09f  04          DATA 0x04
    .byte 0x41              ;d0a0  41          DATA 0x41 'A'
    .byte 0x00              ;d0a1  00          DATA 0x00
    .byte 0x21              ;d0a2  21          DATA 0x21 '!'
    .byte 0x07              ;d0a3  07          DATA 0x07
    .byte 0x41              ;d0a4  41          DATA 0x41 'A'
    .byte 0x00              ;d0a5  00          DATA 0x00
    .byte 0x21              ;d0a6  21          DATA 0x21 '!'
    .byte 0x08              ;d0a7  08          DATA 0x08
    .byte 0x41              ;d0a8  41          DATA 0x41 'A'
    .byte 0x00              ;d0a9  00          DATA 0x00
    .byte 0x21              ;d0aa  21          DATA 0x21 '!'
    .byte 0x09              ;d0ab  09          DATA 0x09

mem_d0ac:
;table of bytes used with table_get_byte
    .byte 0x04              ;d0ac  04          DATA 0x04
    .byte 0x00              ;d0ad  00          DATA 0x00
    .byte 0x01              ;d0ae  01          DATA 0x01
    .byte 0x02              ;d0af  02          DATA 0x02
    .byte 0x03              ;d0b0  03          DATA 0x03

;XXX TODO CD commands? this is a guess
mem_d0b1:
;table of bytes used with table_get_byte
    .byte 0x04              ;d0b1  04          DATA 0x04        4 entries below:
    .byte 0xff              ;d0b2  ff          DATA 0xff
    .byte 0x07              ;d0b3  07          DATA 0x07
    .byte 0x05              ;d0b4  05          DATA 0x05
    .byte 0x06              ;d0b5  06          DATA 0x06

mem_d0b6_sound_adjs:
;Locations of sound adjustment bytes in RAM
;table of words used with table_get_word
    .byte 0x05              ;d0b6  05          DATA 0x05        5 entries below:
    .word mem_f259_bass ;BASS
    .word mem_f25a_mid  ;MID
    .word mem_f25b_treb ;TREB
    .word mem_f257_fade ;FADE
    .word mem_f258_bal  ;BAL

mem_d0c1_sound_vals:
;table of bytes used with table_get_byte
;indexed by mem_fc9e, values are compared to snd_msg_idx
    .byte 0x05              ;d0c1  05          DATA 0x05        5 entries below:
    .byte 0x80|0x02   ;0x02 = BASS
    .byte 0x80|0x03   ;0x03 = MID
    .byte 0x80|0x04   ;0x04 = TREB
    .byte 0x80|0x00   ;0x00 = FADE
    .byte 0x80|0x01   ;0x01 = BAL

mem_d0c7:
;table of words used with table_get_word
    .byte 0x02              ;d0c7  02         DATA 0x02         2 entries below:
    .word lab_a547_ret
    .word lab_a95e

mem_d0cc:
;table of words used with table_get_word
    .byte 0x0e              ;d0cc  0e          DATA 0x0e        14 entries below:
    .word lab_a547_ret
    .word lab_aa99
    .word lab_a548
    .word lab_a649
    .word lab_a653
    .word lab_a6fc
    .word sub_a6d2
    .word lab_a89d
    .word lab_a8af
    .word lab_a8a6
    .word lab_a878
    .word lab_a8b8
    .word lab_a839
    .word lab_ab33

mem_d0e9_analogs:
;Table of analog channels used by read_3_analogs
    .byte 0x03              ;d0e9  03          DATA 0x03    3 groups of 4 bytes below:

    ;Analog reading stored in mem_fca2_ani_t30 (Terminal 30: Constant B+)
    .byte 127               ;d0ea  7f          DATA 0x7f    HL+0   127 = 12.7 V
    .byte 0x01              ;d0eb  01          DATA 0x01    HL+1  0x01 = P91/ANI10 (Terminal 30)
    .byte 0x01              ;d0ec  01          DATA 0x01    HL+2
    .byte 0xff              ;d0ed  ff          DATA 0xff    HL+3

    ;Analog reading stored in mem_fca3_ani_t58b (Terminal 58b: Illumination)
    .byte 127               ;d0ee  7f          DATA 0x7f    HL+0   127 = 12.7 V
    .byte 0x02              ;d0ef  02          DATA 0x02    HL+1  0x02 = P92/ANI20 (Illumination)
    .byte 0x03              ;d0f0  03          DATA 0x03    HL+2
    .byte 0xff              ;d0f1  ff          DATA 0xff    HL+3

    ;Analog reading stored in mem_fca4_ani (???)
    .byte 127               ;d0f2  7f          DATA 0x7f    HL+0   127 = 12.7 V
    .byte 0x05              ;d0f3  05          DATA 0x05    HL+1  0x05 = P95/ANI50
    .byte 0x03              ;d0f4  03          DATA 0x03    HL+2
    .byte 0xff              ;d0f5  ff          DATA 0xff    HL+3

lab_d0f6:
    bt rb0_b.7,lab_d0fe     ;d0f6  fc fb 05
    bt rb0_b.6,lab_d102     ;d0f9  ec fb 06
    br lab_d10e             ;d0fc  fa 10

lab_d0fe:
    mov a,#0x80             ;d0fe  a1 80
    callt [0x0042]          ;d100  c3           Calls sub_09b9
    ret                     ;d101  af

lab_d102:
    mov a,#0xe0             ;d102  a1 e0
    callt [0x0042]          ;d104  c3           Calls sub_09b9
    clr1 pm3.6              ;d105  71 6b 23
    call !sub_d8fd          ;d108  9a fd d8
    bz lab_d10e             ;d10b  ad 01
    brk                     ;d10d  bf           Force cold start via badisr_0d75

lab_d10e:
    mov a,#0x03             ;d10e  a1 03
    mov !mem_fb17,a         ;d110  9e 17 fb
    mov a,#0x17             ;d113  a1 17
    callt [0x0046]          ;d115  c7           Calls sub_096c
    call !sub_d164          ;d116  9a 64 d1

    movw hl,#mem_b790+1     ;d119  16 91 b7     Table appears to be CDC TX related
    mov a,mem_fe45          ;d11c  f0 45        Index for mem_b790 lookup (CDC TX related)
    mov b,a                 ;d11e  73
    br lab_d147             ;d11f  fa 26        Calls table_get_word, branches to word

lab_d121:
    call !sub_d164          ;d121  9a 64 d1
    movw de,#mem_b6c2       ;d124  14 c2 b6
    mov a,mem_fe44          ;d127  f0 44
    mov b,a                 ;d129  73
    movw hl,#mem_af75_patterns ;d12a  16 75 af     HL = pointer to table of bit patterns
    mov a,[hl+b]            ;d12d  ab
    call !sub_5c64          ;d12e  9a 64 5c
    bf mem_fe5d.7,lab_d137  ;d131  31 73 5d 02
    mov a,#0xff             ;d135  a1 ff

lab_d137:
    bz lab_d152             ;d137  ad 19
    cmp a,#0xff             ;d139  4d ff
    bz lab_d152             ;d13b  ad 15
    call !sub_d950          ;d13d  9a 50 d9
    clr1 mem_fe47.1         ;d140  1b 47
    movw hl,#mem_b755+1     ;d142  16 56 b7
    br lab_d147             ;d145  fa 00        XXX useless branch; could just fall through

lab_d147:
    callf !table_get_word   ;d147  4c 48        Load DE with word at position B in table [HL]
    bc sub_d16e             ;d149  8d 23        Branch if table lookup failed
    movw ax,#lab_d152       ;d14b  10 52 d1
    push ax                 ;d14e  b1
    movw ax,de              ;d14f  c4
    br ax                   ;d150  31 98

lab_d152:
    bf mem_fe68.3,lab_d15b  ;d152  31 33 68 05
    mov a,#0x02             ;d156  a1 02
    call !sub_3dbd          ;d158  9a bd 3d

lab_d15b:
    call !sub_da4d          ;d15b  9a 4d da
    call !sub_d3c4          ;d15e  9a c4 d3
    br !sub_d8fd            ;d161  9b fd d8

sub_d164:
    cmp mem_fe44,#0x09      ;d164  c8 44 09
    bnc sub_d16e            ;d167  9d 05
    call !sub_d8fd          ;d169  9a fd d8
    bz lab_d189_ret         ;d16c  ad 1b

sub_d16e:
    mov mem_fe44,#0x04      ;d16e  11 44 04
    mov mem_fe45,#0x00      ;d171  11 45 00       Index for mem_b790 lookup (CDC TX related)
    mov mem_fe46,#0x00      ;d174  11 46 00
    mov mem_fe47,#0x00      ;d177  11 47 00
    clr1 mem_fe6d.5         ;d17a  5b 6d
    clr1 mem_fe6e.3         ;d17c  3b 6e
    mov a,#0x0f             ;d17e  a1 0f
    mov !mem_fb3c,a         ;d180  9e 3c fb
    call !sub_dadd          ;d183  9a dd da
    call !sub_d8fd          ;d186  9a fd d8

lab_d189_ret:
    ret                     ;d189  af

;CDC TX related
lab_d18a:
    bt mem_fe68.3,lab_d1b7_ret;d18a  bc 68 2a
    call !sub_a74b            ;d18d  9a 4b a7
    cmp mem_fe49,#0x20        ;d190  c8 49 20
    bnz lab_d19b              ;d193  bd 06
    mov x,#0x01               ;d195  a0 01
    mov a,#cdc_enable         ;d197  a1 27        A = "Enable" (sent after forward or reverse)
    br lab_d1c9_cdc_tx        ;d199  fa 2e        Branch to call CDC TX related and return

lab_d19b:
    mov x,#0x01               ;d19b  a0 01
    mov a,!mem_fc7f           ;d19d  8e 7f fc
    mov mem_fe45,#0x03        ;d1a0  11 45 03     Index for mem_b790 lookup (CDC TX related)
    br lab_d1c9_cdc_tx        ;d1a3  fa 24        Branch to call CDC TX related and return

;CDC TX related
lab_d1a5:
    bt mem_fe68.3,lab_d1b7_ret;d1a5  bc 68 0f
    mov x,#0x01               ;d1a8  a0 01
    mov a,#cdc_load_cd        ;d1aa  a1 1c        A = "Load CD" (sent after a CD number 1-6)
    mov mem_fe45,#0x02        ;d1ac  11 45 02     Index for mem_b790 lookup (CDC TX related)
    br lab_d1c9_cdc_tx        ;d1af  fa 18        Branch to call CDC TX related and return

lab_d1b1:
    bt mem_fe68.3,lab_d1b7_ret;d1b1  bc 68 03
    mov mem_fe45,#0x00        ;d1b4  11 45 00     Index for mem_b790 lookup (CDC TX related)

lab_d1b7_ret:
    ret                     ;d1b7  af

lab_d1b8_cdc_tx:
    push ax                 ;d1b8  b1
    call !sub_a74b          ;d1b9  9a 4b a7
    pop ax                  ;d1bc  b0
    bc lab_d1cc_ret         ;d1bd  8d 0d        Branch if failed
    ;Fall through

sub_d1bf_cdc_tx:
    cmp mem_fe45,#0x02      ;d1bf  c8 45 02     Index for mem_b790 lookup (CDC TX related)
    bnc lab_d1cc_ret        ;d1c2  9d 08

    mov x,#0x01             ;d1c4  a0 01
    mov mem_fe45,#0x01      ;d1c6  11 45 01     Index for mem_b790 lookup (CDC TX related)

lab_d1c9_cdc_tx:
    call !sub_5a85_cdc_tx   ;d1c9  9a 85 5a     CDC TX related

lab_d1cc_ret:
    ret                     ;d1cc  af

lab_d1cd_ret:
    ret                     ;d1cd  af

lab_d1ce_cd1:
    mov c,#0x01             ;d1ce  a2 01        C = CD 1
    mov x,#cdc_cd1          ;d1d0  a0 30        X = CDC command for CD 1
    br lab_d1f0             ;d1d2  fa 1c

lab_d1d4_cd2:
    mov c,#0x02             ;d1d4  a2 02        C = CD 2
    mov x,#cdc_cd2          ;d1d6  a0 31        X = CDC command for CD 2
    br lab_d1f0             ;d1d8  fa 16

lab_d1da_cd3:
    mov c,#0x03             ;d1da  a2 03        C = CD 3
    mov x,#cdc_cd3          ;d1dc  a0 32        X = CDC command for CD 3
    br lab_d1f0             ;d1de  fa 10

lab_d1e0_cd4:
    mov c,#0x04             ;d1e0  a2 04        C = CD 4
    mov x,#cdc_cd4          ;d1e2  a0 33        X = CDC command for CD 4
    br lab_d1f0             ;d1e4  fa 0a

lab_d1e6_cd5:
    mov c,#0x05             ;d1e6  a2 05        C = CD 5
    mov x,#cdc_cd5          ;d1e8  a0 34        X = CDC command for CD 5
    br lab_d1f0             ;d1ea  fa 04

lab_d1ec_cd6:
    mov c,#0x06             ;d1ec  a2 06        C = CD 6
    mov x,#cdc_cd6          ;d1ee  a0 35        X = CDC command for CD 6

;Branched to with:
;  C = CD number 1-6
;  X = corresponding CDC command for CD 1-6
lab_d1f0:
    cmp mem_fe44,#0x00      ;d1f0  c8 44 00
    bz lab_d273_ret         ;d1f3  ad 7e
    cmp mem_fe44,#0x02      ;d1f5  c8 44 02
    bz lab_d273_ret         ;d1f8  ad 79
    cmp mem_fe44,#0x03      ;d1fa  c8 44 03
    bz lab_d273_ret         ;d1fd  ad 74
    call !sub_dadd          ;d1ff  9a dd da
    mov a,#0x00             ;d202  a1 00
    mov !mem_fb3d,a         ;d204  9e 3d fb
    clr1 mem_fe46.0         ;d207  0b 46
    clr1 mem_fe47.7         ;d209  7b 47
    clr1 mem_fe46.1         ;d20b  1b 46

    mov a,!mem_fc7b_cd_cd2  ;d20d  8e 7b fc
    cmp a,c                 ;d210  61 4a        Compare to requested CD 1-6
    bz lab_d22f_same_cd     ;d212  ad 1b

    movw hl,#mem_fc48       ;d214  16 48 fc
    mov a,[hl+c]            ;d217  aa
    bf a.6,lab_d24b         ;d218  31 6f 30

lab_d21b:
    clr1 mem_fe47.5         ;d21b  5b 47
    mov a,c                 ;d21d  62
    mov !mem_fc7b_cd_cd2,a  ;d21e  9e 7b fc
    mov a,x                 ;d221  60
    mov !mem_fc7f,a         ;d222  9e 7f fc
    set1 mem_fe46.2         ;d225  2a 46
    mov a,#0x1e             ;d227  a1 1e
    mov !mem_fb3f,a         ;d229  9e 3f fb
    br !sub_db8a            ;d22c  9b 8a db

lab_d22f_same_cd:
    mov a,#0xff                 ;d22f  a1 ff
    mov !tmp_msg_idx,a          ;d231  9e a6 f1   f Writes " DIAG  "

    call !sub_7697_snd_cd       ;d234  9a 97 76   Unknown; snd_msg_idx and CD related
    call !sub_dc2f              ;d237  9a 2f dc
    call !sub_d345              ;d23a  9a 45 d3
    bt mem_fe6e.0,lab_d273_ret  ;d23d  8c 6e 33
    cmp mem_fe44,#0x06          ;d240  c8 44 06
    bz lab_d273_ret             ;d243  ad 2e
    mov mem_fe44,#0x06          ;d245  11 44 06
    br !lab_d376_cdcenable_2    ;d248  9b 76 d3

lab_d24b:
    mov a,c                 ;d24b  62
    mov !mem_fc7d_upd_cd3,a ;d24c  9e 7d fc
    mov a,#0x19             ;d24f  a1 19
    mov !mem_fb3d,a         ;d251  9e 3d fb
    set1 mem_fe80.0         ;d254  0a 80
    mov a,#0xff             ;d256  a1 ff
    mov !mem_f1ad,a         ;d258  9e ad f1

    mov a,#0x08             ;d25b  a1 08        8 Writes "CD   NO CD "
    mov !tmp_msg_idx,a      ;d25d  9e a6 f1

    mov a,#29               ;d260  a1 1d        A = 2.9 seconds
    mov !msg_countdown,a    ;d262  9e 2e fb

    call !sub_d345          ;d265  9a 45 d3
    cmp mem_fe44,#0x05      ;d268  c8 44 05
    bz lab_d273_ret         ;d26b  ad 06
    mov mem_fe44,#0x05      ;d26d  11 44 05
    br !lab_d36c_cdc_0x0c   ;d270  9b 6c d3

lab_d273_ret:
    ret                     ;d273  af

lab_d274:
    mov a,!mem_f1e9         ;d274  8e e9 f1
    bt a.0,lab_d27b         ;d277  31 0e 01
    ret                     ;d27a  af

lab_d27b:
    clr1 mem_fe46.0         ;d27b  0b 46
    clr1 mem_fe47.7         ;d27d  7b 47
    call !sub_da81          ;d27f  9a 81 da
    call !sub_dc2f          ;d282  9a 2f dc
    set1 mem_fe46.7         ;d285  7a 46
    mov a,!mem_fc6c         ;d287  8e 6c fc
    inc a                   ;d28a  41
    mov !mem_fc6c,a         ;d28b  9e 6c fc
    ret                     ;d28e  af

lab_d28f:
    mov a,!mem_f1e9         ;d28f  8e e9 f1
    bt a.0,lab_d296         ;d292  31 0e 01
    ret                     ;d295  af

lab_d296:
    clr1 mem_fe46.0         ;d296  0b 46
    clr1 mem_fe47.7         ;d298  7b 47
    call !sub_da81          ;d29a  9a 81 da
    call !sub_dc2f          ;d29d  9a 2f dc
    clr1 mem_fe46.7         ;d2a0  7b 46
    mov a,!mem_fc6c         ;d2a2  8e 6c fc
    inc a                   ;d2a5  41
    mov !mem_fc6c,a         ;d2a6  9e 6c fc
    ret                     ;d2a9  af

lab_d2aa:
    mov a,!mem_f1e9         ;d2aa  8e e9 f1
    bt a.0,lab_d2b8         ;d2ad  31 0e 08
    ret                     ;d2b0  af

lab_d2b1:
    mov a,!mem_f1e9         ;d2b1  8e e9 f1
    bf a.0,lab_d2b8         ;d2b4  31 0f 01
    ret                     ;d2b7  af

lab_d2b8:
    call !sub_dadd          ;d2b8  9a dd da
    clr1 mem_fe47.7         ;d2bb  7b 47
    clr1 mem_fe46.0         ;d2bd  0b 46
    call !sub_dae3          ;d2bf  9a e3 da
    set1 mem_fe46.0         ;d2c2  0a 46
    mov mem_fe44,#0x07      ;d2c4  11 44 07
    ret                     ;d2c7  af

lab_d2c8:
    mov a,!mem_f1e9         ;d2c8  8e e9 f1
    bt a.0,lab_d2d6         ;d2cb  31 0e 08
    ret                     ;d2ce  af

lab_d2cf:
    mov a,!mem_f1e9         ;d2cf  8e e9 f1
    bf a.0,lab_d2d6         ;d2d2  31 0f 01
    ret                     ;d2d5  af

lab_d2d6:
    call !sub_dadd          ;d2d6  9a dd da
    clr1 mem_fe46.0         ;d2d9  0b 46
    clr1 mem_fe47.7         ;d2db  7b 47
    call !sub_dae3          ;d2dd  9a e3 da
    set1 mem_fe47.7         ;d2e0  7a 47
    mov mem_fe44,#0x08      ;d2e2  11 44 08
    ret                     ;d2e5  af

lab_d2e6:
    mov a,!mem_f1e9         ;d2e6  8e e9 f1
    bt a.0,lab_d2ee         ;d2e9  31 0e 02
    br lab_d27b             ;d2ec  fa 8d

lab_d2ee:
    clr1 mem_fe46.0         ;d2ee  0b 46
    cmp mem_fe44,#0x07      ;d2f0  c8 44 07
    bz lab_d2f6             ;d2f3  ad 01
    ret                     ;d2f5  af

lab_d2f6:
    mov mem_fe44,#0x06      ;d2f6  11 44 06
    mov a,#0xc8             ;d2f9  a1 c8
    mov !mem_f1ad,a         ;d2fb  9e ad f1
    set1 mem_fe6e.3         ;d2fe  3a 6e
    ret                     ;d300  af

lab_d301:
    mov a,!mem_f1e9         ;d301  8e e9 f1
    bt a.0,lab_d309         ;d304  31 0e 02
    br lab_d296             ;d307  fa 8d

lab_d309:
    clr1 mem_fe47.7         ;d309  7b 47
    cmp mem_fe44,#0x08      ;d30b  c8 44 08
    bz lab_d311             ;d30e  ad 01
    ret                     ;d310  af

lab_d311:
    mov mem_fe44,#0x06      ;d311  11 44 06
    mov a,#0xc9             ;d314  a1 c9
    mov !mem_f1ad,a         ;d316  9e ad f1
    set1 mem_fe6e.3         ;d319  3a 6e
    mov a,#0x00             ;d31b  a1 00
    mov !mem_fb3e,a         ;d31d  9e 3e fb
    ret                     ;d320  af

sub_d321:
    call !sub_dadd          ;d321  9a dd da
    cmp mem_fe44,#0x05      ;d324  c8 44 05
    bz lab_d344_ret         ;d327  ad 1b

    mov a,!mem_fc79         ;d329  8e 79 fc
    cmp a,#0x00             ;d32c  4d 00
    bnz lab_d344_ret        ;d32e  bd 14

    call !sub_dc2f          ;d330  9a 2f dc
    mov a,!mem_f255         ;d333  8e 55 f2
    and a,#0x01             ;d336  5d 01
    bnz lab_d33f            ;d338  bd 05

    mov a,#0x06             ;d33a  a1 06
    br !sub_d1bf_cdc_tx     ;d33c  9b bf d1     CDC TX related

lab_d33f:
    mov a,#0x07             ;d33f  a1 07
    br !sub_d1bf_cdc_tx     ;d341  9b bf d1     CDC TX related

lab_d344_ret:
    ret                     ;d344  af

sub_d345:
    bf mem_fe6e.0,lab_d34e_ret  ;d345  31 03 6e 05
    set1 mem_fe47.1         ;d349  1a 47
    br !sub_d34f            ;d34b  9b 4f d3

lab_d34e_ret:
    ret                     ;d34e  af

sub_d34f:
    call !sub_dadd          ;d34f  9a dd da
    cmp mem_fe44,#0x05      ;d352  c8 44 05
    bz lab_d366_ret         ;d355  ad 0f

    mov a,!mem_fc79         ;d357  8e 79 fc
    cmp a,#0x00             ;d35a  4d 00
    bnz lab_d366_ret        ;d35c  bd 08

    call !sub_dc2f          ;d35e  9a 2f dc

    mov a,#cdc_scan         ;d361  a1 05        A = "Scan"
    br !sub_d1bf_cdc_tx     ;d363  9b bf d1     CDC TX related

lab_d366_ret:
    ret                     ;d366  af

lab_d367_cdcradio:
    mov a,#cdc_radio        ;d367  a1 08        A = "Radio" (sent constantly in radio mode)
    br !sub_d1bf_cdc_tx     ;d369  9b bf d1     CDC TX related

lab_d36c_cdc_0x0c:
    mov a,#cdc_unknown_0c   ;d36c  a1 0c        TODO what CDC command is this?
    br !lab_d1b8_cdc_tx     ;d36e  9b b8 d1     CDC TX related

lab_d371_cdcenable_1:
    mov a,#cdc_enable       ;d371  a1 27        A = "Enable" (sent after forward or reverse)
    br !sub_d1bf_cdc_tx     ;d373  9b bf d1     CDC TX related

lab_d376_cdcenable_2:
    mov a,#cdc_enable       ;d376  a1 27        A = "Enable" (sent after forward or reverse)
    br !lab_d1b8_cdc_tx     ;d378  9b b8 d1     CDC TX related

lab_d37b:
    mov a,#0x00             ;d37b  a1 00
    mov !mem_f1ad,a         ;d37d  9e ad f1
    cmp mem_fe30,#0x03      ;d380  c8 30 03
    bz lab_d388             ;d383  ad 03
    br !lab_d40a            ;d385  9b 0a d4

lab_d388:
    cmp mem_fe49,#0xff      ;d388  c8 49 ff
    bz lab_d39a             ;d38b  ad 0d
    bt mem_fe6d.7,lab_d39a  ;d38d  fc 6d 0a
    call !sub_d90f          ;d390  9a 0f d9
    bf mem_fe46.5,lab_d39a  ;d393  31 53 46 03
    br !lab_d597_no_disc    ;d397  9b 97 d5

lab_d39a:
    br lab_d3d5             ;d39a  fa 39

lab_d39c:
    mov a,#0x00             ;d39c  a1 00
    mov !mem_fb3d,a         ;d39e  9e 3d fb
    br lab_d367_cdcradio    ;d3a1  fa c4

lab_d3a3:
    clr1 mem_fe6d.4         ;d3a3  4b 6d
    bt mem_fe46.6,lab_d3af  ;d3a5  ec 46 07
    bf mem_fe6e.0,lab_d3ae_ret  ;d3a8  31 03 6e 02
    br sub_d34f             ;d3ac  fa a1

lab_d3ae_ret:
    ret                     ;d3ae  af

lab_d3af:
    br lab_d3d5             ;d3af  fa 24

lab_d3b1:
    mov a,#0x00             ;d3b1  a1 00
    mov !mem_fb2c,a         ;d3b3  9e 2c fb
    xch a,!mem_fb3d         ;d3b6  ce 3d fb
    cmp a,#0x00             ;d3b9  4d 00
    bz lab_d3c3_ret             ;d3bb  ad 06
    bf mem_fe46.6,lab_d3c3_ret  ;d3bd  31 63 46 02
    set1 mem_fe6d.4         ;d3c1  4a 6d

lab_d3c3_ret:
    ret                     ;d3c3  af

sub_d3c4:
    bf mem_fe46.3,lab_d3ea  ;d3c4  31 33 46 22
    clr1 mem_fe46.3         ;d3c8  3b 46
    bt mem_fe46.6,lab_d3eb  ;d3ca  ec 46 1e
    cmp mem_fe45,#0x00      ;d3cd  c8 45 00     Index for mem_b790 lookup (CDC TX related)
    bnz lab_d3ea            ;d3d0  bd 18
    bt mem_fe7d.2,lab_d3ea  ;d3d2  ac 7d 15

lab_d3d5:
    cmp mem_fe30,#0x03      ;d3d5  c8 30 03
    bnz lab_d40a            ;d3d8  bd 30
    btclr mem_fe6d.4,lab_d3e8 ;d3da  31 41 6d 0a
    bf mem_fe5e.0,lab_d3e5  ;d3de  31 03 5e 03
    call !sub_d345          ;d3e2  9a 45 d3

lab_d3e5:
    br !lab_d474            ;d3e5  9b 74 d4

lab_d3e8:
    set1 mem_fe7f.7         ;d3e8  7a 7f

lab_d3ea:
    ret                     ;d3ea  af

lab_d3eb:
    call !sub_a74b          ;d3eb  9a 4b a7
    mov a,!mem_fb3d         ;d3ee  8e 3d fb
    cmp a,#0x00             ;d3f1  4d 00
    bnz lab_d409            ;d3f3  bd 14
    cmp mem_fe30,#0x03      ;d3f5  c8 30 03
    bnz lab_d407            ;d3f8  bd 0d
    bt mem_fe7f.7,lab_d409  ;d3fa  fc 7f 0c
    set1 mem_fe7f.7         ;d3fd  7a 7f
    mov a,#0x00             ;d3ff  a1 00
    mov !mem_fb2c,a         ;d401  9e 2c fb
    br !lab_d367_cdcradio   ;d404  9b 67 d3

lab_d407:
    clr1 mem_fe46.6         ;d407  6b 46

lab_d409:
    ret                     ;d409  af

lab_d40a:
    call !sub_dadd          ;d40a  9a dd da
    call !sub_d9e3          ;d40d  9a e3 d9
    clr1 mem_fe46.1         ;d410  1b 46
    cmp mem_fe49,#0xff      ;d412  c8 49 ff
    bz lab_d45b             ;d415  ad 44
    cmp mem_fe49,#0x70      ;d417  c8 49 70
    bz lab_d44d             ;d41a  ad 31
    cmp mem_fe49,#0xa0      ;d41c  c8 49 a0
    bz lab_d43b             ;d41f  ad 1a
    cmp mem_fe49,#0xb0      ;d421  c8 49 b0
    bz lab_d43b             ;d424  ad 15
    mov mem_fe44,#0x04      ;d426  11 44 04
    cmp mem_fe49,#0x20      ;d429  c8 49 20
    bz lab_d438             ;d42c  ad 0a
    cmp mem_fe49,#0x30      ;d42e  c8 49 30
    bz lab_d438             ;d431  ad 05
    cmp mem_fe49,#0x40      ;d433  c8 49 40
    bnz lab_d45b            ;d436  bd 23

lab_d438:
    br !lab_d367_cdcradio   ;d438  9b 67 d3

lab_d43b:
    clr1 mem_fe46.5         ;d43b  5b 46
    call !sub_d950          ;d43d  9a 50 d9
    set1 mem_fe6d.7         ;d440  7a 6d
    mov mem_fe44,#0x02      ;d442  11 44 02
    bt mem_fe6d.6,lab_d45b  ;d445  ec 6d 13
    set1 mem_fe6d.6         ;d448  6a 6d
    set1 mem_fe7f.7         ;d44a  7a 7f
    ret                     ;d44c  af

lab_d44d:
    clr1 mem_fe6d.6         ;d44d  6b 6d
    mov mem_fe44,#0x04      ;d44f  11 44 04
    call !sub_d90f          ;d452  9a 0f d9
    bf mem_fe46.5,lab_d45b  ;d455  31 53 46 02
    set1 mem_fe7f.7         ;d459  7a 7f

lab_d45b:
    ret                     ;d45b  af

lab_d45c:
    call !sub_a74b          ;d45c  9a 4b a7
    mov a,!mem_fb3d         ;d45f  8e 3d fb
    cmp a,#0x00             ;d462  4d 00
    bnz lab_d46c            ;d464  bd 06
    mov mem_fe44,#0x06      ;d466  11 44 06
    br !lab_d376_cdcenable_2;d469  9b 76 d3

lab_d46c:
    cmp mem_fe49,#0x20      ;d46c  c8 49 20
    bz lab_d45b             ;d46f  ad ea
    br !lab_d36c_cdc_0x0c   ;d471  9b 6c d3

lab_d474:
    cmp mem_fe49,#0xff      ;d474  c8 49 ff
    bnz lab_d47c            ;d477  bd 03
    br !lab_d583_no_changer ;d479  9b 83 d5

lab_d47c:
    bf mem_fe6d.7,lab_d487  ;d47c  31 73 6d 07
    cmp mem_fe49,#0x30      ;d480  c8 49 30
    bz lab_d4cc             ;d483  ad 47
    br lab_d4d2             ;d485  fa 4b

lab_d487:
    cmp mem_fe49,#0xb0      ;d487  c8 49 b0
    bz lab_d4cf             ;d48a  ad 43
    cmp mem_fe49,#0xa0      ;d48c  c8 49 a0
    bz lab_d4cf             ;d48f  ad 3e
    bf mem_fe47.4,lab_d49f  ;d491  31 43 47 0a
    call !sub_d90f          ;d495  9a 0f d9
    bf mem_fe46.5,lab_d49f  ;d498  31 53 46 03
    br !lab_d597_no_disc    ;d49c  9b 97 d5

lab_d49f:
    cmp mem_fe44,#0x05      ;d49f  c8 44 05
    bz lab_d45c             ;d4a2  ad b8
    cmp mem_fe49,#0x70      ;d4a4  c8 49 70
    bnz lab_d4ab            ;d4a7  bd 02
    br lab_d517             ;d4a9  fa 6c

lab_d4ab:
    cmp mem_fe44,#0x01      ;d4ab  c8 44 01
    bnz lab_d4b3            ;d4ae  bd 03
    br !lab_d534            ;d4b0  9b 34 d5

lab_d4b3:
    cmp mem_fe49,#0x00      ;d4b3  c8 49 00
    bz lab_d4f9             ;d4b6  ad 41
    cmp mem_fe49,#0x90      ;d4b8  c8 49 90
    bnz lab_d4cc            ;d4bb  bd 0f
    cmp mem_fe44,#0x07      ;d4bd  c8 44 07
    bz lab_d4cc             ;d4c0  ad 0a
    cmp mem_fe44,#0x08      ;d4c2  c8 44 08
    bz lab_d4cc             ;d4c5  ad 05
    cmp mem_fe44,#0x06      ;d4c7  c8 44 06
    bnz lab_d4f9            ;d4ca  bd 2d

lab_d4cc:
    br !lab_d5ce            ;d4cc  9b ce d5

lab_d4cf:
    br !lab_d563            ;d4cf  9b 63 d5

lab_d4d2:
    cmp mem_fe49,#0xb0      ;d4d2  c8 49 b0
    bz lab_d4cf             ;d4d5  ad f8
    cmp mem_fe49,#0xa0      ;d4d7  c8 49 a0
    bz lab_d4cf             ;d4da  ad f3
    bf mem_fe46.5,lab_d4e3  ;d4dc  31 53 46 03
    br !lab_d597_no_disc    ;d4e0  9b 97 d5

lab_d4e3:
    cmp mem_fe49,#0x90      ;d4e3  c8 49 90
    bz lab_d4f9             ;d4e6  ad 11
    cmp mem_fe49,#0x10      ;d4e8  c8 49 10
    bz lab_d4f9             ;d4eb  ad 0c
    clr1 mem_fe46.5         ;d4ed  5b 46
    cmp mem_fe49,#0x50      ;d4ef  c8 49 50
    bz lab_d517             ;d4f2  ad 23
    cmp mem_fe49,#0xc0      ;d4f4  c8 49 c0
    bz lab_d517             ;d4f7  ad 1e

lab_d4f9:
    bf mem_fe6d.7,lab_d517  ;d4f9  31 73 6d 1a
    call !sub_d9b3          ;d4fd  9a b3 d9
    bc lab_d517             ;d500  8d 15
    cmp mem_fe44,#0x01      ;d502  c8 44 01
    bz lab_d54e             ;d505  ad 47
    mov mem_fe44,#0x01      ;d507  11 44 01
    mov a,#0x8b             ;d50a  a1 8b
    mov !mem_f1ad,a         ;d50c  9e ad f1

lab_d50f:
    mov a,#0x06             ;d50f  a1 06
    mov !mem_fb3e,a         ;d511  9e 3e fb
    br !lab_d376_cdcenable_2;d514  9b 76 d3

lab_d517:
    clr1 mem_fe6d.7         ;d517  7b 6d
    cmp mem_fe45,#0x00      ;d519  c8 45 00     Index for mem_b790 lookup (CDC TX related)
    bz lab_d51f             ;d51c  ad 01
    ret                     ;d51e  af

lab_d51f:
    mov a,#0x00             ;d51f  a1 00
    mov !mem_fb3d,a         ;d521  9e 3d fb
    cmp mem_fe44,#0x01      ;d524  c8 44 01
    bz lab_d54e             ;d527  ad 25
    mov mem_fe44,#0x06      ;d529  11 44 06
    set1 mem_fe47.3         ;d52c  3a 47
    call !sub_dba7          ;d52e  9a a7 db
    br !lab_d376_cdcenable_2;d531  9b 76 d3

lab_d534:
    cmp mem_fe49,#0xb0      ;d534  c8 49 b0
    bz lab_d563             ;d537  ad 2a
    cmp mem_fe49,#0xa0      ;d539  c8 49 a0
    bz lab_d563             ;d53c  ad 25
    bf mem_fe46.5,lab_d544  ;d53e  31 53 46 02
    br lab_d597_no_disc     ;d542  fa 53

lab_d544:
    cmp mem_fe49,#0x30      ;d544  c8 49 30
    bz lab_d55b             ;d547  ad 12
    cmp mem_fe49,#0x50      ;d549  c8 49 50
    bz lab_d55b             ;d54c  ad 0d

lab_d54e:
    mov a,#0x8b             ;d54e  a1 8b
    mov !mem_f1ad,a         ;d550  9e ad f1
    mov a,!mem_fb3e         ;d553  8e 3e fb
    cmp a,#0x00             ;d556  4d 00
    bz lab_d50f             ;d558  ad b5
    ret                     ;d55a  af

lab_d55b:
    mov mem_fe44,#0x06      ;d55b  11 44 06
    set1 mem_fe47.3         ;d55e  3a 47
    br !sub_dba7            ;d560  9b a7 db

lab_d563:
    set1 mem_fe6d.7         ;d563  7a 6d

    mov a,!mem_fc79         ;d565  8e 79 fc
    cmp a,#0x00             ;d568  4d 00
    bz lab_d56f_no_magazin  ;d56a  ad 03

    br !lab_d725            ;d56c  9b 25 d7

lab_d56f_no_magazin:
    mov mem_fe44,#0x02      ;d56f  11 44 02
    mov a,#0xff             ;d572  a1 ff
    mov !mem_f1ad,a         ;d574  9e ad f1

    mov a,#0x05             ;d577  a1 05
    mov !tmp_msg_idx,a      ;d579  9e a6 f1     5 Writes "NO  MAGAZIN"

    mov a,#28               ;d57c  a1 1c
    mov !msg_countdown,a    ;d57e  9e 2e fb     A = 2.8 seconds

    br lab_d5a9             ;d581  fa 26

lab_d583_no_changer:
    mov mem_fe44,#0x00      ;d583  11 44 00
    mov a,#0xff             ;d586  a1 ff
    mov !mem_f1ad,a         ;d588  9e ad f1

    mov a,#0x06             ;d58b  a1 06
    mov !tmp_msg_idx,a      ;d58d  9e a6 f1     6 Writes "NO  CHANGER"

    mov a,#28               ;d590  a1 1c        A = 2.8 seconds
    mov !msg_countdown,a    ;d592  9e 2e fb

    br lab_d5a9             ;d595  fa 12

lab_d597_no_disc:
    mov mem_fe44,#0x03      ;d597  11 44 03
    mov a,#0xff             ;d59a  a1 ff
    mov !mem_f1ad,a         ;d59c  9e ad f1

    mov a,#0x04             ;d59f  a1 04
    mov !tmp_msg_idx,a      ;d5a1  9e a6 f1     4 Writes "    NO DISC"

    mov a,#28               ;d5a4  a1 1c        A = 2.8 seconds
    mov !msg_countdown,a    ;d5a6  9e 2e fb

lab_d5a9:
    call !sub_a74b          ;d5a9  9a 4b a7
    set1 mem_fe80.0         ;d5ac  0a 80
    mov mem_fed4,#0x03      ;d5ae  11 d4 03
    call !sub_4592          ;d5b1  9a 92 45
    mov a,!mem_f193         ;d5b4  8e 93 f1
    cmp a,#0x00             ;d5b7  4d 00
    bnz lab_d5bd            ;d5b9  bd 02
    mov a,#0x01             ;d5bb  a1 01

lab_d5bd:
    movw hl,#mem_f256       ;d5bd  16 56 f2
    call !eeram_wr_byte_hl  ;d5c0  9a 92 40     Write A to EEPROM area in RAM at [HL], add to checksum
    mov a,#0x19             ;d5c3  a1 19
    mov !mem_fb3d,a         ;d5c5  9e 3d fb
    call !sub_d950          ;d5c8  9a 50 d9
    set1 mem_fe46.6         ;d5cb  6a 46
    ret                     ;d5cd  af

lab_d5ce:
    call !sub_db8a          ;d5ce  9a 8a db
    call !sub_dba7          ;d5d1  9a a7 db
    bf mem_fe46.2,lab_d5da  ;d5d4  31 23 46 02
    br lab_d5f4             ;d5d8  fa 1a

lab_d5da:
    mov a,!mem_fc79         ;d5da  8e 79 fc
    cmp a,#0x00             ;d5dd  4d 00
    bz lab_d5e4             ;d5df  ad 03

    br !lab_d725            ;d5e1  9b 25 d7

lab_d5e4:
    bt mem_fe46.2,lab_d5ed  ;d5e4  ac 46 06
    bf mem_fe47.6,lab_d5ed  ;d5e7  31 63 47 02
    br lab_d597_no_disc     ;d5eb  fa aa

lab_d5ed:
    bf mem_fe46.1,lab_d5f4  ;d5ed  31 13 46 03
    br !lab_d7d3            ;d5f1  9b d3 d7

lab_d5f4:
    cmp mem_fe49,#0x50      ;d5f4  c8 49 50
    bnz lab_d5fb            ;d5f7  bd 02
    clr1 mem_fe6d.5         ;d5f9  5b 6d

lab_d5fb:
    bt mem_fe68.3,lab_d612  ;d5fb  bc 68 14
    bt mem_fe47.2,lab_d60b  ;d5fe  ac 47 0a
    mov a,#0x00             ;d601  a1 00
    cmp a,!mem_fc6c         ;d603  48 6c fc
    bz lab_d612             ;d606  ad 0a
    br !lab_dabd            ;d608  9b bd da

lab_d60b:
    clr1 mem_fe47.2         ;d60b  2b 47

    mov a,#cdc_unknown_28   ;d60d  a1 28        TODO what CDC command is this?
    call !sub_d1bf_cdc_tx   ;d60f  9a bf d1     CDC TX related

lab_d612:
    cmp mem_fe49,#0x90      ;d612  c8 49 90
    bz lab_d627             ;d615  ad 10
    cmp mem_fe44,#0x07      ;d617  c8 44 07
    bnz lab_d61f            ;d61a  bd 03
    br !lab_db00            ;d61c  9b 00 db

lab_d61f:
    cmp mem_fe44,#0x08      ;d61f  c8 44 08
    bnz lab_d627            ;d622  bd 03
    br !lab_db45            ;d624  9b 45 db

lab_d627:
    mov mem_fe44,#0x06      ;d627  11 44 06
    cmp mem_fe49,#0x20      ;d62a  c8 49 20
    bnz lab_d63e            ;d62d  bd 0f
    mov a,!mem_fb3e         ;d62f  8e 3e fb
    cmp a,#0x00             ;d632  4d 00
    bnz lab_d63e            ;d634  bd 08
    mov a,#0x0f             ;d636  a1 0f
    mov !mem_fb3e,a         ;d638  9e 3e fb
    br !lab_d36c_cdc_0x0c   ;d63b  9b 6c d3

lab_d63e:
    bt mem_fe68.3,lab_d64a   ;d63e  bc 68 09
    bf mem_fe6e.3,lab_d64a   ;d641  31 33 6e 05
    clr1 mem_fe6e.3          ;d645  3b 6e
    br !lab_d371_cdcenable_1 ;d647  9b 71 d3

lab_d64a:
    bt mem_fe46.2,lab_d669  ;d64a  ac 46 1c
    bf mem_fe47.6,lab_d654  ;d64d  31 63 47 03
    br !lab_d597_no_disc    ;d651  9b 97 d5

lab_d654:
    mov a,!mem_fc79         ;d654  8e 79 fc
    cmp a,#0x00             ;d657  4d 00
    bz lab_d65e             ;d659  ad 03

    br !lab_d725            ;d65b  9b 25 d7

lab_d65e:
    bt mem_fe47.6,lab_d669  ;d65e  ec 47 08
    call !sub_d9d1          ;d661  9a d1 d9
    bnc lab_d669            ;d664  9d 03
    br !lab_d773            ;d666  9b 73 d7

lab_d669:
    bf mem_fe46.1,lab_d670  ;d669  31 13 46 03
    br !lab_d7d3            ;d66d  9b d3 d7

lab_d670:
    call !sub_d676          ;d670  9a 76 d6
    br !lab_d7a2            ;d673  9b a2 d7

sub_d676:
    call !sub_d80f          ;d676  9a 0f d8
    bt mem_fe47.1,lab_d6ba  ;d679  9c 47 3e
    bt mem_fe46.2,lab_d6b9  ;d67c  ac 46 3a
    bt mem_fe6e.0,lab_d6c6  ;d67f  8c 6e 44
    mov a,#0x80             ;d682  a1 80
    xor a,#0xff             ;d684  7d ff
    and a,!mem_f1ad         ;d686  58 ad f1
    cmp a,#0x48             ;d689  4d 48
    bz lab_d6c0             ;d68b  ad 33
    cmp a,#0x49             ;d68d  4d 49
    bz lab_d6c0             ;d68f  ad 2f
    mov a,!mem_fe57         ;d691  8e 57 fe
    cmp a,#0x00             ;d694  4d 00
    bnz lab_d6b4            ;d696  bd 1c
    mov a,!mem_f1ad         ;d698  8e ad f1
    and a,#0x7f             ;d69b  5d 7f
    cmp a,#0x00             ;d69d  4d 00
    bz lab_d6ad             ;d69f  ad 0c
    and a,#0x0f             ;d6a1  5d 0f
    cmp a,#0x00             ;d6a3  4d 00
    bz lab_d6b9             ;d6a5  ad 12
    cmp a,#0x0c             ;d6a7  4d 0c
    bz lab_d6b9             ;d6a9  ad 0e
    br lab_d6b4             ;d6ab  fa 07

lab_d6ad:
    mov a,#0xc0             ;d6ad  a1 c0
    mov !mem_f1ad,a         ;d6af  9e ad f1
    br lab_d6b9             ;d6b2  fa 05

lab_d6b4:
    mov a,#0x80             ;d6b4  a1 80
    mov !mem_f1ad,a         ;d6b6  9e ad f1

lab_d6b9:
    ret                     ;d6b9  af

lab_d6ba:
    mov a,#0x00             ;d6ba  a1 00
    mov !mem_f1ad,a         ;d6bc  9e ad f1
    ret                     ;d6bf  af

lab_d6c0:
    cmp mem_fe49,#0x90      ;d6c0  c8 49 90
    bz lab_d6ba             ;d6c3  ad f5
    ret                     ;d6c5  af

lab_d6c6:
    bt mem_fe81.2,lab_d6b9  ;d6c6  ac 81 f0
    bt mem_fe81.3,lab_d6b9  ;d6c9  bc 81 ed
    bt mem_fe81.1,lab_d6b9  ;d6cc  9c 81 ea
    bt mem_fe81.0,lab_d6b9  ;d6cf  8c 81 e7
    mov a,!mem_fc9f         ;d6d2  8e 9f fc
    cmp a,#0x00             ;d6d5  4d 00
    bz lab_d6e4             ;d6d7  ad 0b
    cmp a,#0xff             ;d6d9  4d ff
    bnz lab_d6df            ;d6db  bd 02
    br lab_d71f             ;d6dd  fa 40

lab_d6df:
    call !sub_7697_snd_cd   ;d6df  9a 97 76     Unknown; snd_msg_idx and CD related
    br lab_d71f             ;d6e2  fa 3b

lab_d6e4:
    cmp mem_fe49,#0x50      ;d6e4  c8 49 50
    bz lab_d6f9             ;d6e7  ad 10

    mov a,!mem_fc7c_last_trk;d6e9  8e 7c fc
    cmp a,!mem_fc76_cd_trk  ;d6ec  48 76 fc
    bz lab_d724_ret         ;d6ef  ad 33

    mov a,!mem_fc76_cd_trk  ;d6f1  8e 76 fc
    mov !mem_fc7c_last_trk,a;d6f4  9e 7c fc
    br lab_d70e_new_track   ;d6f7  fa 15

lab_d6f9:
    mov a,!mem_f1ad         ;d6f9  8e ad f1
    and a,#0x7f             ;d6fc  5d 7f
    cmp a,#0x0a             ;d6fe  4d 0a
    bz lab_d70e_new_track   ;d700  ad 0c
    and a,#0x0f             ;d702  5d 0f
    cmp a,#0x0a             ;d704  4d 0a
    bz lab_d724_ret         ;d706  ad 1c
    cmp a,#0x0c             ;d708  4d 0c
    bz lab_d724_ret         ;d70a  ad 18
    br lab_d71f             ;d70c  fa 11

lab_d70e_new_track:
    mov a,!mem_fb49         ;d70e  8e 49 fb
    cmp a,#0x00             ;d711  4d 00
    bnz lab_d724_ret        ;d713  bd 0f
    call !sub_7697_snd_cd   ;d715  9a 97 76     Unknown; snd_msg_idx and CD related
    mov a,#0xca             ;d718  a1 ca
    mov !mem_f1ad,a         ;d71a  9e ad f1
    br lab_d724_ret         ;d71d  fa 05

lab_d71f:
    mov a,#0x8a             ;d71f  a1 8a
    mov !mem_f1ad,a         ;d721  9e ad f1

lab_d724_ret:
    ret                     ;d724  af

lab_d725:
    mov a,!cdc_rx_buf+cdc_r_cd-1  ;d725  8e 6e fc
    and a,#0x0f                   ;d728  5d 0f
    mov !mem_fc7d_upd_cd3,a        ;d72a  9e 7d fc

    mov a,#0xff             ;d72d  a1 ff
    mov !mem_f1ad,a         ;d72f  9e ad f1

    mov a,#0x09             ;d732  a1 09
    mov !tmp_msg_idx,a      ;d734  9e a6 f1     9 Writes "CD  CD ERR "

    mov a,#29               ;d737  a1 1d        A = 2.9 seconds
    mov !msg_countdown,a    ;d739  9e 2e fb

    call !sub_a74b          ;d73c  9a 4b a7
    call !sub_dadd          ;d73f  9a dd da
    call !sub_d92c          ;d742  9a 2c d9
    bc lab_d764             ;d745  8d 1d

    mov a,!mem_fc79         ;d747  8e 79 fc
    cmp a,#0x03             ;d74a  4d 03
    bnz lab_d755            ;d74c  bd 07

    mov a,#0x1c             ;d74e  a1 1c
    mov !mem_fb3d,a         ;d750  9e 3d fb
    set1 mem_fe46.6         ;d753  6a 46

lab_d755:
    mov a,!mem_fb40         ;d755  8e 40 fb
    cmp a,#0x00             ;d758  4d 00
    bnz lab_d763            ;d75a  bd 07
    set1 mem_fe80.0         ;d75c  0a 80
    mov a,#0x32             ;d75e  a1 32
    mov !mem_fb40,a         ;d760  9e 40 fb

lab_d763:
    ret                     ;d763  af

lab_d764:
    call !sub_d93e          ;d764  9a 3e d9
    bnc lab_d763            ;d767  9d fa
    mov a,#0x1c             ;d769  a1 1c
    mov !mem_fb3d,a         ;d76b  9e 3d fb
    set1 mem_fe46.6         ;d76e  6a 46
    br !lab_d367_cdcradio   ;d770  9b 67 d3

lab_d773:
    bt mem_fe46.1,lab_d7d3  ;d773  9c 46 5d
    cmp mem_fe44,#0x05      ;d776  c8 44 05
    bz lab_d7a1             ;d779  ad 26

    mov a,!mem_fc75_cd_num1 ;d77b  8e 75 fc
    mov !mem_f1b2,a         ;d77e  9e b2 f1

    mov a,#0xff             ;d781  a1 ff
    mov !mem_f1ad,a         ;d783  9e ad f1

    mov a,#0x07             ;d786  a1 07
    mov !tmp_msg_idx,a      ;d788  9e a6 f1     7 Writes "CD  CD ROM "

    mov a,#29               ;d78b  a1 1d        A = 2.9 seconds
    mov !msg_countdown,a    ;d78d  9e 2e fb

    call !sub_a74b          ;d790  9a 4b a7
    set1 mem_fe47.5         ;d793  5a 47
    call !sub_d92c          ;d795  9a 2c d9
    set1 mem_fe80.0         ;d798  0a 80
    mov a,#0x1c             ;d79a  a1 1c
    mov !mem_fb40,a         ;d79c  9e 40 fb
    set1 mem_fe46.1         ;d79f  1a 46

lab_d7a1:
    ret                     ;d7a1  af

lab_d7a2:
    bf mem_fe46.4,lab_d7cf  ;d7a2  31 43 46 29
    mov a,!mem_fc6c         ;d7a6  8e 6c fc
    cmp a,#0x00             ;d7a9  4d 00
    bnz lab_d7d2            ;d7ab  bd 25
    cmp mem_fe44,#0x05      ;d7ad  c8 44 05
    bz lab_d7d2             ;d7b0  ad 20
    cmp mem_fe49,#0x30      ;d7b2  c8 49 30
    bz lab_d7bc             ;d7b5  ad 05
    cmp mem_fe49,#0x40      ;d7b7  c8 49 40
    bnz lab_d7d2            ;d7ba  bd 16

lab_d7bc:
    bf mem_fe2d.2,lab_d7d2  ;d7bc  31 23 2d 12
    bf mem_fe6d.5,lab_d7cb  ;d7c0  31 53 6d 07
    mov a,!mem_fb3e         ;d7c4  8e 3e fb
    cmp a,#0x00             ;d7c7  4d 00
    bnz lab_d7d2            ;d7c9  bd 07

lab_d7cb:
    call !sub_a780          ;d7cb  9a 80 a7
    ret                     ;d7ce  af

lab_d7cf:
    call !sub_a74b          ;d7cf  9a 4b a7

lab_d7d2:
    ret                     ;d7d2  af

lab_d7d3:
    set1 mem_fe47.5         ;d7d3  5a 47

    mov a,!mem_fc75_cd_num1 ;d7d5  8e 75 fc
    mov !mem_f1b2,a         ;d7d8  9e b2 f1

    mov a,#0xff             ;d7db  a1 ff
    mov !mem_f1ad,a         ;d7dd  9e ad f1

    mov a,#0x07             ;d7e0  a1 07
    mov !tmp_msg_idx,a      ;d7e2  9e a6 f1     7 Writes "CD  CD ROM "

    mov a,#29               ;d7e5  a1 1d        A = 2.9 seconds
    mov !msg_countdown,a    ;d7e7  9e 2e fb

    call !sub_dadd          ;d7ea  9a dd da
    mov a,!mem_fb40         ;d7ed  8e 40 fb
    cmp a,#0x00             ;d7f0  4d 00
    bz lab_d7f5             ;d7f2  ad 01
    ret                     ;d7f4  af

lab_d7f5:
    clr1 mem_fe46.1         ;d7f5  1b 46
    call !sub_d93e          ;d7f7  9a 3e d9
    bc lab_d80a             ;d7fa  8d 0e
    call !sub_d966          ;d7fc  9a 66 d9
    bc lab_d80a             ;d7ff  8d 09
    mov c,a                 ;d801  72
    mov x,#0x30             ;d802  a0 30
    dec a                   ;d804  51
    add x,a                 ;d805  61 00
    br !lab_d21b            ;d807  9b 1b d2

lab_d80a:
    set1 mem_fe7f.7         ;d80a  7a 7f
    br !lab_d367_cdcradio   ;d80c  9b 67 d3

sub_d80f:
    mov a,!snd_msg_idx         ;d80f  8e a5 f1
    cmp a,#0xff             ;d812  4d ff
    bnz lab_d818            ;d814  bd 02

    clr1 mem_fe47.1         ;d816  1b 47

lab_d818:
    ret                     ;d818  af

;Parse complete packet from CDC(?)
sub_d819:
    mov a,!cdc_rx_buf+cdc_r_last-1 ;d819  8e 74 fc
    and a,#0x07              ;d81c  5d 07
    cmp a,#0x03              ;d81e  4d 03
    bnz lab_d83b             ;d820  bd 19

    mov a,!cdc_rx_buf+cdc_r_last-1 ;d822  8e 74 fc
    cmp mem_fe30,#0x03      ;d825  c8 30 03
    bz lab_d82e             ;d828  ad 04

    clr1 mem_fe46.4         ;d82a  4b 46
    br lab_d833             ;d82c  fa 05

lab_d82e:
    mov1 cy,a.7             ;d82e  61 fc
    mov1 mem_fe46.4,cy      ;d830  71 41 46

lab_d833:
    mov a,!cdc_rx_buf+cdc_r_cd-1   ;d833  8e 6e fc
    bt a.7,lab_d83e         ;d836  31 7e 05
    br lab_d867             ;d839  fa 2c

lab_d83b:
    br !sub_d8fd            ;d83b  9b fd d8

lab_d83e:
    mov x,a                 ;d83e  70
    and a,#0x0f             ;d83f  5d 0f
    cmp a,#0x0d             ;d841  4d 0d
    bnc lab_d864            ;d843  9d 1f

    movw hl,#mem_fc48       ;d845  16 48 fc
    mov b,a                 ;d848  73
    mov a,[hl+b]            ;d849  ab
    and a,#0x0f             ;d84a  5d 0f
    xch a,x                 ;d84c  30
    and a,#0xf0             ;d84d  5d f0
    or a,x                  ;d84f  61 68
    mov [hl+b],a            ;d851  bb
    mov a,b                 ;d852  63
    rol a,1                 ;d853  26
    rol a,1                 ;d854  26
    mov b,a                 ;d855  73
    movw hl,#mem_fc4f       ;d856  16 4f fc
    movw de,#cdc_rx_buf+cdc_r_track-1   ;d859  14 6f fc
    mov c,#0x04             ;d85c  a2 04

lab_d85e_loop:
    mov a,[de]              ;d85e  85
    mov [hl+b],a            ;d85f  bb
    inc b                   ;d860  43
    incw de                 ;d861  84
    dbnz c,lab_d85e_loop    ;d862  8a fa

lab_d864:
    br !sub_d8fd            ;d864  9b fd d8

lab_d867:
    mov a,mem_fe49          ;d867  f0 49
    mov !mem_fc6b,a         ;d869  9e 6b fc

    mov a,!cdc_rx_buf+cdc_r_2ndlast-1 ;d86c  8e 73 fc
    and a,#0xf0             ;d86f  5d f0
    mov mem_fe49,a          ;d871  f2 49

    cmp mem_fe49,#0x10      ;d873  c8 49 10
    bz lab_d881             ;d876  ad 09

    cmp mem_fe49,#0x30      ;d878  c8 49 30
    bnz lab_d885            ;d87b  bd 08

    set1 mem_fe47.4         ;d87d  4a 47
    clr1 mem_fe47.3         ;d87f  3b 47

lab_d881:
    clr1 mem_fe6d.7         ;d881  7b 6d
    clr1 mem_fe6d.6         ;d883  6b 6d

lab_d885:
    cmp a,#0xa0             ;d885  4d a0
    bnz lab_d895            ;d887  bd 0c
    call !sub_d99c          ;d889  9a 9c d9
    set1 mem_fe6d.7         ;d88c  7a 6d
    clr1 mem_fe47.4         ;d88e  4b 47
    mov mem_fe44,#0x02      ;d890  11 44 02
    br lab_d8b3             ;d893  fa 1e

lab_d895:
    cmp a,#0xb0             ;d895  4d b0
    bnz lab_d8a0            ;d897  bd 07
    set1 mem_fe6d.7         ;d899  7a 6d
    clr1 mem_fe47.4         ;d89b  4b 47
    mov mem_fe44,#0x02      ;d89d  11 44 02

lab_d8a0:
    cmp a,#0x90             ;d8a0  4d 90
    bnz lab_d8ad            ;d8a2  bd 09
    call !sub_dadd          ;d8a4  9a dd da
    clr1 mem_fe6d.6         ;d8a7  6b 6d
    set1 mem_fe47.3         ;d8a9  3a 47
    clr1 mem_fe47.4         ;d8ab  4b 47

lab_d8ad:
    cmp a,#0x70             ;d8ad  4d 70
    bnz lab_d8b3            ;d8af  bd 02
    clr1 mem_fe47.4         ;d8b1  4b 47

lab_d8b3:
    mov a,!cdc_rx_buf+cdc_r_mode-1 ;d8b3  8e 72 fc
    mov1 cy,a.2             ;d8b6  61 ac
    mov1 mem_fe6e.2,cy      ;d8b8  71 21 6e

    mov1 cy,a.5             ;d8bb  61 dc
    or1 cy,mem_fe6e.2       ;d8bd  71 26 6e
    mov1 mem_fe6e.1,cy      ;d8c0  71 11 6e     Copy carry into MIX flag

    mov1 cy,a.4             ;d8c3  61 cc
    mov1 mem_fe6e.0,cy      ;d8c5  71 01 6e

    mov a,!cdc_rx_buf+cdc_r_2ndlast-1 ;d8c8  8e 73 fc
    mov1 cy,a.3             ;d8cb  61 bc
    bnc lab_d8e9_nc         ;d8cd  9d 1a

    mov a,!mem_fc7e         ;d8cf  8e 7e fc
    inc a                   ;d8d2  41
    mov !mem_fc7e,a         ;d8d3  9e 7e fc

    cmp a,#0x05             ;d8d6  4d 05
    bc lab_d8f0             ;d8d8  8d 16

    set1 mem_fe47.6         ;d8da  6a 47
    movw hl,#mem_fc48       ;d8dc  16 48 fc
    mov a,!mem_fc75_cd_num1 ;d8df  8e 75 fc
    mov b,a                 ;d8e2  73
    mov a,[hl+b]            ;d8e3  ab
    clr1 a.6                ;d8e4  61 eb
    mov [hl+b],a            ;d8e6  bb
    br lab_d8f0             ;d8e7  fa 07

lab_d8e9_nc:
    clr1 mem_fe47.6         ;d8e9  6b 47
    mov a,#0x00             ;d8eb  a1 00
    mov !mem_fc7e,a         ;d8ed  9e 7e fc

lab_d8f0:
    mov a,!cdc_rx_buf+cdc_r_2ndlast-1 ;d8f0  8e 73 fc
    and a,#0x06             ;d8f3  5d 06
    ror a,1                 ;d8f5  24
    and a,#0x03             ;d8f6  5d 03
    mov !mem_fc79,a         ;d8f8  9e 79 fc

    set1 mem_fe46.3         ;d8fb  3a 46

sub_d8fd:
    movw de,#mem_fc6d       ;d8fd  14 6d fc
    movw hl,#mem_fe44       ;d900  16 44 fe
    mov b,#0x06             ;d903  a3 06
    callf !sub_0bef         ;d905  3c ef

    movw hl,#mem_fc48       ;d907  16 48 fc
    mov b,#0x25             ;d90a  a3 25
    callf !sub_0bf6         ;d90c  3c f6
    ret                     ;d90e  af

sub_d90f:
    movw hl,#mem_fc48       ;d90f  16 48 fc
    mov b,#0x06             ;d912  a3 06

lab_d914:
    mov a,[hl+b]            ;d914  ab
    bf a.7,lab_d928         ;d915  31 7f 10
    bt a.6,lab_d924         ;d918  31 6e 09
    dbnz b,lab_d914         ;d91b  8b f7
    set1 mem_fe46.5         ;d91d  5a 46
    mov mem_fe44,#0x03      ;d91f  11 44 03
    clr1 cy                 ;d922  21
    ret                     ;d923  af

lab_d924:
    clr1 mem_fe46.5         ;d924  5b 46
    clr1 cy                 ;d926  21
    ret                     ;d927  af

lab_d928:
    clr1 mem_fe47.5         ;d928  5b 47
    set1 cy                 ;d92a  20
    ret                     ;d92b  af

sub_d92c:
    movw hl,#mem_fc48       ;d92c  16 48 fc
    mov a,!mem_fc75_cd_num1 ;d92f  8e 75 fc
    mov b,a                 ;d932  73
    mov a,[hl+b]            ;d933  ab
    bt a.0,lab_d939         ;d934  31 0e 02
    set1 cy                 ;d937  20
    ret                     ;d938  af

lab_d939:
    clr1 a.0                ;d939  61 8b
    mov [hl+b],a            ;d93b  bb
    clr1 cy                 ;d93c  21
    ret                     ;d93d  af

sub_d93e:
    movw hl,#mem_fc48       ;d93e  16 48 fc
    mov b,#0x06             ;d941  a3 06

lab_d943:
    mov a,[hl+b]            ;d943  ab
    bf a.6,lab_d94a         ;d944  31 6f 03
    bt a.0,lab_d94e         ;d947  31 0e 04

lab_d94a:
    dbnz b,lab_d943         ;d94a  8b f7
    set1 cy                 ;d94c  20
    ret                     ;d94d  af

lab_d94e:
    clr1 cy                 ;d94e  21
    ret                     ;d94f  af

sub_d950:
    push ax                 ;d950  b1
    push bc                 ;d951  b3
    push hl                 ;d952  b7
    movw hl,#mem_fc48       ;d953  16 48 fc
    mov b,#0x06             ;d956  a3 06

lab_d958:
    mov a,[hl+b]            ;d958  ab
    or a,#0x01              ;d959  6d 01
    mov [hl+b],a            ;d95b  bb
    dbnz b,lab_d958         ;d95c  8b fa
    mov a,[hl+b]            ;d95e  ab
    or a,#0x01              ;d95f  6d 01
    mov [hl+b],a            ;d961  bb
    pop hl                  ;d962  b6
    pop bc                  ;d963  b2
    pop ax                  ;d964  b0
    ret                     ;d965  af

sub_d966:
    mov a,!mem_fc75_cd_num1 ;d966  8e 75 fc
    mov x,a                 ;d969  70
    mov b,a                 ;d96a  73
    movw hl,#mem_fc48       ;d96b  16 48 fc
    mov c,#0x06             ;d96e  a2 06
    inc c                   ;d970  42

lab_d971:
    inc b                   ;d971  43
    mov a,b                 ;d972  63
    cmp a,c                 ;d973  61 4a
    bc lab_d97a             ;d975  8d 03
    mov a,#0x01             ;d977  a1 01
    mov b,a                 ;d979  73

lab_d97a:
    cmp a,x                 ;d97a  61 48
    bz lab_d988             ;d97c  ad 0a
    mov a,[hl+b]            ;d97e  ab
    bf a.6,lab_d971         ;d97f  31 6f ef
    bf a.0,lab_d971         ;d982  31 0f ec
    mov a,b                 ;d985  63
    clr1 cy                 ;d986  21
    ret                     ;d987  af

lab_d988:
    set1 cy                 ;d988  20
    ret                     ;d989  af

sub_d98a:
    mov a,!mem_fc75_cd_num1 ;d98a  8e 75 fc
    rol a,1                 ;d98d  26
    rol a,1                 ;d98e  26
    mov b,a                 ;d98f  73
    movw hl,#mem_fc4f       ;d990  16 4f fc
    mov a,[hl+b]            ;d993  ab
    cmp a,#0xff             ;d994  4d ff
    bz lab_d99a             ;d996  ad 02
    clr1 cy                 ;d998  21
    ret                     ;d999  af

lab_d99a:
    set1 cy                 ;d99a  20
    ret                     ;d99b  af

sub_d99c:
    mov b,#0x06             ;d99c  a3 06
    movw hl,#mem_fc67       ;d99e  16 67 fc
    movw de,#mem_fc4e       ;d9a1  14 4e fc

lab_d9a4:
    mov a,#0xff             ;d9a4  a1 ff
    mov [hl],a              ;d9a6  97
    mov a,#0xd1             ;d9a7  a1 d1
    mov [de],a              ;d9a9  95
    decw de                 ;d9aa  94
    movw ax,hl              ;d9ab  c6
    subw ax,#0x0004         ;d9ac  da 04 00
    movw hl,ax              ;d9af  d6
    dbnz b,lab_d9a4         ;d9b0  8b f2
    ret                     ;d9b2  af

sub_d9b3:
    mov b,#0x06             ;d9b3  a3 06
    movw hl,#mem_fc67       ;d9b5  16 67 fc
    movw de,#mem_fc4e       ;d9b8  14 4e fc

lab_d9bb:
    mov a,[hl]              ;d9bb  87
    mov x,a                 ;d9bc  70
    mov a,[de]              ;d9bd  85
    and a,#0xf0             ;d9be  5d f0
    cmpw ax,#0xd0ff         ;d9c0  ea ff d0
    bz lab_d9cf             ;d9c3  ad 0a
    decw de                 ;d9c5  94
    movw ax,hl              ;d9c6  c6
    subw ax,#0x0004         ;d9c7  da 04 00
    movw hl,ax              ;d9ca  d6
    dbnz b,lab_d9bb         ;d9cb  8b ee
    set1 cy                 ;d9cd  20
    ret                     ;d9ce  af

lab_d9cf:
    clr1 cy                 ;d9cf  21
    ret                     ;d9d0  af


;Unknown; Returns some status in carry
sub_d9d1:
    mov a,!mem_fc75_cd_num1 ;d9d1  8e 75 fc
    mov b,a                 ;d9d4  73
    movw hl,#mem_fc48       ;d9d5  16 48 fc
    mov a,[hl+b]            ;d9d8  ab
    bf a.6,lab_d9e1         ;d9d9  31 6f 05
    bf a.5,lab_d9e1         ;d9dc  31 5f 02
    set1 cy                 ;d9df  20
    ret                     ;d9e0  af
lab_d9e1:
    clr1 cy                 ;d9e1  21
    ret                     ;d9e2  af


sub_d9e3:
    mov a,#0x00             ;d9e3  a1 00
    mov !mem_fb3d,a         ;d9e5  9e 3d fb
    mov !mem_fb40,a         ;d9e8  9e 40 fb
    ret                     ;d9eb  af


sub_d9ec:
    bf mem_fe5f.2,lab_da0a  ;d9ec  31 23 5f 1a  Branch if no CDC packet available

    ;CDC packet is available
    clr1 mem_fe5f.2         ;d9f0  2b 5f        Clear bit = no CDC packet available

    mov a,!mem_fca2_ani_t30 ;d9f2  8e a2 fc     P91/ANI10 analog: Terminal 30 Constant B+ (V = value * 0.1)
    cmp a,#98               ;d9f5  4d 62
    bc lab_da03             ;d9f7  8d 0a        Branch if Terminal 30 < 9.8V

    mov a,!mem_fb3b         ;d9f9  8e 3b fb
    cmp a,#0x00             ;d9fc  4d 00
    bnz lab_da03            ;d9fe  bd 03

    call !sub_d819          ;da00  9a 19 d8     Parse complete packet from CDC(?)

lab_da03:
    mov a,#0x0f             ;da03  a1 0f
    mov !mem_fb3c,a         ;da05  9e 3c fb
    br lab_da4c_ret         ;da08  fa 42

lab_da0a:
    mov a,!mem_fca2_ani_t30 ;da0a  8e a2 fc     P91/ANI10 analog: Terminal 30 Constant B+ (V = value * 0.1)
    cmp a,#98               ;da0d  4d 62
    bnc lab_da18            ;da0f  9d 07        Branch if Terminal 30 >= 9.8V

    mov a,#0x0a             ;da11  a1 0a
    mov !mem_fb3b,a         ;da13  9e 3b fb
    br lab_da4c_ret         ;da16  fa 34

lab_da18:
    mov a,!mem_fb3b         ;da18  8e 3b fb
    cmp a,#0x00             ;da1b  4d 00
    bnz lab_da4c_ret        ;da1d  bd 2d
    mov a,!mem_fb3c         ;da1f  8e 3c fb
    cmp a,#0x00             ;da22  4d 00
    bnz lab_da4c_ret        ;da24  bd 26
    mov a,mem_fe49          ;da26  f0 49
    mov !mem_fc6b,a         ;da28  9e 6b fc
    cmp mem_fe49,#0xff      ;da2b  c8 49 ff
    bz lab_da40             ;da2e  ad 10
    mov mem_fe49,#0xff      ;da30  11 49 ff
    mov mem_fe44,#0x00      ;da33  11 44 00
    call !sub_d9e3          ;da36  9a e3 d9
    cmp mem_fe30,#0x03      ;da39  c8 30 03
    bz lab_da40             ;da3c  ad 02
    set1 mem_fe7f.7         ;da3e  7a 7f

lab_da40:
    set1 mem_fe6d.7         ;da40  7a 6d
    set1 mem_fe46.3         ;da42  3a 46
    clr1 mem_fe46.5         ;da44  5b 46
    call !sub_d950          ;da46  9a 50 d9
    call !sub_d8fd          ;da49  9a fd d8

lab_da4c_ret:
    ret                     ;da4c  af

sub_da4d:
    bt mem_fe65.5,lab_da7a  ;da4d  dc 65 2a
    bt mem_fe2c.3,lab_da7a  ;da50  bc 2c 27
    cmp mem_fe49,#0x00      ;da53  c8 49 00
    bz lab_da75             ;da56  ad 1d
    cmp mem_fe49,#0x10      ;da58  c8 49 10
    bz lab_da75             ;da5b  ad 18
    cmp mem_fe49,#0x90      ;da5d  c8 49 90
    bz lab_da75             ;da60  ad 13
    mov a,#0x0f             ;da62  a1 0f
    mov !mem_fb3c,a         ;da64  9e 3c fb
    call !sub_a74b          ;da67  9a 4b a7
    bc lab_da75             ;da6a  8d 09
    set1 mem_fe6d.7         ;da6c  7a 6d
    clr1 shadow_p3.6        ;da6e  6b cd
    mov a,shadow_p3         ;da70  f0 cd
    mov p3,a                ;da72  f2 03
    ret                     ;da74  af

lab_da75:
    mov a,#0x02             ;da75  a1 02
    br !sub_3dbd            ;da77  9b bd 3d

lab_da7a:
    set1 shadow_p3.6        ;da7a  6a cd
    mov a,shadow_p3         ;da7c  f0 cd
    mov p3,a                ;da7e  f2 03
    ret                     ;da80  af

sub_da81:
    cmp mem_fe44,#0x05      ;da81  c8 44 05
    bz lab_dab8             ;da84  ad 32

    mov a,!mem_fc79         ;da86  8e 79 fc
    cmp a,#0x00             ;da89  4d 00
    bnz lab_dab8            ;da8b  bd 2b

    call !sub_d98a          ;da8d  9a 8a d9
    bc lab_dab8             ;da90  8d 26
    cmp mem_fe44,#0x06      ;da92  c8 44 06
    bnz lab_dab8            ;da95  bd 21
    cmp mem_fe49,#0x90      ;da97  c8 49 90
    bz lab_dab8             ;da9a  ad 1c
    call !sub_d9d1          ;da9c  9a d1 d9
    bnc lab_dabc            ;da9f  9d 1b
    set1 mem_fe47.5         ;daa1  5a 47

    mov a,!mem_fc75_cd_num1 ;daa3  8e 75 fc
    mov !mem_f1b2,a         ;daa6  9e b2 f1

    mov a,#0xff             ;daa9  a1 ff
    mov !mem_f1ad,a         ;daab  9e ad f1

    mov a,#0x07             ;daae  a1 07
    mov !tmp_msg_idx,a      ;dab0  9e a6 f1       7 Writes "CD  CD ROM "

    mov a,#29               ;dab3  a1 1d          A = 2.9 seconds
    mov !msg_countdown,a    ;dab5  9e 2e fb

lab_dab8:
    call !sub_dadd          ;dab8  9a dd da
    pop ax                  ;dabb  b0

lab_dabc:
    ret                     ;dabc  af

lab_dabd:
    call !sub_a74b          ;dabd  9a 4b a7
    set1 mem_fe47.2         ;dac0  2a 47
    set1 mem_fe6d.5         ;dac2  5a 6d

    mov a,#0x07             ;dac4  a1 07
    mov !mem_fb3e,a         ;dac6  9e 3e fb

    mov a,!mem_fc6c         ;dac9  8e 6c fc
    dec a                   ;dacc  51
    mov !mem_fc6c,a         ;dacd  9e 6c fc

    bt mem_fe46.7,lab_dad8  ;dad0  fc 46 05

    mov a,#cdc_prev_track   ;dad3  a1 1e        A = "Previous Track"
    br !sub_d1bf_cdc_tx     ;dad5  9b bf d1     CDC TX related

lab_dad8:
    mov a,#cdc_next_track   ;dad8  a1 1f        A = "Next Track"
    br !sub_d1bf_cdc_tx     ;dada  9b bf d1     CDC TX related

sub_dadd:
    mov a,#0x00             ;dadd  a1 00
    mov !mem_fc6c,a         ;dadf  9e 6c fc
    ret                     ;dae2  af

sub_dae3:
    mov a,!mem_fc79         ;dae3  8e 79 fc
    cmp a,#0x00             ;dae6  4d 00
    bnz lab_daff_ret        ;dae8  bd 15

    cmp mem_fe44,#0x05      ;daea  c8 44 05
    bz lab_dafe_pop_ret     ;daed  ad 0f

    cmp mem_fe49,#0x30      ;daef  c8 49 30
    bz lab_daf9             ;daf2  ad 05

    cmp mem_fe49,#0x50      ;daf4  c8 49 50
    bnz lab_dafe_pop_ret    ;daf7  bd 05

lab_daf9:
    call !sub_d9d1          ;daf9  9a d1 d9
    bnc lab_daff_ret        ;dafc  9d 01

lab_dafe_pop_ret:
    pop ax                  ;dafe  b0

lab_daff_ret:
    ret                     ;daff  af

lab_db00:
    cmp mem_fe49,#0x40      ;db00  c8 49 40
    bnz lab_db0f            ;db03  bd 0a
    mov a,#0x86             ;db05  a1 86
    mov !mem_f1ad,a         ;db07  9e ad f1
    clr1 mem_fe46.0         ;db0a  0b 46
    br !lab_d7a2            ;db0c  9b a2 d7

lab_db0f:
    bt mem_fe68.3,lab_db2e  ;db0f  bc 68 1c
    bt mem_fe46.0,lab_db2f  ;db12  8c 46 1a
    cmp mem_fe49,#0x30      ;db15  c8 49 30
    bnz lab_db2e            ;db18  bd 14
    mov a,!mem_fc6b         ;db1a  8e 6b fc
    cmp a,#0x50             ;db1d  4d 50
    bnz lab_db2f            ;db1f  bd 0e
    mov mem_fe44,#0x06      ;db21  11 44 06
    mov a,#0xc8             ;db24  a1 c8
    mov !mem_f1ad,a         ;db26  9e ad f1
    clr1 mem_fe6e.3         ;db29  3b 6e
    br !lab_d371_cdcenable_1;db2b  9b 71 d3

lab_db2e:
    ret                     ;db2e  af

lab_db2f:
    bt mem_fe6e.3,lab_db2e  ;db2f  bc 6e fc
    mov a,!mem_fb3e         ;db32  8e 3e fb
    cmp a,#0x00             ;db35  4d 00
    bnz lab_db2e            ;db37  bd f5
    mov a,#0x0f             ;db39  a1 0f
    mov !mem_fb3e,a         ;db3b  9e 3e fb
    set1 mem_fe46.7         ;db3e  7a 46

    mov a,#cdc_forward      ;db40  a1 1b        A = "Forward"
    br !sub_d1bf_cdc_tx     ;db42  9b bf d1     CDC TX related

lab_db45:
    cmp mem_fe49,#0x40      ;db45  c8 49 40
    bnz lab_db54            ;db48  bd 0a
    mov a,#0x87             ;db4a  a1 87
    mov !mem_f1ad,a         ;db4c  9e ad f1
    clr1 mem_fe47.7         ;db4f  7b 47
    br !lab_d7a2            ;db51  9b a2 d7

lab_db54:
    bt mem_fe68.3,lab_db2e  ;db54  bc 68 d7
    bt mem_fe47.7,lab_db74  ;db57  fc 47 1a
    cmp mem_fe49,#0x30      ;db5a  c8 49 30
    bnz lab_db73            ;db5d  bd 14
    mov a,!mem_fc6b         ;db5f  8e 6b fc
    cmp a,#0x50             ;db62  4d 50
    bnz lab_db74            ;db64  bd 0e
    mov mem_fe44,#0x06      ;db66  11 44 06
    mov a,#0xc9             ;db69  a1 c9
    mov !mem_f1ad,a         ;db6b  9e ad f1
    clr1 mem_fe6e.3         ;db6e  3b 6e
    br !lab_d371_cdcenable_1;db70  9b 71 d3

lab_db73:
    ret                     ;db73  af

lab_db74:
    bt mem_fe6e.3,lab_db73  ;db74  bc 6e fc
    mov a,!mem_fb3e         ;db77  8e 3e fb
    cmp a,#0x00             ;db7a  4d 00
    bnz lab_db73            ;db7c  bd f5
    mov a,#0x0f             ;db7e  a1 0f
    mov !mem_fb3e,a         ;db80  9e 3e fb
    clr1 mem_fe46.7         ;db83  7b 46

    mov a,#cdc_reverse      ;db85  a1 1a        A = "Reverse"
    br !sub_d1bf_cdc_tx     ;db87  9b bf d1     CDC TX related



sub_db8a:
    mov a,!cdc_rx_buf+cdc_r_cd-1 ;db8a  8e 6e fc
    bt a.7,lab_dba6         ;db8d  31 7e 16
    bf mem_fe46.2,lab_dba6  ;db90  31 23 46 12
    mov a,!cdc_rx_buf+cdc_r_cd-1  ;db94  8e 6e fc
    and a,#0x0f             ;db97  5d 0f
    cmp a,!mem_fc7b_cd_cd2  ;db99  48 7b fc
    bz lab_dba6             ;db9c  ad 08
    cmp mem_fe45,#0x00      ;db9e  c8 45 00     Index for mem_b790 lookup (CDC TX related)
    bnz lab_dba6            ;dba1  bd 03
    mov mem_fe45,#0x04      ;dba3  11 45 04     Index for mem_b790 lookup (CDC TX related)

lab_dba6:
    ret                     ;dba6  af

sub_dba7:
    mov a,!mem_fb3f         ;dba7  8e 3f fb
    cmp a,#0x00             ;dbaa  4d 00
    bnz lab_dbb6            ;dbac  bd 08
    bf mem_fe46.2,lab_dbb6  ;dbae  31 23 46 04
    clr1 mem_fe46.2         ;dbb2  2b 46
    set1 mem_fe47.3         ;dbb4  3a 47



lab_dbb6:
    mov a,!cdc_rx_buf+cdc_r_cd-1 ;dbb6  8e 6e fc
    bt a.7,lab_dc2e_ret     ;dbb9  31 7e 72
    and a,#0x0f             ;dbbc  5d 0f
    bf mem_fe46.2,lab_dbd3  ;dbbe  31 23 46 11
    cmp a,!mem_fc7b_cd_cd2  ;dbc2  48 7b fc
    bnz lab_dc2e_ret        ;dbc5  bd 67
    clr1 mem_fe46.2         ;dbc7  2b 46
    push ax                 ;dbc9  b1

    mov a,#0xff             ;dbca  a1 ff
    mov !tmp_msg_idx,a      ;dbcc  9e a6 f1     f Writes " DIAG  "

    call !sub_7697_snd_cd   ;dbcf  9a 97 76     Unknown; snd_msg_idx and CD related
    pop ax                  ;dbd2  b0

lab_dbd3:
    bf mem_fe47.3,lab_dbee  ;dbd3  31 33 47 17
    mov b,a                 ;dbd7  73

    mov a,!tmp_msg_idx      ;dbd8  8e a6 f1
    cmp a,#0x09             ;dbdb  4d 09        9 Writes "CD  CD ERR "
    bz lab_dc2e_ret         ;dbdd  ad 4f        Branch to just return

    mov a,b                 ;dbdf  63
    cmp a,#0x00             ;dbe0  4d 00
    bz lab_dc2e_ret         ;dbe2  ad 4a        Branch to just return
    cmp a,#0x07             ;dbe4  4d 07
    bnc lab_dc2e_ret        ;dbe6  9d 46        Branch to just return
    mov !mem_fc75_cd_num1,a ;dbe8  9e 75 fc
    mov !mem_fc7b_cd_cd2,a  ;dbeb  9e 7b fc

lab_dbee:
    mov a,!cdc_rx_buf+cdc_r_track-1   ;dbee  8e 6f fc
    call !sub_0ce8                    ;dbf1  9a e8 0c
    bc lab_dc2e_ret                   ;dbf4  8d 38        Branch to just return
    cmp a,#0x00                       ;dbf6  4d 00
    bz lab_dc2e_ret                   ;dbf8  ad 34        Branch to just return

    mov a,!cdc_rx_buf+cdc_r_minutes-1 ;dbfa  8e 70 fc
    and a,#0xf0                       ;dbfd  5d f0
    cmp a,#0xa0                       ;dbff  4d a0
    bz lab_dc0b                       ;dc01  ad 08

    mov a,!cdc_rx_buf+cdc_r_minutes-1 ;dc03  8e 70 fc
    call !sub_0ce8                    ;dc06  9a e8 0c
    bc lab_dc2e_ret                   ;dc09  8d 23        Branch to just return

lab_dc0b:
    mov a,!cdc_rx_buf+cdc_r_seconds-1 ;dc0b  8e 71 fc
    call !sub_0ce8                    ;dc0e  9a e8 0c
    bc lab_dc2e_ret                   ;dc11  8d 1b        Branch to just return

    bt mem_fe47.6,lab_dc2e_ret        ;dc13  ec 47 18     Branch to just return

    mov a,!cdc_rx_buf+cdc_r_cd-1      ;dc16  8e 6e fc
    bt a.7,lab_dc2e_ret               ;dc19  31 7e 12     Branch to just return

    mov a,!cdc_rx_buf+cdc_r_track-1   ;dc1c  8e 6f fc
    mov !mem_fc76_cd_trk,a            ;dc1f  9e 76 fc

    mov a,!cdc_rx_buf+cdc_r_minutes-1 ;dc22  8e 70 fc
    mov !mem_fc77_cd_mins,a           ;dc25  9e 77 fc

    mov a,!cdc_rx_buf+cdc_r_seconds-1 ;dc28  8e 71 fc
    mov !mem_fc78_cd_secs,a           ;dc2b  9e 78 fc

lab_dc2e_ret:
    ret                     ;dc2e  af

sub_dc2f:
    mov a,#0x80             ;dc2f  a1 80
    xor a,#0xff             ;dc31  7d ff
    and a,!mem_f1ad         ;dc33  58 ad f1
    cmp a,#0x48             ;dc36  4d 48
    bz lab_dc45_48_or_49    ;dc38  ad 0b
    cmp a,#0x49             ;dc3a  4d 49
    bz lab_dc45_48_or_49    ;dc3c  ad 07
    mov a,!mem_fe57         ;dc3e  8e 57 fe
    cmp a,#0x00             ;dc41  4d 00
    bnz lab_dc4a_ret        ;dc43  bd 05

lab_dc45_48_or_49:
    mov a,#0x00             ;dc45  a1 00
    mov !mem_f1ad,a         ;dc47  9e ad f1

lab_dc4a_ret:
    ret                     ;dc4a  af

sub_dc4b:
    bf mem_fe6e.1,lab_dc63  ;dc4b  31 13 6e 14
    set1 cy                 ;dc4f  20
    mov a,!mem_f255         ;dc50  8e 55 f2
    and a,#0x01             ;dc53  5d 01
    bnz lab_dc58            ;dc55  bd 01
    clr1 cy                 ;dc57  21

lab_dc58:
    xor1 cy,mem_fe6e.2      ;dc58  71 27 6e
    bnc lab_dc63            ;dc5b  9d 06
    call !sub_d321          ;dc5d  9a 21 d3
    br !sub_d8fd            ;dc60  9b fd d8

lab_dc63:
    ret                     ;dc63  af

filler_dc64:
    .rept 5018
    brk                     ;dc64  bf           Force cold start via badisr_0d75
    .endm

checksum:
    .word 0x4e1b            ;effe  1b 4e       DATA
